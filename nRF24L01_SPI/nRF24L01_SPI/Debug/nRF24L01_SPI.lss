
nRF24L01_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d08  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404d08  00404d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404d10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000144  204009c0  004056d0  000209c0  2**3
                  ALLOC
  4 .stack        00002004  20400b04  00405814  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402b08  00407818  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016eb2  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f3f  00000000  00000000  000378f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b98  00000000  00000000  0003a838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  0003b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002023f  00000000  00000000  0003bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000bf40  00000000  00000000  0005c1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00094d1e  00000000  00000000  00068107  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002728  00000000  00000000  000fce28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000057f0  00000000  00000000  000ff550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 2b 40 20 65 09 40 00 61 09 40 00 61 09 40 00     .+@ e.@.a.@.a.@.
  400010:	61 09 40 00 61 09 40 00 61 09 40 00 00 00 00 00     a.@.a.@.a.@.....
	...
  40002c:	61 09 40 00 61 09 40 00 00 00 00 00 61 09 40 00     a.@.a.@.....a.@.
  40003c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40004c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40005c:	61 09 40 00 61 09 40 00 00 00 00 00 bd 07 40 00     a.@.a.@.......@.
  40006c:	d1 07 40 00 e5 07 40 00 61 09 40 00 61 09 40 00     ..@...@.a.@.a.@.
  40007c:	61 09 40 00 f9 07 40 00 0d 08 40 00 61 09 40 00     a.@...@...@.a.@.
  40008c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40009c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000ac:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000bc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000cc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000dc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000ec:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000fc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40010c:	61 09 40 00 61 09 40 00 00 00 00 00 00 00 00 00     a.@.a.@.........
  40011c:	00 00 00 00 61 09 40 00 61 09 40 00 61 09 40 00     ....a.@.a.@.a.@.
  40012c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40013c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40014c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40015c:	61 09 40 00 61 09 40 00 61 09 40 00                 a.@.a.@.a.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00404d10 	.word	0x00404d10

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404d10 	.word	0x00404d10
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00404d10 	.word	0x00404d10
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20400a94 	.word	0x20400a94
  40020c:	20400a8c 	.word	0x20400a8c

00400210 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400210:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400212:	010b      	lsls	r3, r1, #4
  400214:	4293      	cmp	r3, r2
  400216:	d914      	bls.n	400242 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400218:	00c9      	lsls	r1, r1, #3
  40021a:	084b      	lsrs	r3, r1, #1
  40021c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400220:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400224:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400226:	1e5c      	subs	r4, r3, #1
  400228:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40022c:	428c      	cmp	r4, r1
  40022e:	d901      	bls.n	400234 <usart_set_async_baudrate+0x24>
		return 1;
  400230:	2001      	movs	r0, #1
  400232:	e017      	b.n	400264 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400234:	6841      	ldr	r1, [r0, #4]
  400236:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40023a:	6041      	str	r1, [r0, #4]
  40023c:	e00c      	b.n	400258 <usart_set_async_baudrate+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	e010      	b.n	400264 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400242:	0859      	lsrs	r1, r3, #1
  400244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400248:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d8f2      	bhi.n	40023e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400258:	0412      	lsls	r2, r2, #16
  40025a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40025e:	431a      	orrs	r2, r3
  400260:	6202      	str	r2, [r0, #32]

	return 0;
  400262:	2000      	movs	r0, #0
}
  400264:	f85d 4b04 	ldr.w	r4, [sp], #4
  400268:	4770      	bx	lr
	...

0040026c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <usart_reset+0x24>)
  40026e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400272:	2300      	movs	r3, #0
  400274:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400276:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400278:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40027a:	2388      	movs	r3, #136	; 0x88
  40027c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40027e:	2324      	movs	r3, #36	; 0x24
  400280:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400282:	f44f 7380 	mov.w	r3, #256	; 0x100
  400286:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40028c:	6003      	str	r3, [r0, #0]
  40028e:	4770      	bx	lr
  400290:	55534100 	.word	0x55534100

00400294 <usart_init_rs232>:
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	4605      	mov	r5, r0
  400298:	460c      	mov	r4, r1
  40029a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40029c:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <usart_init_rs232+0x48>)
  40029e:	4798      	blx	r3
	ul_reg_val = 0;
  4002a0:	2200      	movs	r2, #0
  4002a2:	4b0f      	ldr	r3, [pc, #60]	; (4002e0 <usart_init_rs232+0x4c>)
  4002a4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002a6:	b1a4      	cbz	r4, 4002d2 <usart_init_rs232+0x3e>
  4002a8:	4632      	mov	r2, r6
  4002aa:	6821      	ldr	r1, [r4, #0]
  4002ac:	4628      	mov	r0, r5
  4002ae:	4b0d      	ldr	r3, [pc, #52]	; (4002e4 <usart_init_rs232+0x50>)
  4002b0:	4798      	blx	r3
  4002b2:	4602      	mov	r2, r0
  4002b4:	b978      	cbnz	r0, 4002d6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002b6:	6863      	ldr	r3, [r4, #4]
  4002b8:	68a1      	ldr	r1, [r4, #8]
  4002ba:	430b      	orrs	r3, r1
  4002bc:	6921      	ldr	r1, [r4, #16]
  4002be:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002c0:	68e1      	ldr	r1, [r4, #12]
  4002c2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002c4:	4906      	ldr	r1, [pc, #24]	; (4002e0 <usart_init_rs232+0x4c>)
  4002c6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002c8:	6869      	ldr	r1, [r5, #4]
  4002ca:	430b      	orrs	r3, r1
  4002cc:	606b      	str	r3, [r5, #4]
}
  4002ce:	4610      	mov	r0, r2
  4002d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002d2:	2201      	movs	r2, #1
  4002d4:	e7fb      	b.n	4002ce <usart_init_rs232+0x3a>
  4002d6:	2201      	movs	r2, #1
  4002d8:	e7f9      	b.n	4002ce <usart_init_rs232+0x3a>
  4002da:	bf00      	nop
  4002dc:	0040026d 	.word	0x0040026d
  4002e0:	204009dc 	.word	0x204009dc
  4002e4:	00400211 	.word	0x00400211

004002e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4002e8:	2340      	movs	r3, #64	; 0x40
  4002ea:	6003      	str	r3, [r0, #0]
  4002ec:	4770      	bx	lr

004002ee <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4002ee:	2310      	movs	r3, #16
  4002f0:	6003      	str	r3, [r0, #0]
  4002f2:	4770      	bx	lr

004002f4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4002f4:	6943      	ldr	r3, [r0, #20]
  4002f6:	f013 0f02 	tst.w	r3, #2
  4002fa:	d004      	beq.n	400306 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4002fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400300:	61c1      	str	r1, [r0, #28]
	return 0;
  400302:	2000      	movs	r0, #0
  400304:	4770      	bx	lr
		return 1;
  400306:	2001      	movs	r0, #1
}
  400308:	4770      	bx	lr

0040030a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40030a:	6943      	ldr	r3, [r0, #20]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d005      	beq.n	40031e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400312:	6983      	ldr	r3, [r0, #24]
  400314:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400318:	600b      	str	r3, [r1, #0]
	return 0;
  40031a:	2000      	movs	r0, #0
  40031c:	4770      	bx	lr
		return 1;
  40031e:	2001      	movs	r0, #1
}
  400320:	4770      	bx	lr
	...

00400324 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400324:	3801      	subs	r0, #1
  400326:	2802      	cmp	r0, #2
  400328:	d815      	bhi.n	400356 <_write+0x32>
{
  40032a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40032e:	460e      	mov	r6, r1
  400330:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400332:	b19a      	cbz	r2, 40035c <_write+0x38>
  400334:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400336:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400370 <_write+0x4c>
  40033a:	4f0c      	ldr	r7, [pc, #48]	; (40036c <_write+0x48>)
  40033c:	f8d8 0000 	ldr.w	r0, [r8]
  400340:	f815 1b01 	ldrb.w	r1, [r5], #1
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	4798      	blx	r3
  400348:	2800      	cmp	r0, #0
  40034a:	db0a      	blt.n	400362 <_write+0x3e>
  40034c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40034e:	3c01      	subs	r4, #1
  400350:	d1f4      	bne.n	40033c <_write+0x18>
  400352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400356:	f04f 30ff 	mov.w	r0, #4294967295
  40035a:	4770      	bx	lr
	for (; len != 0; --len) {
  40035c:	4610      	mov	r0, r2
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40036a:	bf00      	nop
  40036c:	20400a90 	.word	0x20400a90
  400370:	20400a94 	.word	0x20400a94

00400374 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400374:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400376:	4b07      	ldr	r3, [pc, #28]	; (400394 <spi_enable_clock+0x20>)
  400378:	4298      	cmp	r0, r3
  40037a:	d003      	beq.n	400384 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <spi_enable_clock+0x24>)
  40037e:	4298      	cmp	r0, r3
  400380:	d004      	beq.n	40038c <spi_enable_clock+0x18>
  400382:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400384:	2015      	movs	r0, #21
  400386:	4b05      	ldr	r3, [pc, #20]	; (40039c <spi_enable_clock+0x28>)
  400388:	4798      	blx	r3
  40038a:	bd08      	pop	{r3, pc}
  40038c:	202a      	movs	r0, #42	; 0x2a
  40038e:	4b03      	ldr	r3, [pc, #12]	; (40039c <spi_enable_clock+0x28>)
  400390:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400392:	e7f6      	b.n	400382 <spi_enable_clock+0xe>
  400394:	40008000 	.word	0x40008000
  400398:	40058000 	.word	0x40058000
  40039c:	00400941 	.word	0x00400941

004003a0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003a0:	6843      	ldr	r3, [r0, #4]
  4003a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4003a6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003a8:	6843      	ldr	r3, [r0, #4]
  4003aa:	0409      	lsls	r1, r1, #16
  4003ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003b0:	4319      	orrs	r1, r3
  4003b2:	6041      	str	r1, [r0, #4]
  4003b4:	4770      	bx	lr

004003b6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4003b6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4003b8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4003bc:	6904      	ldr	r4, [r0, #16]
  4003be:	f014 0f01 	tst.w	r4, #1
  4003c2:	d103      	bne.n	4003cc <spi_read+0x16>
		if (!timeout--) {
  4003c4:	3b01      	subs	r3, #1
  4003c6:	d1f9      	bne.n	4003bc <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4003c8:	2001      	movs	r0, #1
  4003ca:	e009      	b.n	4003e0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4003cc:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4003ce:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4003d0:	f010 0f02 	tst.w	r0, #2
  4003d4:	d002      	beq.n	4003dc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4003d6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4003da:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4003dc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4003de:	2000      	movs	r0, #0
}
  4003e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003e4:	4770      	bx	lr

004003e6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4003e6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4003e8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4003ec:	6905      	ldr	r5, [r0, #16]
  4003ee:	f015 0f02 	tst.w	r5, #2
  4003f2:	d103      	bne.n	4003fc <spi_write+0x16>
		if (!timeout--) {
  4003f4:	3c01      	subs	r4, #1
  4003f6:	d1f9      	bne.n	4003ec <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4003f8:	2001      	movs	r0, #1
  4003fa:	e00c      	b.n	400416 <spi_write+0x30>
  4003fc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4003fe:	f014 0f02 	tst.w	r4, #2
  400402:	d006      	beq.n	400412 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400404:	0412      	lsls	r2, r2, #16
  400406:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40040a:	4311      	orrs	r1, r2
		if (uc_last) {
  40040c:	b10b      	cbz	r3, 400412 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40040e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400412:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400414:	2000      	movs	r0, #0
}
  400416:	bc30      	pop	{r4, r5}
  400418:	4770      	bx	lr

0040041a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40041a:	b932      	cbnz	r2, 40042a <spi_set_clock_polarity+0x10>
  40041c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400420:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400422:	f023 0301 	bic.w	r3, r3, #1
  400426:	6303      	str	r3, [r0, #48]	; 0x30
  400428:	4770      	bx	lr
  40042a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40042e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400430:	f043 0301 	orr.w	r3, r3, #1
  400434:	6303      	str	r3, [r0, #48]	; 0x30
  400436:	4770      	bx	lr

00400438 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400438:	b932      	cbnz	r2, 400448 <spi_set_clock_phase+0x10>
  40043a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40043e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400440:	f023 0302 	bic.w	r3, r3, #2
  400444:	6303      	str	r3, [r0, #48]	; 0x30
  400446:	4770      	bx	lr
  400448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40044c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044e:	f043 0302 	orr.w	r3, r3, #2
  400452:	6303      	str	r3, [r0, #48]	; 0x30
  400454:	4770      	bx	lr

00400456 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40045a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40045c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400460:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400462:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400464:	431a      	orrs	r2, r3
  400466:	630a      	str	r2, [r1, #48]	; 0x30
  400468:	4770      	bx	lr

0040046a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40046a:	b17a      	cbz	r2, 40048c <spi_set_baudrate_div+0x22>
{
  40046c:	b410      	push	{r4}
  40046e:	4614      	mov	r4, r2
  400470:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400474:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40047a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40047c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40047e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400482:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400484:	2000      	movs	r0, #0
}
  400486:	f85d 4b04 	ldr.w	r4, [sp], #4
  40048a:	4770      	bx	lr
        return -1;
  40048c:	f04f 30ff 	mov.w	r0, #4294967295
  400490:	4770      	bx	lr

00400492 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400492:	b410      	push	{r4}
  400494:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400498:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40049a:	b280      	uxth	r0, r0
  40049c:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40049e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4004a0:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4004a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4004a8:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4004aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ae:	4770      	bx	lr

004004b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4004b0:	6943      	ldr	r3, [r0, #20]
  4004b2:	f013 0f02 	tst.w	r3, #2
  4004b6:	d002      	beq.n	4004be <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4004b8:	61c1      	str	r1, [r0, #28]
	return 0;
  4004ba:	2000      	movs	r0, #0
  4004bc:	4770      	bx	lr
		return 1;
  4004be:	2001      	movs	r0, #1
}
  4004c0:	4770      	bx	lr

004004c2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4004c2:	6943      	ldr	r3, [r0, #20]
  4004c4:	f013 0f01 	tst.w	r3, #1
  4004c8:	d003      	beq.n	4004d2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4004ca:	6983      	ldr	r3, [r0, #24]
  4004cc:	700b      	strb	r3, [r1, #0]
	return 0;
  4004ce:	2000      	movs	r0, #0
  4004d0:	4770      	bx	lr
		return 1;
  4004d2:	2001      	movs	r0, #1
}
  4004d4:	4770      	bx	lr
	...

004004d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4810      	ldr	r0, [pc, #64]	; (40051c <sysclk_init+0x44>)
  4004dc:	4b10      	ldr	r3, [pc, #64]	; (400520 <sysclk_init+0x48>)
  4004de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004e0:	213e      	movs	r1, #62	; 0x3e
  4004e2:	2000      	movs	r0, #0
  4004e4:	4b0f      	ldr	r3, [pc, #60]	; (400524 <sysclk_init+0x4c>)
  4004e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004e8:	4c0f      	ldr	r4, [pc, #60]	; (400528 <sysclk_init+0x50>)
  4004ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004ec:	2800      	cmp	r0, #0
  4004ee:	d0fc      	beq.n	4004ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004f0:	4b0e      	ldr	r3, [pc, #56]	; (40052c <sysclk_init+0x54>)
  4004f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004f4:	4a0e      	ldr	r2, [pc, #56]	; (400530 <sysclk_init+0x58>)
  4004f6:	4b0f      	ldr	r3, [pc, #60]	; (400534 <sysclk_init+0x5c>)
  4004f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4004fa:	4c0f      	ldr	r4, [pc, #60]	; (400538 <sysclk_init+0x60>)
  4004fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004fe:	2800      	cmp	r0, #0
  400500:	d0fc      	beq.n	4004fc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0d      	ldr	r3, [pc, #52]	; (40053c <sysclk_init+0x64>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2000      	movs	r0, #0
  40050a:	4b0d      	ldr	r3, [pc, #52]	; (400540 <sysclk_init+0x68>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0d      	ldr	r3, [pc, #52]	; (400544 <sysclk_init+0x6c>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	4802      	ldr	r0, [pc, #8]	; (40051c <sysclk_init+0x44>)
  400514:	4b02      	ldr	r3, [pc, #8]	; (400520 <sysclk_init+0x48>)
  400516:	4798      	blx	r3
  400518:	bd10      	pop	{r4, pc}
  40051a:	bf00      	nop
  40051c:	08f0d180 	.word	0x08f0d180
  400520:	00400b39 	.word	0x00400b39
  400524:	004008bd 	.word	0x004008bd
  400528:	00400911 	.word	0x00400911
  40052c:	00400921 	.word	0x00400921
  400530:	20183f01 	.word	0x20183f01
  400534:	400e0600 	.word	0x400e0600
  400538:	00400931 	.word	0x00400931
  40053c:	00400821 	.word	0x00400821
  400540:	00400859 	.word	0x00400859
  400544:	00400a2d 	.word	0x00400a2d

00400548 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40054a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40054e:	4b7d      	ldr	r3, [pc, #500]	; (400744 <board_init+0x1fc>)
  400550:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400556:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  40055a:	4b7b      	ldr	r3, [pc, #492]	; (400748 <board_init+0x200>)
  40055c:	2100      	movs	r1, #0
  40055e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400566:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  40056a:	695a      	ldr	r2, [r3, #20]
  40056c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400570:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400576:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  40057a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400582:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400586:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40058a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  40058e:	016e      	lsls	r6, r5, #5
  400590:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400594:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400598:	461c      	mov	r4, r3
  40059a:	ea06 000e 	and.w	r0, r6, lr
  40059e:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4005a0:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4005a2:	ea40 0102 	orr.w	r1, r0, r2
  4005a6:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4005aa:	3b01      	subs	r3, #1
  4005ac:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4005b4:	d1f5      	bne.n	4005a2 <board_init+0x5a>
    } while(sets-- != 0U);
  4005b6:	3d01      	subs	r5, #1
  4005b8:	3e20      	subs	r6, #32
  4005ba:	f1b5 3fff 	cmp.w	r5, #4294967295
  4005be:	d1ec      	bne.n	40059a <board_init+0x52>
  4005c0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4005c4:	4b60      	ldr	r3, [pc, #384]	; (400748 <board_init+0x200>)
  4005c6:	695a      	ldr	r2, [r3, #20]
  4005c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4005cc:	615a      	str	r2, [r3, #20]
  4005ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005d2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005d6:	4a5d      	ldr	r2, [pc, #372]	; (40074c <board_init+0x204>)
  4005d8:	495d      	ldr	r1, [pc, #372]	; (400750 <board_init+0x208>)
  4005da:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005dc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4005e0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4005e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005e6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4005ea:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4005ee:	f022 0201 	bic.w	r2, r2, #1
  4005f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4005f6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4005fa:	f022 0201 	bic.w	r2, r2, #1
  4005fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400606:	f3bf 8f6f 	isb	sy
  40060a:	200a      	movs	r0, #10
  40060c:	4c51      	ldr	r4, [pc, #324]	; (400754 <board_init+0x20c>)
  40060e:	47a0      	blx	r4
  400610:	200b      	movs	r0, #11
  400612:	47a0      	blx	r4
  400614:	200c      	movs	r0, #12
  400616:	47a0      	blx	r4
  400618:	2010      	movs	r0, #16
  40061a:	47a0      	blx	r4
  40061c:	2011      	movs	r0, #17
  40061e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400620:	4b4d      	ldr	r3, [pc, #308]	; (400758 <board_init+0x210>)
  400622:	f44f 7280 	mov.w	r2, #256	; 0x100
  400626:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400628:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40062c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40062e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400632:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400636:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400638:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40063c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40063e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400642:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400644:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40064a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40064c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400650:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400652:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400654:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400658:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40065a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40065e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400662:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400666:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40066a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40066c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400670:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400672:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400678:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40067a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40067e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400680:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400682:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400686:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400688:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40068a:	4934      	ldr	r1, [pc, #208]	; (40075c <board_init+0x214>)
  40068c:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400690:	f043 0310 	orr.w	r3, r3, #16
  400694:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400698:	4b31      	ldr	r3, [pc, #196]	; (400760 <board_init+0x218>)
  40069a:	2110      	movs	r1, #16
  40069c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40069e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006a2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006a4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006a6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006aa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4006ac:	4308      	orrs	r0, r1
  4006ae:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4006b0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4006b2:	4308      	orrs	r0, r1
  4006b4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006b6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4006b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4006bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4006c0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006c2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006c6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006c8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006ca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006ce:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4006d0:	4308      	orrs	r0, r1
  4006d2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006d4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4006d6:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  4006da:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006dc:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4006de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006ee:	4311      	orrs	r1, r2
  4006f0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006f4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006f8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006fa:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4006fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400700:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400706:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400708:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40070a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40070e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400710:	4311      	orrs	r1, r2
  400712:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400714:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400716:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  40071a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40071c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40071e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400722:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400728:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40072a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40072c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400730:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400732:	4311      	orrs	r1, r2
  400734:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400736:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400738:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  40073c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40073e:	605a      	str	r2, [r3, #4]
  400740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400742:	bf00      	nop
  400744:	400e1850 	.word	0x400e1850
  400748:	e000ed00 	.word	0xe000ed00
  40074c:	400e0c00 	.word	0x400e0c00
  400750:	5a00080c 	.word	0x5a00080c
  400754:	00400941 	.word	0x00400941
  400758:	400e1200 	.word	0x400e1200
  40075c:	40088000 	.word	0x40088000
  400760:	400e1000 	.word	0x400e1000

00400764 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400764:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400766:	4770      	bx	lr

00400768 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400768:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40076a:	4770      	bx	lr

0040076c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400770:	4604      	mov	r4, r0
  400772:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400774:	4b0e      	ldr	r3, [pc, #56]	; (4007b0 <pio_handler_process+0x44>)
  400776:	4798      	blx	r3
  400778:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40077a:	4620      	mov	r0, r4
  40077c:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <pio_handler_process+0x48>)
  40077e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400780:	4005      	ands	r5, r0
  400782:	d013      	beq.n	4007ac <pio_handler_process+0x40>
  400784:	4c0c      	ldr	r4, [pc, #48]	; (4007b8 <pio_handler_process+0x4c>)
  400786:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40078a:	e003      	b.n	400794 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40078c:	42b4      	cmp	r4, r6
  40078e:	d00d      	beq.n	4007ac <pio_handler_process+0x40>
  400790:	3410      	adds	r4, #16
		while (status != 0) {
  400792:	b15d      	cbz	r5, 4007ac <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400794:	6820      	ldr	r0, [r4, #0]
  400796:	4540      	cmp	r0, r8
  400798:	d1f8      	bne.n	40078c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40079a:	6861      	ldr	r1, [r4, #4]
  40079c:	4229      	tst	r1, r5
  40079e:	d0f5      	beq.n	40078c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007a0:	68e3      	ldr	r3, [r4, #12]
  4007a2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	ea25 0503 	bic.w	r5, r5, r3
  4007aa:	e7ef      	b.n	40078c <pio_handler_process+0x20>
  4007ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007b0:	00400765 	.word	0x00400765
  4007b4:	00400769 	.word	0x00400769
  4007b8:	204009e0 	.word	0x204009e0

004007bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007be:	210a      	movs	r1, #10
  4007c0:	4801      	ldr	r0, [pc, #4]	; (4007c8 <PIOA_Handler+0xc>)
  4007c2:	4b02      	ldr	r3, [pc, #8]	; (4007cc <PIOA_Handler+0x10>)
  4007c4:	4798      	blx	r3
  4007c6:	bd08      	pop	{r3, pc}
  4007c8:	400e0e00 	.word	0x400e0e00
  4007cc:	0040076d 	.word	0x0040076d

004007d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4007d2:	210b      	movs	r1, #11
  4007d4:	4801      	ldr	r0, [pc, #4]	; (4007dc <PIOB_Handler+0xc>)
  4007d6:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <PIOB_Handler+0x10>)
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}
  4007dc:	400e1000 	.word	0x400e1000
  4007e0:	0040076d 	.word	0x0040076d

004007e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007e6:	210c      	movs	r1, #12
  4007e8:	4801      	ldr	r0, [pc, #4]	; (4007f0 <PIOC_Handler+0xc>)
  4007ea:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <PIOC_Handler+0x10>)
  4007ec:	4798      	blx	r3
  4007ee:	bd08      	pop	{r3, pc}
  4007f0:	400e1200 	.word	0x400e1200
  4007f4:	0040076d 	.word	0x0040076d

004007f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4007f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4007fa:	2110      	movs	r1, #16
  4007fc:	4801      	ldr	r0, [pc, #4]	; (400804 <PIOD_Handler+0xc>)
  4007fe:	4b02      	ldr	r3, [pc, #8]	; (400808 <PIOD_Handler+0x10>)
  400800:	4798      	blx	r3
  400802:	bd08      	pop	{r3, pc}
  400804:	400e1400 	.word	0x400e1400
  400808:	0040076d 	.word	0x0040076d

0040080c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40080c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40080e:	2111      	movs	r1, #17
  400810:	4801      	ldr	r0, [pc, #4]	; (400818 <PIOE_Handler+0xc>)
  400812:	4b02      	ldr	r3, [pc, #8]	; (40081c <PIOE_Handler+0x10>)
  400814:	4798      	blx	r3
  400816:	bd08      	pop	{r3, pc}
  400818:	400e1600 	.word	0x400e1600
  40081c:	0040076d 	.word	0x0040076d

00400820 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400820:	2803      	cmp	r0, #3
  400822:	d011      	beq.n	400848 <pmc_mck_set_division+0x28>
  400824:	2804      	cmp	r0, #4
  400826:	d012      	beq.n	40084e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400828:	2802      	cmp	r0, #2
  40082a:	bf0c      	ite	eq
  40082c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400830:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400832:	4a08      	ldr	r2, [pc, #32]	; (400854 <pmc_mck_set_division+0x34>)
  400834:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40083a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40083c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40083e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400840:	f013 0f08 	tst.w	r3, #8
  400844:	d0fb      	beq.n	40083e <pmc_mck_set_division+0x1e>
}
  400846:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400848:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40084c:	e7f1      	b.n	400832 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40084e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400852:	e7ee      	b.n	400832 <pmc_mck_set_division+0x12>
  400854:	400e0600 	.word	0x400e0600

00400858 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400858:	4a17      	ldr	r2, [pc, #92]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  40085a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400860:	4318      	orrs	r0, r3
  400862:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400864:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400866:	f013 0f08 	tst.w	r3, #8
  40086a:	d10a      	bne.n	400882 <pmc_switch_mck_to_pllack+0x2a>
  40086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400870:	4911      	ldr	r1, [pc, #68]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  400872:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400874:	f012 0f08 	tst.w	r2, #8
  400878:	d103      	bne.n	400882 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40087a:	3b01      	subs	r3, #1
  40087c:	d1f9      	bne.n	400872 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40087e:	2001      	movs	r0, #1
  400880:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400882:	4a0d      	ldr	r2, [pc, #52]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  400884:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400886:	f023 0303 	bic.w	r3, r3, #3
  40088a:	f043 0302 	orr.w	r3, r3, #2
  40088e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400890:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400892:	f013 0f08 	tst.w	r3, #8
  400896:	d10a      	bne.n	4008ae <pmc_switch_mck_to_pllack+0x56>
  400898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40089c:	4906      	ldr	r1, [pc, #24]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  40089e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008a0:	f012 0f08 	tst.w	r2, #8
  4008a4:	d105      	bne.n	4008b2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008a6:	3b01      	subs	r3, #1
  4008a8:	d1f9      	bne.n	40089e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008aa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008ac:	4770      	bx	lr
	return 0;
  4008ae:	2000      	movs	r0, #0
  4008b0:	4770      	bx	lr
  4008b2:	2000      	movs	r0, #0
  4008b4:	4770      	bx	lr
  4008b6:	bf00      	nop
  4008b8:	400e0600 	.word	0x400e0600

004008bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008bc:	b9a0      	cbnz	r0, 4008e8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008be:	480e      	ldr	r0, [pc, #56]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008c0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008c2:	0209      	lsls	r1, r1, #8
  4008c4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008c6:	4a0d      	ldr	r2, [pc, #52]	; (4008fc <pmc_switch_mainck_to_xtal+0x40>)
  4008c8:	401a      	ands	r2, r3
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <pmc_switch_mainck_to_xtal+0x44>)
  4008cc:	4313      	orrs	r3, r2
  4008ce:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008d0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008d2:	4602      	mov	r2, r0
  4008d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008d6:	f013 0f01 	tst.w	r3, #1
  4008da:	d0fb      	beq.n	4008d4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008dc:	4a06      	ldr	r2, [pc, #24]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008de:	6a11      	ldr	r1, [r2, #32]
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <pmc_switch_mainck_to_xtal+0x48>)
  4008e2:	430b      	orrs	r3, r1
  4008e4:	6213      	str	r3, [r2, #32]
  4008e6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008e8:	4903      	ldr	r1, [pc, #12]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008ea:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008ec:	4a06      	ldr	r2, [pc, #24]	; (400908 <pmc_switch_mainck_to_xtal+0x4c>)
  4008ee:	401a      	ands	r2, r3
  4008f0:	4b06      	ldr	r3, [pc, #24]	; (40090c <pmc_switch_mainck_to_xtal+0x50>)
  4008f2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008f4:	620b      	str	r3, [r1, #32]
  4008f6:	4770      	bx	lr
  4008f8:	400e0600 	.word	0x400e0600
  4008fc:	ffc8fffc 	.word	0xffc8fffc
  400900:	00370001 	.word	0x00370001
  400904:	01370000 	.word	0x01370000
  400908:	fec8fffc 	.word	0xfec8fffc
  40090c:	01370002 	.word	0x01370002

00400910 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400910:	4b02      	ldr	r3, [pc, #8]	; (40091c <pmc_osc_is_ready_mainck+0xc>)
  400912:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400914:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400918:	4770      	bx	lr
  40091a:	bf00      	nop
  40091c:	400e0600 	.word	0x400e0600

00400920 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400920:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400924:	4b01      	ldr	r3, [pc, #4]	; (40092c <pmc_disable_pllack+0xc>)
  400926:	629a      	str	r2, [r3, #40]	; 0x28
  400928:	4770      	bx	lr
  40092a:	bf00      	nop
  40092c:	400e0600 	.word	0x400e0600

00400930 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400930:	4b02      	ldr	r3, [pc, #8]	; (40093c <pmc_is_locked_pllack+0xc>)
  400932:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400934:	f000 0002 	and.w	r0, r0, #2
  400938:	4770      	bx	lr
  40093a:	bf00      	nop
  40093c:	400e0600 	.word	0x400e0600

00400940 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400940:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400944:	4b05      	ldr	r3, [pc, #20]	; (40095c <pmc_enable_periph_clk+0x1c>)
  400946:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40094a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40094e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400952:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400956:	2000      	movs	r0, #0
  400958:	4770      	bx	lr
  40095a:	bf00      	nop
  40095c:	400e0600 	.word	0x400e0600

00400960 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400960:	e7fe      	b.n	400960 <Dummy_Handler>
	...

00400964 <Reset_Handler>:
{
  400964:	b500      	push	{lr}
  400966:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400968:	4b25      	ldr	r3, [pc, #148]	; (400a00 <Reset_Handler+0x9c>)
  40096a:	4a26      	ldr	r2, [pc, #152]	; (400a04 <Reset_Handler+0xa0>)
  40096c:	429a      	cmp	r2, r3
  40096e:	d010      	beq.n	400992 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400970:	4b25      	ldr	r3, [pc, #148]	; (400a08 <Reset_Handler+0xa4>)
  400972:	4a23      	ldr	r2, [pc, #140]	; (400a00 <Reset_Handler+0x9c>)
  400974:	429a      	cmp	r2, r3
  400976:	d20c      	bcs.n	400992 <Reset_Handler+0x2e>
  400978:	3b01      	subs	r3, #1
  40097a:	1a9b      	subs	r3, r3, r2
  40097c:	f023 0303 	bic.w	r3, r3, #3
  400980:	3304      	adds	r3, #4
  400982:	4413      	add	r3, r2
  400984:	491f      	ldr	r1, [pc, #124]	; (400a04 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400986:	f851 0b04 	ldr.w	r0, [r1], #4
  40098a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40098e:	429a      	cmp	r2, r3
  400990:	d1f9      	bne.n	400986 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400992:	4b1e      	ldr	r3, [pc, #120]	; (400a0c <Reset_Handler+0xa8>)
  400994:	4a1e      	ldr	r2, [pc, #120]	; (400a10 <Reset_Handler+0xac>)
  400996:	429a      	cmp	r2, r3
  400998:	d20a      	bcs.n	4009b0 <Reset_Handler+0x4c>
  40099a:	3b01      	subs	r3, #1
  40099c:	1a9b      	subs	r3, r3, r2
  40099e:	f023 0303 	bic.w	r3, r3, #3
  4009a2:	3304      	adds	r3, #4
  4009a4:	4413      	add	r3, r2
                *pDest++ = 0;
  4009a6:	2100      	movs	r1, #0
  4009a8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009ac:	4293      	cmp	r3, r2
  4009ae:	d1fb      	bne.n	4009a8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009b0:	4a18      	ldr	r2, [pc, #96]	; (400a14 <Reset_Handler+0xb0>)
  4009b2:	4b19      	ldr	r3, [pc, #100]	; (400a18 <Reset_Handler+0xb4>)
  4009b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009b8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4009ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009be:	fab3 f383 	clz	r3, r3
  4009c2:	095b      	lsrs	r3, r3, #5
  4009c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4009c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009cc:	2200      	movs	r2, #0
  4009ce:	4b13      	ldr	r3, [pc, #76]	; (400a1c <Reset_Handler+0xb8>)
  4009d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4009d2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009d4:	4a12      	ldr	r2, [pc, #72]	; (400a20 <Reset_Handler+0xbc>)
  4009d6:	6813      	ldr	r3, [r2, #0]
  4009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4009dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4009de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4009e2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009e6:	b129      	cbz	r1, 4009f4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009e8:	2201      	movs	r2, #1
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <Reset_Handler+0xb8>)
  4009ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4009ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009f2:	b662      	cpsie	i
        __libc_init_array();
  4009f4:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <Reset_Handler+0xc0>)
  4009f6:	4798      	blx	r3
        main();
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <Reset_Handler+0xc4>)
  4009fa:	4798      	blx	r3
  4009fc:	e7fe      	b.n	4009fc <Reset_Handler+0x98>
  4009fe:	bf00      	nop
  400a00:	20400000 	.word	0x20400000
  400a04:	00404d10 	.word	0x00404d10
  400a08:	204009c0 	.word	0x204009c0
  400a0c:	20400b04 	.word	0x20400b04
  400a10:	204009c0 	.word	0x204009c0
  400a14:	e000ed00 	.word	0xe000ed00
  400a18:	00400000 	.word	0x00400000
  400a1c:	2040000a 	.word	0x2040000a
  400a20:	e000ed88 	.word	0xe000ed88
  400a24:	00401b99 	.word	0x00401b99
  400a28:	00401631 	.word	0x00401631

00400a2c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a2c:	4b3b      	ldr	r3, [pc, #236]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a30:	f003 0303 	and.w	r3, r3, #3
  400a34:	2b01      	cmp	r3, #1
  400a36:	d01d      	beq.n	400a74 <SystemCoreClockUpdate+0x48>
  400a38:	b183      	cbz	r3, 400a5c <SystemCoreClockUpdate+0x30>
  400a3a:	2b02      	cmp	r3, #2
  400a3c:	d036      	beq.n	400aac <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a3e:	4b37      	ldr	r3, [pc, #220]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a46:	2b70      	cmp	r3, #112	; 0x70
  400a48:	d05f      	beq.n	400b0a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a4a:	4b34      	ldr	r3, [pc, #208]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a4e:	4934      	ldr	r1, [pc, #208]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a50:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a54:	680b      	ldr	r3, [r1, #0]
  400a56:	40d3      	lsrs	r3, r2
  400a58:	600b      	str	r3, [r1, #0]
  400a5a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400a5c:	4b31      	ldr	r3, [pc, #196]	; (400b24 <SystemCoreClockUpdate+0xf8>)
  400a5e:	695b      	ldr	r3, [r3, #20]
  400a60:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a64:	bf14      	ite	ne
  400a66:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a6a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a6e:	4b2c      	ldr	r3, [pc, #176]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a70:	601a      	str	r2, [r3, #0]
  400a72:	e7e4      	b.n	400a3e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a74:	4b29      	ldr	r3, [pc, #164]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a76:	6a1b      	ldr	r3, [r3, #32]
  400a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a7c:	d003      	beq.n	400a86 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a7e:	4a2a      	ldr	r2, [pc, #168]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400a80:	4b27      	ldr	r3, [pc, #156]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a82:	601a      	str	r2, [r3, #0]
  400a84:	e7db      	b.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a86:	4a29      	ldr	r2, [pc, #164]	; (400b2c <SystemCoreClockUpdate+0x100>)
  400a88:	4b25      	ldr	r3, [pc, #148]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a8a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a8c:	4b23      	ldr	r3, [pc, #140]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a8e:	6a1b      	ldr	r3, [r3, #32]
  400a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a94:	2b10      	cmp	r3, #16
  400a96:	d005      	beq.n	400aa4 <SystemCoreClockUpdate+0x78>
  400a98:	2b20      	cmp	r3, #32
  400a9a:	d1d0      	bne.n	400a3e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400a9c:	4a22      	ldr	r2, [pc, #136]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400a9e:	4b20      	ldr	r3, [pc, #128]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aa0:	601a      	str	r2, [r3, #0]
          break;
  400aa2:	e7cc      	b.n	400a3e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400aa4:	4a22      	ldr	r2, [pc, #136]	; (400b30 <SystemCoreClockUpdate+0x104>)
  400aa6:	4b1e      	ldr	r3, [pc, #120]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aa8:	601a      	str	r2, [r3, #0]
          break;
  400aaa:	e7c8      	b.n	400a3e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aae:	6a1b      	ldr	r3, [r3, #32]
  400ab0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab4:	d016      	beq.n	400ae4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ab6:	4a1c      	ldr	r2, [pc, #112]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400ab8:	4b19      	ldr	r3, [pc, #100]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aba:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400abc:	4b17      	ldr	r3, [pc, #92]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ac0:	f003 0303 	and.w	r3, r3, #3
  400ac4:	2b02      	cmp	r3, #2
  400ac6:	d1ba      	bne.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ac8:	4a14      	ldr	r2, [pc, #80]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aca:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ace:	4814      	ldr	r0, [pc, #80]	; (400b20 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ad0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ad4:	6803      	ldr	r3, [r0, #0]
  400ad6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ada:	b2d2      	uxtb	r2, r2
  400adc:	fbb3 f3f2 	udiv	r3, r3, r2
  400ae0:	6003      	str	r3, [r0, #0]
  400ae2:	e7ac      	b.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ae4:	4a11      	ldr	r2, [pc, #68]	; (400b2c <SystemCoreClockUpdate+0x100>)
  400ae6:	4b0e      	ldr	r3, [pc, #56]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400ae8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400aea:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aec:	6a1b      	ldr	r3, [r3, #32]
  400aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400af2:	2b10      	cmp	r3, #16
  400af4:	d005      	beq.n	400b02 <SystemCoreClockUpdate+0xd6>
  400af6:	2b20      	cmp	r3, #32
  400af8:	d1e0      	bne.n	400abc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400afa:	4a0b      	ldr	r2, [pc, #44]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400afc:	4b08      	ldr	r3, [pc, #32]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400afe:	601a      	str	r2, [r3, #0]
          break;
  400b00:	e7dc      	b.n	400abc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400b02:	4a0b      	ldr	r2, [pc, #44]	; (400b30 <SystemCoreClockUpdate+0x104>)
  400b04:	4b06      	ldr	r3, [pc, #24]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400b06:	601a      	str	r2, [r3, #0]
          break;
  400b08:	e7d8      	b.n	400abc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400b0a:	4a05      	ldr	r2, [pc, #20]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400b0c:	6813      	ldr	r3, [r2, #0]
  400b0e:	4909      	ldr	r1, [pc, #36]	; (400b34 <SystemCoreClockUpdate+0x108>)
  400b10:	fba1 1303 	umull	r1, r3, r1, r3
  400b14:	085b      	lsrs	r3, r3, #1
  400b16:	6013      	str	r3, [r2, #0]
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop
  400b1c:	400e0600 	.word	0x400e0600
  400b20:	2040000c 	.word	0x2040000c
  400b24:	400e1810 	.word	0x400e1810
  400b28:	00b71b00 	.word	0x00b71b00
  400b2c:	003d0900 	.word	0x003d0900
  400b30:	007a1200 	.word	0x007a1200
  400b34:	aaaaaaab 	.word	0xaaaaaaab

00400b38 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b38:	4b16      	ldr	r3, [pc, #88]	; (400b94 <system_init_flash+0x5c>)
  400b3a:	4298      	cmp	r0, r3
  400b3c:	d913      	bls.n	400b66 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b3e:	4b16      	ldr	r3, [pc, #88]	; (400b98 <system_init_flash+0x60>)
  400b40:	4298      	cmp	r0, r3
  400b42:	d915      	bls.n	400b70 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b44:	4b15      	ldr	r3, [pc, #84]	; (400b9c <system_init_flash+0x64>)
  400b46:	4298      	cmp	r0, r3
  400b48:	d916      	bls.n	400b78 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b4a:	4b15      	ldr	r3, [pc, #84]	; (400ba0 <system_init_flash+0x68>)
  400b4c:	4298      	cmp	r0, r3
  400b4e:	d917      	bls.n	400b80 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b50:	4b14      	ldr	r3, [pc, #80]	; (400ba4 <system_init_flash+0x6c>)
  400b52:	4298      	cmp	r0, r3
  400b54:	d918      	bls.n	400b88 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400b56:	4b14      	ldr	r3, [pc, #80]	; (400ba8 <system_init_flash+0x70>)
  400b58:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b5a:	bf94      	ite	ls
  400b5c:	4a13      	ldrls	r2, [pc, #76]	; (400bac <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400b5e:	4a14      	ldrhi	r2, [pc, #80]	; (400bb0 <system_init_flash+0x78>)
  400b60:	4b14      	ldr	r3, [pc, #80]	; (400bb4 <system_init_flash+0x7c>)
  400b62:	601a      	str	r2, [r3, #0]
  400b64:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b6a:	4b12      	ldr	r3, [pc, #72]	; (400bb4 <system_init_flash+0x7c>)
  400b6c:	601a      	str	r2, [r3, #0]
  400b6e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b70:	4a11      	ldr	r2, [pc, #68]	; (400bb8 <system_init_flash+0x80>)
  400b72:	4b10      	ldr	r3, [pc, #64]	; (400bb4 <system_init_flash+0x7c>)
  400b74:	601a      	str	r2, [r3, #0]
  400b76:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b78:	4a10      	ldr	r2, [pc, #64]	; (400bbc <system_init_flash+0x84>)
  400b7a:	4b0e      	ldr	r3, [pc, #56]	; (400bb4 <system_init_flash+0x7c>)
  400b7c:	601a      	str	r2, [r3, #0]
  400b7e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b80:	4a0f      	ldr	r2, [pc, #60]	; (400bc0 <system_init_flash+0x88>)
  400b82:	4b0c      	ldr	r3, [pc, #48]	; (400bb4 <system_init_flash+0x7c>)
  400b84:	601a      	str	r2, [r3, #0]
  400b86:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b88:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400b8c:	4b09      	ldr	r3, [pc, #36]	; (400bb4 <system_init_flash+0x7c>)
  400b8e:	601a      	str	r2, [r3, #0]
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	015ef3bf 	.word	0x015ef3bf
  400b98:	02bde77f 	.word	0x02bde77f
  400b9c:	041cdb3f 	.word	0x041cdb3f
  400ba0:	057bceff 	.word	0x057bceff
  400ba4:	06dac2bf 	.word	0x06dac2bf
  400ba8:	0839b67f 	.word	0x0839b67f
  400bac:	04000500 	.word	0x04000500
  400bb0:	04000600 	.word	0x04000600
  400bb4:	400e0c00 	.word	0x400e0c00
  400bb8:	04000100 	.word	0x04000100
  400bbc:	04000200 	.word	0x04000200
  400bc0:	04000300 	.word	0x04000300

00400bc4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bc4:	4b0a      	ldr	r3, [pc, #40]	; (400bf0 <_sbrk+0x2c>)
  400bc6:	681b      	ldr	r3, [r3, #0]
  400bc8:	b153      	cbz	r3, 400be0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bca:	4b09      	ldr	r3, [pc, #36]	; (400bf0 <_sbrk+0x2c>)
  400bcc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bce:	181a      	adds	r2, r3, r0
  400bd0:	4908      	ldr	r1, [pc, #32]	; (400bf4 <_sbrk+0x30>)
  400bd2:	4291      	cmp	r1, r2
  400bd4:	db08      	blt.n	400be8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bd6:	4610      	mov	r0, r2
  400bd8:	4a05      	ldr	r2, [pc, #20]	; (400bf0 <_sbrk+0x2c>)
  400bda:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400bdc:	4618      	mov	r0, r3
  400bde:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400be0:	4a05      	ldr	r2, [pc, #20]	; (400bf8 <_sbrk+0x34>)
  400be2:	4b03      	ldr	r3, [pc, #12]	; (400bf0 <_sbrk+0x2c>)
  400be4:	601a      	str	r2, [r3, #0]
  400be6:	e7f0      	b.n	400bca <_sbrk+0x6>
		return (caddr_t) -1;	
  400be8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop
  400bf0:	20400a50 	.word	0x20400a50
  400bf4:	2045fffc 	.word	0x2045fffc
  400bf8:	20402d08 	.word	0x20402d08

00400bfc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400bfc:	f04f 30ff 	mov.w	r0, #4294967295
  400c00:	4770      	bx	lr

00400c02 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c06:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c08:	2000      	movs	r0, #0
  400c0a:	4770      	bx	lr

00400c0c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c0c:	2001      	movs	r0, #1
  400c0e:	4770      	bx	lr

00400c10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c10:	2000      	movs	r0, #0
  400c12:	4770      	bx	lr

00400c14 <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
static void spi_master_transfer(void *p_buf, uint32_t size)
{
  400c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c18:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  400c1a:	b1d9      	cbz	r1, 400c54 <spi_master_transfer+0x40>
  400c1c:	4688      	mov	r8, r1
  400c1e:	4605      	mov	r5, r0
  400c20:	4480      	add	r8, r0
		//if (i != size-1){
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c22:	4c0f      	ldr	r4, [pc, #60]	; (400c60 <spi_master_transfer+0x4c>)
  400c24:	f8df 9048 	ldr.w	r9, [pc, #72]	; 400c70 <spi_master_transfer+0x5c>
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 1);
		}*/
		
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c28:	4e0e      	ldr	r6, [pc, #56]	; (400c64 <spi_master_transfer+0x50>)
  400c2a:	462f      	mov	r7, r5
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c2c:	2300      	movs	r3, #0
  400c2e:	461a      	mov	r2, r3
  400c30:	7829      	ldrb	r1, [r5, #0]
  400c32:	4620      	mov	r0, r4
  400c34:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c36:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
  400c38:	f013 0f01 	tst.w	r3, #1
  400c3c:	d0fb      	beq.n	400c36 <spi_master_transfer+0x22>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c3e:	f10d 0207 	add.w	r2, sp, #7
  400c42:	4631      	mov	r1, r6
  400c44:	4620      	mov	r0, r4
  400c46:	4b08      	ldr	r3, [pc, #32]	; (400c68 <spi_master_transfer+0x54>)
  400c48:	4798      	blx	r3
		p_buffer[i] = data;
  400c4a:	8833      	ldrh	r3, [r6, #0]
  400c4c:	703b      	strb	r3, [r7, #0]
  400c4e:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  400c50:	4545      	cmp	r5, r8
  400c52:	d1ea      	bne.n	400c2a <spi_master_transfer+0x16>
	}
	delay_us(5);
  400c54:	20fd      	movs	r0, #253	; 0xfd
  400c56:	4b05      	ldr	r3, [pc, #20]	; (400c6c <spi_master_transfer+0x58>)
  400c58:	4798      	blx	r3
}
  400c5a:	b003      	add	sp, #12
  400c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400c60:	40008000 	.word	0x40008000
  400c64:	20400a54 	.word	0x20400a54
  400c68:	004003b7 	.word	0x004003b7
  400c6c:	20400001 	.word	0x20400001
  400c70:	004003e7 	.word	0x004003e7

00400c74 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c76:	b083      	sub	sp, #12
  400c78:	4605      	mov	r5, r0
  400c7a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c7c:	2300      	movs	r3, #0
  400c7e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c80:	4b2a      	ldr	r3, [pc, #168]	; (400d2c <usart_serial_getchar+0xb8>)
  400c82:	4298      	cmp	r0, r3
  400c84:	d013      	beq.n	400cae <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c86:	4b2a      	ldr	r3, [pc, #168]	; (400d30 <usart_serial_getchar+0xbc>)
  400c88:	4298      	cmp	r0, r3
  400c8a:	d018      	beq.n	400cbe <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400c8c:	4b29      	ldr	r3, [pc, #164]	; (400d34 <usart_serial_getchar+0xc0>)
  400c8e:	4298      	cmp	r0, r3
  400c90:	d01d      	beq.n	400cce <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400c92:	4b29      	ldr	r3, [pc, #164]	; (400d38 <usart_serial_getchar+0xc4>)
  400c94:	429d      	cmp	r5, r3
  400c96:	d022      	beq.n	400cde <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c98:	4b28      	ldr	r3, [pc, #160]	; (400d3c <usart_serial_getchar+0xc8>)
  400c9a:	429d      	cmp	r5, r3
  400c9c:	d027      	beq.n	400cee <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c9e:	4b28      	ldr	r3, [pc, #160]	; (400d40 <usart_serial_getchar+0xcc>)
  400ca0:	429d      	cmp	r5, r3
  400ca2:	d02e      	beq.n	400d02 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400ca4:	4b27      	ldr	r3, [pc, #156]	; (400d44 <usart_serial_getchar+0xd0>)
  400ca6:	429d      	cmp	r5, r3
  400ca8:	d035      	beq.n	400d16 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400caa:	b003      	add	sp, #12
  400cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400cae:	461f      	mov	r7, r3
  400cb0:	4e25      	ldr	r6, [pc, #148]	; (400d48 <usart_serial_getchar+0xd4>)
  400cb2:	4621      	mov	r1, r4
  400cb4:	4638      	mov	r0, r7
  400cb6:	47b0      	blx	r6
  400cb8:	2800      	cmp	r0, #0
  400cba:	d1fa      	bne.n	400cb2 <usart_serial_getchar+0x3e>
  400cbc:	e7e9      	b.n	400c92 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400cbe:	461f      	mov	r7, r3
  400cc0:	4e21      	ldr	r6, [pc, #132]	; (400d48 <usart_serial_getchar+0xd4>)
  400cc2:	4621      	mov	r1, r4
  400cc4:	4638      	mov	r0, r7
  400cc6:	47b0      	blx	r6
  400cc8:	2800      	cmp	r0, #0
  400cca:	d1fa      	bne.n	400cc2 <usart_serial_getchar+0x4e>
  400ccc:	e7e4      	b.n	400c98 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400cce:	461f      	mov	r7, r3
  400cd0:	4e1d      	ldr	r6, [pc, #116]	; (400d48 <usart_serial_getchar+0xd4>)
  400cd2:	4621      	mov	r1, r4
  400cd4:	4638      	mov	r0, r7
  400cd6:	47b0      	blx	r6
  400cd8:	2800      	cmp	r0, #0
  400cda:	d1fa      	bne.n	400cd2 <usart_serial_getchar+0x5e>
  400cdc:	e7df      	b.n	400c9e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400cde:	461f      	mov	r7, r3
  400ce0:	4e19      	ldr	r6, [pc, #100]	; (400d48 <usart_serial_getchar+0xd4>)
  400ce2:	4621      	mov	r1, r4
  400ce4:	4638      	mov	r0, r7
  400ce6:	47b0      	blx	r6
  400ce8:	2800      	cmp	r0, #0
  400cea:	d1fa      	bne.n	400ce2 <usart_serial_getchar+0x6e>
  400cec:	e7da      	b.n	400ca4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400cee:	461e      	mov	r6, r3
  400cf0:	4d16      	ldr	r5, [pc, #88]	; (400d4c <usart_serial_getchar+0xd8>)
  400cf2:	a901      	add	r1, sp, #4
  400cf4:	4630      	mov	r0, r6
  400cf6:	47a8      	blx	r5
  400cf8:	2800      	cmp	r0, #0
  400cfa:	d1fa      	bne.n	400cf2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400cfc:	9b01      	ldr	r3, [sp, #4]
  400cfe:	7023      	strb	r3, [r4, #0]
  400d00:	e7d3      	b.n	400caa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d02:	461e      	mov	r6, r3
  400d04:	4d11      	ldr	r5, [pc, #68]	; (400d4c <usart_serial_getchar+0xd8>)
  400d06:	a901      	add	r1, sp, #4
  400d08:	4630      	mov	r0, r6
  400d0a:	47a8      	blx	r5
  400d0c:	2800      	cmp	r0, #0
  400d0e:	d1fa      	bne.n	400d06 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400d10:	9b01      	ldr	r3, [sp, #4]
  400d12:	7023      	strb	r3, [r4, #0]
  400d14:	e7c9      	b.n	400caa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d16:	461e      	mov	r6, r3
  400d18:	4d0c      	ldr	r5, [pc, #48]	; (400d4c <usart_serial_getchar+0xd8>)
  400d1a:	a901      	add	r1, sp, #4
  400d1c:	4630      	mov	r0, r6
  400d1e:	47a8      	blx	r5
  400d20:	2800      	cmp	r0, #0
  400d22:	d1fa      	bne.n	400d1a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	7023      	strb	r3, [r4, #0]
}
  400d28:	e7bf      	b.n	400caa <usart_serial_getchar+0x36>
  400d2a:	bf00      	nop
  400d2c:	400e0800 	.word	0x400e0800
  400d30:	400e0a00 	.word	0x400e0a00
  400d34:	400e1a00 	.word	0x400e1a00
  400d38:	400e1c00 	.word	0x400e1c00
  400d3c:	40024000 	.word	0x40024000
  400d40:	40028000 	.word	0x40028000
  400d44:	4002c000 	.word	0x4002c000
  400d48:	004004c3 	.word	0x004004c3
  400d4c:	0040030b 	.word	0x0040030b

00400d50 <usart_serial_putchar>:
{
  400d50:	b570      	push	{r4, r5, r6, lr}
  400d52:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400d54:	4b2a      	ldr	r3, [pc, #168]	; (400e00 <usart_serial_putchar+0xb0>)
  400d56:	4298      	cmp	r0, r3
  400d58:	d013      	beq.n	400d82 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400d5a:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <usart_serial_putchar+0xb4>)
  400d5c:	4298      	cmp	r0, r3
  400d5e:	d019      	beq.n	400d94 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400d60:	4b29      	ldr	r3, [pc, #164]	; (400e08 <usart_serial_putchar+0xb8>)
  400d62:	4298      	cmp	r0, r3
  400d64:	d01f      	beq.n	400da6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400d66:	4b29      	ldr	r3, [pc, #164]	; (400e0c <usart_serial_putchar+0xbc>)
  400d68:	4298      	cmp	r0, r3
  400d6a:	d025      	beq.n	400db8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400d6c:	4b28      	ldr	r3, [pc, #160]	; (400e10 <usart_serial_putchar+0xc0>)
  400d6e:	4298      	cmp	r0, r3
  400d70:	d02b      	beq.n	400dca <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400d72:	4b28      	ldr	r3, [pc, #160]	; (400e14 <usart_serial_putchar+0xc4>)
  400d74:	4298      	cmp	r0, r3
  400d76:	d031      	beq.n	400ddc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400d78:	4b27      	ldr	r3, [pc, #156]	; (400e18 <usart_serial_putchar+0xc8>)
  400d7a:	4298      	cmp	r0, r3
  400d7c:	d037      	beq.n	400dee <usart_serial_putchar+0x9e>
	return 0;
  400d7e:	2000      	movs	r0, #0
}
  400d80:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d82:	461e      	mov	r6, r3
  400d84:	4d25      	ldr	r5, [pc, #148]	; (400e1c <usart_serial_putchar+0xcc>)
  400d86:	4621      	mov	r1, r4
  400d88:	4630      	mov	r0, r6
  400d8a:	47a8      	blx	r5
  400d8c:	2800      	cmp	r0, #0
  400d8e:	d1fa      	bne.n	400d86 <usart_serial_putchar+0x36>
		return 1;
  400d90:	2001      	movs	r0, #1
  400d92:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d94:	461e      	mov	r6, r3
  400d96:	4d21      	ldr	r5, [pc, #132]	; (400e1c <usart_serial_putchar+0xcc>)
  400d98:	4621      	mov	r1, r4
  400d9a:	4630      	mov	r0, r6
  400d9c:	47a8      	blx	r5
  400d9e:	2800      	cmp	r0, #0
  400da0:	d1fa      	bne.n	400d98 <usart_serial_putchar+0x48>
		return 1;
  400da2:	2001      	movs	r0, #1
  400da4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400da6:	461e      	mov	r6, r3
  400da8:	4d1c      	ldr	r5, [pc, #112]	; (400e1c <usart_serial_putchar+0xcc>)
  400daa:	4621      	mov	r1, r4
  400dac:	4630      	mov	r0, r6
  400dae:	47a8      	blx	r5
  400db0:	2800      	cmp	r0, #0
  400db2:	d1fa      	bne.n	400daa <usart_serial_putchar+0x5a>
		return 1;
  400db4:	2001      	movs	r0, #1
  400db6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400db8:	461e      	mov	r6, r3
  400dba:	4d18      	ldr	r5, [pc, #96]	; (400e1c <usart_serial_putchar+0xcc>)
  400dbc:	4621      	mov	r1, r4
  400dbe:	4630      	mov	r0, r6
  400dc0:	47a8      	blx	r5
  400dc2:	2800      	cmp	r0, #0
  400dc4:	d1fa      	bne.n	400dbc <usart_serial_putchar+0x6c>
		return 1;
  400dc6:	2001      	movs	r0, #1
  400dc8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400dca:	461e      	mov	r6, r3
  400dcc:	4d14      	ldr	r5, [pc, #80]	; (400e20 <usart_serial_putchar+0xd0>)
  400dce:	4621      	mov	r1, r4
  400dd0:	4630      	mov	r0, r6
  400dd2:	47a8      	blx	r5
  400dd4:	2800      	cmp	r0, #0
  400dd6:	d1fa      	bne.n	400dce <usart_serial_putchar+0x7e>
		return 1;
  400dd8:	2001      	movs	r0, #1
  400dda:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ddc:	461e      	mov	r6, r3
  400dde:	4d10      	ldr	r5, [pc, #64]	; (400e20 <usart_serial_putchar+0xd0>)
  400de0:	4621      	mov	r1, r4
  400de2:	4630      	mov	r0, r6
  400de4:	47a8      	blx	r5
  400de6:	2800      	cmp	r0, #0
  400de8:	d1fa      	bne.n	400de0 <usart_serial_putchar+0x90>
		return 1;
  400dea:	2001      	movs	r0, #1
  400dec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400dee:	461e      	mov	r6, r3
  400df0:	4d0b      	ldr	r5, [pc, #44]	; (400e20 <usart_serial_putchar+0xd0>)
  400df2:	4621      	mov	r1, r4
  400df4:	4630      	mov	r0, r6
  400df6:	47a8      	blx	r5
  400df8:	2800      	cmp	r0, #0
  400dfa:	d1fa      	bne.n	400df2 <usart_serial_putchar+0xa2>
		return 1;
  400dfc:	2001      	movs	r0, #1
  400dfe:	bd70      	pop	{r4, r5, r6, pc}
  400e00:	400e0800 	.word	0x400e0800
  400e04:	400e0a00 	.word	0x400e0a00
  400e08:	400e1a00 	.word	0x400e1a00
  400e0c:	400e1c00 	.word	0x400e1c00
  400e10:	40024000 	.word	0x40024000
  400e14:	40028000 	.word	0x40028000
  400e18:	4002c000 	.word	0x4002c000
  400e1c:	004004b1 	.word	0x004004b1
  400e20:	004002f5 	.word	0x004002f5

00400e24 <nRF24_readRegister>:
 * 
 * \param reg register to read
 * \return data register
 */
uint8_t nRF24_readRegister(uint8_t reg)
{
  400e24:	b500      	push	{lr}
  400e26:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  400e28:	f000 001f 	and.w	r0, r0, #31
  400e2c:	f88d 0004 	strb.w	r0, [sp, #4]
  400e30:	23ff      	movs	r3, #255	; 0xff
  400e32:	f88d 3005 	strb.w	r3, [sp, #5]
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400e36:	2102      	movs	r1, #2
  400e38:	a801      	add	r0, sp, #4
  400e3a:	4b03      	ldr	r3, [pc, #12]	; (400e48 <nRF24_readRegister+0x24>)
  400e3c:	4798      	blx	r3
	/** contents of cmd after transfer:
	 * [0] contains STATUS register
	 * [1] contains requested register
	*/
	return cmd[1]; 
}
  400e3e:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400e42:	b003      	add	sp, #12
  400e44:	f85d fb04 	ldr.w	pc, [sp], #4
  400e48:	00400c15 	.word	0x00400c15

00400e4c <read_register>:

uint8_t read_register(uint8_t reg, uint8_t* buf, uint8_t len)
{
  400e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e4e:	af00      	add	r7, sp, #0
  400e50:	460e      	mov	r6, r1
  400e52:	4614      	mov	r4, r2
	//1x spi zenden niet 2 commando's
	uint8_t status[len+1];
  400e54:	f102 0308 	add.w	r3, r2, #8
  400e58:	f023 0307 	bic.w	r3, r3, #7
  400e5c:	ebad 0d03 	sub.w	sp, sp, r3
  400e60:	466d      	mov	r5, sp
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  400e62:	f000 001f 	and.w	r0, r0, #31
  400e66:	f88d 0000 	strb.w	r0, [sp]
	spi_master_transfer(&status, sizeof(status));
  400e6a:	1c51      	adds	r1, r2, #1
  400e6c:	4668      	mov	r0, sp
  400e6e:	4b08      	ldr	r3, [pc, #32]	; (400e90 <read_register+0x44>)
  400e70:	4798      	blx	r3
	
	for (uint8_t i = 0; i< len; i++)
  400e72:	b154      	cbz	r4, 400e8a <read_register+0x3e>
  400e74:	1c68      	adds	r0, r5, #1
  400e76:	1e73      	subs	r3, r6, #1
  400e78:	1e61      	subs	r1, r4, #1
  400e7a:	fa56 f181 	uxtab	r1, r6, r1
	{
		buf[i] = status[i+1];
  400e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
  400e82:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  400e86:	428b      	cmp	r3, r1
  400e88:	d1f9      	bne.n	400e7e <read_register+0x32>
	}
	
	return status[0];
	
}
  400e8a:	7828      	ldrb	r0, [r5, #0]
  400e8c:	46bd      	mov	sp, r7
  400e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e90:	00400c15 	.word	0x00400c15

00400e94 <nRF24_writeRegister>:
 * \param reg register to write
 * \param value to write
 * \return STATUS register 
 */
uint8_t nRF24_writeRegister(uint8_t reg, uint8_t val)
{
  400e94:	b500      	push	{lr}
  400e96:	b083      	sub	sp, #12
	uint8_t p_buf[2];
	
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400e98:	f000 001f 	and.w	r0, r0, #31
  400e9c:	f040 0020 	orr.w	r0, r0, #32
  400ea0:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  400ea4:	f88d 1005 	strb.w	r1, [sp, #5]
	/** contents of p_buf before transfer
	* [0] write commando to reg
	* [1] data to write
	*/
	
	spi_master_transfer(p_buf, sizeof(p_buf));
  400ea8:	2102      	movs	r1, #2
  400eaa:	a801      	add	r0, sp, #4
  400eac:	4b03      	ldr	r3, [pc, #12]	; (400ebc <nRF24_writeRegister+0x28>)
  400eae:	4798      	blx	r3
	/** contents of p_buf after transfer
	* [0] Status register
	* [1] unknown data
	*/
	return p_buf[0]; //return STATUS
}
  400eb0:	f89d 0004 	ldrb.w	r0, [sp, #4]
  400eb4:	b003      	add	sp, #12
  400eb6:	f85d fb04 	ldr.w	pc, [sp], #4
  400eba:	bf00      	nop
  400ebc:	00400c15 	.word	0x00400c15

00400ec0 <nRF_writeRegister>:

uint8_t nRF_writeRegister(uint8_t reg, const uint8_t* buf, uint8_t length)
{
  400ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ec2:	af00      	add	r7, sp, #0
	uint8_t p_buf[length+1];
  400ec4:	1c56      	adds	r6, r2, #1
  400ec6:	f102 0308 	add.w	r3, r2, #8
  400eca:	f023 0307 	bic.w	r3, r3, #7
  400ece:	ebad 0d03 	sub.w	sp, sp, r3
  400ed2:	466d      	mov	r5, sp
	
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400ed4:	f000 001f 	and.w	r0, r0, #31
  400ed8:	f040 0020 	orr.w	r0, r0, #32
  400edc:	f88d 0000 	strb.w	r0, [sp]
	
	for (uint8_t i = 0; i < length; i++)
  400ee0:	b152      	cbz	r2, 400ef8 <nRF_writeRegister+0x38>
  400ee2:	1e4b      	subs	r3, r1, #1
  400ee4:	1c68      	adds	r0, r5, #1
  400ee6:	3a01      	subs	r2, #1
  400ee8:	fa51 f482 	uxtab	r4, r1, r2
	{
		p_buf[i+1] = (*buf++);
  400eec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400ef0:	f800 2b01 	strb.w	r2, [r0], #1
	for (uint8_t i = 0; i < length; i++)
  400ef4:	42a3      	cmp	r3, r4
  400ef6:	d1f9      	bne.n	400eec <nRF_writeRegister+0x2c>
		//printf("%d || %02x || %02x\n\r", i, p_buf[i], *buf);
	}
	spi_master_transfer(p_buf, sizeof(p_buf));
  400ef8:	4631      	mov	r1, r6
  400efa:	4628      	mov	r0, r5
  400efc:	4b02      	ldr	r3, [pc, #8]	; (400f08 <nRF_writeRegister+0x48>)
  400efe:	4798      	blx	r3
	
	return p_buf[0];
}
  400f00:	7828      	ldrb	r0, [r5, #0]
  400f02:	46bd      	mov	sp, r7
  400f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f06:	bf00      	nop
  400f08:	00400c15 	.word	0x00400c15

00400f0c <nRF24_FlushRx>:
/**
 * \brief flush the RX buffer of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_FlushRx(void)
{
  400f0c:	b500      	push	{lr}
  400f0e:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = FLUSH_RX;
  400f10:	a802      	add	r0, sp, #8
  400f12:	23e2      	movs	r3, #226	; 0xe2
  400f14:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f18:	2101      	movs	r1, #1
  400f1a:	4b03      	ldr	r3, [pc, #12]	; (400f28 <nRF24_FlushRx+0x1c>)
  400f1c:	4798      	blx	r3
	
	return cmd;
}
  400f1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f22:	b003      	add	sp, #12
  400f24:	f85d fb04 	ldr.w	pc, [sp], #4
  400f28:	00400c15 	.word	0x00400c15

00400f2c <nRF24_FlushTx>:
/**
 * \brief flush the TX buffer of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_FlushTx(void)
{
  400f2c:	b500      	push	{lr}
  400f2e:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = FLUSH_TX;
  400f30:	a802      	add	r0, sp, #8
  400f32:	23e1      	movs	r3, #225	; 0xe1
  400f34:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f38:	2101      	movs	r1, #1
  400f3a:	4b03      	ldr	r3, [pc, #12]	; (400f48 <nRF24_FlushTx+0x1c>)
  400f3c:	4798      	blx	r3
	return cmd;
}
  400f3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f42:	b003      	add	sp, #12
  400f44:	f85d fb04 	ldr.w	pc, [sp], #4
  400f48:	00400c15 	.word	0x00400c15

00400f4c <nRF24_getStatus>:
/**
 * \brief Read the Status register of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_getStatus(void)
{
  400f4c:	b500      	push	{lr}
  400f4e:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = RF24_NOP;
  400f50:	a802      	add	r0, sp, #8
  400f52:	23ff      	movs	r3, #255	; 0xff
  400f54:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f58:	2101      	movs	r1, #1
  400f5a:	4b03      	ldr	r3, [pc, #12]	; (400f68 <nRF24_getStatus+0x1c>)
  400f5c:	4798      	blx	r3
	return cmd;
}
  400f5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f62:	b003      	add	sp, #12
  400f64:	f85d fb04 	ldr.w	pc, [sp], #4
  400f68:	00400c15 	.word	0x00400c15

00400f6c <nRF24_setDataRate>:

bool nRF24_setDataRate(rf24_datarate_e speed)
{
  400f6c:	b538      	push	{r3, r4, r5, lr}
  400f6e:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  400f70:	2006      	movs	r0, #6
  400f72:	4b0c      	ldr	r3, [pc, #48]	; (400fa4 <nRF24_setDataRate+0x38>)
  400f74:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  400f76:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	
	if (speed == RF24_2MBPS) {
  400f7a:	2d01      	cmp	r5, #1
  400f7c:	d00b      	beq.n	400f96 <nRF24_setDataRate+0x2a>
		txDelay = 190;
		#else // 16Mhz Arduino
		txDelay = 65;
		#endif
	}
	nRF24_writeRegister(RF_SETUP, setup);
  400f7e:	4621      	mov	r1, r4
  400f80:	2006      	movs	r0, #6
  400f82:	4b09      	ldr	r3, [pc, #36]	; (400fa8 <nRF24_setDataRate+0x3c>)
  400f84:	4798      	blx	r3
	
	if(nRF24_readRegister(RF_SETUP) == setup)
  400f86:	2006      	movs	r0, #6
  400f88:	4b06      	ldr	r3, [pc, #24]	; (400fa4 <nRF24_setDataRate+0x38>)
  400f8a:	4798      	blx	r3
	result = true;
	
	return result;
}
  400f8c:	4284      	cmp	r4, r0
  400f8e:	bf14      	ite	ne
  400f90:	2000      	movne	r0, #0
  400f92:	2001      	moveq	r0, #1
  400f94:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  400f96:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  400f9a:	2241      	movs	r2, #65	; 0x41
  400f9c:	4b03      	ldr	r3, [pc, #12]	; (400fac <nRF24_setDataRate+0x40>)
  400f9e:	601a      	str	r2, [r3, #0]
  400fa0:	e7ed      	b.n	400f7e <nRF24_setDataRate+0x12>
  400fa2:	bf00      	nop
  400fa4:	00400e25 	.word	0x00400e25
  400fa8:	00400e95 	.word	0x00400e95
  400fac:	20400ad8 	.word	0x20400ad8

00400fb0 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
  400fb0:	b508      	push	{r3, lr}
	rf24_datarate_e result;
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  400fb2:	2006      	movs	r0, #6
  400fb4:	4b04      	ldr	r3, [pc, #16]	; (400fc8 <getDataRate+0x18>)
  400fb6:	4798      	blx	r3
	
	if (dr == (1<<RF_DR_HIGH)) {
  400fb8:	f000 0028 	and.w	r0, r0, #40	; 0x28
	} else {
		// '00' = 1MBPS
		result = RF24_1MBPS;
	}
	return result;
}
  400fbc:	2808      	cmp	r0, #8
  400fbe:	bf14      	ite	ne
  400fc0:	2000      	movne	r0, #0
  400fc2:	2001      	moveq	r0, #1
  400fc4:	bd08      	pop	{r3, pc}
  400fc6:	bf00      	nop
  400fc8:	00400e25 	.word	0x00400e25

00400fcc <getCRCLength>:

rf24_crclength_e getCRCLength(void)
{
  400fcc:	b538      	push	{r3, r4, r5, lr}
	rf24_crclength_e result = RF24_CRC_DISABLED;
	
	
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  400fce:	2000      	movs	r0, #0
  400fd0:	4d08      	ldr	r5, [pc, #32]	; (400ff4 <getCRCLength+0x28>)
  400fd2:	47a8      	blx	r5
  400fd4:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  400fd6:	2001      	movs	r0, #1
  400fd8:	47a8      	blx	r5
	
    if (config & (1<<EN_CRC) || AA) {
  400fda:	f014 0f08 	tst.w	r4, #8
  400fde:	d102      	bne.n	400fe6 <getCRCLength+0x1a>
  400fe0:	b908      	cbnz	r0, 400fe6 <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  400fe2:	2000      	movs	r0, #0
		    result = RF24_CRC_8;
	    }
    }

    return result;	
}
  400fe4:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  400fe6:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  400fea:	2c00      	cmp	r4, #0
  400fec:	bf14      	ite	ne
  400fee:	2002      	movne	r0, #2
  400ff0:	2001      	moveq	r0, #1
  400ff2:	bd38      	pop	{r3, r4, r5, pc}
  400ff4:	00400e25 	.word	0x00400e25

00400ff8 <nRF24_getPALevel>:

uint8_t nRF24_getPALevel(void)
{
  400ff8:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  400ffa:	2006      	movs	r0, #6
  400ffc:	4b02      	ldr	r3, [pc, #8]	; (401008 <nRF24_getPALevel+0x10>)
  400ffe:	4798      	blx	r3
}
  401000:	f3c0 0041 	ubfx	r0, r0, #1, #2
  401004:	bd08      	pop	{r3, pc}
  401006:	bf00      	nop
  401008:	00400e25 	.word	0x00400e25

0040100c <print_status>:
	return true;
}

#ifdef _DEBUG
void print_status (uint8_t status)
{
  40100c:	b510      	push	{r4, lr}
  40100e:	b084      	sub	sp, #16
  401010:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  401012:	f000 0301 	and.w	r3, r0, #1
  401016:	9302      	str	r3, [sp, #8]
  401018:	f3c0 0340 	ubfx	r3, r0, #1, #1
  40101c:	9301      	str	r3, [sp, #4]
  40101e:	f3c0 1300 	ubfx	r3, r0, #4, #1
  401022:	9300      	str	r3, [sp, #0]
  401024:	f3c0 1340 	ubfx	r3, r0, #5, #1
  401028:	f3c0 1280 	ubfx	r2, r0, #6, #1
  40102c:	4802      	ldr	r0, [pc, #8]	; (401038 <print_status+0x2c>)
  40102e:	4c03      	ldr	r4, [pc, #12]	; (40103c <print_status+0x30>)
  401030:	47a0      	blx	r4
}
  401032:	b004      	add	sp, #16
  401034:	bd10      	pop	{r4, pc}
  401036:	bf00      	nop
  401038:	00404aac 	.word	0x00404aac
  40103c:	00401be9 	.word	0x00401be9

00401040 <print_address_register>:
//functie print verkeerde registers
void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  401040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401044:	b083      	sub	sp, #12
  401046:	af00      	add	r7, sp, #0
  401048:	460e      	mov	r6, r1
  40104a:	4614      	mov	r4, r2
	printf("%s\t", name);
  40104c:	4601      	mov	r1, r0
  40104e:	481b      	ldr	r0, [pc, #108]	; (4010bc <print_address_register+0x7c>)
  401050:	4b1b      	ldr	r3, [pc, #108]	; (4010c0 <print_address_register+0x80>)
  401052:	4798      	blx	r3
	while(qty--){
  401054:	b35c      	cbz	r4, 4010ae <print_address_register+0x6e>
  401056:	4434      	add	r4, r6
  401058:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  40105c:	f8df b070 	ldr.w	fp, [pc, #112]	; 4010d0 <print_address_register+0x90>
	while(qty--){
  401060:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  401064:	f89b 4000 	ldrb.w	r4, [fp]
  401068:	1de3      	adds	r3, r4, #7
  40106a:	f023 0307 	bic.w	r3, r3, #7
  40106e:	ebad 0d03 	sub.w	sp, sp, r3
  401072:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  401074:	f106 0901 	add.w	r9, r6, #1
  401078:	fa5f f989 	uxtb.w	r9, r9
  40107c:	4622      	mov	r2, r4
  40107e:	4669      	mov	r1, sp
  401080:	4630      	mov	r0, r6
  401082:	4b10      	ldr	r3, [pc, #64]	; (4010c4 <print_address_register+0x84>)
  401084:	4798      	blx	r3
		
		printf(" 0x");
  401086:	4810      	ldr	r0, [pc, #64]	; (4010c8 <print_address_register+0x88>)
  401088:	4b0d      	ldr	r3, [pc, #52]	; (4010c0 <print_address_register+0x80>)
  40108a:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  40108c:	3c01      	subs	r4, #1
  40108e:	192c      	adds	r4, r5, r4
  401090:	d208      	bcs.n	4010a4 <print_address_register+0x64>
			printf("%02x", *bufptr);
  401092:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4010d4 <print_address_register+0x94>
  401096:	4e0a      	ldr	r6, [pc, #40]	; (4010c0 <print_address_register+0x80>)
  401098:	f814 1901 	ldrb.w	r1, [r4], #-1
  40109c:	4640      	mov	r0, r8
  40109e:	47b0      	blx	r6
		while(--bufptr >= buffer){
  4010a0:	42a5      	cmp	r5, r4
  4010a2:	d9f9      	bls.n	401098 <print_address_register+0x58>
  4010a4:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  4010a8:	464e      	mov	r6, r9
	while(qty--){
  4010aa:	45ca      	cmp	sl, r9
  4010ac:	d1d8      	bne.n	401060 <print_address_register+0x20>
		}
	}
	printf("\r\n");
  4010ae:	4807      	ldr	r0, [pc, #28]	; (4010cc <print_address_register+0x8c>)
  4010b0:	4b03      	ldr	r3, [pc, #12]	; (4010c0 <print_address_register+0x80>)
  4010b2:	4798      	blx	r3
}
  4010b4:	370c      	adds	r7, #12
  4010b6:	46bd      	mov	sp, r7
  4010b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010bc:	00404a94 	.word	0x00404a94
  4010c0:	00401be9 	.word	0x00401be9
  4010c4:	00400e4d 	.word	0x00400e4d
  4010c8:	00404a98 	.word	0x00404a98
  4010cc:	00404964 	.word	0x00404964
  4010d0:	20400a98 	.word	0x20400a98
  4010d4:	00404a9c 	.word	0x00404a9c

004010d8 <print_byte_register>:

void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  4010d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4010dc:	460d      	mov	r5, r1
  4010de:	4616      	mov	r6, r2
	printf("%s\t", name);
  4010e0:	4601      	mov	r1, r0
  4010e2:	480d      	ldr	r0, [pc, #52]	; (401118 <print_byte_register+0x40>)
  4010e4:	4b0d      	ldr	r3, [pc, #52]	; (40111c <print_byte_register+0x44>)
  4010e6:	4798      	blx	r3
	while (qty--)
  4010e8:	b186      	cbz	r6, 40110c <print_byte_register+0x34>
  4010ea:	442e      	add	r6, r5
  4010ec:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  4010ee:	f8df 9034 	ldr.w	r9, [pc, #52]	; 401124 <print_byte_register+0x4c>
  4010f2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401128 <print_byte_register+0x50>
  4010f6:	4f09      	ldr	r7, [pc, #36]	; (40111c <print_byte_register+0x44>)
  4010f8:	1c6c      	adds	r4, r5, #1
  4010fa:	b2e4      	uxtb	r4, r4
  4010fc:	4628      	mov	r0, r5
  4010fe:	47c8      	blx	r9
  401100:	4601      	mov	r1, r0
  401102:	4640      	mov	r0, r8
  401104:	47b8      	blx	r7
  401106:	4625      	mov	r5, r4
	while (qty--)
  401108:	42a6      	cmp	r6, r4
  40110a:	d1f5      	bne.n	4010f8 <print_byte_register+0x20>
	}
	printf("\r\n");
  40110c:	4804      	ldr	r0, [pc, #16]	; (401120 <print_byte_register+0x48>)
  40110e:	4b03      	ldr	r3, [pc, #12]	; (40111c <print_byte_register+0x44>)
  401110:	4798      	blx	r3
  401112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401116:	bf00      	nop
  401118:	00404a94 	.word	0x00404a94
  40111c:	00401be9 	.word	0x00401be9
  401120:	00404964 	.word	0x00404964
  401124:	00400e25 	.word	0x00400e25
  401128:	00404aa4 	.word	0x00404aa4

0040112c <printDetails>:
}

void printDetails(void)
{
  40112c:	b570      	push	{r4, r5, r6, lr}
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  40112e:	2105      	movs	r1, #5
  401130:	4826      	ldr	r0, [pc, #152]	; (4011cc <printDetails+0xa0>)
  401132:	4d27      	ldr	r5, [pc, #156]	; (4011d0 <printDetails+0xa4>)
  401134:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  401136:	4b27      	ldr	r3, [pc, #156]	; (4011d4 <printDetails+0xa8>)
  401138:	4798      	blx	r3
  40113a:	4b27      	ldr	r3, [pc, #156]	; (4011d8 <printDetails+0xac>)
  40113c:	4798      	blx	r3
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  40113e:	2202      	movs	r2, #2
  401140:	210a      	movs	r1, #10
  401142:	4826      	ldr	r0, [pc, #152]	; (4011dc <printDetails+0xb0>)
  401144:	4e26      	ldr	r6, [pc, #152]	; (4011e0 <printDetails+0xb4>)
  401146:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  401148:	2204      	movs	r2, #4
  40114a:	210c      	movs	r1, #12
  40114c:	4825      	ldr	r0, [pc, #148]	; (4011e4 <printDetails+0xb8>)
  40114e:	4c26      	ldr	r4, [pc, #152]	; (4011e8 <printDetails+0xbc>)
  401150:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  401152:	2201      	movs	r2, #1
  401154:	2110      	movs	r1, #16
  401156:	4825      	ldr	r0, [pc, #148]	; (4011ec <printDetails+0xc0>)
  401158:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  40115a:	2206      	movs	r2, #6
  40115c:	2111      	movs	r1, #17
  40115e:	4824      	ldr	r0, [pc, #144]	; (4011f0 <printDetails+0xc4>)
  401160:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  401162:	2201      	movs	r2, #1
  401164:	2103      	movs	r1, #3
  401166:	4823      	ldr	r0, [pc, #140]	; (4011f4 <printDetails+0xc8>)
  401168:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  40116a:	2201      	movs	r2, #1
  40116c:	4611      	mov	r1, r2
  40116e:	4822      	ldr	r0, [pc, #136]	; (4011f8 <printDetails+0xcc>)
  401170:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  401172:	2201      	movs	r2, #1
  401174:	2102      	movs	r1, #2
  401176:	4821      	ldr	r0, [pc, #132]	; (4011fc <printDetails+0xd0>)
  401178:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  40117a:	2201      	movs	r2, #1
  40117c:	2105      	movs	r1, #5
  40117e:	4820      	ldr	r0, [pc, #128]	; (401200 <printDetails+0xd4>)
  401180:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  401182:	2201      	movs	r2, #1
  401184:	2106      	movs	r1, #6
  401186:	481f      	ldr	r0, [pc, #124]	; (401204 <printDetails+0xd8>)
  401188:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  40118a:	2201      	movs	r2, #1
  40118c:	2100      	movs	r1, #0
  40118e:	481e      	ldr	r0, [pc, #120]	; (401208 <printDetails+0xdc>)
  401190:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  401192:	2202      	movs	r2, #2
  401194:	211c      	movs	r1, #28
  401196:	481d      	ldr	r0, [pc, #116]	; (40120c <printDetails+0xe0>)
  401198:	47a0      	blx	r4
	 
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  40119a:	4b1d      	ldr	r3, [pc, #116]	; (401210 <printDetails+0xe4>)
  40119c:	4798      	blx	r3
  40119e:	4b1d      	ldr	r3, [pc, #116]	; (401214 <printDetails+0xe8>)
  4011a0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011a4:	481c      	ldr	r0, [pc, #112]	; (401218 <printDetails+0xec>)
  4011a6:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  4011a8:	491c      	ldr	r1, [pc, #112]	; (40121c <printDetails+0xf0>)
  4011aa:	481d      	ldr	r0, [pc, #116]	; (401220 <printDetails+0xf4>)
  4011ac:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  4011ae:	4b1d      	ldr	r3, [pc, #116]	; (401224 <printDetails+0xf8>)
  4011b0:	4798      	blx	r3
  4011b2:	4b1d      	ldr	r3, [pc, #116]	; (401228 <printDetails+0xfc>)
  4011b4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011b8:	481c      	ldr	r0, [pc, #112]	; (40122c <printDetails+0x100>)
  4011ba:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  4011bc:	4b1c      	ldr	r3, [pc, #112]	; (401230 <printDetails+0x104>)
  4011be:	4798      	blx	r3
  4011c0:	4b1c      	ldr	r3, [pc, #112]	; (401234 <printDetails+0x108>)
  4011c2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011c6:	481c      	ldr	r0, [pc, #112]	; (401238 <printDetails+0x10c>)
  4011c8:	47a8      	blx	r5
  4011ca:	bd70      	pop	{r4, r5, r6, pc}
  4011cc:	004049ac 	.word	0x004049ac
  4011d0:	00401be9 	.word	0x00401be9
  4011d4:	00400f4d 	.word	0x00400f4d
  4011d8:	0040100d 	.word	0x0040100d
  4011dc:	004049c4 	.word	0x004049c4
  4011e0:	00401041 	.word	0x00401041
  4011e4:	004049d4 	.word	0x004049d4
  4011e8:	004010d9 	.word	0x004010d9
  4011ec:	004049e4 	.word	0x004049e4
  4011f0:	004049f0 	.word	0x004049f0
  4011f4:	004049fc 	.word	0x004049fc
  4011f8:	00404a08 	.word	0x00404a08
  4011fc:	00404a10 	.word	0x00404a10
  401200:	00404a1c 	.word	0x00404a1c
  401204:	00404a24 	.word	0x00404a24
  401208:	00404a30 	.word	0x00404a30
  40120c:	00404a38 	.word	0x00404a38
  401210:	00400fb1 	.word	0x00400fb1
  401214:	00404b34 	.word	0x00404b34
  401218:	00404a48 	.word	0x00404a48
  40121c:	00404b40 	.word	0x00404b40
  401220:	00404a5c 	.word	0x00404a5c
  401224:	00400fcd 	.word	0x00400fcd
  401228:	00404b10 	.word	0x00404b10
  40122c:	00404a6c 	.word	0x00404a6c
  401230:	00400ff9 	.word	0x00400ff9
  401234:	00404b6c 	.word	0x00404b6c
  401238:	00404a80 	.word	0x00404a80

0040123c <nRF24_writePayload>:
}
#endif

uint8_t nRF24_writePayload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
  40123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40123e:	af00      	add	r7, sp, #0
  401240:	4606      	mov	r6, r0
  401242:	460c      	mov	r4, r1
	uint8_t s_buff[data_len + 1];
  401244:	3101      	adds	r1, #1
  401246:	f104 0308 	add.w	r3, r4, #8
  40124a:	f023 0307 	bic.w	r3, r3, #7
  40124e:	ebad 0d03 	sub.w	sp, sp, r3
  401252:	466d      	mov	r5, sp
	uint8_t* current = (uint8_t*) buf;
	
	s_buff[0] = writeType;
  401254:	f88d 2000 	strb.w	r2, [sp]
	for (uint8_t i = 1; i< data_len+1; i++)
  401258:	2901      	cmp	r1, #1
  40125a:	dd0a      	ble.n	401272 <nRF24_writePayload+0x36>
  40125c:	2201      	movs	r2, #1
  40125e:	4613      	mov	r3, r2
	{
		s_buff[i] = current[i-1];
  401260:	18f0      	adds	r0, r6, r3
  401262:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  401266:	54a8      	strb	r0, [r5, r2]
	for (uint8_t i = 1; i< data_len+1; i++)
  401268:	3301      	adds	r3, #1
  40126a:	b2db      	uxtb	r3, r3
  40126c:	461a      	mov	r2, r3
  40126e:	4299      	cmp	r1, r3
  401270:	dcf6      	bgt.n	401260 <nRF24_writePayload+0x24>
	}
	
	spi_master_transfer(s_buff, sizeof(s_buff));
  401272:	4628      	mov	r0, r5
  401274:	4b08      	ldr	r3, [pc, #32]	; (401298 <nRF24_writePayload+0x5c>)
  401276:	4798      	blx	r3
	
	for (uint8_t i = 0; i< data_len; i++)
  401278:	b154      	cbz	r4, 401290 <nRF24_writePayload+0x54>
  40127a:	1c6a      	adds	r2, r5, #1
  40127c:	1e73      	subs	r3, r6, #1
  40127e:	3c01      	subs	r4, #1
  401280:	fa56 f684 	uxtab	r6, r6, r4
	{
		current[i] = s_buff[i+1];
  401284:	f812 1b01 	ldrb.w	r1, [r2], #1
  401288:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (uint8_t i = 0; i< data_len; i++)
  40128c:	42b3      	cmp	r3, r6
  40128e:	d1f9      	bne.n	401284 <nRF24_writePayload+0x48>
	}
	
	return s_buff[0];
}
  401290:	7828      	ldrb	r0, [r5, #0]
  401292:	46bd      	mov	sp, r7
  401294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401296:	bf00      	nop
  401298:	00400c15 	.word	0x00400c15

0040129c <startFastWrite>:

void startFastWrite(const void* buf, uint8_t len, const bool multicast)
{
  40129c:	b508      	push	{r3, lr}
	nRF24_writePayload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD); // ?: operator a ? b : c // if a, b else c
  40129e:	2a00      	cmp	r2, #0
  4012a0:	bf14      	ite	ne
  4012a2:	22b0      	movne	r2, #176	; 0xb0
  4012a4:	22a0      	moveq	r2, #160	; 0xa0
  4012a6:	4b03      	ldr	r3, [pc, #12]	; (4012b4 <startFastWrite+0x18>)
  4012a8:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012ae:	4b02      	ldr	r3, [pc, #8]	; (4012b8 <startFastWrite+0x1c>)
  4012b0:	631a      	str	r2, [r3, #48]	; 0x30
  4012b2:	bd08      	pop	{r3, pc}
  4012b4:	0040123d 	.word	0x0040123d
  4012b8:	400e1200 	.word	0x400e1200

004012bc <nRFwrite>:
	ioport_set_pin_level(CE, 1);

}

bool nRFwrite(const void* buf, uint8_t len, const bool multicast)
{
  4012bc:	b510      	push	{r4, lr}
	startFastWrite(buf, len, multicast);
  4012be:	4b0c      	ldr	r3, [pc, #48]	; (4012f0 <nRFwrite+0x34>)
  4012c0:	4798      	blx	r3
	
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))));
  4012c2:	4c0c      	ldr	r4, [pc, #48]	; (4012f4 <nRFwrite+0x38>)
  4012c4:	47a0      	blx	r4
  4012c6:	f010 0f30 	tst.w	r0, #48	; 0x30
  4012ca:	d0fb      	beq.n	4012c4 <nRFwrite+0x8>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012d0:	4b09      	ldr	r3, [pc, #36]	; (4012f8 <nRFwrite+0x3c>)
  4012d2:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	uint8_t status = nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4012d4:	2170      	movs	r1, #112	; 0x70
  4012d6:	2007      	movs	r0, #7
  4012d8:	4b08      	ldr	r3, [pc, #32]	; (4012fc <nRFwrite+0x40>)
  4012da:	4798      	blx	r3
	
	if(status & (1<<MAX_RT)){
  4012dc:	f010 0f10 	tst.w	r0, #16
  4012e0:	d101      	bne.n	4012e6 <nRFwrite+0x2a>
		nRF24_FlushTx();
		return 0;
	}
	return 1;
  4012e2:	2001      	movs	r0, #1
}
  4012e4:	bd10      	pop	{r4, pc}
		nRF24_FlushTx();
  4012e6:	4b06      	ldr	r3, [pc, #24]	; (401300 <nRFwrite+0x44>)
  4012e8:	4798      	blx	r3
		return 0;
  4012ea:	2000      	movs	r0, #0
  4012ec:	bd10      	pop	{r4, pc}
  4012ee:	bf00      	nop
  4012f0:	0040129d 	.word	0x0040129d
  4012f4:	00400f4d 	.word	0x00400f4d
  4012f8:	400e1200 	.word	0x400e1200
  4012fc:	00400e95 	.word	0x00400e95
  401300:	00400f2d 	.word	0x00400f2d

00401304 <nRF24_setAddressWidth>:
	
	return s_buff[0];
}

void nRF24_setAddressWidth(uint8_t width)
{
  401304:	b510      	push	{r4, lr}
	if (width -= 2){
  401306:	3802      	subs	r0, #2
  401308:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  40130c:	d107      	bne.n	40131e <nRF24_setAddressWidth+0x1a>
		nRF24_writeRegister(SETUP_AW, width % 4);
		addr_width = (width % 4) + 2;
		} else {
		nRF24_writeRegister(SETUP_AW, 0);
  40130e:	2100      	movs	r1, #0
  401310:	2003      	movs	r0, #3
  401312:	4b08      	ldr	r3, [pc, #32]	; (401334 <nRF24_setAddressWidth+0x30>)
  401314:	4798      	blx	r3
		addr_width = 2;
  401316:	2202      	movs	r2, #2
  401318:	4b07      	ldr	r3, [pc, #28]	; (401338 <nRF24_setAddressWidth+0x34>)
  40131a:	701a      	strb	r2, [r3, #0]
  40131c:	bd10      	pop	{r4, pc}
		nRF24_writeRegister(SETUP_AW, width % 4);
  40131e:	f000 0403 	and.w	r4, r0, #3
  401322:	4621      	mov	r1, r4
  401324:	2003      	movs	r0, #3
  401326:	4b03      	ldr	r3, [pc, #12]	; (401334 <nRF24_setAddressWidth+0x30>)
  401328:	4798      	blx	r3
		addr_width = (width % 4) + 2;
  40132a:	1ca0      	adds	r0, r4, #2
  40132c:	4b02      	ldr	r3, [pc, #8]	; (401338 <nRF24_setAddressWidth+0x34>)
  40132e:	7018      	strb	r0, [r3, #0]
  401330:	bd10      	pop	{r4, pc}
  401332:	bf00      	nop
  401334:	00400e95 	.word	0x00400e95
  401338:	20400a98 	.word	0x20400a98

0040133c <nRF24_setCRCLength>:
{
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
}

void nRF24_setCRCLength(rf24_crclength_e length)
{
  40133c:	b510      	push	{r4, lr}
  40133e:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  401340:	2000      	movs	r0, #0
  401342:	4b07      	ldr	r3, [pc, #28]	; (401360 <nRF24_setCRCLength+0x24>)
  401344:	4798      	blx	r3
  401346:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	if (length == RF24_CRC_DISABLED){
  40134a:	b12c      	cbz	r4, 401358 <nRF24_setCRCLength+0x1c>
		// do nothing we turned it off above
	} 
	else if (length == RF24_CRC_8){
  40134c:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  40134e:	bf0c      	ite	eq
  401350:	f041 0108 	orreq.w	r1, r1, #8
	} 
	else //CRC 16 bit
	{
		config |= (1<<EN_CRC);
		config |= (1<<CRCO);
  401354:	f041 010c 	orrne.w	r1, r1, #12
	}
	nRF24_writeRegister(NRF_CONFIG, config);
  401358:	2000      	movs	r0, #0
  40135a:	4b02      	ldr	r3, [pc, #8]	; (401364 <nRF24_setCRCLength+0x28>)
  40135c:	4798      	blx	r3
  40135e:	bd10      	pop	{r4, pc}
  401360:	00400e25 	.word	0x00400e25
  401364:	00400e95 	.word	0x00400e95

00401368 <toggle_features>:
}

void toggle_features(void)
{
  401368:	b500      	push	{lr}
  40136a:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  40136c:	4b05      	ldr	r3, [pc, #20]	; (401384 <toggle_features+0x1c>)
  40136e:	881b      	ldrh	r3, [r3, #0]
  401370:	a802      	add	r0, sp, #8
  401372:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  401376:	2102      	movs	r1, #2
  401378:	4b03      	ldr	r3, [pc, #12]	; (401388 <toggle_features+0x20>)
  40137a:	4798      	blx	r3
}
  40137c:	b003      	add	sp, #12
  40137e:	f85d fb04 	ldr.w	pc, [sp], #4
  401382:	bf00      	nop
  401384:	004048b4 	.word	0x004048b4
  401388:	00400c15 	.word	0x00400c15

0040138c <nRF24_setChannel>:

void nRF24_setChannel(uint8_t channel)
{
  40138c:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  40138e:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  401390:	bf8c      	ite	hi
  401392:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  401394:	4601      	movls	r1, r0
  401396:	2005      	movs	r0, #5
  401398:	4b01      	ldr	r3, [pc, #4]	; (4013a0 <nRF24_setChannel+0x14>)
  40139a:	4798      	blx	r3
  40139c:	bd08      	pop	{r3, pc}
  40139e:	bf00      	nop
  4013a0:	00400e95 	.word	0x00400e95

004013a4 <nRF24_powerUp>:
}

void nRF24_powerUp(void)
{
  4013a4:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  4013a6:	2000      	movs	r0, #0
  4013a8:	4b07      	ldr	r3, [pc, #28]	; (4013c8 <nRF24_powerUp+0x24>)
  4013aa:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  4013ac:	f010 0f02 	tst.w	r0, #2
  4013b0:	d000      	beq.n	4013b4 <nRF24_powerUp+0x10>
  4013b2:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  4013b4:	f040 0102 	orr.w	r1, r0, #2
  4013b8:	b2c9      	uxtb	r1, r1
  4013ba:	2000      	movs	r0, #0
  4013bc:	4b03      	ldr	r3, [pc, #12]	; (4013cc <nRF24_powerUp+0x28>)
  4013be:	4798      	blx	r3
		delay_ms(5);
  4013c0:	4803      	ldr	r0, [pc, #12]	; (4013d0 <nRF24_powerUp+0x2c>)
  4013c2:	4b04      	ldr	r3, [pc, #16]	; (4013d4 <nRF24_powerUp+0x30>)
  4013c4:	4798      	blx	r3
	}
}
  4013c6:	e7f4      	b.n	4013b2 <nRF24_powerUp+0xe>
  4013c8:	00400e25 	.word	0x00400e25
  4013cc:	00400e95 	.word	0x00400e95
  4013d0:	0003dbc2 	.word	0x0003dbc2
  4013d4:	20400001 	.word	0x20400001

004013d8 <nRF24_stopListening>:
		nRF24_FlushTx();
	}
}

void nRF24_stopListening(void)
{
  4013d8:	b538      	push	{r3, r4, r5, lr}
  4013da:	f44f 7200 	mov.w	r2, #512	; 0x200
  4013de:	4b21      	ldr	r3, [pc, #132]	; (401464 <nRF24_stopListening+0x8c>)
  4013e0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	
	delay_us(txDelay);
  4013e2:	4b21      	ldr	r3, [pc, #132]	; (401468 <nRF24_stopListening+0x90>)
  4013e4:	6819      	ldr	r1, [r3, #0]
  4013e6:	2900      	cmp	r1, #0
  4013e8:	d034      	beq.n	401454 <nRF24_stopListening+0x7c>
  4013ea:	4a20      	ldr	r2, [pc, #128]	; (40146c <nRF24_stopListening+0x94>)
  4013ec:	2300      	movs	r3, #0
  4013ee:	4c20      	ldr	r4, [pc, #128]	; (401470 <nRF24_stopListening+0x98>)
  4013f0:	2500      	movs	r5, #0
  4013f2:	4820      	ldr	r0, [pc, #128]	; (401474 <nRF24_stopListening+0x9c>)
  4013f4:	fbe0 4501 	umlal	r4, r5, r0, r1
  4013f8:	4620      	mov	r0, r4
  4013fa:	4629      	mov	r1, r5
  4013fc:	4c1e      	ldr	r4, [pc, #120]	; (401478 <nRF24_stopListening+0xa0>)
  4013fe:	47a0      	blx	r4
  401400:	4b1e      	ldr	r3, [pc, #120]	; (40147c <nRF24_stopListening+0xa4>)
  401402:	4798      	blx	r3
	if (nRF24_readRegister(FEATURE) & 1<<(EN_ACK_PAY))
  401404:	201d      	movs	r0, #29
  401406:	4b1e      	ldr	r3, [pc, #120]	; (401480 <nRF24_stopListening+0xa8>)
  401408:	4798      	blx	r3
  40140a:	f010 0f02 	tst.w	r0, #2
  40140e:	d011      	beq.n	401434 <nRF24_stopListening+0x5c>
	{
		delay_us(txDelay);
  401410:	4b15      	ldr	r3, [pc, #84]	; (401468 <nRF24_stopListening+0x90>)
  401412:	6819      	ldr	r1, [r3, #0]
  401414:	b311      	cbz	r1, 40145c <nRF24_stopListening+0x84>
  401416:	4a15      	ldr	r2, [pc, #84]	; (40146c <nRF24_stopListening+0x94>)
  401418:	2300      	movs	r3, #0
  40141a:	4c15      	ldr	r4, [pc, #84]	; (401470 <nRF24_stopListening+0x98>)
  40141c:	2500      	movs	r5, #0
  40141e:	4815      	ldr	r0, [pc, #84]	; (401474 <nRF24_stopListening+0x9c>)
  401420:	fbe0 4501 	umlal	r4, r5, r0, r1
  401424:	4620      	mov	r0, r4
  401426:	4629      	mov	r1, r5
  401428:	4c13      	ldr	r4, [pc, #76]	; (401478 <nRF24_stopListening+0xa0>)
  40142a:	47a0      	blx	r4
  40142c:	4b13      	ldr	r3, [pc, #76]	; (40147c <nRF24_stopListening+0xa4>)
  40142e:	4798      	blx	r3
		nRF24_FlushTx();
  401430:	4b14      	ldr	r3, [pc, #80]	; (401484 <nRF24_stopListening+0xac>)
  401432:	4798      	blx	r3
	}
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  401434:	2000      	movs	r0, #0
  401436:	4d12      	ldr	r5, [pc, #72]	; (401480 <nRF24_stopListening+0xa8>)
  401438:	47a8      	blx	r5
  40143a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  40143e:	2000      	movs	r0, #0
  401440:	4c11      	ldr	r4, [pc, #68]	; (401488 <nRF24_stopListening+0xb0>)
  401442:	47a0      	blx	r4
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
  401444:	2002      	movs	r0, #2
  401446:	47a8      	blx	r5
  401448:	f040 0101 	orr.w	r1, r0, #1
  40144c:	b2c9      	uxtb	r1, r1
  40144e:	2002      	movs	r0, #2
  401450:	47a0      	blx	r4
  401452:	bd38      	pop	{r3, r4, r5, pc}
	delay_us(txDelay);
  401454:	2033      	movs	r0, #51	; 0x33
  401456:	4b09      	ldr	r3, [pc, #36]	; (40147c <nRF24_stopListening+0xa4>)
  401458:	4798      	blx	r3
  40145a:	e7d3      	b.n	401404 <nRF24_stopListening+0x2c>
		delay_us(txDelay);
  40145c:	2033      	movs	r0, #51	; 0x33
  40145e:	4b07      	ldr	r3, [pc, #28]	; (40147c <nRF24_stopListening+0xa4>)
  401460:	4798      	blx	r3
  401462:	e7e5      	b.n	401430 <nRF24_stopListening+0x58>
  401464:	400e1200 	.word	0x400e1200
  401468:	20400ad8 	.word	0x20400ad8
  40146c:	005a83e0 	.word	0x005a83e0
  401470:	005a83df 	.word	0x005a83df
  401474:	11e1a300 	.word	0x11e1a300
  401478:	00401889 	.word	0x00401889
  40147c:	20400001 	.word	0x20400001
  401480:	00400e25 	.word	0x00400e25
  401484:	00400f2d 	.word	0x00400f2d
  401488:	00400e95 	.word	0x00400e95

0040148c <nRF24_begin>:
}

bool nRF24_begin(void)
{
  40148c:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40148e:	4b1a      	ldr	r3, [pc, #104]	; (4014f8 <nRF24_begin+0x6c>)
  401490:	f44f 7200 	mov.w	r2, #512	; 0x200
  401494:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401496:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40149a:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  40149c:	210c      	movs	r1, #12
  40149e:	2000      	movs	r0, #0
  4014a0:	4c16      	ldr	r4, [pc, #88]	; (4014fc <nRF24_begin+0x70>)
  4014a2:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  4014a4:	215f      	movs	r1, #95	; 0x5f
  4014a6:	2004      	movs	r0, #4
  4014a8:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  4014aa:	2000      	movs	r0, #0
  4014ac:	4b14      	ldr	r3, [pc, #80]	; (401500 <nRF24_begin+0x74>)
  4014ae:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  4014b0:	2002      	movs	r0, #2
  4014b2:	4b14      	ldr	r3, [pc, #80]	; (401504 <nRF24_begin+0x78>)
  4014b4:	4798      	blx	r3
	toggle_features();
  4014b6:	4b14      	ldr	r3, [pc, #80]	; (401508 <nRF24_begin+0x7c>)
  4014b8:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4014ba:	2170      	movs	r1, #112	; 0x70
  4014bc:	2007      	movs	r0, #7
  4014be:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  4014c0:	204c      	movs	r0, #76	; 0x4c
  4014c2:	4b12      	ldr	r3, [pc, #72]	; (40150c <nRF24_begin+0x80>)
  4014c4:	4798      	blx	r3
	nRF24_setAddressWidth(ADDR_5bytes);
  4014c6:	2005      	movs	r0, #5
  4014c8:	4b11      	ldr	r3, [pc, #68]	; (401510 <nRF24_begin+0x84>)
  4014ca:	4798      	blx	r3
	
	nRF24_FlushRx();
  4014cc:	4b11      	ldr	r3, [pc, #68]	; (401514 <nRF24_begin+0x88>)
  4014ce:	4798      	blx	r3
	nRF24_FlushTx();
  4014d0:	4b11      	ldr	r3, [pc, #68]	; (401518 <nRF24_begin+0x8c>)
  4014d2:	4798      	blx	r3
	
	nRF24_powerUp();
  4014d4:	4b11      	ldr	r3, [pc, #68]	; (40151c <nRF24_begin+0x90>)
  4014d6:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4014d8:	2000      	movs	r0, #0
  4014da:	4d11      	ldr	r5, [pc, #68]	; (401520 <nRF24_begin+0x94>)
  4014dc:	47a8      	blx	r5
  4014de:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4014e2:	2000      	movs	r0, #0
  4014e4:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  4014e6:	2006      	movs	r0, #6
  4014e8:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  4014ea:	3801      	subs	r0, #1
  4014ec:	b2c0      	uxtb	r0, r0
}
  4014ee:	28fd      	cmp	r0, #253	; 0xfd
  4014f0:	bf8c      	ite	hi
  4014f2:	2000      	movhi	r0, #0
  4014f4:	2001      	movls	r0, #1
  4014f6:	bd38      	pop	{r3, r4, r5, pc}
  4014f8:	400e1200 	.word	0x400e1200
  4014fc:	00400e95 	.word	0x00400e95
  401500:	00400f6d 	.word	0x00400f6d
  401504:	0040133d 	.word	0x0040133d
  401508:	00401369 	.word	0x00401369
  40150c:	0040138d 	.word	0x0040138d
  401510:	00401305 	.word	0x00401305
  401514:	00400f0d 	.word	0x00400f0d
  401518:	00400f2d 	.word	0x00400f2d
  40151c:	004013a5 	.word	0x004013a5
  401520:	00400e25 	.word	0x00400e25

00401524 <nRF24_openWritingPipe>:

void nRF24_openWritingPipe(uint64_t address)
{
  401524:	b570      	push	{r4, r5, r6, lr}
  401526:	b082      	sub	sp, #8
  401528:	ac02      	add	r4, sp, #8
  40152a:	e964 0102 	strd	r0, r1, [r4, #-8]!
	nRF_writeRegister(RX_ADDR_P0, (uint8_t *)(&address), addr_width);
  40152e:	4e08      	ldr	r6, [pc, #32]	; (401550 <nRF24_openWritingPipe+0x2c>)
  401530:	7832      	ldrb	r2, [r6, #0]
  401532:	4621      	mov	r1, r4
  401534:	200a      	movs	r0, #10
  401536:	4d07      	ldr	r5, [pc, #28]	; (401554 <nRF24_openWritingPipe+0x30>)
  401538:	47a8      	blx	r5
	nRF_writeRegister(TX_ADDR, (uint8_t *)(&address), addr_width);
  40153a:	7832      	ldrb	r2, [r6, #0]
  40153c:	4621      	mov	r1, r4
  40153e:	2010      	movs	r0, #16
  401540:	47a8      	blx	r5
	
	nRF24_writeRegister(RX_PW_P0, payload_size);
  401542:	4b05      	ldr	r3, [pc, #20]	; (401558 <nRF24_openWritingPipe+0x34>)
  401544:	7819      	ldrb	r1, [r3, #0]
  401546:	2011      	movs	r0, #17
  401548:	4b04      	ldr	r3, [pc, #16]	; (40155c <nRF24_openWritingPipe+0x38>)
  40154a:	4798      	blx	r3
}
  40154c:	b002      	add	sp, #8
  40154e:	bd70      	pop	{r4, r5, r6, pc}
  401550:	20400a98 	.word	0x20400a98
  401554:	00400ec1 	.word	0x00400ec1
  401558:	20400010 	.word	0x20400010
  40155c:	00400e95 	.word	0x00400e95

00401560 <nRF24_openReadingPipe>:
{
	return payload_size;
}

void nRF24_openReadingPipe(uint8_t pipe, uint64_t address)
{	
  401560:	b510      	push	{r4, lr}
  401562:	b082      	sub	sp, #8
  401564:	e9cd 2300 	strd	r2, r3, [sp]
	if (pipe == 0){
  401568:	4604      	mov	r4, r0
  40156a:	b1e8      	cbz	r0, 4015a8 <nRF24_openReadingPipe+0x48>
		memcpy(pipe0_reading_address, &address, addr_width);
	}
	if (pipe <= 5){
  40156c:	2805      	cmp	r0, #5
  40156e:	d80d      	bhi.n	40158c <nRF24_openReadingPipe+0x2c>
		if (pipe < 2){
  401570:	2801      	cmp	r0, #1
  401572:	d91f      	bls.n	4015b4 <nRF24_openReadingPipe+0x54>
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
		} else {
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), 1);
  401574:	2201      	movs	r2, #1
  401576:	4669      	mov	r1, sp
  401578:	4b12      	ldr	r3, [pc, #72]	; (4015c4 <nRF24_openReadingPipe+0x64>)
  40157a:	5c18      	ldrb	r0, [r3, r0]
  40157c:	4b12      	ldr	r3, [pc, #72]	; (4015c8 <nRF24_openReadingPipe+0x68>)
  40157e:	4798      	blx	r3
		}
		nRF24_writeRegister(pipe_size_s[pipe], payload_size);
  401580:	4b12      	ldr	r3, [pc, #72]	; (4015cc <nRF24_openReadingPipe+0x6c>)
  401582:	7819      	ldrb	r1, [r3, #0]
  401584:	4b12      	ldr	r3, [pc, #72]	; (4015d0 <nRF24_openReadingPipe+0x70>)
  401586:	5d18      	ldrb	r0, [r3, r4]
  401588:	4b12      	ldr	r3, [pc, #72]	; (4015d4 <nRF24_openReadingPipe+0x74>)
  40158a:	4798      	blx	r3
	}
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1 << pipe_enable_s[pipe]));
  40158c:	2002      	movs	r0, #2
  40158e:	4b12      	ldr	r3, [pc, #72]	; (4015d8 <nRF24_openReadingPipe+0x78>)
  401590:	4798      	blx	r3
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <nRF24_openReadingPipe+0x7c>)
  401594:	5d1b      	ldrb	r3, [r3, r4]
  401596:	2101      	movs	r1, #1
  401598:	4099      	lsls	r1, r3
  40159a:	4301      	orrs	r1, r0
  40159c:	b2c9      	uxtb	r1, r1
  40159e:	2002      	movs	r0, #2
  4015a0:	4b0c      	ldr	r3, [pc, #48]	; (4015d4 <nRF24_openReadingPipe+0x74>)
  4015a2:	4798      	blx	r3
}
  4015a4:	b002      	add	sp, #8
  4015a6:	bd10      	pop	{r4, pc}
		memcpy(pipe0_reading_address, &address, addr_width);
  4015a8:	4b0d      	ldr	r3, [pc, #52]	; (4015e0 <nRF24_openReadingPipe+0x80>)
  4015aa:	781a      	ldrb	r2, [r3, #0]
  4015ac:	4669      	mov	r1, sp
  4015ae:	480d      	ldr	r0, [pc, #52]	; (4015e4 <nRF24_openReadingPipe+0x84>)
  4015b0:	4b0d      	ldr	r3, [pc, #52]	; (4015e8 <nRF24_openReadingPipe+0x88>)
  4015b2:	4798      	blx	r3
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
  4015b4:	4b0a      	ldr	r3, [pc, #40]	; (4015e0 <nRF24_openReadingPipe+0x80>)
  4015b6:	781a      	ldrb	r2, [r3, #0]
  4015b8:	4669      	mov	r1, sp
  4015ba:	4b02      	ldr	r3, [pc, #8]	; (4015c4 <nRF24_openReadingPipe+0x64>)
  4015bc:	5d18      	ldrb	r0, [r3, r4]
  4015be:	4b02      	ldr	r3, [pc, #8]	; (4015c8 <nRF24_openReadingPipe+0x68>)
  4015c0:	4798      	blx	r3
  4015c2:	e7dd      	b.n	401580 <nRF24_openReadingPipe+0x20>
  4015c4:	0040499c 	.word	0x0040499c
  4015c8:	00400ec1 	.word	0x00400ec1
  4015cc:	20400010 	.word	0x20400010
  4015d0:	004049a4 	.word	0x004049a4
  4015d4:	00400e95 	.word	0x00400e95
  4015d8:	00400e25 	.word	0x00400e25
  4015dc:	00404994 	.word	0x00404994
  4015e0:	20400a98 	.word	0x20400a98
  4015e4:	20400ab8 	.word	0x20400ab8
  4015e8:	00401c11 	.word	0x00401c11

004015ec <nRF24_setPALevel>:
	}
	return 0;
}

void nRF24_setPALevel(uint8_t level)
{
  4015ec:	b510      	push	{r4, lr}
  4015ee:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  4015f0:	2006      	movs	r0, #6
  4015f2:	4b08      	ldr	r3, [pc, #32]	; (401614 <nRF24_setPALevel+0x28>)
  4015f4:	4798      	blx	r3
  4015f6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	
	
	if (level > 3) {
  4015fa:	2c03      	cmp	r4, #3
  4015fc:	d808      	bhi.n	401610 <nRF24_setPALevel+0x24>
		level = (RF_PA_MAX << 1) + 1;
	} else {
		level = (level << 1) + 1;
  4015fe:	0064      	lsls	r4, r4, #1
  401600:	3401      	adds	r4, #1
  401602:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	}
	nRF24_writeRegister(RF_SETUP, setup |= level);
  401606:	4321      	orrs	r1, r4
  401608:	2006      	movs	r0, #6
  40160a:	4b03      	ldr	r3, [pc, #12]	; (401618 <nRF24_setPALevel+0x2c>)
  40160c:	4798      	blx	r3
  40160e:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  401610:	2407      	movs	r4, #7
  401612:	e7f8      	b.n	401606 <nRF24_setPALevel+0x1a>
  401614:	00400e25 	.word	0x00400e25
  401618:	00400e95 	.word	0x00400e95

0040161c <nRF24_write>:
	
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<MAX_RT) | (1<<TX_DS));	
}

bool nRF24_write(const void* buf, uint8_t len)
{
  40161c:	b508      	push	{r3, lr}
	return nRFwrite(buf, len, 0);
  40161e:	2200      	movs	r2, #0
  401620:	4b01      	ldr	r3, [pc, #4]	; (401628 <nRF24_write+0xc>)
  401622:	4798      	blx	r3
}
  401624:	bd08      	pop	{r3, pc}
  401626:	bf00      	nop
  401628:	004012bd 	.word	0x004012bd
  40162c:	00000000 	.word	0x00000000

00401630 <main>:

int main (void)
{
  401630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401634:	b086      	sub	sp, #24
	
	/* Initialize the SAM system. */
	sysclk_init();
  401636:	4b68      	ldr	r3, [pc, #416]	; (4017d8 <main+0x1a8>)
  401638:	4798      	blx	r3
	board_init();
  40163a:	4b68      	ldr	r3, [pc, #416]	; (4017dc <main+0x1ac>)
  40163c:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40163e:	4c68      	ldr	r4, [pc, #416]	; (4017e0 <main+0x1b0>)
  401640:	4b68      	ldr	r3, [pc, #416]	; (4017e4 <main+0x1b4>)
  401642:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401644:	4a68      	ldr	r2, [pc, #416]	; (4017e8 <main+0x1b8>)
  401646:	4b69      	ldr	r3, [pc, #420]	; (4017ec <main+0x1bc>)
  401648:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40164a:	4a69      	ldr	r2, [pc, #420]	; (4017f0 <main+0x1c0>)
  40164c:	4b69      	ldr	r3, [pc, #420]	; (4017f4 <main+0x1c4>)
  40164e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401650:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401654:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  401656:	23c0      	movs	r3, #192	; 0xc0
  401658:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40165e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401660:	2500      	movs	r5, #0
  401662:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401664:	9504      	str	r5, [sp, #16]
  401666:	200e      	movs	r0, #14
  401668:	4b63      	ldr	r3, [pc, #396]	; (4017f8 <main+0x1c8>)
  40166a:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40166c:	4a63      	ldr	r2, [pc, #396]	; (4017fc <main+0x1cc>)
  40166e:	4669      	mov	r1, sp
  401670:	4620      	mov	r0, r4
  401672:	4b63      	ldr	r3, [pc, #396]	; (401800 <main+0x1d0>)
  401674:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401676:	4620      	mov	r0, r4
  401678:	4b62      	ldr	r3, [pc, #392]	; (401804 <main+0x1d4>)
  40167a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40167c:	4620      	mov	r0, r4
  40167e:	4b62      	ldr	r3, [pc, #392]	; (401808 <main+0x1d8>)
  401680:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401682:	4e62      	ldr	r6, [pc, #392]	; (40180c <main+0x1dc>)
  401684:	6833      	ldr	r3, [r6, #0]
  401686:	4629      	mov	r1, r5
  401688:	6898      	ldr	r0, [r3, #8]
  40168a:	4c61      	ldr	r4, [pc, #388]	; (401810 <main+0x1e0>)
  40168c:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40168e:	6833      	ldr	r3, [r6, #0]
  401690:	4629      	mov	r1, r5
  401692:	6858      	ldr	r0, [r3, #4]
  401694:	47a0      	blx	r4

	/* Initialize the console UART. */
	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  401696:	485f      	ldr	r0, [pc, #380]	; (401814 <main+0x1e4>)
  401698:	4c5f      	ldr	r4, [pc, #380]	; (401818 <main+0x1e8>)
  40169a:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40169c:	4b5f      	ldr	r3, [pc, #380]	; (40181c <main+0x1ec>)
  40169e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4016a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4016aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4016ae:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4016b2:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016b6:	601a      	str	r2, [r3, #0]
	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  4016b8:	4959      	ldr	r1, [pc, #356]	; (401820 <main+0x1f0>)
  4016ba:	485a      	ldr	r0, [pc, #360]	; (401824 <main+0x1f4>)
  4016bc:	4f5a      	ldr	r7, [pc, #360]	; (401828 <main+0x1f8>)
  4016be:	47b8      	blx	r7
	puts("-I- Initialize SPI as master\r");
  4016c0:	485a      	ldr	r0, [pc, #360]	; (40182c <main+0x1fc>)
  4016c2:	47a0      	blx	r4
	spi_enable_clock(SPI_MASTER_BASE);
  4016c4:	4c5a      	ldr	r4, [pc, #360]	; (401830 <main+0x200>)
  4016c6:	4620      	mov	r0, r4
  4016c8:	4b5a      	ldr	r3, [pc, #360]	; (401834 <main+0x204>)
  4016ca:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4016cc:	f04f 0a02 	mov.w	sl, #2
  4016d0:	f8c4 a000 	str.w	sl, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4016d4:	2380      	movs	r3, #128	; 0x80
  4016d6:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4016d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4016dc:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4016de:	6863      	ldr	r3, [r4, #4]
  4016e0:	f043 0301 	orr.w	r3, r3, #1
  4016e4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4016e6:	6863      	ldr	r3, [r4, #4]
  4016e8:	f043 0310 	orr.w	r3, r3, #16
  4016ec:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
  4016ee:	210d      	movs	r1, #13
  4016f0:	4620      	mov	r0, r4
  4016f2:	4b51      	ldr	r3, [pc, #324]	; (401838 <main+0x208>)
  4016f4:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4016f6:	462a      	mov	r2, r5
  4016f8:	2101      	movs	r1, #1
  4016fa:	4620      	mov	r0, r4
  4016fc:	4b4f      	ldr	r3, [pc, #316]	; (40183c <main+0x20c>)
  4016fe:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  401700:	2201      	movs	r2, #1
  401702:	4611      	mov	r1, r2
  401704:	4620      	mov	r0, r4
  401706:	4b4e      	ldr	r3, [pc, #312]	; (401840 <main+0x210>)
  401708:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL,
  40170a:	462a      	mov	r2, r5
  40170c:	2101      	movs	r1, #1
  40170e:	4620      	mov	r0, r4
  401710:	4b4c      	ldr	r3, [pc, #304]	; (401844 <main+0x214>)
  401712:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL,
  401714:	221e      	movs	r2, #30
  401716:	2101      	movs	r1, #1
  401718:	4620      	mov	r0, r4
  40171a:	4b4b      	ldr	r3, [pc, #300]	; (401848 <main+0x218>)
  40171c:	4798      	blx	r3
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
  40171e:	2304      	movs	r3, #4
  401720:	2210      	movs	r2, #16
  401722:	2101      	movs	r1, #1
  401724:	4620      	mov	r0, r4
  401726:	4e49      	ldr	r6, [pc, #292]	; (40184c <main+0x21c>)
  401728:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40172a:	2601      	movs	r6, #1
  40172c:	6026      	str	r6, [r4, #0]
	/* Insert application code here, after the board has been initialized. */
	
	spi_set_clock_configuration(gs_ul_spi_clock);
		
	nRF24_begin();
  40172e:	4b48      	ldr	r3, [pc, #288]	; (401850 <main+0x220>)
  401730:	4798      	blx	r3
	nRF24_openReadingPipe(1, listeningPipes[1]);
  401732:	f20f 098c 	addw	r9, pc, #140	; 0x8c
  401736:	e9d9 8900 	ldrd	r8, r9, [r9]
  40173a:	4642      	mov	r2, r8
  40173c:	464b      	mov	r3, r9
  40173e:	4630      	mov	r0, r6
  401740:	4c44      	ldr	r4, [pc, #272]	; (401854 <main+0x224>)
  401742:	47a0      	blx	r4
	nRF24_openReadingPipe(2, listeningPipes[2]);
  401744:	a320      	add	r3, pc, #128	; (adr r3, 4017c8 <main+0x198>)
  401746:	e9d3 2300 	ldrd	r2, r3, [r3]
  40174a:	4650      	mov	r0, sl
  40174c:	47a0      	blx	r4
	nRF24_openWritingPipe(listeningPipes[localAddr]);
  40174e:	a120      	add	r1, pc, #128	; (adr r1, 4017d0 <main+0x1a0>)
  401750:	e9d1 0100 	ldrd	r0, r1, [r1]
  401754:	4c40      	ldr	r4, [pc, #256]	; (401858 <main+0x228>)
  401756:	47a0      	blx	r4
	nRF24_setPALevel(RF_PA_MIN);
  401758:	4628      	mov	r0, r5
  40175a:	4b40      	ldr	r3, [pc, #256]	; (40185c <main+0x22c>)
  40175c:	4798      	blx	r3
	nRF24_stopListening();
  40175e:	4b40      	ldr	r3, [pc, #256]	; (401860 <main+0x230>)
  401760:	4798      	blx	r3

#ifdef _DEBUG	
	printDetails();
  401762:	4b40      	ldr	r3, [pc, #256]	; (401864 <main+0x234>)
  401764:	4798      	blx	r3
#endif
	
//	while(1)
//	{

		nRF24_openWritingPipe(listeningPipes[1]);
  401766:	4640      	mov	r0, r8
  401768:	4649      	mov	r1, r9
  40176a:	47a0      	blx	r4

		dataOut.command = 1;
  40176c:	4b3e      	ldr	r3, [pc, #248]	; (401868 <main+0x238>)
  40176e:	701e      	strb	r6, [r3, #0]
		dataOut.destAddr = listeningPipes[1];
  401770:	e9c3 8902 	strd	r8, r9, [r3, #8]
		dataOut.datavalue = 0;
  401774:	821d      	strh	r5, [r3, #16]
		
		#ifdef _DEBUG
			printf("commando %d send to %lld\r\n", dataOut.command, dataOut.destAddr);
  401776:	4642      	mov	r2, r8
  401778:	464b      	mov	r3, r9
  40177a:	4631      	mov	r1, r6
  40177c:	483b      	ldr	r0, [pc, #236]	; (40186c <main+0x23c>)
  40177e:	47b8      	blx	r7
  401780:	240a      	movs	r4, #10
		#endif
		
		for (int i = 0; i< 10; i++)
		{
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  401782:	4e39      	ldr	r6, [pc, #228]	; (401868 <main+0x238>)
  401784:	4d3a      	ldr	r5, [pc, #232]	; (401870 <main+0x240>)
			{
				printf("transmission failed \n\r");
			}
		#ifdef _DEBUG
			else{
				printf("transmission succes");
  401786:	4f3b      	ldr	r7, [pc, #236]	; (401874 <main+0x244>)
  401788:	e007      	b.n	40179a <main+0x16a>
  40178a:	4638      	mov	r0, r7
  40178c:	4b26      	ldr	r3, [pc, #152]	; (401828 <main+0x1f8>)
  40178e:	4798      	blx	r3
			}
		#endif
			delay_ms(10);
  401790:	4839      	ldr	r0, [pc, #228]	; (401878 <main+0x248>)
  401792:	4b3a      	ldr	r3, [pc, #232]	; (40187c <main+0x24c>)
  401794:	4798      	blx	r3
		for (int i = 0; i< 10; i++)
  401796:	3c01      	subs	r4, #1
  401798:	d008      	beq.n	4017ac <main+0x17c>
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  40179a:	2118      	movs	r1, #24
  40179c:	4630      	mov	r0, r6
  40179e:	47a8      	blx	r5
  4017a0:	2800      	cmp	r0, #0
  4017a2:	d1f2      	bne.n	40178a <main+0x15a>
				printf("transmission failed \n\r");
  4017a4:	4836      	ldr	r0, [pc, #216]	; (401880 <main+0x250>)
  4017a6:	4b20      	ldr	r3, [pc, #128]	; (401828 <main+0x1f8>)
  4017a8:	4798      	blx	r3
  4017aa:	e7f1      	b.n	401790 <main+0x160>
		}
		delay_ms(500);
  4017ac:	4835      	ldr	r0, [pc, #212]	; (401884 <main+0x254>)
  4017ae:	4b33      	ldr	r3, [pc, #204]	; (40187c <main+0x24c>)
  4017b0:	4798      	blx	r3
		}
		delay_s(5);
*/
//	}

}
  4017b2:	2000      	movs	r0, #0
  4017b4:	b006      	add	sp, #24
  4017b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017ba:	bf00      	nop
  4017bc:	f3af 8000 	nop.w
  4017c0:	3a3a3ac3 	.word	0x3a3a3ac3
  4017c4:	0000003a 	.word	0x0000003a
  4017c8:	3a3a3ab4 	.word	0x3a3a3ab4
  4017cc:	0000003a 	.word	0x0000003a
  4017d0:	3a3a3ad2 	.word	0x3a3a3ad2
  4017d4:	0000003a 	.word	0x0000003a
  4017d8:	004004d9 	.word	0x004004d9
  4017dc:	00400549 	.word	0x00400549
  4017e0:	40028000 	.word	0x40028000
  4017e4:	20400a94 	.word	0x20400a94
  4017e8:	00400d51 	.word	0x00400d51
  4017ec:	20400a90 	.word	0x20400a90
  4017f0:	00400c75 	.word	0x00400c75
  4017f4:	20400a8c 	.word	0x20400a8c
  4017f8:	00400941 	.word	0x00400941
  4017fc:	08f0d180 	.word	0x08f0d180
  401800:	00400295 	.word	0x00400295
  401804:	004002e9 	.word	0x004002e9
  401808:	004002ef 	.word	0x004002ef
  40180c:	20400014 	.word	0x20400014
  401810:	00401e8d 	.word	0x00401e8d
  401814:	004048b8 	.word	0x004048b8
  401818:	00401e7d 	.word	0x00401e7d
  40181c:	e000e100 	.word	0xe000e100
  401820:	004c4b40 	.word	0x004c4b40
  401824:	0040490c 	.word	0x0040490c
  401828:	00401be9 	.word	0x00401be9
  40182c:	0040492c 	.word	0x0040492c
  401830:	40008000 	.word	0x40008000
  401834:	00400375 	.word	0x00400375
  401838:	004003a1 	.word	0x004003a1
  40183c:	0040041b 	.word	0x0040041b
  401840:	00400439 	.word	0x00400439
  401844:	00400457 	.word	0x00400457
  401848:	0040046b 	.word	0x0040046b
  40184c:	00400493 	.word	0x00400493
  401850:	0040148d 	.word	0x0040148d
  401854:	00401561 	.word	0x00401561
  401858:	00401525 	.word	0x00401525
  40185c:	004015ed 	.word	0x004015ed
  401860:	004013d9 	.word	0x004013d9
  401864:	0040112d 	.word	0x0040112d
  401868:	20400ac0 	.word	0x20400ac0
  40186c:	0040494c 	.word	0x0040494c
  401870:	0040161d 	.word	0x0040161d
  401874:	00404980 	.word	0x00404980
  401878:	0007b784 	.word	0x0007b784
  40187c:	20400001 	.word	0x20400001
  401880:	00404968 	.word	0x00404968
  401884:	0181d7b6 	.word	0x0181d7b6

00401888 <__aeabi_uldivmod>:
  401888:	b953      	cbnz	r3, 4018a0 <__aeabi_uldivmod+0x18>
  40188a:	b94a      	cbnz	r2, 4018a0 <__aeabi_uldivmod+0x18>
  40188c:	2900      	cmp	r1, #0
  40188e:	bf08      	it	eq
  401890:	2800      	cmpeq	r0, #0
  401892:	bf1c      	itt	ne
  401894:	f04f 31ff 	movne.w	r1, #4294967295
  401898:	f04f 30ff 	movne.w	r0, #4294967295
  40189c:	f000 b97a 	b.w	401b94 <__aeabi_idiv0>
  4018a0:	f1ad 0c08 	sub.w	ip, sp, #8
  4018a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4018a8:	f000 f806 	bl	4018b8 <__udivmoddi4>
  4018ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  4018b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4018b4:	b004      	add	sp, #16
  4018b6:	4770      	bx	lr

004018b8 <__udivmoddi4>:
  4018b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018bc:	468c      	mov	ip, r1
  4018be:	460d      	mov	r5, r1
  4018c0:	4604      	mov	r4, r0
  4018c2:	9e08      	ldr	r6, [sp, #32]
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d151      	bne.n	40196c <__udivmoddi4+0xb4>
  4018c8:	428a      	cmp	r2, r1
  4018ca:	4617      	mov	r7, r2
  4018cc:	d96d      	bls.n	4019aa <__udivmoddi4+0xf2>
  4018ce:	fab2 fe82 	clz	lr, r2
  4018d2:	f1be 0f00 	cmp.w	lr, #0
  4018d6:	d00b      	beq.n	4018f0 <__udivmoddi4+0x38>
  4018d8:	f1ce 0c20 	rsb	ip, lr, #32
  4018dc:	fa01 f50e 	lsl.w	r5, r1, lr
  4018e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4018e4:	fa02 f70e 	lsl.w	r7, r2, lr
  4018e8:	ea4c 0c05 	orr.w	ip, ip, r5
  4018ec:	fa00 f40e 	lsl.w	r4, r0, lr
  4018f0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4018f4:	0c25      	lsrs	r5, r4, #16
  4018f6:	fbbc f8fa 	udiv	r8, ip, sl
  4018fa:	fa1f f987 	uxth.w	r9, r7
  4018fe:	fb0a cc18 	mls	ip, sl, r8, ip
  401902:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401906:	fb08 f309 	mul.w	r3, r8, r9
  40190a:	42ab      	cmp	r3, r5
  40190c:	d90a      	bls.n	401924 <__udivmoddi4+0x6c>
  40190e:	19ed      	adds	r5, r5, r7
  401910:	f108 32ff 	add.w	r2, r8, #4294967295
  401914:	f080 8123 	bcs.w	401b5e <__udivmoddi4+0x2a6>
  401918:	42ab      	cmp	r3, r5
  40191a:	f240 8120 	bls.w	401b5e <__udivmoddi4+0x2a6>
  40191e:	f1a8 0802 	sub.w	r8, r8, #2
  401922:	443d      	add	r5, r7
  401924:	1aed      	subs	r5, r5, r3
  401926:	b2a4      	uxth	r4, r4
  401928:	fbb5 f0fa 	udiv	r0, r5, sl
  40192c:	fb0a 5510 	mls	r5, sl, r0, r5
  401930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401934:	fb00 f909 	mul.w	r9, r0, r9
  401938:	45a1      	cmp	r9, r4
  40193a:	d909      	bls.n	401950 <__udivmoddi4+0x98>
  40193c:	19e4      	adds	r4, r4, r7
  40193e:	f100 33ff 	add.w	r3, r0, #4294967295
  401942:	f080 810a 	bcs.w	401b5a <__udivmoddi4+0x2a2>
  401946:	45a1      	cmp	r9, r4
  401948:	f240 8107 	bls.w	401b5a <__udivmoddi4+0x2a2>
  40194c:	3802      	subs	r0, #2
  40194e:	443c      	add	r4, r7
  401950:	eba4 0409 	sub.w	r4, r4, r9
  401954:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401958:	2100      	movs	r1, #0
  40195a:	2e00      	cmp	r6, #0
  40195c:	d061      	beq.n	401a22 <__udivmoddi4+0x16a>
  40195e:	fa24 f40e 	lsr.w	r4, r4, lr
  401962:	2300      	movs	r3, #0
  401964:	6034      	str	r4, [r6, #0]
  401966:	6073      	str	r3, [r6, #4]
  401968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40196c:	428b      	cmp	r3, r1
  40196e:	d907      	bls.n	401980 <__udivmoddi4+0xc8>
  401970:	2e00      	cmp	r6, #0
  401972:	d054      	beq.n	401a1e <__udivmoddi4+0x166>
  401974:	2100      	movs	r1, #0
  401976:	e886 0021 	stmia.w	r6, {r0, r5}
  40197a:	4608      	mov	r0, r1
  40197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401980:	fab3 f183 	clz	r1, r3
  401984:	2900      	cmp	r1, #0
  401986:	f040 808e 	bne.w	401aa6 <__udivmoddi4+0x1ee>
  40198a:	42ab      	cmp	r3, r5
  40198c:	d302      	bcc.n	401994 <__udivmoddi4+0xdc>
  40198e:	4282      	cmp	r2, r0
  401990:	f200 80fa 	bhi.w	401b88 <__udivmoddi4+0x2d0>
  401994:	1a84      	subs	r4, r0, r2
  401996:	eb65 0503 	sbc.w	r5, r5, r3
  40199a:	2001      	movs	r0, #1
  40199c:	46ac      	mov	ip, r5
  40199e:	2e00      	cmp	r6, #0
  4019a0:	d03f      	beq.n	401a22 <__udivmoddi4+0x16a>
  4019a2:	e886 1010 	stmia.w	r6, {r4, ip}
  4019a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019aa:	b912      	cbnz	r2, 4019b2 <__udivmoddi4+0xfa>
  4019ac:	2701      	movs	r7, #1
  4019ae:	fbb7 f7f2 	udiv	r7, r7, r2
  4019b2:	fab7 fe87 	clz	lr, r7
  4019b6:	f1be 0f00 	cmp.w	lr, #0
  4019ba:	d134      	bne.n	401a26 <__udivmoddi4+0x16e>
  4019bc:	1beb      	subs	r3, r5, r7
  4019be:	0c3a      	lsrs	r2, r7, #16
  4019c0:	fa1f fc87 	uxth.w	ip, r7
  4019c4:	2101      	movs	r1, #1
  4019c6:	fbb3 f8f2 	udiv	r8, r3, r2
  4019ca:	0c25      	lsrs	r5, r4, #16
  4019cc:	fb02 3318 	mls	r3, r2, r8, r3
  4019d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4019d4:	fb0c f308 	mul.w	r3, ip, r8
  4019d8:	42ab      	cmp	r3, r5
  4019da:	d907      	bls.n	4019ec <__udivmoddi4+0x134>
  4019dc:	19ed      	adds	r5, r5, r7
  4019de:	f108 30ff 	add.w	r0, r8, #4294967295
  4019e2:	d202      	bcs.n	4019ea <__udivmoddi4+0x132>
  4019e4:	42ab      	cmp	r3, r5
  4019e6:	f200 80d1 	bhi.w	401b8c <__udivmoddi4+0x2d4>
  4019ea:	4680      	mov	r8, r0
  4019ec:	1aed      	subs	r5, r5, r3
  4019ee:	b2a3      	uxth	r3, r4
  4019f0:	fbb5 f0f2 	udiv	r0, r5, r2
  4019f4:	fb02 5510 	mls	r5, r2, r0, r5
  4019f8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4019fc:	fb0c fc00 	mul.w	ip, ip, r0
  401a00:	45a4      	cmp	ip, r4
  401a02:	d907      	bls.n	401a14 <__udivmoddi4+0x15c>
  401a04:	19e4      	adds	r4, r4, r7
  401a06:	f100 33ff 	add.w	r3, r0, #4294967295
  401a0a:	d202      	bcs.n	401a12 <__udivmoddi4+0x15a>
  401a0c:	45a4      	cmp	ip, r4
  401a0e:	f200 80b8 	bhi.w	401b82 <__udivmoddi4+0x2ca>
  401a12:	4618      	mov	r0, r3
  401a14:	eba4 040c 	sub.w	r4, r4, ip
  401a18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401a1c:	e79d      	b.n	40195a <__udivmoddi4+0xa2>
  401a1e:	4631      	mov	r1, r6
  401a20:	4630      	mov	r0, r6
  401a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a26:	f1ce 0420 	rsb	r4, lr, #32
  401a2a:	fa05 f30e 	lsl.w	r3, r5, lr
  401a2e:	fa07 f70e 	lsl.w	r7, r7, lr
  401a32:	fa20 f804 	lsr.w	r8, r0, r4
  401a36:	0c3a      	lsrs	r2, r7, #16
  401a38:	fa25 f404 	lsr.w	r4, r5, r4
  401a3c:	ea48 0803 	orr.w	r8, r8, r3
  401a40:	fbb4 f1f2 	udiv	r1, r4, r2
  401a44:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401a48:	fb02 4411 	mls	r4, r2, r1, r4
  401a4c:	fa1f fc87 	uxth.w	ip, r7
  401a50:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401a54:	fb01 f30c 	mul.w	r3, r1, ip
  401a58:	42ab      	cmp	r3, r5
  401a5a:	fa00 f40e 	lsl.w	r4, r0, lr
  401a5e:	d909      	bls.n	401a74 <__udivmoddi4+0x1bc>
  401a60:	19ed      	adds	r5, r5, r7
  401a62:	f101 30ff 	add.w	r0, r1, #4294967295
  401a66:	f080 808a 	bcs.w	401b7e <__udivmoddi4+0x2c6>
  401a6a:	42ab      	cmp	r3, r5
  401a6c:	f240 8087 	bls.w	401b7e <__udivmoddi4+0x2c6>
  401a70:	3902      	subs	r1, #2
  401a72:	443d      	add	r5, r7
  401a74:	1aeb      	subs	r3, r5, r3
  401a76:	fa1f f588 	uxth.w	r5, r8
  401a7a:	fbb3 f0f2 	udiv	r0, r3, r2
  401a7e:	fb02 3310 	mls	r3, r2, r0, r3
  401a82:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401a86:	fb00 f30c 	mul.w	r3, r0, ip
  401a8a:	42ab      	cmp	r3, r5
  401a8c:	d907      	bls.n	401a9e <__udivmoddi4+0x1e6>
  401a8e:	19ed      	adds	r5, r5, r7
  401a90:	f100 38ff 	add.w	r8, r0, #4294967295
  401a94:	d26f      	bcs.n	401b76 <__udivmoddi4+0x2be>
  401a96:	42ab      	cmp	r3, r5
  401a98:	d96d      	bls.n	401b76 <__udivmoddi4+0x2be>
  401a9a:	3802      	subs	r0, #2
  401a9c:	443d      	add	r5, r7
  401a9e:	1aeb      	subs	r3, r5, r3
  401aa0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401aa4:	e78f      	b.n	4019c6 <__udivmoddi4+0x10e>
  401aa6:	f1c1 0720 	rsb	r7, r1, #32
  401aaa:	fa22 f807 	lsr.w	r8, r2, r7
  401aae:	408b      	lsls	r3, r1
  401ab0:	fa05 f401 	lsl.w	r4, r5, r1
  401ab4:	ea48 0303 	orr.w	r3, r8, r3
  401ab8:	fa20 fe07 	lsr.w	lr, r0, r7
  401abc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401ac0:	40fd      	lsrs	r5, r7
  401ac2:	ea4e 0e04 	orr.w	lr, lr, r4
  401ac6:	fbb5 f9fc 	udiv	r9, r5, ip
  401aca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401ace:	fb0c 5519 	mls	r5, ip, r9, r5
  401ad2:	fa1f f883 	uxth.w	r8, r3
  401ad6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401ada:	fb09 f408 	mul.w	r4, r9, r8
  401ade:	42ac      	cmp	r4, r5
  401ae0:	fa02 f201 	lsl.w	r2, r2, r1
  401ae4:	fa00 fa01 	lsl.w	sl, r0, r1
  401ae8:	d908      	bls.n	401afc <__udivmoddi4+0x244>
  401aea:	18ed      	adds	r5, r5, r3
  401aec:	f109 30ff 	add.w	r0, r9, #4294967295
  401af0:	d243      	bcs.n	401b7a <__udivmoddi4+0x2c2>
  401af2:	42ac      	cmp	r4, r5
  401af4:	d941      	bls.n	401b7a <__udivmoddi4+0x2c2>
  401af6:	f1a9 0902 	sub.w	r9, r9, #2
  401afa:	441d      	add	r5, r3
  401afc:	1b2d      	subs	r5, r5, r4
  401afe:	fa1f fe8e 	uxth.w	lr, lr
  401b02:	fbb5 f0fc 	udiv	r0, r5, ip
  401b06:	fb0c 5510 	mls	r5, ip, r0, r5
  401b0a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401b0e:	fb00 f808 	mul.w	r8, r0, r8
  401b12:	45a0      	cmp	r8, r4
  401b14:	d907      	bls.n	401b26 <__udivmoddi4+0x26e>
  401b16:	18e4      	adds	r4, r4, r3
  401b18:	f100 35ff 	add.w	r5, r0, #4294967295
  401b1c:	d229      	bcs.n	401b72 <__udivmoddi4+0x2ba>
  401b1e:	45a0      	cmp	r8, r4
  401b20:	d927      	bls.n	401b72 <__udivmoddi4+0x2ba>
  401b22:	3802      	subs	r0, #2
  401b24:	441c      	add	r4, r3
  401b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401b2a:	eba4 0408 	sub.w	r4, r4, r8
  401b2e:	fba0 8902 	umull	r8, r9, r0, r2
  401b32:	454c      	cmp	r4, r9
  401b34:	46c6      	mov	lr, r8
  401b36:	464d      	mov	r5, r9
  401b38:	d315      	bcc.n	401b66 <__udivmoddi4+0x2ae>
  401b3a:	d012      	beq.n	401b62 <__udivmoddi4+0x2aa>
  401b3c:	b156      	cbz	r6, 401b54 <__udivmoddi4+0x29c>
  401b3e:	ebba 030e 	subs.w	r3, sl, lr
  401b42:	eb64 0405 	sbc.w	r4, r4, r5
  401b46:	fa04 f707 	lsl.w	r7, r4, r7
  401b4a:	40cb      	lsrs	r3, r1
  401b4c:	431f      	orrs	r7, r3
  401b4e:	40cc      	lsrs	r4, r1
  401b50:	6037      	str	r7, [r6, #0]
  401b52:	6074      	str	r4, [r6, #4]
  401b54:	2100      	movs	r1, #0
  401b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b5a:	4618      	mov	r0, r3
  401b5c:	e6f8      	b.n	401950 <__udivmoddi4+0x98>
  401b5e:	4690      	mov	r8, r2
  401b60:	e6e0      	b.n	401924 <__udivmoddi4+0x6c>
  401b62:	45c2      	cmp	sl, r8
  401b64:	d2ea      	bcs.n	401b3c <__udivmoddi4+0x284>
  401b66:	ebb8 0e02 	subs.w	lr, r8, r2
  401b6a:	eb69 0503 	sbc.w	r5, r9, r3
  401b6e:	3801      	subs	r0, #1
  401b70:	e7e4      	b.n	401b3c <__udivmoddi4+0x284>
  401b72:	4628      	mov	r0, r5
  401b74:	e7d7      	b.n	401b26 <__udivmoddi4+0x26e>
  401b76:	4640      	mov	r0, r8
  401b78:	e791      	b.n	401a9e <__udivmoddi4+0x1e6>
  401b7a:	4681      	mov	r9, r0
  401b7c:	e7be      	b.n	401afc <__udivmoddi4+0x244>
  401b7e:	4601      	mov	r1, r0
  401b80:	e778      	b.n	401a74 <__udivmoddi4+0x1bc>
  401b82:	3802      	subs	r0, #2
  401b84:	443c      	add	r4, r7
  401b86:	e745      	b.n	401a14 <__udivmoddi4+0x15c>
  401b88:	4608      	mov	r0, r1
  401b8a:	e708      	b.n	40199e <__udivmoddi4+0xe6>
  401b8c:	f1a8 0802 	sub.w	r8, r8, #2
  401b90:	443d      	add	r5, r7
  401b92:	e72b      	b.n	4019ec <__udivmoddi4+0x134>

00401b94 <__aeabi_idiv0>:
  401b94:	4770      	bx	lr
  401b96:	bf00      	nop

00401b98 <__libc_init_array>:
  401b98:	b570      	push	{r4, r5, r6, lr}
  401b9a:	4e0f      	ldr	r6, [pc, #60]	; (401bd8 <__libc_init_array+0x40>)
  401b9c:	4d0f      	ldr	r5, [pc, #60]	; (401bdc <__libc_init_array+0x44>)
  401b9e:	1b76      	subs	r6, r6, r5
  401ba0:	10b6      	asrs	r6, r6, #2
  401ba2:	bf18      	it	ne
  401ba4:	2400      	movne	r4, #0
  401ba6:	d005      	beq.n	401bb4 <__libc_init_array+0x1c>
  401ba8:	3401      	adds	r4, #1
  401baa:	f855 3b04 	ldr.w	r3, [r5], #4
  401bae:	4798      	blx	r3
  401bb0:	42a6      	cmp	r6, r4
  401bb2:	d1f9      	bne.n	401ba8 <__libc_init_array+0x10>
  401bb4:	4e0a      	ldr	r6, [pc, #40]	; (401be0 <__libc_init_array+0x48>)
  401bb6:	4d0b      	ldr	r5, [pc, #44]	; (401be4 <__libc_init_array+0x4c>)
  401bb8:	1b76      	subs	r6, r6, r5
  401bba:	f003 f893 	bl	404ce4 <_init>
  401bbe:	10b6      	asrs	r6, r6, #2
  401bc0:	bf18      	it	ne
  401bc2:	2400      	movne	r4, #0
  401bc4:	d006      	beq.n	401bd4 <__libc_init_array+0x3c>
  401bc6:	3401      	adds	r4, #1
  401bc8:	f855 3b04 	ldr.w	r3, [r5], #4
  401bcc:	4798      	blx	r3
  401bce:	42a6      	cmp	r6, r4
  401bd0:	d1f9      	bne.n	401bc6 <__libc_init_array+0x2e>
  401bd2:	bd70      	pop	{r4, r5, r6, pc}
  401bd4:	bd70      	pop	{r4, r5, r6, pc}
  401bd6:	bf00      	nop
  401bd8:	00404cf0 	.word	0x00404cf0
  401bdc:	00404cf0 	.word	0x00404cf0
  401be0:	00404cf8 	.word	0x00404cf8
  401be4:	00404cf0 	.word	0x00404cf0

00401be8 <iprintf>:
  401be8:	b40f      	push	{r0, r1, r2, r3}
  401bea:	b500      	push	{lr}
  401bec:	4907      	ldr	r1, [pc, #28]	; (401c0c <iprintf+0x24>)
  401bee:	b083      	sub	sp, #12
  401bf0:	ab04      	add	r3, sp, #16
  401bf2:	6808      	ldr	r0, [r1, #0]
  401bf4:	f853 2b04 	ldr.w	r2, [r3], #4
  401bf8:	6881      	ldr	r1, [r0, #8]
  401bfa:	9301      	str	r3, [sp, #4]
  401bfc:	f000 face 	bl	40219c <_vfiprintf_r>
  401c00:	b003      	add	sp, #12
  401c02:	f85d eb04 	ldr.w	lr, [sp], #4
  401c06:	b004      	add	sp, #16
  401c08:	4770      	bx	lr
  401c0a:	bf00      	nop
  401c0c:	20400014 	.word	0x20400014

00401c10 <memcpy>:
  401c10:	4684      	mov	ip, r0
  401c12:	ea41 0300 	orr.w	r3, r1, r0
  401c16:	f013 0303 	ands.w	r3, r3, #3
  401c1a:	d16d      	bne.n	401cf8 <memcpy+0xe8>
  401c1c:	3a40      	subs	r2, #64	; 0x40
  401c1e:	d341      	bcc.n	401ca4 <memcpy+0x94>
  401c20:	f851 3b04 	ldr.w	r3, [r1], #4
  401c24:	f840 3b04 	str.w	r3, [r0], #4
  401c28:	f851 3b04 	ldr.w	r3, [r1], #4
  401c2c:	f840 3b04 	str.w	r3, [r0], #4
  401c30:	f851 3b04 	ldr.w	r3, [r1], #4
  401c34:	f840 3b04 	str.w	r3, [r0], #4
  401c38:	f851 3b04 	ldr.w	r3, [r1], #4
  401c3c:	f840 3b04 	str.w	r3, [r0], #4
  401c40:	f851 3b04 	ldr.w	r3, [r1], #4
  401c44:	f840 3b04 	str.w	r3, [r0], #4
  401c48:	f851 3b04 	ldr.w	r3, [r1], #4
  401c4c:	f840 3b04 	str.w	r3, [r0], #4
  401c50:	f851 3b04 	ldr.w	r3, [r1], #4
  401c54:	f840 3b04 	str.w	r3, [r0], #4
  401c58:	f851 3b04 	ldr.w	r3, [r1], #4
  401c5c:	f840 3b04 	str.w	r3, [r0], #4
  401c60:	f851 3b04 	ldr.w	r3, [r1], #4
  401c64:	f840 3b04 	str.w	r3, [r0], #4
  401c68:	f851 3b04 	ldr.w	r3, [r1], #4
  401c6c:	f840 3b04 	str.w	r3, [r0], #4
  401c70:	f851 3b04 	ldr.w	r3, [r1], #4
  401c74:	f840 3b04 	str.w	r3, [r0], #4
  401c78:	f851 3b04 	ldr.w	r3, [r1], #4
  401c7c:	f840 3b04 	str.w	r3, [r0], #4
  401c80:	f851 3b04 	ldr.w	r3, [r1], #4
  401c84:	f840 3b04 	str.w	r3, [r0], #4
  401c88:	f851 3b04 	ldr.w	r3, [r1], #4
  401c8c:	f840 3b04 	str.w	r3, [r0], #4
  401c90:	f851 3b04 	ldr.w	r3, [r1], #4
  401c94:	f840 3b04 	str.w	r3, [r0], #4
  401c98:	f851 3b04 	ldr.w	r3, [r1], #4
  401c9c:	f840 3b04 	str.w	r3, [r0], #4
  401ca0:	3a40      	subs	r2, #64	; 0x40
  401ca2:	d2bd      	bcs.n	401c20 <memcpy+0x10>
  401ca4:	3230      	adds	r2, #48	; 0x30
  401ca6:	d311      	bcc.n	401ccc <memcpy+0xbc>
  401ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  401cac:	f840 3b04 	str.w	r3, [r0], #4
  401cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  401cb4:	f840 3b04 	str.w	r3, [r0], #4
  401cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  401cbc:	f840 3b04 	str.w	r3, [r0], #4
  401cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  401cc4:	f840 3b04 	str.w	r3, [r0], #4
  401cc8:	3a10      	subs	r2, #16
  401cca:	d2ed      	bcs.n	401ca8 <memcpy+0x98>
  401ccc:	320c      	adds	r2, #12
  401cce:	d305      	bcc.n	401cdc <memcpy+0xcc>
  401cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  401cd4:	f840 3b04 	str.w	r3, [r0], #4
  401cd8:	3a04      	subs	r2, #4
  401cda:	d2f9      	bcs.n	401cd0 <memcpy+0xc0>
  401cdc:	3204      	adds	r2, #4
  401cde:	d008      	beq.n	401cf2 <memcpy+0xe2>
  401ce0:	07d2      	lsls	r2, r2, #31
  401ce2:	bf1c      	itt	ne
  401ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401ce8:	f800 3b01 	strbne.w	r3, [r0], #1
  401cec:	d301      	bcc.n	401cf2 <memcpy+0xe2>
  401cee:	880b      	ldrh	r3, [r1, #0]
  401cf0:	8003      	strh	r3, [r0, #0]
  401cf2:	4660      	mov	r0, ip
  401cf4:	4770      	bx	lr
  401cf6:	bf00      	nop
  401cf8:	2a08      	cmp	r2, #8
  401cfa:	d313      	bcc.n	401d24 <memcpy+0x114>
  401cfc:	078b      	lsls	r3, r1, #30
  401cfe:	d08d      	beq.n	401c1c <memcpy+0xc>
  401d00:	f010 0303 	ands.w	r3, r0, #3
  401d04:	d08a      	beq.n	401c1c <memcpy+0xc>
  401d06:	f1c3 0304 	rsb	r3, r3, #4
  401d0a:	1ad2      	subs	r2, r2, r3
  401d0c:	07db      	lsls	r3, r3, #31
  401d0e:	bf1c      	itt	ne
  401d10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401d14:	f800 3b01 	strbne.w	r3, [r0], #1
  401d18:	d380      	bcc.n	401c1c <memcpy+0xc>
  401d1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  401d1e:	f820 3b02 	strh.w	r3, [r0], #2
  401d22:	e77b      	b.n	401c1c <memcpy+0xc>
  401d24:	3a04      	subs	r2, #4
  401d26:	d3d9      	bcc.n	401cdc <memcpy+0xcc>
  401d28:	3a01      	subs	r2, #1
  401d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  401d2e:	f800 3b01 	strb.w	r3, [r0], #1
  401d32:	d2f9      	bcs.n	401d28 <memcpy+0x118>
  401d34:	780b      	ldrb	r3, [r1, #0]
  401d36:	7003      	strb	r3, [r0, #0]
  401d38:	784b      	ldrb	r3, [r1, #1]
  401d3a:	7043      	strb	r3, [r0, #1]
  401d3c:	788b      	ldrb	r3, [r1, #2]
  401d3e:	7083      	strb	r3, [r0, #2]
  401d40:	4660      	mov	r0, ip
  401d42:	4770      	bx	lr

00401d44 <memset>:
  401d44:	b470      	push	{r4, r5, r6}
  401d46:	0786      	lsls	r6, r0, #30
  401d48:	d046      	beq.n	401dd8 <memset+0x94>
  401d4a:	1e54      	subs	r4, r2, #1
  401d4c:	2a00      	cmp	r2, #0
  401d4e:	d041      	beq.n	401dd4 <memset+0x90>
  401d50:	b2ca      	uxtb	r2, r1
  401d52:	4603      	mov	r3, r0
  401d54:	e002      	b.n	401d5c <memset+0x18>
  401d56:	f114 34ff 	adds.w	r4, r4, #4294967295
  401d5a:	d33b      	bcc.n	401dd4 <memset+0x90>
  401d5c:	f803 2b01 	strb.w	r2, [r3], #1
  401d60:	079d      	lsls	r5, r3, #30
  401d62:	d1f8      	bne.n	401d56 <memset+0x12>
  401d64:	2c03      	cmp	r4, #3
  401d66:	d92e      	bls.n	401dc6 <memset+0x82>
  401d68:	b2cd      	uxtb	r5, r1
  401d6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401d6e:	2c0f      	cmp	r4, #15
  401d70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401d74:	d919      	bls.n	401daa <memset+0x66>
  401d76:	f103 0210 	add.w	r2, r3, #16
  401d7a:	4626      	mov	r6, r4
  401d7c:	3e10      	subs	r6, #16
  401d7e:	2e0f      	cmp	r6, #15
  401d80:	f842 5c10 	str.w	r5, [r2, #-16]
  401d84:	f842 5c0c 	str.w	r5, [r2, #-12]
  401d88:	f842 5c08 	str.w	r5, [r2, #-8]
  401d8c:	f842 5c04 	str.w	r5, [r2, #-4]
  401d90:	f102 0210 	add.w	r2, r2, #16
  401d94:	d8f2      	bhi.n	401d7c <memset+0x38>
  401d96:	f1a4 0210 	sub.w	r2, r4, #16
  401d9a:	f022 020f 	bic.w	r2, r2, #15
  401d9e:	f004 040f 	and.w	r4, r4, #15
  401da2:	3210      	adds	r2, #16
  401da4:	2c03      	cmp	r4, #3
  401da6:	4413      	add	r3, r2
  401da8:	d90d      	bls.n	401dc6 <memset+0x82>
  401daa:	461e      	mov	r6, r3
  401dac:	4622      	mov	r2, r4
  401dae:	3a04      	subs	r2, #4
  401db0:	2a03      	cmp	r2, #3
  401db2:	f846 5b04 	str.w	r5, [r6], #4
  401db6:	d8fa      	bhi.n	401dae <memset+0x6a>
  401db8:	1f22      	subs	r2, r4, #4
  401dba:	f022 0203 	bic.w	r2, r2, #3
  401dbe:	3204      	adds	r2, #4
  401dc0:	4413      	add	r3, r2
  401dc2:	f004 0403 	and.w	r4, r4, #3
  401dc6:	b12c      	cbz	r4, 401dd4 <memset+0x90>
  401dc8:	b2c9      	uxtb	r1, r1
  401dca:	441c      	add	r4, r3
  401dcc:	f803 1b01 	strb.w	r1, [r3], #1
  401dd0:	429c      	cmp	r4, r3
  401dd2:	d1fb      	bne.n	401dcc <memset+0x88>
  401dd4:	bc70      	pop	{r4, r5, r6}
  401dd6:	4770      	bx	lr
  401dd8:	4614      	mov	r4, r2
  401dda:	4603      	mov	r3, r0
  401ddc:	e7c2      	b.n	401d64 <memset+0x20>
  401dde:	bf00      	nop

00401de0 <_puts_r>:
  401de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  401de2:	4605      	mov	r5, r0
  401de4:	b089      	sub	sp, #36	; 0x24
  401de6:	4608      	mov	r0, r1
  401de8:	460c      	mov	r4, r1
  401dea:	f000 f929 	bl	402040 <strlen>
  401dee:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401df0:	4f21      	ldr	r7, [pc, #132]	; (401e78 <_puts_r+0x98>)
  401df2:	9404      	str	r4, [sp, #16]
  401df4:	2601      	movs	r6, #1
  401df6:	1c44      	adds	r4, r0, #1
  401df8:	a904      	add	r1, sp, #16
  401dfa:	2202      	movs	r2, #2
  401dfc:	9403      	str	r4, [sp, #12]
  401dfe:	9005      	str	r0, [sp, #20]
  401e00:	68ac      	ldr	r4, [r5, #8]
  401e02:	9706      	str	r7, [sp, #24]
  401e04:	9607      	str	r6, [sp, #28]
  401e06:	9101      	str	r1, [sp, #4]
  401e08:	9202      	str	r2, [sp, #8]
  401e0a:	b353      	cbz	r3, 401e62 <_puts_r+0x82>
  401e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401e0e:	f013 0f01 	tst.w	r3, #1
  401e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e16:	b29a      	uxth	r2, r3
  401e18:	d101      	bne.n	401e1e <_puts_r+0x3e>
  401e1a:	0590      	lsls	r0, r2, #22
  401e1c:	d525      	bpl.n	401e6a <_puts_r+0x8a>
  401e1e:	0491      	lsls	r1, r2, #18
  401e20:	d406      	bmi.n	401e30 <_puts_r+0x50>
  401e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401e2c:	81a3      	strh	r3, [r4, #12]
  401e2e:	6662      	str	r2, [r4, #100]	; 0x64
  401e30:	4628      	mov	r0, r5
  401e32:	aa01      	add	r2, sp, #4
  401e34:	4621      	mov	r1, r4
  401e36:	f001 fbb3 	bl	4035a0 <__sfvwrite_r>
  401e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401e3c:	2800      	cmp	r0, #0
  401e3e:	bf0c      	ite	eq
  401e40:	250a      	moveq	r5, #10
  401e42:	f04f 35ff 	movne.w	r5, #4294967295
  401e46:	07da      	lsls	r2, r3, #31
  401e48:	d402      	bmi.n	401e50 <_puts_r+0x70>
  401e4a:	89a3      	ldrh	r3, [r4, #12]
  401e4c:	059b      	lsls	r3, r3, #22
  401e4e:	d502      	bpl.n	401e56 <_puts_r+0x76>
  401e50:	4628      	mov	r0, r5
  401e52:	b009      	add	sp, #36	; 0x24
  401e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401e56:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e58:	f001 fd58 	bl	40390c <__retarget_lock_release_recursive>
  401e5c:	4628      	mov	r0, r5
  401e5e:	b009      	add	sp, #36	; 0x24
  401e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401e62:	4628      	mov	r0, r5
  401e64:	f001 f990 	bl	403188 <__sinit>
  401e68:	e7d0      	b.n	401e0c <_puts_r+0x2c>
  401e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e6c:	f001 fd4c 	bl	403908 <__retarget_lock_acquire_recursive>
  401e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e74:	b29a      	uxth	r2, r3
  401e76:	e7d2      	b.n	401e1e <_puts_r+0x3e>
  401e78:	00404a58 	.word	0x00404a58

00401e7c <puts>:
  401e7c:	4b02      	ldr	r3, [pc, #8]	; (401e88 <puts+0xc>)
  401e7e:	4601      	mov	r1, r0
  401e80:	6818      	ldr	r0, [r3, #0]
  401e82:	f7ff bfad 	b.w	401de0 <_puts_r>
  401e86:	bf00      	nop
  401e88:	20400014 	.word	0x20400014

00401e8c <setbuf>:
  401e8c:	2900      	cmp	r1, #0
  401e8e:	bf0c      	ite	eq
  401e90:	2202      	moveq	r2, #2
  401e92:	2200      	movne	r2, #0
  401e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401e98:	f000 b800 	b.w	401e9c <setvbuf>

00401e9c <setvbuf>:
  401e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ea0:	4c61      	ldr	r4, [pc, #388]	; (402028 <setvbuf+0x18c>)
  401ea2:	6825      	ldr	r5, [r4, #0]
  401ea4:	b083      	sub	sp, #12
  401ea6:	4604      	mov	r4, r0
  401ea8:	460f      	mov	r7, r1
  401eaa:	4690      	mov	r8, r2
  401eac:	461e      	mov	r6, r3
  401eae:	b115      	cbz	r5, 401eb6 <setvbuf+0x1a>
  401eb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	d064      	beq.n	401f80 <setvbuf+0xe4>
  401eb6:	f1b8 0f02 	cmp.w	r8, #2
  401eba:	d006      	beq.n	401eca <setvbuf+0x2e>
  401ebc:	f1b8 0f01 	cmp.w	r8, #1
  401ec0:	f200 809f 	bhi.w	402002 <setvbuf+0x166>
  401ec4:	2e00      	cmp	r6, #0
  401ec6:	f2c0 809c 	blt.w	402002 <setvbuf+0x166>
  401eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401ecc:	07d8      	lsls	r0, r3, #31
  401ece:	d534      	bpl.n	401f3a <setvbuf+0x9e>
  401ed0:	4621      	mov	r1, r4
  401ed2:	4628      	mov	r0, r5
  401ed4:	f001 f900 	bl	4030d8 <_fflush_r>
  401ed8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401eda:	b141      	cbz	r1, 401eee <setvbuf+0x52>
  401edc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401ee0:	4299      	cmp	r1, r3
  401ee2:	d002      	beq.n	401eea <setvbuf+0x4e>
  401ee4:	4628      	mov	r0, r5
  401ee6:	f001 fa75 	bl	4033d4 <_free_r>
  401eea:	2300      	movs	r3, #0
  401eec:	6323      	str	r3, [r4, #48]	; 0x30
  401eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ef2:	2200      	movs	r2, #0
  401ef4:	61a2      	str	r2, [r4, #24]
  401ef6:	6062      	str	r2, [r4, #4]
  401ef8:	061a      	lsls	r2, r3, #24
  401efa:	d43a      	bmi.n	401f72 <setvbuf+0xd6>
  401efc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401f00:	f023 0303 	bic.w	r3, r3, #3
  401f04:	f1b8 0f02 	cmp.w	r8, #2
  401f08:	81a3      	strh	r3, [r4, #12]
  401f0a:	d01d      	beq.n	401f48 <setvbuf+0xac>
  401f0c:	ab01      	add	r3, sp, #4
  401f0e:	466a      	mov	r2, sp
  401f10:	4621      	mov	r1, r4
  401f12:	4628      	mov	r0, r5
  401f14:	f001 fcfc 	bl	403910 <__swhatbuf_r>
  401f18:	89a3      	ldrh	r3, [r4, #12]
  401f1a:	4318      	orrs	r0, r3
  401f1c:	81a0      	strh	r0, [r4, #12]
  401f1e:	2e00      	cmp	r6, #0
  401f20:	d132      	bne.n	401f88 <setvbuf+0xec>
  401f22:	9e00      	ldr	r6, [sp, #0]
  401f24:	4630      	mov	r0, r6
  401f26:	f001 fd6b 	bl	403a00 <malloc>
  401f2a:	4607      	mov	r7, r0
  401f2c:	2800      	cmp	r0, #0
  401f2e:	d06b      	beq.n	402008 <setvbuf+0x16c>
  401f30:	89a3      	ldrh	r3, [r4, #12]
  401f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401f36:	81a3      	strh	r3, [r4, #12]
  401f38:	e028      	b.n	401f8c <setvbuf+0xf0>
  401f3a:	89a3      	ldrh	r3, [r4, #12]
  401f3c:	0599      	lsls	r1, r3, #22
  401f3e:	d4c7      	bmi.n	401ed0 <setvbuf+0x34>
  401f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401f42:	f001 fce1 	bl	403908 <__retarget_lock_acquire_recursive>
  401f46:	e7c3      	b.n	401ed0 <setvbuf+0x34>
  401f48:	2500      	movs	r5, #0
  401f4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401f4c:	2600      	movs	r6, #0
  401f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401f52:	f043 0302 	orr.w	r3, r3, #2
  401f56:	2001      	movs	r0, #1
  401f58:	60a6      	str	r6, [r4, #8]
  401f5a:	07ce      	lsls	r6, r1, #31
  401f5c:	81a3      	strh	r3, [r4, #12]
  401f5e:	6022      	str	r2, [r4, #0]
  401f60:	6122      	str	r2, [r4, #16]
  401f62:	6160      	str	r0, [r4, #20]
  401f64:	d401      	bmi.n	401f6a <setvbuf+0xce>
  401f66:	0598      	lsls	r0, r3, #22
  401f68:	d53e      	bpl.n	401fe8 <setvbuf+0x14c>
  401f6a:	4628      	mov	r0, r5
  401f6c:	b003      	add	sp, #12
  401f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401f72:	6921      	ldr	r1, [r4, #16]
  401f74:	4628      	mov	r0, r5
  401f76:	f001 fa2d 	bl	4033d4 <_free_r>
  401f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f7e:	e7bd      	b.n	401efc <setvbuf+0x60>
  401f80:	4628      	mov	r0, r5
  401f82:	f001 f901 	bl	403188 <__sinit>
  401f86:	e796      	b.n	401eb6 <setvbuf+0x1a>
  401f88:	2f00      	cmp	r7, #0
  401f8a:	d0cb      	beq.n	401f24 <setvbuf+0x88>
  401f8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d033      	beq.n	401ffa <setvbuf+0x15e>
  401f92:	9b00      	ldr	r3, [sp, #0]
  401f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401f98:	6027      	str	r7, [r4, #0]
  401f9a:	429e      	cmp	r6, r3
  401f9c:	bf1c      	itt	ne
  401f9e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401fa2:	81a2      	strhne	r2, [r4, #12]
  401fa4:	f1b8 0f01 	cmp.w	r8, #1
  401fa8:	bf04      	itt	eq
  401faa:	f042 0201 	orreq.w	r2, r2, #1
  401fae:	81a2      	strheq	r2, [r4, #12]
  401fb0:	b292      	uxth	r2, r2
  401fb2:	f012 0308 	ands.w	r3, r2, #8
  401fb6:	6127      	str	r7, [r4, #16]
  401fb8:	6166      	str	r6, [r4, #20]
  401fba:	d00e      	beq.n	401fda <setvbuf+0x13e>
  401fbc:	07d1      	lsls	r1, r2, #31
  401fbe:	d51a      	bpl.n	401ff6 <setvbuf+0x15a>
  401fc0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401fc2:	4276      	negs	r6, r6
  401fc4:	2300      	movs	r3, #0
  401fc6:	f015 0501 	ands.w	r5, r5, #1
  401fca:	61a6      	str	r6, [r4, #24]
  401fcc:	60a3      	str	r3, [r4, #8]
  401fce:	d009      	beq.n	401fe4 <setvbuf+0x148>
  401fd0:	2500      	movs	r5, #0
  401fd2:	4628      	mov	r0, r5
  401fd4:	b003      	add	sp, #12
  401fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401fda:	60a3      	str	r3, [r4, #8]
  401fdc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401fde:	f015 0501 	ands.w	r5, r5, #1
  401fe2:	d1f5      	bne.n	401fd0 <setvbuf+0x134>
  401fe4:	0593      	lsls	r3, r2, #22
  401fe6:	d4c0      	bmi.n	401f6a <setvbuf+0xce>
  401fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401fea:	f001 fc8f 	bl	40390c <__retarget_lock_release_recursive>
  401fee:	4628      	mov	r0, r5
  401ff0:	b003      	add	sp, #12
  401ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ff6:	60a6      	str	r6, [r4, #8]
  401ff8:	e7f0      	b.n	401fdc <setvbuf+0x140>
  401ffa:	4628      	mov	r0, r5
  401ffc:	f001 f8c4 	bl	403188 <__sinit>
  402000:	e7c7      	b.n	401f92 <setvbuf+0xf6>
  402002:	f04f 35ff 	mov.w	r5, #4294967295
  402006:	e7b0      	b.n	401f6a <setvbuf+0xce>
  402008:	f8dd 9000 	ldr.w	r9, [sp]
  40200c:	45b1      	cmp	r9, r6
  40200e:	d004      	beq.n	40201a <setvbuf+0x17e>
  402010:	4648      	mov	r0, r9
  402012:	f001 fcf5 	bl	403a00 <malloc>
  402016:	4607      	mov	r7, r0
  402018:	b920      	cbnz	r0, 402024 <setvbuf+0x188>
  40201a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40201e:	f04f 35ff 	mov.w	r5, #4294967295
  402022:	e792      	b.n	401f4a <setvbuf+0xae>
  402024:	464e      	mov	r6, r9
  402026:	e783      	b.n	401f30 <setvbuf+0x94>
  402028:	20400014 	.word	0x20400014
	...

00402040 <strlen>:
  402040:	f890 f000 	pld	[r0]
  402044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402048:	f020 0107 	bic.w	r1, r0, #7
  40204c:	f06f 0c00 	mvn.w	ip, #0
  402050:	f010 0407 	ands.w	r4, r0, #7
  402054:	f891 f020 	pld	[r1, #32]
  402058:	f040 8049 	bne.w	4020ee <strlen+0xae>
  40205c:	f04f 0400 	mov.w	r4, #0
  402060:	f06f 0007 	mvn.w	r0, #7
  402064:	e9d1 2300 	ldrd	r2, r3, [r1]
  402068:	f891 f040 	pld	[r1, #64]	; 0x40
  40206c:	f100 0008 	add.w	r0, r0, #8
  402070:	fa82 f24c 	uadd8	r2, r2, ip
  402074:	faa4 f28c 	sel	r2, r4, ip
  402078:	fa83 f34c 	uadd8	r3, r3, ip
  40207c:	faa2 f38c 	sel	r3, r2, ip
  402080:	bb4b      	cbnz	r3, 4020d6 <strlen+0x96>
  402082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402086:	fa82 f24c 	uadd8	r2, r2, ip
  40208a:	f100 0008 	add.w	r0, r0, #8
  40208e:	faa4 f28c 	sel	r2, r4, ip
  402092:	fa83 f34c 	uadd8	r3, r3, ip
  402096:	faa2 f38c 	sel	r3, r2, ip
  40209a:	b9e3      	cbnz	r3, 4020d6 <strlen+0x96>
  40209c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4020a0:	fa82 f24c 	uadd8	r2, r2, ip
  4020a4:	f100 0008 	add.w	r0, r0, #8
  4020a8:	faa4 f28c 	sel	r2, r4, ip
  4020ac:	fa83 f34c 	uadd8	r3, r3, ip
  4020b0:	faa2 f38c 	sel	r3, r2, ip
  4020b4:	b97b      	cbnz	r3, 4020d6 <strlen+0x96>
  4020b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4020ba:	f101 0120 	add.w	r1, r1, #32
  4020be:	fa82 f24c 	uadd8	r2, r2, ip
  4020c2:	f100 0008 	add.w	r0, r0, #8
  4020c6:	faa4 f28c 	sel	r2, r4, ip
  4020ca:	fa83 f34c 	uadd8	r3, r3, ip
  4020ce:	faa2 f38c 	sel	r3, r2, ip
  4020d2:	2b00      	cmp	r3, #0
  4020d4:	d0c6      	beq.n	402064 <strlen+0x24>
  4020d6:	2a00      	cmp	r2, #0
  4020d8:	bf04      	itt	eq
  4020da:	3004      	addeq	r0, #4
  4020dc:	461a      	moveq	r2, r3
  4020de:	ba12      	rev	r2, r2
  4020e0:	fab2 f282 	clz	r2, r2
  4020e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4020e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4020ec:	4770      	bx	lr
  4020ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4020f2:	f004 0503 	and.w	r5, r4, #3
  4020f6:	f1c4 0000 	rsb	r0, r4, #0
  4020fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4020fe:	f014 0f04 	tst.w	r4, #4
  402102:	f891 f040 	pld	[r1, #64]	; 0x40
  402106:	fa0c f505 	lsl.w	r5, ip, r5
  40210a:	ea62 0205 	orn	r2, r2, r5
  40210e:	bf1c      	itt	ne
  402110:	ea63 0305 	ornne	r3, r3, r5
  402114:	4662      	movne	r2, ip
  402116:	f04f 0400 	mov.w	r4, #0
  40211a:	e7a9      	b.n	402070 <strlen+0x30>

0040211c <__sprint_r.part.0>:
  40211c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402120:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402122:	049c      	lsls	r4, r3, #18
  402124:	4693      	mov	fp, r2
  402126:	d52f      	bpl.n	402188 <__sprint_r.part.0+0x6c>
  402128:	6893      	ldr	r3, [r2, #8]
  40212a:	6812      	ldr	r2, [r2, #0]
  40212c:	b353      	cbz	r3, 402184 <__sprint_r.part.0+0x68>
  40212e:	460e      	mov	r6, r1
  402130:	4607      	mov	r7, r0
  402132:	f102 0908 	add.w	r9, r2, #8
  402136:	e919 0420 	ldmdb	r9, {r5, sl}
  40213a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40213e:	d017      	beq.n	402170 <__sprint_r.part.0+0x54>
  402140:	3d04      	subs	r5, #4
  402142:	2400      	movs	r4, #0
  402144:	e001      	b.n	40214a <__sprint_r.part.0+0x2e>
  402146:	45a0      	cmp	r8, r4
  402148:	d010      	beq.n	40216c <__sprint_r.part.0+0x50>
  40214a:	4632      	mov	r2, r6
  40214c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402150:	4638      	mov	r0, r7
  402152:	f001 f8bb 	bl	4032cc <_fputwc_r>
  402156:	1c43      	adds	r3, r0, #1
  402158:	f104 0401 	add.w	r4, r4, #1
  40215c:	d1f3      	bne.n	402146 <__sprint_r.part.0+0x2a>
  40215e:	2300      	movs	r3, #0
  402160:	f8cb 3008 	str.w	r3, [fp, #8]
  402164:	f8cb 3004 	str.w	r3, [fp, #4]
  402168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40216c:	f8db 3008 	ldr.w	r3, [fp, #8]
  402170:	f02a 0a03 	bic.w	sl, sl, #3
  402174:	eba3 030a 	sub.w	r3, r3, sl
  402178:	f8cb 3008 	str.w	r3, [fp, #8]
  40217c:	f109 0908 	add.w	r9, r9, #8
  402180:	2b00      	cmp	r3, #0
  402182:	d1d8      	bne.n	402136 <__sprint_r.part.0+0x1a>
  402184:	2000      	movs	r0, #0
  402186:	e7ea      	b.n	40215e <__sprint_r.part.0+0x42>
  402188:	f001 fa0a 	bl	4035a0 <__sfvwrite_r>
  40218c:	2300      	movs	r3, #0
  40218e:	f8cb 3008 	str.w	r3, [fp, #8]
  402192:	f8cb 3004 	str.w	r3, [fp, #4]
  402196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40219a:	bf00      	nop

0040219c <_vfiprintf_r>:
  40219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021a0:	b0ad      	sub	sp, #180	; 0xb4
  4021a2:	461d      	mov	r5, r3
  4021a4:	468b      	mov	fp, r1
  4021a6:	4690      	mov	r8, r2
  4021a8:	9307      	str	r3, [sp, #28]
  4021aa:	9006      	str	r0, [sp, #24]
  4021ac:	b118      	cbz	r0, 4021b6 <_vfiprintf_r+0x1a>
  4021ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	f000 80f3 	beq.w	40239c <_vfiprintf_r+0x200>
  4021b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4021ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4021be:	07df      	lsls	r7, r3, #31
  4021c0:	b281      	uxth	r1, r0
  4021c2:	d402      	bmi.n	4021ca <_vfiprintf_r+0x2e>
  4021c4:	058e      	lsls	r6, r1, #22
  4021c6:	f140 80fc 	bpl.w	4023c2 <_vfiprintf_r+0x226>
  4021ca:	048c      	lsls	r4, r1, #18
  4021cc:	d40a      	bmi.n	4021e4 <_vfiprintf_r+0x48>
  4021ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4021d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4021d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4021da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4021de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4021e2:	b289      	uxth	r1, r1
  4021e4:	0708      	lsls	r0, r1, #28
  4021e6:	f140 80b3 	bpl.w	402350 <_vfiprintf_r+0x1b4>
  4021ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4021ee:	2b00      	cmp	r3, #0
  4021f0:	f000 80ae 	beq.w	402350 <_vfiprintf_r+0x1b4>
  4021f4:	f001 031a 	and.w	r3, r1, #26
  4021f8:	2b0a      	cmp	r3, #10
  4021fa:	f000 80b5 	beq.w	402368 <_vfiprintf_r+0x1cc>
  4021fe:	2300      	movs	r3, #0
  402200:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402204:	930b      	str	r3, [sp, #44]	; 0x2c
  402206:	9311      	str	r3, [sp, #68]	; 0x44
  402208:	9310      	str	r3, [sp, #64]	; 0x40
  40220a:	9303      	str	r3, [sp, #12]
  40220c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402210:	46ca      	mov	sl, r9
  402212:	f8cd b010 	str.w	fp, [sp, #16]
  402216:	f898 3000 	ldrb.w	r3, [r8]
  40221a:	4644      	mov	r4, r8
  40221c:	b1fb      	cbz	r3, 40225e <_vfiprintf_r+0xc2>
  40221e:	2b25      	cmp	r3, #37	; 0x25
  402220:	d102      	bne.n	402228 <_vfiprintf_r+0x8c>
  402222:	e01c      	b.n	40225e <_vfiprintf_r+0xc2>
  402224:	2b25      	cmp	r3, #37	; 0x25
  402226:	d003      	beq.n	402230 <_vfiprintf_r+0x94>
  402228:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40222c:	2b00      	cmp	r3, #0
  40222e:	d1f9      	bne.n	402224 <_vfiprintf_r+0x88>
  402230:	eba4 0508 	sub.w	r5, r4, r8
  402234:	b19d      	cbz	r5, 40225e <_vfiprintf_r+0xc2>
  402236:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402238:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40223a:	f8ca 8000 	str.w	r8, [sl]
  40223e:	3301      	adds	r3, #1
  402240:	442a      	add	r2, r5
  402242:	2b07      	cmp	r3, #7
  402244:	f8ca 5004 	str.w	r5, [sl, #4]
  402248:	9211      	str	r2, [sp, #68]	; 0x44
  40224a:	9310      	str	r3, [sp, #64]	; 0x40
  40224c:	dd7a      	ble.n	402344 <_vfiprintf_r+0x1a8>
  40224e:	2a00      	cmp	r2, #0
  402250:	f040 84b0 	bne.w	402bb4 <_vfiprintf_r+0xa18>
  402254:	9b03      	ldr	r3, [sp, #12]
  402256:	9210      	str	r2, [sp, #64]	; 0x40
  402258:	442b      	add	r3, r5
  40225a:	46ca      	mov	sl, r9
  40225c:	9303      	str	r3, [sp, #12]
  40225e:	7823      	ldrb	r3, [r4, #0]
  402260:	2b00      	cmp	r3, #0
  402262:	f000 83e0 	beq.w	402a26 <_vfiprintf_r+0x88a>
  402266:	2000      	movs	r0, #0
  402268:	f04f 0300 	mov.w	r3, #0
  40226c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402270:	f104 0801 	add.w	r8, r4, #1
  402274:	7862      	ldrb	r2, [r4, #1]
  402276:	4605      	mov	r5, r0
  402278:	4606      	mov	r6, r0
  40227a:	4603      	mov	r3, r0
  40227c:	f04f 34ff 	mov.w	r4, #4294967295
  402280:	f108 0801 	add.w	r8, r8, #1
  402284:	f1a2 0120 	sub.w	r1, r2, #32
  402288:	2958      	cmp	r1, #88	; 0x58
  40228a:	f200 82de 	bhi.w	40284a <_vfiprintf_r+0x6ae>
  40228e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402292:	0221      	.short	0x0221
  402294:	02dc02dc 	.word	0x02dc02dc
  402298:	02dc0229 	.word	0x02dc0229
  40229c:	02dc02dc 	.word	0x02dc02dc
  4022a0:	02dc02dc 	.word	0x02dc02dc
  4022a4:	028902dc 	.word	0x028902dc
  4022a8:	02dc0295 	.word	0x02dc0295
  4022ac:	02bd00a2 	.word	0x02bd00a2
  4022b0:	019f02dc 	.word	0x019f02dc
  4022b4:	01a401a4 	.word	0x01a401a4
  4022b8:	01a401a4 	.word	0x01a401a4
  4022bc:	01a401a4 	.word	0x01a401a4
  4022c0:	01a401a4 	.word	0x01a401a4
  4022c4:	02dc01a4 	.word	0x02dc01a4
  4022c8:	02dc02dc 	.word	0x02dc02dc
  4022cc:	02dc02dc 	.word	0x02dc02dc
  4022d0:	02dc02dc 	.word	0x02dc02dc
  4022d4:	02dc02dc 	.word	0x02dc02dc
  4022d8:	01b202dc 	.word	0x01b202dc
  4022dc:	02dc02dc 	.word	0x02dc02dc
  4022e0:	02dc02dc 	.word	0x02dc02dc
  4022e4:	02dc02dc 	.word	0x02dc02dc
  4022e8:	02dc02dc 	.word	0x02dc02dc
  4022ec:	02dc02dc 	.word	0x02dc02dc
  4022f0:	02dc0197 	.word	0x02dc0197
  4022f4:	02dc02dc 	.word	0x02dc02dc
  4022f8:	02dc02dc 	.word	0x02dc02dc
  4022fc:	02dc019b 	.word	0x02dc019b
  402300:	025302dc 	.word	0x025302dc
  402304:	02dc02dc 	.word	0x02dc02dc
  402308:	02dc02dc 	.word	0x02dc02dc
  40230c:	02dc02dc 	.word	0x02dc02dc
  402310:	02dc02dc 	.word	0x02dc02dc
  402314:	02dc02dc 	.word	0x02dc02dc
  402318:	021b025a 	.word	0x021b025a
  40231c:	02dc02dc 	.word	0x02dc02dc
  402320:	026e02dc 	.word	0x026e02dc
  402324:	02dc021b 	.word	0x02dc021b
  402328:	027302dc 	.word	0x027302dc
  40232c:	01f502dc 	.word	0x01f502dc
  402330:	02090182 	.word	0x02090182
  402334:	02dc02d7 	.word	0x02dc02d7
  402338:	02dc029a 	.word	0x02dc029a
  40233c:	02dc00a7 	.word	0x02dc00a7
  402340:	022e02dc 	.word	0x022e02dc
  402344:	f10a 0a08 	add.w	sl, sl, #8
  402348:	9b03      	ldr	r3, [sp, #12]
  40234a:	442b      	add	r3, r5
  40234c:	9303      	str	r3, [sp, #12]
  40234e:	e786      	b.n	40225e <_vfiprintf_r+0xc2>
  402350:	4659      	mov	r1, fp
  402352:	9806      	ldr	r0, [sp, #24]
  402354:	f000 fdac 	bl	402eb0 <__swsetup_r>
  402358:	bb18      	cbnz	r0, 4023a2 <_vfiprintf_r+0x206>
  40235a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40235e:	f001 031a 	and.w	r3, r1, #26
  402362:	2b0a      	cmp	r3, #10
  402364:	f47f af4b 	bne.w	4021fe <_vfiprintf_r+0x62>
  402368:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40236c:	2b00      	cmp	r3, #0
  40236e:	f6ff af46 	blt.w	4021fe <_vfiprintf_r+0x62>
  402372:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402376:	07db      	lsls	r3, r3, #31
  402378:	d405      	bmi.n	402386 <_vfiprintf_r+0x1ea>
  40237a:	058f      	lsls	r7, r1, #22
  40237c:	d403      	bmi.n	402386 <_vfiprintf_r+0x1ea>
  40237e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402382:	f001 fac3 	bl	40390c <__retarget_lock_release_recursive>
  402386:	462b      	mov	r3, r5
  402388:	4642      	mov	r2, r8
  40238a:	4659      	mov	r1, fp
  40238c:	9806      	ldr	r0, [sp, #24]
  40238e:	f000 fd4d 	bl	402e2c <__sbprintf>
  402392:	9003      	str	r0, [sp, #12]
  402394:	9803      	ldr	r0, [sp, #12]
  402396:	b02d      	add	sp, #180	; 0xb4
  402398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40239c:	f000 fef4 	bl	403188 <__sinit>
  4023a0:	e709      	b.n	4021b6 <_vfiprintf_r+0x1a>
  4023a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4023a6:	07d9      	lsls	r1, r3, #31
  4023a8:	d404      	bmi.n	4023b4 <_vfiprintf_r+0x218>
  4023aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4023ae:	059a      	lsls	r2, r3, #22
  4023b0:	f140 84aa 	bpl.w	402d08 <_vfiprintf_r+0xb6c>
  4023b4:	f04f 33ff 	mov.w	r3, #4294967295
  4023b8:	9303      	str	r3, [sp, #12]
  4023ba:	9803      	ldr	r0, [sp, #12]
  4023bc:	b02d      	add	sp, #180	; 0xb4
  4023be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4023c6:	f001 fa9f 	bl	403908 <__retarget_lock_acquire_recursive>
  4023ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4023ce:	b281      	uxth	r1, r0
  4023d0:	e6fb      	b.n	4021ca <_vfiprintf_r+0x2e>
  4023d2:	4276      	negs	r6, r6
  4023d4:	9207      	str	r2, [sp, #28]
  4023d6:	f043 0304 	orr.w	r3, r3, #4
  4023da:	f898 2000 	ldrb.w	r2, [r8]
  4023de:	e74f      	b.n	402280 <_vfiprintf_r+0xe4>
  4023e0:	9608      	str	r6, [sp, #32]
  4023e2:	069e      	lsls	r6, r3, #26
  4023e4:	f100 8450 	bmi.w	402c88 <_vfiprintf_r+0xaec>
  4023e8:	9907      	ldr	r1, [sp, #28]
  4023ea:	06dd      	lsls	r5, r3, #27
  4023ec:	460a      	mov	r2, r1
  4023ee:	f100 83ef 	bmi.w	402bd0 <_vfiprintf_r+0xa34>
  4023f2:	0658      	lsls	r0, r3, #25
  4023f4:	f140 83ec 	bpl.w	402bd0 <_vfiprintf_r+0xa34>
  4023f8:	880e      	ldrh	r6, [r1, #0]
  4023fa:	3104      	adds	r1, #4
  4023fc:	2700      	movs	r7, #0
  4023fe:	2201      	movs	r2, #1
  402400:	9107      	str	r1, [sp, #28]
  402402:	f04f 0100 	mov.w	r1, #0
  402406:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40240a:	2500      	movs	r5, #0
  40240c:	1c61      	adds	r1, r4, #1
  40240e:	f000 8116 	beq.w	40263e <_vfiprintf_r+0x4a2>
  402412:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402416:	9102      	str	r1, [sp, #8]
  402418:	ea56 0107 	orrs.w	r1, r6, r7
  40241c:	f040 8114 	bne.w	402648 <_vfiprintf_r+0x4ac>
  402420:	2c00      	cmp	r4, #0
  402422:	f040 835c 	bne.w	402ade <_vfiprintf_r+0x942>
  402426:	2a00      	cmp	r2, #0
  402428:	f040 83b7 	bne.w	402b9a <_vfiprintf_r+0x9fe>
  40242c:	f013 0301 	ands.w	r3, r3, #1
  402430:	9305      	str	r3, [sp, #20]
  402432:	f000 8457 	beq.w	402ce4 <_vfiprintf_r+0xb48>
  402436:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40243a:	2330      	movs	r3, #48	; 0x30
  40243c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402440:	9b05      	ldr	r3, [sp, #20]
  402442:	42a3      	cmp	r3, r4
  402444:	bfb8      	it	lt
  402446:	4623      	movlt	r3, r4
  402448:	9301      	str	r3, [sp, #4]
  40244a:	b10d      	cbz	r5, 402450 <_vfiprintf_r+0x2b4>
  40244c:	3301      	adds	r3, #1
  40244e:	9301      	str	r3, [sp, #4]
  402450:	9b02      	ldr	r3, [sp, #8]
  402452:	f013 0302 	ands.w	r3, r3, #2
  402456:	9309      	str	r3, [sp, #36]	; 0x24
  402458:	d002      	beq.n	402460 <_vfiprintf_r+0x2c4>
  40245a:	9b01      	ldr	r3, [sp, #4]
  40245c:	3302      	adds	r3, #2
  40245e:	9301      	str	r3, [sp, #4]
  402460:	9b02      	ldr	r3, [sp, #8]
  402462:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402466:	930a      	str	r3, [sp, #40]	; 0x28
  402468:	f040 8217 	bne.w	40289a <_vfiprintf_r+0x6fe>
  40246c:	9b08      	ldr	r3, [sp, #32]
  40246e:	9a01      	ldr	r2, [sp, #4]
  402470:	1a9d      	subs	r5, r3, r2
  402472:	2d00      	cmp	r5, #0
  402474:	f340 8211 	ble.w	40289a <_vfiprintf_r+0x6fe>
  402478:	2d10      	cmp	r5, #16
  40247a:	f340 8490 	ble.w	402d9e <_vfiprintf_r+0xc02>
  40247e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402480:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402482:	4ec4      	ldr	r6, [pc, #784]	; (402794 <_vfiprintf_r+0x5f8>)
  402484:	46d6      	mov	lr, sl
  402486:	2710      	movs	r7, #16
  402488:	46a2      	mov	sl, r4
  40248a:	4619      	mov	r1, r3
  40248c:	9c06      	ldr	r4, [sp, #24]
  40248e:	e007      	b.n	4024a0 <_vfiprintf_r+0x304>
  402490:	f101 0c02 	add.w	ip, r1, #2
  402494:	f10e 0e08 	add.w	lr, lr, #8
  402498:	4601      	mov	r1, r0
  40249a:	3d10      	subs	r5, #16
  40249c:	2d10      	cmp	r5, #16
  40249e:	dd11      	ble.n	4024c4 <_vfiprintf_r+0x328>
  4024a0:	1c48      	adds	r0, r1, #1
  4024a2:	3210      	adds	r2, #16
  4024a4:	2807      	cmp	r0, #7
  4024a6:	9211      	str	r2, [sp, #68]	; 0x44
  4024a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4024ac:	9010      	str	r0, [sp, #64]	; 0x40
  4024ae:	ddef      	ble.n	402490 <_vfiprintf_r+0x2f4>
  4024b0:	2a00      	cmp	r2, #0
  4024b2:	f040 81e4 	bne.w	40287e <_vfiprintf_r+0x6e2>
  4024b6:	3d10      	subs	r5, #16
  4024b8:	2d10      	cmp	r5, #16
  4024ba:	4611      	mov	r1, r2
  4024bc:	f04f 0c01 	mov.w	ip, #1
  4024c0:	46ce      	mov	lr, r9
  4024c2:	dced      	bgt.n	4024a0 <_vfiprintf_r+0x304>
  4024c4:	4654      	mov	r4, sl
  4024c6:	4661      	mov	r1, ip
  4024c8:	46f2      	mov	sl, lr
  4024ca:	442a      	add	r2, r5
  4024cc:	2907      	cmp	r1, #7
  4024ce:	9211      	str	r2, [sp, #68]	; 0x44
  4024d0:	f8ca 6000 	str.w	r6, [sl]
  4024d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4024d8:	9110      	str	r1, [sp, #64]	; 0x40
  4024da:	f300 82ec 	bgt.w	402ab6 <_vfiprintf_r+0x91a>
  4024de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4024e2:	f10a 0a08 	add.w	sl, sl, #8
  4024e6:	1c48      	adds	r0, r1, #1
  4024e8:	2d00      	cmp	r5, #0
  4024ea:	f040 81de 	bne.w	4028aa <_vfiprintf_r+0x70e>
  4024ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024f0:	2b00      	cmp	r3, #0
  4024f2:	f000 81f8 	beq.w	4028e6 <_vfiprintf_r+0x74a>
  4024f6:	3202      	adds	r2, #2
  4024f8:	a90e      	add	r1, sp, #56	; 0x38
  4024fa:	2302      	movs	r3, #2
  4024fc:	2807      	cmp	r0, #7
  4024fe:	9211      	str	r2, [sp, #68]	; 0x44
  402500:	9010      	str	r0, [sp, #64]	; 0x40
  402502:	e88a 000a 	stmia.w	sl, {r1, r3}
  402506:	f340 81ea 	ble.w	4028de <_vfiprintf_r+0x742>
  40250a:	2a00      	cmp	r2, #0
  40250c:	f040 838c 	bne.w	402c28 <_vfiprintf_r+0xa8c>
  402510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402512:	2b80      	cmp	r3, #128	; 0x80
  402514:	f04f 0001 	mov.w	r0, #1
  402518:	4611      	mov	r1, r2
  40251a:	46ca      	mov	sl, r9
  40251c:	f040 81e7 	bne.w	4028ee <_vfiprintf_r+0x752>
  402520:	9b08      	ldr	r3, [sp, #32]
  402522:	9d01      	ldr	r5, [sp, #4]
  402524:	1b5e      	subs	r6, r3, r5
  402526:	2e00      	cmp	r6, #0
  402528:	f340 81e1 	ble.w	4028ee <_vfiprintf_r+0x752>
  40252c:	2e10      	cmp	r6, #16
  40252e:	4d9a      	ldr	r5, [pc, #616]	; (402798 <_vfiprintf_r+0x5fc>)
  402530:	f340 8450 	ble.w	402dd4 <_vfiprintf_r+0xc38>
  402534:	46d4      	mov	ip, sl
  402536:	2710      	movs	r7, #16
  402538:	46a2      	mov	sl, r4
  40253a:	9c06      	ldr	r4, [sp, #24]
  40253c:	e007      	b.n	40254e <_vfiprintf_r+0x3b2>
  40253e:	f101 0e02 	add.w	lr, r1, #2
  402542:	f10c 0c08 	add.w	ip, ip, #8
  402546:	4601      	mov	r1, r0
  402548:	3e10      	subs	r6, #16
  40254a:	2e10      	cmp	r6, #16
  40254c:	dd11      	ble.n	402572 <_vfiprintf_r+0x3d6>
  40254e:	1c48      	adds	r0, r1, #1
  402550:	3210      	adds	r2, #16
  402552:	2807      	cmp	r0, #7
  402554:	9211      	str	r2, [sp, #68]	; 0x44
  402556:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40255a:	9010      	str	r0, [sp, #64]	; 0x40
  40255c:	ddef      	ble.n	40253e <_vfiprintf_r+0x3a2>
  40255e:	2a00      	cmp	r2, #0
  402560:	f040 829d 	bne.w	402a9e <_vfiprintf_r+0x902>
  402564:	3e10      	subs	r6, #16
  402566:	2e10      	cmp	r6, #16
  402568:	f04f 0e01 	mov.w	lr, #1
  40256c:	4611      	mov	r1, r2
  40256e:	46cc      	mov	ip, r9
  402570:	dced      	bgt.n	40254e <_vfiprintf_r+0x3b2>
  402572:	4654      	mov	r4, sl
  402574:	46e2      	mov	sl, ip
  402576:	4432      	add	r2, r6
  402578:	f1be 0f07 	cmp.w	lr, #7
  40257c:	9211      	str	r2, [sp, #68]	; 0x44
  40257e:	e88a 0060 	stmia.w	sl, {r5, r6}
  402582:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402586:	f300 8369 	bgt.w	402c5c <_vfiprintf_r+0xac0>
  40258a:	f10a 0a08 	add.w	sl, sl, #8
  40258e:	f10e 0001 	add.w	r0, lr, #1
  402592:	4671      	mov	r1, lr
  402594:	e1ab      	b.n	4028ee <_vfiprintf_r+0x752>
  402596:	9608      	str	r6, [sp, #32]
  402598:	f013 0220 	ands.w	r2, r3, #32
  40259c:	f040 838c 	bne.w	402cb8 <_vfiprintf_r+0xb1c>
  4025a0:	f013 0110 	ands.w	r1, r3, #16
  4025a4:	f040 831a 	bne.w	402bdc <_vfiprintf_r+0xa40>
  4025a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4025ac:	f000 8316 	beq.w	402bdc <_vfiprintf_r+0xa40>
  4025b0:	9807      	ldr	r0, [sp, #28]
  4025b2:	460a      	mov	r2, r1
  4025b4:	4601      	mov	r1, r0
  4025b6:	3104      	adds	r1, #4
  4025b8:	8806      	ldrh	r6, [r0, #0]
  4025ba:	9107      	str	r1, [sp, #28]
  4025bc:	2700      	movs	r7, #0
  4025be:	e720      	b.n	402402 <_vfiprintf_r+0x266>
  4025c0:	9608      	str	r6, [sp, #32]
  4025c2:	f043 0310 	orr.w	r3, r3, #16
  4025c6:	e7e7      	b.n	402598 <_vfiprintf_r+0x3fc>
  4025c8:	9608      	str	r6, [sp, #32]
  4025ca:	f043 0310 	orr.w	r3, r3, #16
  4025ce:	e708      	b.n	4023e2 <_vfiprintf_r+0x246>
  4025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4025d4:	f898 2000 	ldrb.w	r2, [r8]
  4025d8:	e652      	b.n	402280 <_vfiprintf_r+0xe4>
  4025da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4025de:	2600      	movs	r6, #0
  4025e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4025e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4025e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4025ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4025f0:	2909      	cmp	r1, #9
  4025f2:	d9f5      	bls.n	4025e0 <_vfiprintf_r+0x444>
  4025f4:	e646      	b.n	402284 <_vfiprintf_r+0xe8>
  4025f6:	9608      	str	r6, [sp, #32]
  4025f8:	2800      	cmp	r0, #0
  4025fa:	f040 8408 	bne.w	402e0e <_vfiprintf_r+0xc72>
  4025fe:	f043 0310 	orr.w	r3, r3, #16
  402602:	069e      	lsls	r6, r3, #26
  402604:	f100 834c 	bmi.w	402ca0 <_vfiprintf_r+0xb04>
  402608:	06dd      	lsls	r5, r3, #27
  40260a:	f100 82f3 	bmi.w	402bf4 <_vfiprintf_r+0xa58>
  40260e:	0658      	lsls	r0, r3, #25
  402610:	f140 82f0 	bpl.w	402bf4 <_vfiprintf_r+0xa58>
  402614:	9d07      	ldr	r5, [sp, #28]
  402616:	f9b5 6000 	ldrsh.w	r6, [r5]
  40261a:	462a      	mov	r2, r5
  40261c:	17f7      	asrs	r7, r6, #31
  40261e:	3204      	adds	r2, #4
  402620:	4630      	mov	r0, r6
  402622:	4639      	mov	r1, r7
  402624:	9207      	str	r2, [sp, #28]
  402626:	2800      	cmp	r0, #0
  402628:	f171 0200 	sbcs.w	r2, r1, #0
  40262c:	f2c0 835d 	blt.w	402cea <_vfiprintf_r+0xb4e>
  402630:	1c61      	adds	r1, r4, #1
  402632:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402636:	f04f 0201 	mov.w	r2, #1
  40263a:	f47f aeea 	bne.w	402412 <_vfiprintf_r+0x276>
  40263e:	ea56 0107 	orrs.w	r1, r6, r7
  402642:	f000 824d 	beq.w	402ae0 <_vfiprintf_r+0x944>
  402646:	9302      	str	r3, [sp, #8]
  402648:	2a01      	cmp	r2, #1
  40264a:	f000 828c 	beq.w	402b66 <_vfiprintf_r+0x9ca>
  40264e:	2a02      	cmp	r2, #2
  402650:	f040 825c 	bne.w	402b0c <_vfiprintf_r+0x970>
  402654:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402656:	46cb      	mov	fp, r9
  402658:	0933      	lsrs	r3, r6, #4
  40265a:	f006 010f 	and.w	r1, r6, #15
  40265e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402662:	093a      	lsrs	r2, r7, #4
  402664:	461e      	mov	r6, r3
  402666:	4617      	mov	r7, r2
  402668:	5c43      	ldrb	r3, [r0, r1]
  40266a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40266e:	ea56 0307 	orrs.w	r3, r6, r7
  402672:	d1f1      	bne.n	402658 <_vfiprintf_r+0x4bc>
  402674:	eba9 030b 	sub.w	r3, r9, fp
  402678:	9305      	str	r3, [sp, #20]
  40267a:	e6e1      	b.n	402440 <_vfiprintf_r+0x2a4>
  40267c:	2800      	cmp	r0, #0
  40267e:	f040 83c0 	bne.w	402e02 <_vfiprintf_r+0xc66>
  402682:	0699      	lsls	r1, r3, #26
  402684:	f100 8367 	bmi.w	402d56 <_vfiprintf_r+0xbba>
  402688:	06da      	lsls	r2, r3, #27
  40268a:	f100 80f1 	bmi.w	402870 <_vfiprintf_r+0x6d4>
  40268e:	065b      	lsls	r3, r3, #25
  402690:	f140 80ee 	bpl.w	402870 <_vfiprintf_r+0x6d4>
  402694:	9a07      	ldr	r2, [sp, #28]
  402696:	6813      	ldr	r3, [r2, #0]
  402698:	3204      	adds	r2, #4
  40269a:	9207      	str	r2, [sp, #28]
  40269c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4026a0:	801a      	strh	r2, [r3, #0]
  4026a2:	e5b8      	b.n	402216 <_vfiprintf_r+0x7a>
  4026a4:	9807      	ldr	r0, [sp, #28]
  4026a6:	4a3d      	ldr	r2, [pc, #244]	; (40279c <_vfiprintf_r+0x600>)
  4026a8:	9608      	str	r6, [sp, #32]
  4026aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4026ac:	6806      	ldr	r6, [r0, #0]
  4026ae:	2278      	movs	r2, #120	; 0x78
  4026b0:	2130      	movs	r1, #48	; 0x30
  4026b2:	3004      	adds	r0, #4
  4026b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4026b8:	f043 0302 	orr.w	r3, r3, #2
  4026bc:	9007      	str	r0, [sp, #28]
  4026be:	2700      	movs	r7, #0
  4026c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4026c4:	2202      	movs	r2, #2
  4026c6:	e69c      	b.n	402402 <_vfiprintf_r+0x266>
  4026c8:	9608      	str	r6, [sp, #32]
  4026ca:	2800      	cmp	r0, #0
  4026cc:	d099      	beq.n	402602 <_vfiprintf_r+0x466>
  4026ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026d2:	e796      	b.n	402602 <_vfiprintf_r+0x466>
  4026d4:	f898 2000 	ldrb.w	r2, [r8]
  4026d8:	2d00      	cmp	r5, #0
  4026da:	f47f add1 	bne.w	402280 <_vfiprintf_r+0xe4>
  4026de:	2001      	movs	r0, #1
  4026e0:	2520      	movs	r5, #32
  4026e2:	e5cd      	b.n	402280 <_vfiprintf_r+0xe4>
  4026e4:	f043 0301 	orr.w	r3, r3, #1
  4026e8:	f898 2000 	ldrb.w	r2, [r8]
  4026ec:	e5c8      	b.n	402280 <_vfiprintf_r+0xe4>
  4026ee:	9608      	str	r6, [sp, #32]
  4026f0:	2800      	cmp	r0, #0
  4026f2:	f040 8393 	bne.w	402e1c <_vfiprintf_r+0xc80>
  4026f6:	4929      	ldr	r1, [pc, #164]	; (40279c <_vfiprintf_r+0x600>)
  4026f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4026fa:	069f      	lsls	r7, r3, #26
  4026fc:	f100 82e8 	bmi.w	402cd0 <_vfiprintf_r+0xb34>
  402700:	9807      	ldr	r0, [sp, #28]
  402702:	06de      	lsls	r6, r3, #27
  402704:	4601      	mov	r1, r0
  402706:	f100 8270 	bmi.w	402bea <_vfiprintf_r+0xa4e>
  40270a:	065d      	lsls	r5, r3, #25
  40270c:	f140 826d 	bpl.w	402bea <_vfiprintf_r+0xa4e>
  402710:	3104      	adds	r1, #4
  402712:	8806      	ldrh	r6, [r0, #0]
  402714:	9107      	str	r1, [sp, #28]
  402716:	2700      	movs	r7, #0
  402718:	07d8      	lsls	r0, r3, #31
  40271a:	f140 8222 	bpl.w	402b62 <_vfiprintf_r+0x9c6>
  40271e:	ea56 0107 	orrs.w	r1, r6, r7
  402722:	f000 821e 	beq.w	402b62 <_vfiprintf_r+0x9c6>
  402726:	2130      	movs	r1, #48	; 0x30
  402728:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40272c:	f043 0302 	orr.w	r3, r3, #2
  402730:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402734:	2202      	movs	r2, #2
  402736:	e664      	b.n	402402 <_vfiprintf_r+0x266>
  402738:	9608      	str	r6, [sp, #32]
  40273a:	2800      	cmp	r0, #0
  40273c:	f040 836b 	bne.w	402e16 <_vfiprintf_r+0xc7a>
  402740:	4917      	ldr	r1, [pc, #92]	; (4027a0 <_vfiprintf_r+0x604>)
  402742:	910b      	str	r1, [sp, #44]	; 0x2c
  402744:	e7d9      	b.n	4026fa <_vfiprintf_r+0x55e>
  402746:	9907      	ldr	r1, [sp, #28]
  402748:	9608      	str	r6, [sp, #32]
  40274a:	680a      	ldr	r2, [r1, #0]
  40274c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402750:	f04f 0000 	mov.w	r0, #0
  402754:	460a      	mov	r2, r1
  402756:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40275a:	3204      	adds	r2, #4
  40275c:	2001      	movs	r0, #1
  40275e:	9001      	str	r0, [sp, #4]
  402760:	9207      	str	r2, [sp, #28]
  402762:	9005      	str	r0, [sp, #20]
  402764:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402768:	9302      	str	r3, [sp, #8]
  40276a:	2400      	movs	r4, #0
  40276c:	e670      	b.n	402450 <_vfiprintf_r+0x2b4>
  40276e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402772:	f898 2000 	ldrb.w	r2, [r8]
  402776:	e583      	b.n	402280 <_vfiprintf_r+0xe4>
  402778:	f898 2000 	ldrb.w	r2, [r8]
  40277c:	2a6c      	cmp	r2, #108	; 0x6c
  40277e:	bf03      	ittte	eq
  402780:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402784:	f043 0320 	orreq.w	r3, r3, #32
  402788:	f108 0801 	addeq.w	r8, r8, #1
  40278c:	f043 0310 	orrne.w	r3, r3, #16
  402790:	e576      	b.n	402280 <_vfiprintf_r+0xe4>
  402792:	bf00      	nop
  402794:	00404bb0 	.word	0x00404bb0
  402798:	00404bc0 	.word	0x00404bc0
  40279c:	00404b94 	.word	0x00404b94
  4027a0:	00404b80 	.word	0x00404b80
  4027a4:	9907      	ldr	r1, [sp, #28]
  4027a6:	680e      	ldr	r6, [r1, #0]
  4027a8:	460a      	mov	r2, r1
  4027aa:	2e00      	cmp	r6, #0
  4027ac:	f102 0204 	add.w	r2, r2, #4
  4027b0:	f6ff ae0f 	blt.w	4023d2 <_vfiprintf_r+0x236>
  4027b4:	9207      	str	r2, [sp, #28]
  4027b6:	f898 2000 	ldrb.w	r2, [r8]
  4027ba:	e561      	b.n	402280 <_vfiprintf_r+0xe4>
  4027bc:	f898 2000 	ldrb.w	r2, [r8]
  4027c0:	2001      	movs	r0, #1
  4027c2:	252b      	movs	r5, #43	; 0x2b
  4027c4:	e55c      	b.n	402280 <_vfiprintf_r+0xe4>
  4027c6:	9907      	ldr	r1, [sp, #28]
  4027c8:	9608      	str	r6, [sp, #32]
  4027ca:	f8d1 b000 	ldr.w	fp, [r1]
  4027ce:	f04f 0200 	mov.w	r2, #0
  4027d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4027d6:	1d0e      	adds	r6, r1, #4
  4027d8:	f1bb 0f00 	cmp.w	fp, #0
  4027dc:	f000 82e5 	beq.w	402daa <_vfiprintf_r+0xc0e>
  4027e0:	1c67      	adds	r7, r4, #1
  4027e2:	f000 82c4 	beq.w	402d6e <_vfiprintf_r+0xbd2>
  4027e6:	4622      	mov	r2, r4
  4027e8:	2100      	movs	r1, #0
  4027ea:	4658      	mov	r0, fp
  4027ec:	9301      	str	r3, [sp, #4]
  4027ee:	f001 fbd7 	bl	403fa0 <memchr>
  4027f2:	9b01      	ldr	r3, [sp, #4]
  4027f4:	2800      	cmp	r0, #0
  4027f6:	f000 82e5 	beq.w	402dc4 <_vfiprintf_r+0xc28>
  4027fa:	eba0 020b 	sub.w	r2, r0, fp
  4027fe:	9205      	str	r2, [sp, #20]
  402800:	9607      	str	r6, [sp, #28]
  402802:	9302      	str	r3, [sp, #8]
  402804:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402808:	2400      	movs	r4, #0
  40280a:	e619      	b.n	402440 <_vfiprintf_r+0x2a4>
  40280c:	f898 2000 	ldrb.w	r2, [r8]
  402810:	2a2a      	cmp	r2, #42	; 0x2a
  402812:	f108 0701 	add.w	r7, r8, #1
  402816:	f000 82e9 	beq.w	402dec <_vfiprintf_r+0xc50>
  40281a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40281e:	2909      	cmp	r1, #9
  402820:	46b8      	mov	r8, r7
  402822:	f04f 0400 	mov.w	r4, #0
  402826:	f63f ad2d 	bhi.w	402284 <_vfiprintf_r+0xe8>
  40282a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40282e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402832:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402836:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40283a:	2909      	cmp	r1, #9
  40283c:	d9f5      	bls.n	40282a <_vfiprintf_r+0x68e>
  40283e:	e521      	b.n	402284 <_vfiprintf_r+0xe8>
  402840:	f043 0320 	orr.w	r3, r3, #32
  402844:	f898 2000 	ldrb.w	r2, [r8]
  402848:	e51a      	b.n	402280 <_vfiprintf_r+0xe4>
  40284a:	9608      	str	r6, [sp, #32]
  40284c:	2800      	cmp	r0, #0
  40284e:	f040 82db 	bne.w	402e08 <_vfiprintf_r+0xc6c>
  402852:	2a00      	cmp	r2, #0
  402854:	f000 80e7 	beq.w	402a26 <_vfiprintf_r+0x88a>
  402858:	2101      	movs	r1, #1
  40285a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40285e:	f04f 0200 	mov.w	r2, #0
  402862:	9101      	str	r1, [sp, #4]
  402864:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402868:	9105      	str	r1, [sp, #20]
  40286a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40286e:	e77b      	b.n	402768 <_vfiprintf_r+0x5cc>
  402870:	9a07      	ldr	r2, [sp, #28]
  402872:	6813      	ldr	r3, [r2, #0]
  402874:	3204      	adds	r2, #4
  402876:	9207      	str	r2, [sp, #28]
  402878:	9a03      	ldr	r2, [sp, #12]
  40287a:	601a      	str	r2, [r3, #0]
  40287c:	e4cb      	b.n	402216 <_vfiprintf_r+0x7a>
  40287e:	aa0f      	add	r2, sp, #60	; 0x3c
  402880:	9904      	ldr	r1, [sp, #16]
  402882:	4620      	mov	r0, r4
  402884:	f7ff fc4a 	bl	40211c <__sprint_r.part.0>
  402888:	2800      	cmp	r0, #0
  40288a:	f040 8139 	bne.w	402b00 <_vfiprintf_r+0x964>
  40288e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402890:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402892:	f101 0c01 	add.w	ip, r1, #1
  402896:	46ce      	mov	lr, r9
  402898:	e5ff      	b.n	40249a <_vfiprintf_r+0x2fe>
  40289a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40289c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40289e:	1c48      	adds	r0, r1, #1
  4028a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4028a4:	2d00      	cmp	r5, #0
  4028a6:	f43f ae22 	beq.w	4024ee <_vfiprintf_r+0x352>
  4028aa:	3201      	adds	r2, #1
  4028ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4028b0:	2101      	movs	r1, #1
  4028b2:	2807      	cmp	r0, #7
  4028b4:	9211      	str	r2, [sp, #68]	; 0x44
  4028b6:	9010      	str	r0, [sp, #64]	; 0x40
  4028b8:	f8ca 5000 	str.w	r5, [sl]
  4028bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4028c0:	f340 8108 	ble.w	402ad4 <_vfiprintf_r+0x938>
  4028c4:	2a00      	cmp	r2, #0
  4028c6:	f040 81bc 	bne.w	402c42 <_vfiprintf_r+0xaa6>
  4028ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	f43f ae1f 	beq.w	402510 <_vfiprintf_r+0x374>
  4028d2:	ab0e      	add	r3, sp, #56	; 0x38
  4028d4:	2202      	movs	r2, #2
  4028d6:	4608      	mov	r0, r1
  4028d8:	931c      	str	r3, [sp, #112]	; 0x70
  4028da:	921d      	str	r2, [sp, #116]	; 0x74
  4028dc:	46ca      	mov	sl, r9
  4028de:	4601      	mov	r1, r0
  4028e0:	f10a 0a08 	add.w	sl, sl, #8
  4028e4:	3001      	adds	r0, #1
  4028e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4028e8:	2b80      	cmp	r3, #128	; 0x80
  4028ea:	f43f ae19 	beq.w	402520 <_vfiprintf_r+0x384>
  4028ee:	9b05      	ldr	r3, [sp, #20]
  4028f0:	1ae4      	subs	r4, r4, r3
  4028f2:	2c00      	cmp	r4, #0
  4028f4:	dd2e      	ble.n	402954 <_vfiprintf_r+0x7b8>
  4028f6:	2c10      	cmp	r4, #16
  4028f8:	4db3      	ldr	r5, [pc, #716]	; (402bc8 <_vfiprintf_r+0xa2c>)
  4028fa:	dd1e      	ble.n	40293a <_vfiprintf_r+0x79e>
  4028fc:	46d6      	mov	lr, sl
  4028fe:	2610      	movs	r6, #16
  402900:	9f06      	ldr	r7, [sp, #24]
  402902:	f8dd a010 	ldr.w	sl, [sp, #16]
  402906:	e006      	b.n	402916 <_vfiprintf_r+0x77a>
  402908:	1c88      	adds	r0, r1, #2
  40290a:	f10e 0e08 	add.w	lr, lr, #8
  40290e:	4619      	mov	r1, r3
  402910:	3c10      	subs	r4, #16
  402912:	2c10      	cmp	r4, #16
  402914:	dd10      	ble.n	402938 <_vfiprintf_r+0x79c>
  402916:	1c4b      	adds	r3, r1, #1
  402918:	3210      	adds	r2, #16
  40291a:	2b07      	cmp	r3, #7
  40291c:	9211      	str	r2, [sp, #68]	; 0x44
  40291e:	e88e 0060 	stmia.w	lr, {r5, r6}
  402922:	9310      	str	r3, [sp, #64]	; 0x40
  402924:	ddf0      	ble.n	402908 <_vfiprintf_r+0x76c>
  402926:	2a00      	cmp	r2, #0
  402928:	d165      	bne.n	4029f6 <_vfiprintf_r+0x85a>
  40292a:	3c10      	subs	r4, #16
  40292c:	2c10      	cmp	r4, #16
  40292e:	f04f 0001 	mov.w	r0, #1
  402932:	4611      	mov	r1, r2
  402934:	46ce      	mov	lr, r9
  402936:	dcee      	bgt.n	402916 <_vfiprintf_r+0x77a>
  402938:	46f2      	mov	sl, lr
  40293a:	4422      	add	r2, r4
  40293c:	2807      	cmp	r0, #7
  40293e:	9211      	str	r2, [sp, #68]	; 0x44
  402940:	f8ca 5000 	str.w	r5, [sl]
  402944:	f8ca 4004 	str.w	r4, [sl, #4]
  402948:	9010      	str	r0, [sp, #64]	; 0x40
  40294a:	f300 8085 	bgt.w	402a58 <_vfiprintf_r+0x8bc>
  40294e:	f10a 0a08 	add.w	sl, sl, #8
  402952:	3001      	adds	r0, #1
  402954:	9905      	ldr	r1, [sp, #20]
  402956:	f8ca b000 	str.w	fp, [sl]
  40295a:	440a      	add	r2, r1
  40295c:	2807      	cmp	r0, #7
  40295e:	9211      	str	r2, [sp, #68]	; 0x44
  402960:	f8ca 1004 	str.w	r1, [sl, #4]
  402964:	9010      	str	r0, [sp, #64]	; 0x40
  402966:	f340 8082 	ble.w	402a6e <_vfiprintf_r+0x8d2>
  40296a:	2a00      	cmp	r2, #0
  40296c:	f040 8118 	bne.w	402ba0 <_vfiprintf_r+0xa04>
  402970:	9b02      	ldr	r3, [sp, #8]
  402972:	9210      	str	r2, [sp, #64]	; 0x40
  402974:	0758      	lsls	r0, r3, #29
  402976:	d535      	bpl.n	4029e4 <_vfiprintf_r+0x848>
  402978:	9b08      	ldr	r3, [sp, #32]
  40297a:	9901      	ldr	r1, [sp, #4]
  40297c:	1a5c      	subs	r4, r3, r1
  40297e:	2c00      	cmp	r4, #0
  402980:	f340 80e7 	ble.w	402b52 <_vfiprintf_r+0x9b6>
  402984:	46ca      	mov	sl, r9
  402986:	2c10      	cmp	r4, #16
  402988:	f340 8218 	ble.w	402dbc <_vfiprintf_r+0xc20>
  40298c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40298e:	4e8f      	ldr	r6, [pc, #572]	; (402bcc <_vfiprintf_r+0xa30>)
  402990:	9f06      	ldr	r7, [sp, #24]
  402992:	f8dd b010 	ldr.w	fp, [sp, #16]
  402996:	2510      	movs	r5, #16
  402998:	e006      	b.n	4029a8 <_vfiprintf_r+0x80c>
  40299a:	1c88      	adds	r0, r1, #2
  40299c:	f10a 0a08 	add.w	sl, sl, #8
  4029a0:	4619      	mov	r1, r3
  4029a2:	3c10      	subs	r4, #16
  4029a4:	2c10      	cmp	r4, #16
  4029a6:	dd11      	ble.n	4029cc <_vfiprintf_r+0x830>
  4029a8:	1c4b      	adds	r3, r1, #1
  4029aa:	3210      	adds	r2, #16
  4029ac:	2b07      	cmp	r3, #7
  4029ae:	9211      	str	r2, [sp, #68]	; 0x44
  4029b0:	f8ca 6000 	str.w	r6, [sl]
  4029b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4029b8:	9310      	str	r3, [sp, #64]	; 0x40
  4029ba:	ddee      	ble.n	40299a <_vfiprintf_r+0x7fe>
  4029bc:	bb42      	cbnz	r2, 402a10 <_vfiprintf_r+0x874>
  4029be:	3c10      	subs	r4, #16
  4029c0:	2c10      	cmp	r4, #16
  4029c2:	f04f 0001 	mov.w	r0, #1
  4029c6:	4611      	mov	r1, r2
  4029c8:	46ca      	mov	sl, r9
  4029ca:	dced      	bgt.n	4029a8 <_vfiprintf_r+0x80c>
  4029cc:	4422      	add	r2, r4
  4029ce:	2807      	cmp	r0, #7
  4029d0:	9211      	str	r2, [sp, #68]	; 0x44
  4029d2:	f8ca 6000 	str.w	r6, [sl]
  4029d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4029da:	9010      	str	r0, [sp, #64]	; 0x40
  4029dc:	dd51      	ble.n	402a82 <_vfiprintf_r+0x8e6>
  4029de:	2a00      	cmp	r2, #0
  4029e0:	f040 819b 	bne.w	402d1a <_vfiprintf_r+0xb7e>
  4029e4:	9b03      	ldr	r3, [sp, #12]
  4029e6:	9a08      	ldr	r2, [sp, #32]
  4029e8:	9901      	ldr	r1, [sp, #4]
  4029ea:	428a      	cmp	r2, r1
  4029ec:	bfac      	ite	ge
  4029ee:	189b      	addge	r3, r3, r2
  4029f0:	185b      	addlt	r3, r3, r1
  4029f2:	9303      	str	r3, [sp, #12]
  4029f4:	e04e      	b.n	402a94 <_vfiprintf_r+0x8f8>
  4029f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4029f8:	4651      	mov	r1, sl
  4029fa:	4638      	mov	r0, r7
  4029fc:	f7ff fb8e 	bl	40211c <__sprint_r.part.0>
  402a00:	2800      	cmp	r0, #0
  402a02:	f040 813f 	bne.w	402c84 <_vfiprintf_r+0xae8>
  402a06:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a0a:	1c48      	adds	r0, r1, #1
  402a0c:	46ce      	mov	lr, r9
  402a0e:	e77f      	b.n	402910 <_vfiprintf_r+0x774>
  402a10:	aa0f      	add	r2, sp, #60	; 0x3c
  402a12:	4659      	mov	r1, fp
  402a14:	4638      	mov	r0, r7
  402a16:	f7ff fb81 	bl	40211c <__sprint_r.part.0>
  402a1a:	b960      	cbnz	r0, 402a36 <_vfiprintf_r+0x89a>
  402a1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a20:	1c48      	adds	r0, r1, #1
  402a22:	46ca      	mov	sl, r9
  402a24:	e7bd      	b.n	4029a2 <_vfiprintf_r+0x806>
  402a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402a28:	f8dd b010 	ldr.w	fp, [sp, #16]
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	f040 81d4 	bne.w	402dda <_vfiprintf_r+0xc3e>
  402a32:	2300      	movs	r3, #0
  402a34:	9310      	str	r3, [sp, #64]	; 0x40
  402a36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402a3a:	f013 0f01 	tst.w	r3, #1
  402a3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402a42:	d102      	bne.n	402a4a <_vfiprintf_r+0x8ae>
  402a44:	059a      	lsls	r2, r3, #22
  402a46:	f140 80de 	bpl.w	402c06 <_vfiprintf_r+0xa6a>
  402a4a:	065b      	lsls	r3, r3, #25
  402a4c:	f53f acb2 	bmi.w	4023b4 <_vfiprintf_r+0x218>
  402a50:	9803      	ldr	r0, [sp, #12]
  402a52:	b02d      	add	sp, #180	; 0xb4
  402a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a58:	2a00      	cmp	r2, #0
  402a5a:	f040 8106 	bne.w	402c6a <_vfiprintf_r+0xace>
  402a5e:	9a05      	ldr	r2, [sp, #20]
  402a60:	921d      	str	r2, [sp, #116]	; 0x74
  402a62:	2301      	movs	r3, #1
  402a64:	9211      	str	r2, [sp, #68]	; 0x44
  402a66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402a6a:	9310      	str	r3, [sp, #64]	; 0x40
  402a6c:	46ca      	mov	sl, r9
  402a6e:	f10a 0a08 	add.w	sl, sl, #8
  402a72:	9b02      	ldr	r3, [sp, #8]
  402a74:	0759      	lsls	r1, r3, #29
  402a76:	d504      	bpl.n	402a82 <_vfiprintf_r+0x8e6>
  402a78:	9b08      	ldr	r3, [sp, #32]
  402a7a:	9901      	ldr	r1, [sp, #4]
  402a7c:	1a5c      	subs	r4, r3, r1
  402a7e:	2c00      	cmp	r4, #0
  402a80:	dc81      	bgt.n	402986 <_vfiprintf_r+0x7ea>
  402a82:	9b03      	ldr	r3, [sp, #12]
  402a84:	9908      	ldr	r1, [sp, #32]
  402a86:	9801      	ldr	r0, [sp, #4]
  402a88:	4281      	cmp	r1, r0
  402a8a:	bfac      	ite	ge
  402a8c:	185b      	addge	r3, r3, r1
  402a8e:	181b      	addlt	r3, r3, r0
  402a90:	9303      	str	r3, [sp, #12]
  402a92:	bb72      	cbnz	r2, 402af2 <_vfiprintf_r+0x956>
  402a94:	2300      	movs	r3, #0
  402a96:	9310      	str	r3, [sp, #64]	; 0x40
  402a98:	46ca      	mov	sl, r9
  402a9a:	f7ff bbbc 	b.w	402216 <_vfiprintf_r+0x7a>
  402a9e:	aa0f      	add	r2, sp, #60	; 0x3c
  402aa0:	9904      	ldr	r1, [sp, #16]
  402aa2:	4620      	mov	r0, r4
  402aa4:	f7ff fb3a 	bl	40211c <__sprint_r.part.0>
  402aa8:	bb50      	cbnz	r0, 402b00 <_vfiprintf_r+0x964>
  402aaa:	9910      	ldr	r1, [sp, #64]	; 0x40
  402aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aae:	f101 0e01 	add.w	lr, r1, #1
  402ab2:	46cc      	mov	ip, r9
  402ab4:	e548      	b.n	402548 <_vfiprintf_r+0x3ac>
  402ab6:	2a00      	cmp	r2, #0
  402ab8:	f040 8140 	bne.w	402d3c <_vfiprintf_r+0xba0>
  402abc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402ac0:	2900      	cmp	r1, #0
  402ac2:	f000 811b 	beq.w	402cfc <_vfiprintf_r+0xb60>
  402ac6:	2201      	movs	r2, #1
  402ac8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402acc:	4610      	mov	r0, r2
  402ace:	921d      	str	r2, [sp, #116]	; 0x74
  402ad0:	911c      	str	r1, [sp, #112]	; 0x70
  402ad2:	46ca      	mov	sl, r9
  402ad4:	4601      	mov	r1, r0
  402ad6:	f10a 0a08 	add.w	sl, sl, #8
  402ada:	3001      	adds	r0, #1
  402adc:	e507      	b.n	4024ee <_vfiprintf_r+0x352>
  402ade:	9b02      	ldr	r3, [sp, #8]
  402ae0:	2a01      	cmp	r2, #1
  402ae2:	f000 8098 	beq.w	402c16 <_vfiprintf_r+0xa7a>
  402ae6:	2a02      	cmp	r2, #2
  402ae8:	d10d      	bne.n	402b06 <_vfiprintf_r+0x96a>
  402aea:	9302      	str	r3, [sp, #8]
  402aec:	2600      	movs	r6, #0
  402aee:	2700      	movs	r7, #0
  402af0:	e5b0      	b.n	402654 <_vfiprintf_r+0x4b8>
  402af2:	aa0f      	add	r2, sp, #60	; 0x3c
  402af4:	9904      	ldr	r1, [sp, #16]
  402af6:	9806      	ldr	r0, [sp, #24]
  402af8:	f7ff fb10 	bl	40211c <__sprint_r.part.0>
  402afc:	2800      	cmp	r0, #0
  402afe:	d0c9      	beq.n	402a94 <_vfiprintf_r+0x8f8>
  402b00:	f8dd b010 	ldr.w	fp, [sp, #16]
  402b04:	e797      	b.n	402a36 <_vfiprintf_r+0x89a>
  402b06:	9302      	str	r3, [sp, #8]
  402b08:	2600      	movs	r6, #0
  402b0a:	2700      	movs	r7, #0
  402b0c:	4649      	mov	r1, r9
  402b0e:	e000      	b.n	402b12 <_vfiprintf_r+0x976>
  402b10:	4659      	mov	r1, fp
  402b12:	08f2      	lsrs	r2, r6, #3
  402b14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402b18:	08f8      	lsrs	r0, r7, #3
  402b1a:	f006 0307 	and.w	r3, r6, #7
  402b1e:	4607      	mov	r7, r0
  402b20:	4616      	mov	r6, r2
  402b22:	3330      	adds	r3, #48	; 0x30
  402b24:	ea56 0207 	orrs.w	r2, r6, r7
  402b28:	f801 3c01 	strb.w	r3, [r1, #-1]
  402b2c:	f101 3bff 	add.w	fp, r1, #4294967295
  402b30:	d1ee      	bne.n	402b10 <_vfiprintf_r+0x974>
  402b32:	9a02      	ldr	r2, [sp, #8]
  402b34:	07d6      	lsls	r6, r2, #31
  402b36:	f57f ad9d 	bpl.w	402674 <_vfiprintf_r+0x4d8>
  402b3a:	2b30      	cmp	r3, #48	; 0x30
  402b3c:	f43f ad9a 	beq.w	402674 <_vfiprintf_r+0x4d8>
  402b40:	3902      	subs	r1, #2
  402b42:	2330      	movs	r3, #48	; 0x30
  402b44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402b48:	eba9 0301 	sub.w	r3, r9, r1
  402b4c:	9305      	str	r3, [sp, #20]
  402b4e:	468b      	mov	fp, r1
  402b50:	e476      	b.n	402440 <_vfiprintf_r+0x2a4>
  402b52:	9b03      	ldr	r3, [sp, #12]
  402b54:	9a08      	ldr	r2, [sp, #32]
  402b56:	428a      	cmp	r2, r1
  402b58:	bfac      	ite	ge
  402b5a:	189b      	addge	r3, r3, r2
  402b5c:	185b      	addlt	r3, r3, r1
  402b5e:	9303      	str	r3, [sp, #12]
  402b60:	e798      	b.n	402a94 <_vfiprintf_r+0x8f8>
  402b62:	2202      	movs	r2, #2
  402b64:	e44d      	b.n	402402 <_vfiprintf_r+0x266>
  402b66:	2f00      	cmp	r7, #0
  402b68:	bf08      	it	eq
  402b6a:	2e0a      	cmpeq	r6, #10
  402b6c:	d352      	bcc.n	402c14 <_vfiprintf_r+0xa78>
  402b6e:	46cb      	mov	fp, r9
  402b70:	4630      	mov	r0, r6
  402b72:	4639      	mov	r1, r7
  402b74:	220a      	movs	r2, #10
  402b76:	2300      	movs	r3, #0
  402b78:	f7fe fe86 	bl	401888 <__aeabi_uldivmod>
  402b7c:	3230      	adds	r2, #48	; 0x30
  402b7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402b82:	4630      	mov	r0, r6
  402b84:	4639      	mov	r1, r7
  402b86:	2300      	movs	r3, #0
  402b88:	220a      	movs	r2, #10
  402b8a:	f7fe fe7d 	bl	401888 <__aeabi_uldivmod>
  402b8e:	4606      	mov	r6, r0
  402b90:	460f      	mov	r7, r1
  402b92:	ea56 0307 	orrs.w	r3, r6, r7
  402b96:	d1eb      	bne.n	402b70 <_vfiprintf_r+0x9d4>
  402b98:	e56c      	b.n	402674 <_vfiprintf_r+0x4d8>
  402b9a:	9405      	str	r4, [sp, #20]
  402b9c:	46cb      	mov	fp, r9
  402b9e:	e44f      	b.n	402440 <_vfiprintf_r+0x2a4>
  402ba0:	aa0f      	add	r2, sp, #60	; 0x3c
  402ba2:	9904      	ldr	r1, [sp, #16]
  402ba4:	9806      	ldr	r0, [sp, #24]
  402ba6:	f7ff fab9 	bl	40211c <__sprint_r.part.0>
  402baa:	2800      	cmp	r0, #0
  402bac:	d1a8      	bne.n	402b00 <_vfiprintf_r+0x964>
  402bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402bb0:	46ca      	mov	sl, r9
  402bb2:	e75e      	b.n	402a72 <_vfiprintf_r+0x8d6>
  402bb4:	aa0f      	add	r2, sp, #60	; 0x3c
  402bb6:	9904      	ldr	r1, [sp, #16]
  402bb8:	9806      	ldr	r0, [sp, #24]
  402bba:	f7ff faaf 	bl	40211c <__sprint_r.part.0>
  402bbe:	2800      	cmp	r0, #0
  402bc0:	d19e      	bne.n	402b00 <_vfiprintf_r+0x964>
  402bc2:	46ca      	mov	sl, r9
  402bc4:	f7ff bbc0 	b.w	402348 <_vfiprintf_r+0x1ac>
  402bc8:	00404bc0 	.word	0x00404bc0
  402bcc:	00404bb0 	.word	0x00404bb0
  402bd0:	3104      	adds	r1, #4
  402bd2:	6816      	ldr	r6, [r2, #0]
  402bd4:	9107      	str	r1, [sp, #28]
  402bd6:	2201      	movs	r2, #1
  402bd8:	2700      	movs	r7, #0
  402bda:	e412      	b.n	402402 <_vfiprintf_r+0x266>
  402bdc:	9807      	ldr	r0, [sp, #28]
  402bde:	4601      	mov	r1, r0
  402be0:	3104      	adds	r1, #4
  402be2:	6806      	ldr	r6, [r0, #0]
  402be4:	9107      	str	r1, [sp, #28]
  402be6:	2700      	movs	r7, #0
  402be8:	e40b      	b.n	402402 <_vfiprintf_r+0x266>
  402bea:	680e      	ldr	r6, [r1, #0]
  402bec:	3104      	adds	r1, #4
  402bee:	9107      	str	r1, [sp, #28]
  402bf0:	2700      	movs	r7, #0
  402bf2:	e591      	b.n	402718 <_vfiprintf_r+0x57c>
  402bf4:	9907      	ldr	r1, [sp, #28]
  402bf6:	680e      	ldr	r6, [r1, #0]
  402bf8:	460a      	mov	r2, r1
  402bfa:	17f7      	asrs	r7, r6, #31
  402bfc:	3204      	adds	r2, #4
  402bfe:	9207      	str	r2, [sp, #28]
  402c00:	4630      	mov	r0, r6
  402c02:	4639      	mov	r1, r7
  402c04:	e50f      	b.n	402626 <_vfiprintf_r+0x48a>
  402c06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c0a:	f000 fe7f 	bl	40390c <__retarget_lock_release_recursive>
  402c0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402c12:	e71a      	b.n	402a4a <_vfiprintf_r+0x8ae>
  402c14:	9b02      	ldr	r3, [sp, #8]
  402c16:	9302      	str	r3, [sp, #8]
  402c18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402c1c:	3630      	adds	r6, #48	; 0x30
  402c1e:	2301      	movs	r3, #1
  402c20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402c24:	9305      	str	r3, [sp, #20]
  402c26:	e40b      	b.n	402440 <_vfiprintf_r+0x2a4>
  402c28:	aa0f      	add	r2, sp, #60	; 0x3c
  402c2a:	9904      	ldr	r1, [sp, #16]
  402c2c:	9806      	ldr	r0, [sp, #24]
  402c2e:	f7ff fa75 	bl	40211c <__sprint_r.part.0>
  402c32:	2800      	cmp	r0, #0
  402c34:	f47f af64 	bne.w	402b00 <_vfiprintf_r+0x964>
  402c38:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c3c:	1c48      	adds	r0, r1, #1
  402c3e:	46ca      	mov	sl, r9
  402c40:	e651      	b.n	4028e6 <_vfiprintf_r+0x74a>
  402c42:	aa0f      	add	r2, sp, #60	; 0x3c
  402c44:	9904      	ldr	r1, [sp, #16]
  402c46:	9806      	ldr	r0, [sp, #24]
  402c48:	f7ff fa68 	bl	40211c <__sprint_r.part.0>
  402c4c:	2800      	cmp	r0, #0
  402c4e:	f47f af57 	bne.w	402b00 <_vfiprintf_r+0x964>
  402c52:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c56:	1c48      	adds	r0, r1, #1
  402c58:	46ca      	mov	sl, r9
  402c5a:	e448      	b.n	4024ee <_vfiprintf_r+0x352>
  402c5c:	2a00      	cmp	r2, #0
  402c5e:	f040 8091 	bne.w	402d84 <_vfiprintf_r+0xbe8>
  402c62:	2001      	movs	r0, #1
  402c64:	4611      	mov	r1, r2
  402c66:	46ca      	mov	sl, r9
  402c68:	e641      	b.n	4028ee <_vfiprintf_r+0x752>
  402c6a:	aa0f      	add	r2, sp, #60	; 0x3c
  402c6c:	9904      	ldr	r1, [sp, #16]
  402c6e:	9806      	ldr	r0, [sp, #24]
  402c70:	f7ff fa54 	bl	40211c <__sprint_r.part.0>
  402c74:	2800      	cmp	r0, #0
  402c76:	f47f af43 	bne.w	402b00 <_vfiprintf_r+0x964>
  402c7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  402c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c7e:	3001      	adds	r0, #1
  402c80:	46ca      	mov	sl, r9
  402c82:	e667      	b.n	402954 <_vfiprintf_r+0x7b8>
  402c84:	46d3      	mov	fp, sl
  402c86:	e6d6      	b.n	402a36 <_vfiprintf_r+0x89a>
  402c88:	9e07      	ldr	r6, [sp, #28]
  402c8a:	3607      	adds	r6, #7
  402c8c:	f026 0207 	bic.w	r2, r6, #7
  402c90:	f102 0108 	add.w	r1, r2, #8
  402c94:	e9d2 6700 	ldrd	r6, r7, [r2]
  402c98:	9107      	str	r1, [sp, #28]
  402c9a:	2201      	movs	r2, #1
  402c9c:	f7ff bbb1 	b.w	402402 <_vfiprintf_r+0x266>
  402ca0:	9e07      	ldr	r6, [sp, #28]
  402ca2:	3607      	adds	r6, #7
  402ca4:	f026 0607 	bic.w	r6, r6, #7
  402ca8:	e9d6 0100 	ldrd	r0, r1, [r6]
  402cac:	f106 0208 	add.w	r2, r6, #8
  402cb0:	9207      	str	r2, [sp, #28]
  402cb2:	4606      	mov	r6, r0
  402cb4:	460f      	mov	r7, r1
  402cb6:	e4b6      	b.n	402626 <_vfiprintf_r+0x48a>
  402cb8:	9e07      	ldr	r6, [sp, #28]
  402cba:	3607      	adds	r6, #7
  402cbc:	f026 0207 	bic.w	r2, r6, #7
  402cc0:	f102 0108 	add.w	r1, r2, #8
  402cc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  402cc8:	9107      	str	r1, [sp, #28]
  402cca:	2200      	movs	r2, #0
  402ccc:	f7ff bb99 	b.w	402402 <_vfiprintf_r+0x266>
  402cd0:	9e07      	ldr	r6, [sp, #28]
  402cd2:	3607      	adds	r6, #7
  402cd4:	f026 0107 	bic.w	r1, r6, #7
  402cd8:	f101 0008 	add.w	r0, r1, #8
  402cdc:	9007      	str	r0, [sp, #28]
  402cde:	e9d1 6700 	ldrd	r6, r7, [r1]
  402ce2:	e519      	b.n	402718 <_vfiprintf_r+0x57c>
  402ce4:	46cb      	mov	fp, r9
  402ce6:	f7ff bbab 	b.w	402440 <_vfiprintf_r+0x2a4>
  402cea:	252d      	movs	r5, #45	; 0x2d
  402cec:	4276      	negs	r6, r6
  402cee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402cf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402cf6:	2201      	movs	r2, #1
  402cf8:	f7ff bb88 	b.w	40240c <_vfiprintf_r+0x270>
  402cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402cfe:	b9b3      	cbnz	r3, 402d2e <_vfiprintf_r+0xb92>
  402d00:	4611      	mov	r1, r2
  402d02:	2001      	movs	r0, #1
  402d04:	46ca      	mov	sl, r9
  402d06:	e5f2      	b.n	4028ee <_vfiprintf_r+0x752>
  402d08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402d0c:	f000 fdfe 	bl	40390c <__retarget_lock_release_recursive>
  402d10:	f04f 33ff 	mov.w	r3, #4294967295
  402d14:	9303      	str	r3, [sp, #12]
  402d16:	f7ff bb50 	b.w	4023ba <_vfiprintf_r+0x21e>
  402d1a:	aa0f      	add	r2, sp, #60	; 0x3c
  402d1c:	9904      	ldr	r1, [sp, #16]
  402d1e:	9806      	ldr	r0, [sp, #24]
  402d20:	f7ff f9fc 	bl	40211c <__sprint_r.part.0>
  402d24:	2800      	cmp	r0, #0
  402d26:	f47f aeeb 	bne.w	402b00 <_vfiprintf_r+0x964>
  402d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d2c:	e6a9      	b.n	402a82 <_vfiprintf_r+0x8e6>
  402d2e:	ab0e      	add	r3, sp, #56	; 0x38
  402d30:	2202      	movs	r2, #2
  402d32:	931c      	str	r3, [sp, #112]	; 0x70
  402d34:	921d      	str	r2, [sp, #116]	; 0x74
  402d36:	2001      	movs	r0, #1
  402d38:	46ca      	mov	sl, r9
  402d3a:	e5d0      	b.n	4028de <_vfiprintf_r+0x742>
  402d3c:	aa0f      	add	r2, sp, #60	; 0x3c
  402d3e:	9904      	ldr	r1, [sp, #16]
  402d40:	9806      	ldr	r0, [sp, #24]
  402d42:	f7ff f9eb 	bl	40211c <__sprint_r.part.0>
  402d46:	2800      	cmp	r0, #0
  402d48:	f47f aeda 	bne.w	402b00 <_vfiprintf_r+0x964>
  402d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d50:	1c48      	adds	r0, r1, #1
  402d52:	46ca      	mov	sl, r9
  402d54:	e5a4      	b.n	4028a0 <_vfiprintf_r+0x704>
  402d56:	9a07      	ldr	r2, [sp, #28]
  402d58:	9903      	ldr	r1, [sp, #12]
  402d5a:	6813      	ldr	r3, [r2, #0]
  402d5c:	17cd      	asrs	r5, r1, #31
  402d5e:	4608      	mov	r0, r1
  402d60:	3204      	adds	r2, #4
  402d62:	4629      	mov	r1, r5
  402d64:	9207      	str	r2, [sp, #28]
  402d66:	e9c3 0100 	strd	r0, r1, [r3]
  402d6a:	f7ff ba54 	b.w	402216 <_vfiprintf_r+0x7a>
  402d6e:	4658      	mov	r0, fp
  402d70:	9607      	str	r6, [sp, #28]
  402d72:	9302      	str	r3, [sp, #8]
  402d74:	f7ff f964 	bl	402040 <strlen>
  402d78:	2400      	movs	r4, #0
  402d7a:	9005      	str	r0, [sp, #20]
  402d7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402d80:	f7ff bb5e 	b.w	402440 <_vfiprintf_r+0x2a4>
  402d84:	aa0f      	add	r2, sp, #60	; 0x3c
  402d86:	9904      	ldr	r1, [sp, #16]
  402d88:	9806      	ldr	r0, [sp, #24]
  402d8a:	f7ff f9c7 	bl	40211c <__sprint_r.part.0>
  402d8e:	2800      	cmp	r0, #0
  402d90:	f47f aeb6 	bne.w	402b00 <_vfiprintf_r+0x964>
  402d94:	9910      	ldr	r1, [sp, #64]	; 0x40
  402d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d98:	1c48      	adds	r0, r1, #1
  402d9a:	46ca      	mov	sl, r9
  402d9c:	e5a7      	b.n	4028ee <_vfiprintf_r+0x752>
  402d9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402da0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402da2:	4e20      	ldr	r6, [pc, #128]	; (402e24 <_vfiprintf_r+0xc88>)
  402da4:	3101      	adds	r1, #1
  402da6:	f7ff bb90 	b.w	4024ca <_vfiprintf_r+0x32e>
  402daa:	2c06      	cmp	r4, #6
  402dac:	bf28      	it	cs
  402dae:	2406      	movcs	r4, #6
  402db0:	9405      	str	r4, [sp, #20]
  402db2:	9607      	str	r6, [sp, #28]
  402db4:	9401      	str	r4, [sp, #4]
  402db6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402e28 <_vfiprintf_r+0xc8c>
  402dba:	e4d5      	b.n	402768 <_vfiprintf_r+0x5cc>
  402dbc:	9810      	ldr	r0, [sp, #64]	; 0x40
  402dbe:	4e19      	ldr	r6, [pc, #100]	; (402e24 <_vfiprintf_r+0xc88>)
  402dc0:	3001      	adds	r0, #1
  402dc2:	e603      	b.n	4029cc <_vfiprintf_r+0x830>
  402dc4:	9405      	str	r4, [sp, #20]
  402dc6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402dca:	9607      	str	r6, [sp, #28]
  402dcc:	9302      	str	r3, [sp, #8]
  402dce:	4604      	mov	r4, r0
  402dd0:	f7ff bb36 	b.w	402440 <_vfiprintf_r+0x2a4>
  402dd4:	4686      	mov	lr, r0
  402dd6:	f7ff bbce 	b.w	402576 <_vfiprintf_r+0x3da>
  402dda:	9806      	ldr	r0, [sp, #24]
  402ddc:	aa0f      	add	r2, sp, #60	; 0x3c
  402dde:	4659      	mov	r1, fp
  402de0:	f7ff f99c 	bl	40211c <__sprint_r.part.0>
  402de4:	2800      	cmp	r0, #0
  402de6:	f43f ae24 	beq.w	402a32 <_vfiprintf_r+0x896>
  402dea:	e624      	b.n	402a36 <_vfiprintf_r+0x89a>
  402dec:	9907      	ldr	r1, [sp, #28]
  402dee:	f898 2001 	ldrb.w	r2, [r8, #1]
  402df2:	680c      	ldr	r4, [r1, #0]
  402df4:	3104      	adds	r1, #4
  402df6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402dfa:	46b8      	mov	r8, r7
  402dfc:	9107      	str	r1, [sp, #28]
  402dfe:	f7ff ba3f 	b.w	402280 <_vfiprintf_r+0xe4>
  402e02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e06:	e43c      	b.n	402682 <_vfiprintf_r+0x4e6>
  402e08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e0c:	e521      	b.n	402852 <_vfiprintf_r+0x6b6>
  402e0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e12:	f7ff bbf4 	b.w	4025fe <_vfiprintf_r+0x462>
  402e16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e1a:	e491      	b.n	402740 <_vfiprintf_r+0x5a4>
  402e1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e20:	e469      	b.n	4026f6 <_vfiprintf_r+0x55a>
  402e22:	bf00      	nop
  402e24:	00404bb0 	.word	0x00404bb0
  402e28:	00404ba8 	.word	0x00404ba8

00402e2c <__sbprintf>:
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e30:	460c      	mov	r4, r1
  402e32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402e36:	8989      	ldrh	r1, [r1, #12]
  402e38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402e3a:	89e5      	ldrh	r5, [r4, #14]
  402e3c:	9619      	str	r6, [sp, #100]	; 0x64
  402e3e:	f021 0102 	bic.w	r1, r1, #2
  402e42:	4606      	mov	r6, r0
  402e44:	69e0      	ldr	r0, [r4, #28]
  402e46:	f8ad 100c 	strh.w	r1, [sp, #12]
  402e4a:	4617      	mov	r7, r2
  402e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402e50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402e52:	f8ad 500e 	strh.w	r5, [sp, #14]
  402e56:	4698      	mov	r8, r3
  402e58:	ad1a      	add	r5, sp, #104	; 0x68
  402e5a:	2300      	movs	r3, #0
  402e5c:	9007      	str	r0, [sp, #28]
  402e5e:	a816      	add	r0, sp, #88	; 0x58
  402e60:	9209      	str	r2, [sp, #36]	; 0x24
  402e62:	9306      	str	r3, [sp, #24]
  402e64:	9500      	str	r5, [sp, #0]
  402e66:	9504      	str	r5, [sp, #16]
  402e68:	9102      	str	r1, [sp, #8]
  402e6a:	9105      	str	r1, [sp, #20]
  402e6c:	f000 fd48 	bl	403900 <__retarget_lock_init_recursive>
  402e70:	4643      	mov	r3, r8
  402e72:	463a      	mov	r2, r7
  402e74:	4669      	mov	r1, sp
  402e76:	4630      	mov	r0, r6
  402e78:	f7ff f990 	bl	40219c <_vfiprintf_r>
  402e7c:	1e05      	subs	r5, r0, #0
  402e7e:	db07      	blt.n	402e90 <__sbprintf+0x64>
  402e80:	4630      	mov	r0, r6
  402e82:	4669      	mov	r1, sp
  402e84:	f000 f928 	bl	4030d8 <_fflush_r>
  402e88:	2800      	cmp	r0, #0
  402e8a:	bf18      	it	ne
  402e8c:	f04f 35ff 	movne.w	r5, #4294967295
  402e90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402e94:	065b      	lsls	r3, r3, #25
  402e96:	d503      	bpl.n	402ea0 <__sbprintf+0x74>
  402e98:	89a3      	ldrh	r3, [r4, #12]
  402e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e9e:	81a3      	strh	r3, [r4, #12]
  402ea0:	9816      	ldr	r0, [sp, #88]	; 0x58
  402ea2:	f000 fd2f 	bl	403904 <__retarget_lock_close_recursive>
  402ea6:	4628      	mov	r0, r5
  402ea8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402eb0 <__swsetup_r>:
  402eb0:	b538      	push	{r3, r4, r5, lr}
  402eb2:	4b30      	ldr	r3, [pc, #192]	; (402f74 <__swsetup_r+0xc4>)
  402eb4:	681b      	ldr	r3, [r3, #0]
  402eb6:	4605      	mov	r5, r0
  402eb8:	460c      	mov	r4, r1
  402eba:	b113      	cbz	r3, 402ec2 <__swsetup_r+0x12>
  402ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402ebe:	2a00      	cmp	r2, #0
  402ec0:	d038      	beq.n	402f34 <__swsetup_r+0x84>
  402ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ec6:	b293      	uxth	r3, r2
  402ec8:	0718      	lsls	r0, r3, #28
  402eca:	d50c      	bpl.n	402ee6 <__swsetup_r+0x36>
  402ecc:	6920      	ldr	r0, [r4, #16]
  402ece:	b1a8      	cbz	r0, 402efc <__swsetup_r+0x4c>
  402ed0:	f013 0201 	ands.w	r2, r3, #1
  402ed4:	d01e      	beq.n	402f14 <__swsetup_r+0x64>
  402ed6:	6963      	ldr	r3, [r4, #20]
  402ed8:	2200      	movs	r2, #0
  402eda:	425b      	negs	r3, r3
  402edc:	61a3      	str	r3, [r4, #24]
  402ede:	60a2      	str	r2, [r4, #8]
  402ee0:	b1f0      	cbz	r0, 402f20 <__swsetup_r+0x70>
  402ee2:	2000      	movs	r0, #0
  402ee4:	bd38      	pop	{r3, r4, r5, pc}
  402ee6:	06d9      	lsls	r1, r3, #27
  402ee8:	d53c      	bpl.n	402f64 <__swsetup_r+0xb4>
  402eea:	0758      	lsls	r0, r3, #29
  402eec:	d426      	bmi.n	402f3c <__swsetup_r+0x8c>
  402eee:	6920      	ldr	r0, [r4, #16]
  402ef0:	f042 0308 	orr.w	r3, r2, #8
  402ef4:	81a3      	strh	r3, [r4, #12]
  402ef6:	b29b      	uxth	r3, r3
  402ef8:	2800      	cmp	r0, #0
  402efa:	d1e9      	bne.n	402ed0 <__swsetup_r+0x20>
  402efc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402f00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402f04:	d0e4      	beq.n	402ed0 <__swsetup_r+0x20>
  402f06:	4628      	mov	r0, r5
  402f08:	4621      	mov	r1, r4
  402f0a:	f000 fd2f 	bl	40396c <__smakebuf_r>
  402f0e:	89a3      	ldrh	r3, [r4, #12]
  402f10:	6920      	ldr	r0, [r4, #16]
  402f12:	e7dd      	b.n	402ed0 <__swsetup_r+0x20>
  402f14:	0799      	lsls	r1, r3, #30
  402f16:	bf58      	it	pl
  402f18:	6962      	ldrpl	r2, [r4, #20]
  402f1a:	60a2      	str	r2, [r4, #8]
  402f1c:	2800      	cmp	r0, #0
  402f1e:	d1e0      	bne.n	402ee2 <__swsetup_r+0x32>
  402f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f24:	061a      	lsls	r2, r3, #24
  402f26:	d5dd      	bpl.n	402ee4 <__swsetup_r+0x34>
  402f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f2c:	81a3      	strh	r3, [r4, #12]
  402f2e:	f04f 30ff 	mov.w	r0, #4294967295
  402f32:	bd38      	pop	{r3, r4, r5, pc}
  402f34:	4618      	mov	r0, r3
  402f36:	f000 f927 	bl	403188 <__sinit>
  402f3a:	e7c2      	b.n	402ec2 <__swsetup_r+0x12>
  402f3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402f3e:	b151      	cbz	r1, 402f56 <__swsetup_r+0xa6>
  402f40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402f44:	4299      	cmp	r1, r3
  402f46:	d004      	beq.n	402f52 <__swsetup_r+0xa2>
  402f48:	4628      	mov	r0, r5
  402f4a:	f000 fa43 	bl	4033d4 <_free_r>
  402f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402f52:	2300      	movs	r3, #0
  402f54:	6323      	str	r3, [r4, #48]	; 0x30
  402f56:	2300      	movs	r3, #0
  402f58:	6920      	ldr	r0, [r4, #16]
  402f5a:	6063      	str	r3, [r4, #4]
  402f5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402f60:	6020      	str	r0, [r4, #0]
  402f62:	e7c5      	b.n	402ef0 <__swsetup_r+0x40>
  402f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402f68:	2309      	movs	r3, #9
  402f6a:	602b      	str	r3, [r5, #0]
  402f6c:	f04f 30ff 	mov.w	r0, #4294967295
  402f70:	81a2      	strh	r2, [r4, #12]
  402f72:	bd38      	pop	{r3, r4, r5, pc}
  402f74:	20400014 	.word	0x20400014

00402f78 <register_fini>:
  402f78:	4b02      	ldr	r3, [pc, #8]	; (402f84 <register_fini+0xc>)
  402f7a:	b113      	cbz	r3, 402f82 <register_fini+0xa>
  402f7c:	4802      	ldr	r0, [pc, #8]	; (402f88 <register_fini+0x10>)
  402f7e:	f000 b805 	b.w	402f8c <atexit>
  402f82:	4770      	bx	lr
  402f84:	00000000 	.word	0x00000000
  402f88:	004031f9 	.word	0x004031f9

00402f8c <atexit>:
  402f8c:	2300      	movs	r3, #0
  402f8e:	4601      	mov	r1, r0
  402f90:	461a      	mov	r2, r3
  402f92:	4618      	mov	r0, r3
  402f94:	f001 bb66 	b.w	404664 <__register_exitproc>

00402f98 <__sflush_r>:
  402f98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402f9c:	b29a      	uxth	r2, r3
  402f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fa2:	460d      	mov	r5, r1
  402fa4:	0711      	lsls	r1, r2, #28
  402fa6:	4680      	mov	r8, r0
  402fa8:	d43a      	bmi.n	403020 <__sflush_r+0x88>
  402faa:	686a      	ldr	r2, [r5, #4]
  402fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402fb0:	2a00      	cmp	r2, #0
  402fb2:	81ab      	strh	r3, [r5, #12]
  402fb4:	dd6f      	ble.n	403096 <__sflush_r+0xfe>
  402fb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402fb8:	2c00      	cmp	r4, #0
  402fba:	d049      	beq.n	403050 <__sflush_r+0xb8>
  402fbc:	2200      	movs	r2, #0
  402fbe:	b29b      	uxth	r3, r3
  402fc0:	f8d8 6000 	ldr.w	r6, [r8]
  402fc4:	f8c8 2000 	str.w	r2, [r8]
  402fc8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402fcc:	d067      	beq.n	40309e <__sflush_r+0x106>
  402fce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402fd0:	075f      	lsls	r7, r3, #29
  402fd2:	d505      	bpl.n	402fe0 <__sflush_r+0x48>
  402fd4:	6869      	ldr	r1, [r5, #4]
  402fd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402fd8:	1a52      	subs	r2, r2, r1
  402fda:	b10b      	cbz	r3, 402fe0 <__sflush_r+0x48>
  402fdc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402fde:	1ad2      	subs	r2, r2, r3
  402fe0:	2300      	movs	r3, #0
  402fe2:	69e9      	ldr	r1, [r5, #28]
  402fe4:	4640      	mov	r0, r8
  402fe6:	47a0      	blx	r4
  402fe8:	1c44      	adds	r4, r0, #1
  402fea:	d03c      	beq.n	403066 <__sflush_r+0xce>
  402fec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402ff0:	692a      	ldr	r2, [r5, #16]
  402ff2:	602a      	str	r2, [r5, #0]
  402ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402ff8:	2200      	movs	r2, #0
  402ffa:	81ab      	strh	r3, [r5, #12]
  402ffc:	04db      	lsls	r3, r3, #19
  402ffe:	606a      	str	r2, [r5, #4]
  403000:	d447      	bmi.n	403092 <__sflush_r+0xfa>
  403002:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403004:	f8c8 6000 	str.w	r6, [r8]
  403008:	b311      	cbz	r1, 403050 <__sflush_r+0xb8>
  40300a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40300e:	4299      	cmp	r1, r3
  403010:	d002      	beq.n	403018 <__sflush_r+0x80>
  403012:	4640      	mov	r0, r8
  403014:	f000 f9de 	bl	4033d4 <_free_r>
  403018:	2000      	movs	r0, #0
  40301a:	6328      	str	r0, [r5, #48]	; 0x30
  40301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403020:	692e      	ldr	r6, [r5, #16]
  403022:	b1ae      	cbz	r6, 403050 <__sflush_r+0xb8>
  403024:	682c      	ldr	r4, [r5, #0]
  403026:	602e      	str	r6, [r5, #0]
  403028:	0791      	lsls	r1, r2, #30
  40302a:	bf0c      	ite	eq
  40302c:	696b      	ldreq	r3, [r5, #20]
  40302e:	2300      	movne	r3, #0
  403030:	1ba4      	subs	r4, r4, r6
  403032:	60ab      	str	r3, [r5, #8]
  403034:	e00a      	b.n	40304c <__sflush_r+0xb4>
  403036:	4623      	mov	r3, r4
  403038:	4632      	mov	r2, r6
  40303a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40303c:	69e9      	ldr	r1, [r5, #28]
  40303e:	4640      	mov	r0, r8
  403040:	47b8      	blx	r7
  403042:	2800      	cmp	r0, #0
  403044:	eba4 0400 	sub.w	r4, r4, r0
  403048:	4406      	add	r6, r0
  40304a:	dd04      	ble.n	403056 <__sflush_r+0xbe>
  40304c:	2c00      	cmp	r4, #0
  40304e:	dcf2      	bgt.n	403036 <__sflush_r+0x9e>
  403050:	2000      	movs	r0, #0
  403052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403056:	89ab      	ldrh	r3, [r5, #12]
  403058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40305c:	81ab      	strh	r3, [r5, #12]
  40305e:	f04f 30ff 	mov.w	r0, #4294967295
  403062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403066:	f8d8 4000 	ldr.w	r4, [r8]
  40306a:	2c1d      	cmp	r4, #29
  40306c:	d8f3      	bhi.n	403056 <__sflush_r+0xbe>
  40306e:	4b19      	ldr	r3, [pc, #100]	; (4030d4 <__sflush_r+0x13c>)
  403070:	40e3      	lsrs	r3, r4
  403072:	43db      	mvns	r3, r3
  403074:	f013 0301 	ands.w	r3, r3, #1
  403078:	d1ed      	bne.n	403056 <__sflush_r+0xbe>
  40307a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40307e:	606b      	str	r3, [r5, #4]
  403080:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403084:	6929      	ldr	r1, [r5, #16]
  403086:	81ab      	strh	r3, [r5, #12]
  403088:	04da      	lsls	r2, r3, #19
  40308a:	6029      	str	r1, [r5, #0]
  40308c:	d5b9      	bpl.n	403002 <__sflush_r+0x6a>
  40308e:	2c00      	cmp	r4, #0
  403090:	d1b7      	bne.n	403002 <__sflush_r+0x6a>
  403092:	6528      	str	r0, [r5, #80]	; 0x50
  403094:	e7b5      	b.n	403002 <__sflush_r+0x6a>
  403096:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403098:	2a00      	cmp	r2, #0
  40309a:	dc8c      	bgt.n	402fb6 <__sflush_r+0x1e>
  40309c:	e7d8      	b.n	403050 <__sflush_r+0xb8>
  40309e:	2301      	movs	r3, #1
  4030a0:	69e9      	ldr	r1, [r5, #28]
  4030a2:	4640      	mov	r0, r8
  4030a4:	47a0      	blx	r4
  4030a6:	1c43      	adds	r3, r0, #1
  4030a8:	4602      	mov	r2, r0
  4030aa:	d002      	beq.n	4030b2 <__sflush_r+0x11a>
  4030ac:	89ab      	ldrh	r3, [r5, #12]
  4030ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4030b0:	e78e      	b.n	402fd0 <__sflush_r+0x38>
  4030b2:	f8d8 3000 	ldr.w	r3, [r8]
  4030b6:	2b00      	cmp	r3, #0
  4030b8:	d0f8      	beq.n	4030ac <__sflush_r+0x114>
  4030ba:	2b1d      	cmp	r3, #29
  4030bc:	d001      	beq.n	4030c2 <__sflush_r+0x12a>
  4030be:	2b16      	cmp	r3, #22
  4030c0:	d102      	bne.n	4030c8 <__sflush_r+0x130>
  4030c2:	f8c8 6000 	str.w	r6, [r8]
  4030c6:	e7c3      	b.n	403050 <__sflush_r+0xb8>
  4030c8:	89ab      	ldrh	r3, [r5, #12]
  4030ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030ce:	81ab      	strh	r3, [r5, #12]
  4030d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030d4:	20400001 	.word	0x20400001

004030d8 <_fflush_r>:
  4030d8:	b538      	push	{r3, r4, r5, lr}
  4030da:	460d      	mov	r5, r1
  4030dc:	4604      	mov	r4, r0
  4030de:	b108      	cbz	r0, 4030e4 <_fflush_r+0xc>
  4030e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4030e2:	b1bb      	cbz	r3, 403114 <_fflush_r+0x3c>
  4030e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4030e8:	b188      	cbz	r0, 40310e <_fflush_r+0x36>
  4030ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4030ec:	07db      	lsls	r3, r3, #31
  4030ee:	d401      	bmi.n	4030f4 <_fflush_r+0x1c>
  4030f0:	0581      	lsls	r1, r0, #22
  4030f2:	d517      	bpl.n	403124 <_fflush_r+0x4c>
  4030f4:	4620      	mov	r0, r4
  4030f6:	4629      	mov	r1, r5
  4030f8:	f7ff ff4e 	bl	402f98 <__sflush_r>
  4030fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4030fe:	07da      	lsls	r2, r3, #31
  403100:	4604      	mov	r4, r0
  403102:	d402      	bmi.n	40310a <_fflush_r+0x32>
  403104:	89ab      	ldrh	r3, [r5, #12]
  403106:	059b      	lsls	r3, r3, #22
  403108:	d507      	bpl.n	40311a <_fflush_r+0x42>
  40310a:	4620      	mov	r0, r4
  40310c:	bd38      	pop	{r3, r4, r5, pc}
  40310e:	4604      	mov	r4, r0
  403110:	4620      	mov	r0, r4
  403112:	bd38      	pop	{r3, r4, r5, pc}
  403114:	f000 f838 	bl	403188 <__sinit>
  403118:	e7e4      	b.n	4030e4 <_fflush_r+0xc>
  40311a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40311c:	f000 fbf6 	bl	40390c <__retarget_lock_release_recursive>
  403120:	4620      	mov	r0, r4
  403122:	bd38      	pop	{r3, r4, r5, pc}
  403124:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403126:	f000 fbef 	bl	403908 <__retarget_lock_acquire_recursive>
  40312a:	e7e3      	b.n	4030f4 <_fflush_r+0x1c>

0040312c <_cleanup_r>:
  40312c:	4901      	ldr	r1, [pc, #4]	; (403134 <_cleanup_r+0x8>)
  40312e:	f000 bbaf 	b.w	403890 <_fwalk_reent>
  403132:	bf00      	nop
  403134:	0040474d 	.word	0x0040474d

00403138 <std.isra.0>:
  403138:	b510      	push	{r4, lr}
  40313a:	2300      	movs	r3, #0
  40313c:	4604      	mov	r4, r0
  40313e:	8181      	strh	r1, [r0, #12]
  403140:	81c2      	strh	r2, [r0, #14]
  403142:	6003      	str	r3, [r0, #0]
  403144:	6043      	str	r3, [r0, #4]
  403146:	6083      	str	r3, [r0, #8]
  403148:	6643      	str	r3, [r0, #100]	; 0x64
  40314a:	6103      	str	r3, [r0, #16]
  40314c:	6143      	str	r3, [r0, #20]
  40314e:	6183      	str	r3, [r0, #24]
  403150:	4619      	mov	r1, r3
  403152:	2208      	movs	r2, #8
  403154:	305c      	adds	r0, #92	; 0x5c
  403156:	f7fe fdf5 	bl	401d44 <memset>
  40315a:	4807      	ldr	r0, [pc, #28]	; (403178 <std.isra.0+0x40>)
  40315c:	4907      	ldr	r1, [pc, #28]	; (40317c <std.isra.0+0x44>)
  40315e:	4a08      	ldr	r2, [pc, #32]	; (403180 <std.isra.0+0x48>)
  403160:	4b08      	ldr	r3, [pc, #32]	; (403184 <std.isra.0+0x4c>)
  403162:	6220      	str	r0, [r4, #32]
  403164:	61e4      	str	r4, [r4, #28]
  403166:	6261      	str	r1, [r4, #36]	; 0x24
  403168:	62a2      	str	r2, [r4, #40]	; 0x28
  40316a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40316c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403174:	f000 bbc4 	b.w	403900 <__retarget_lock_init_recursive>
  403178:	00404491 	.word	0x00404491
  40317c:	004044b5 	.word	0x004044b5
  403180:	004044f1 	.word	0x004044f1
  403184:	00404511 	.word	0x00404511

00403188 <__sinit>:
  403188:	b510      	push	{r4, lr}
  40318a:	4604      	mov	r4, r0
  40318c:	4812      	ldr	r0, [pc, #72]	; (4031d8 <__sinit+0x50>)
  40318e:	f000 fbbb 	bl	403908 <__retarget_lock_acquire_recursive>
  403192:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403194:	b9d2      	cbnz	r2, 4031cc <__sinit+0x44>
  403196:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40319a:	4810      	ldr	r0, [pc, #64]	; (4031dc <__sinit+0x54>)
  40319c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4031a0:	2103      	movs	r1, #3
  4031a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4031a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4031a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4031ac:	6860      	ldr	r0, [r4, #4]
  4031ae:	2104      	movs	r1, #4
  4031b0:	f7ff ffc2 	bl	403138 <std.isra.0>
  4031b4:	2201      	movs	r2, #1
  4031b6:	2109      	movs	r1, #9
  4031b8:	68a0      	ldr	r0, [r4, #8]
  4031ba:	f7ff ffbd 	bl	403138 <std.isra.0>
  4031be:	2202      	movs	r2, #2
  4031c0:	2112      	movs	r1, #18
  4031c2:	68e0      	ldr	r0, [r4, #12]
  4031c4:	f7ff ffb8 	bl	403138 <std.isra.0>
  4031c8:	2301      	movs	r3, #1
  4031ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4031cc:	4802      	ldr	r0, [pc, #8]	; (4031d8 <__sinit+0x50>)
  4031ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4031d2:	f000 bb9b 	b.w	40390c <__retarget_lock_release_recursive>
  4031d6:	bf00      	nop
  4031d8:	20400ae8 	.word	0x20400ae8
  4031dc:	0040312d 	.word	0x0040312d

004031e0 <__sfp_lock_acquire>:
  4031e0:	4801      	ldr	r0, [pc, #4]	; (4031e8 <__sfp_lock_acquire+0x8>)
  4031e2:	f000 bb91 	b.w	403908 <__retarget_lock_acquire_recursive>
  4031e6:	bf00      	nop
  4031e8:	20400afc 	.word	0x20400afc

004031ec <__sfp_lock_release>:
  4031ec:	4801      	ldr	r0, [pc, #4]	; (4031f4 <__sfp_lock_release+0x8>)
  4031ee:	f000 bb8d 	b.w	40390c <__retarget_lock_release_recursive>
  4031f2:	bf00      	nop
  4031f4:	20400afc 	.word	0x20400afc

004031f8 <__libc_fini_array>:
  4031f8:	b538      	push	{r3, r4, r5, lr}
  4031fa:	4c0a      	ldr	r4, [pc, #40]	; (403224 <__libc_fini_array+0x2c>)
  4031fc:	4d0a      	ldr	r5, [pc, #40]	; (403228 <__libc_fini_array+0x30>)
  4031fe:	1b64      	subs	r4, r4, r5
  403200:	10a4      	asrs	r4, r4, #2
  403202:	d00a      	beq.n	40321a <__libc_fini_array+0x22>
  403204:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403208:	3b01      	subs	r3, #1
  40320a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40320e:	3c01      	subs	r4, #1
  403210:	f855 3904 	ldr.w	r3, [r5], #-4
  403214:	4798      	blx	r3
  403216:	2c00      	cmp	r4, #0
  403218:	d1f9      	bne.n	40320e <__libc_fini_array+0x16>
  40321a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40321e:	f001 bd6b 	b.w	404cf8 <_fini>
  403222:	bf00      	nop
  403224:	00404d08 	.word	0x00404d08
  403228:	00404d04 	.word	0x00404d04

0040322c <__fputwc>:
  40322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403230:	b082      	sub	sp, #8
  403232:	4680      	mov	r8, r0
  403234:	4689      	mov	r9, r1
  403236:	4614      	mov	r4, r2
  403238:	f000 fb54 	bl	4038e4 <__locale_mb_cur_max>
  40323c:	2801      	cmp	r0, #1
  40323e:	d036      	beq.n	4032ae <__fputwc+0x82>
  403240:	464a      	mov	r2, r9
  403242:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403246:	a901      	add	r1, sp, #4
  403248:	4640      	mov	r0, r8
  40324a:	f001 f9bd 	bl	4045c8 <_wcrtomb_r>
  40324e:	1c42      	adds	r2, r0, #1
  403250:	4606      	mov	r6, r0
  403252:	d025      	beq.n	4032a0 <__fputwc+0x74>
  403254:	b3a8      	cbz	r0, 4032c2 <__fputwc+0x96>
  403256:	f89d e004 	ldrb.w	lr, [sp, #4]
  40325a:	2500      	movs	r5, #0
  40325c:	f10d 0a04 	add.w	sl, sp, #4
  403260:	e009      	b.n	403276 <__fputwc+0x4a>
  403262:	6823      	ldr	r3, [r4, #0]
  403264:	1c5a      	adds	r2, r3, #1
  403266:	6022      	str	r2, [r4, #0]
  403268:	f883 e000 	strb.w	lr, [r3]
  40326c:	3501      	adds	r5, #1
  40326e:	42b5      	cmp	r5, r6
  403270:	d227      	bcs.n	4032c2 <__fputwc+0x96>
  403272:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403276:	68a3      	ldr	r3, [r4, #8]
  403278:	3b01      	subs	r3, #1
  40327a:	2b00      	cmp	r3, #0
  40327c:	60a3      	str	r3, [r4, #8]
  40327e:	daf0      	bge.n	403262 <__fputwc+0x36>
  403280:	69a7      	ldr	r7, [r4, #24]
  403282:	42bb      	cmp	r3, r7
  403284:	4671      	mov	r1, lr
  403286:	4622      	mov	r2, r4
  403288:	4640      	mov	r0, r8
  40328a:	db02      	blt.n	403292 <__fputwc+0x66>
  40328c:	f1be 0f0a 	cmp.w	lr, #10
  403290:	d1e7      	bne.n	403262 <__fputwc+0x36>
  403292:	f001 f941 	bl	404518 <__swbuf_r>
  403296:	1c43      	adds	r3, r0, #1
  403298:	d1e8      	bne.n	40326c <__fputwc+0x40>
  40329a:	b002      	add	sp, #8
  40329c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032a0:	89a3      	ldrh	r3, [r4, #12]
  4032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032a6:	81a3      	strh	r3, [r4, #12]
  4032a8:	b002      	add	sp, #8
  4032aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4032b2:	2bfe      	cmp	r3, #254	; 0xfe
  4032b4:	d8c4      	bhi.n	403240 <__fputwc+0x14>
  4032b6:	fa5f fe89 	uxtb.w	lr, r9
  4032ba:	4606      	mov	r6, r0
  4032bc:	f88d e004 	strb.w	lr, [sp, #4]
  4032c0:	e7cb      	b.n	40325a <__fputwc+0x2e>
  4032c2:	4648      	mov	r0, r9
  4032c4:	b002      	add	sp, #8
  4032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032ca:	bf00      	nop

004032cc <_fputwc_r>:
  4032cc:	b530      	push	{r4, r5, lr}
  4032ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4032d0:	f013 0f01 	tst.w	r3, #1
  4032d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4032d8:	4614      	mov	r4, r2
  4032da:	b083      	sub	sp, #12
  4032dc:	4605      	mov	r5, r0
  4032de:	b29a      	uxth	r2, r3
  4032e0:	d101      	bne.n	4032e6 <_fputwc_r+0x1a>
  4032e2:	0590      	lsls	r0, r2, #22
  4032e4:	d51c      	bpl.n	403320 <_fputwc_r+0x54>
  4032e6:	0490      	lsls	r0, r2, #18
  4032e8:	d406      	bmi.n	4032f8 <_fputwc_r+0x2c>
  4032ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4032ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4032f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4032f4:	81a3      	strh	r3, [r4, #12]
  4032f6:	6662      	str	r2, [r4, #100]	; 0x64
  4032f8:	4628      	mov	r0, r5
  4032fa:	4622      	mov	r2, r4
  4032fc:	f7ff ff96 	bl	40322c <__fputwc>
  403300:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403302:	07da      	lsls	r2, r3, #31
  403304:	4605      	mov	r5, r0
  403306:	d402      	bmi.n	40330e <_fputwc_r+0x42>
  403308:	89a3      	ldrh	r3, [r4, #12]
  40330a:	059b      	lsls	r3, r3, #22
  40330c:	d502      	bpl.n	403314 <_fputwc_r+0x48>
  40330e:	4628      	mov	r0, r5
  403310:	b003      	add	sp, #12
  403312:	bd30      	pop	{r4, r5, pc}
  403314:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403316:	f000 faf9 	bl	40390c <__retarget_lock_release_recursive>
  40331a:	4628      	mov	r0, r5
  40331c:	b003      	add	sp, #12
  40331e:	bd30      	pop	{r4, r5, pc}
  403320:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403322:	9101      	str	r1, [sp, #4]
  403324:	f000 faf0 	bl	403908 <__retarget_lock_acquire_recursive>
  403328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40332c:	9901      	ldr	r1, [sp, #4]
  40332e:	b29a      	uxth	r2, r3
  403330:	e7d9      	b.n	4032e6 <_fputwc_r+0x1a>
  403332:	bf00      	nop

00403334 <_malloc_trim_r>:
  403334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403336:	4f24      	ldr	r7, [pc, #144]	; (4033c8 <_malloc_trim_r+0x94>)
  403338:	460c      	mov	r4, r1
  40333a:	4606      	mov	r6, r0
  40333c:	f000 fee4 	bl	404108 <__malloc_lock>
  403340:	68bb      	ldr	r3, [r7, #8]
  403342:	685d      	ldr	r5, [r3, #4]
  403344:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403348:	310f      	adds	r1, #15
  40334a:	f025 0503 	bic.w	r5, r5, #3
  40334e:	4429      	add	r1, r5
  403350:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403354:	f021 010f 	bic.w	r1, r1, #15
  403358:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40335c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403360:	db07      	blt.n	403372 <_malloc_trim_r+0x3e>
  403362:	2100      	movs	r1, #0
  403364:	4630      	mov	r0, r6
  403366:	f001 f881 	bl	40446c <_sbrk_r>
  40336a:	68bb      	ldr	r3, [r7, #8]
  40336c:	442b      	add	r3, r5
  40336e:	4298      	cmp	r0, r3
  403370:	d004      	beq.n	40337c <_malloc_trim_r+0x48>
  403372:	4630      	mov	r0, r6
  403374:	f000 fece 	bl	404114 <__malloc_unlock>
  403378:	2000      	movs	r0, #0
  40337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40337c:	4261      	negs	r1, r4
  40337e:	4630      	mov	r0, r6
  403380:	f001 f874 	bl	40446c <_sbrk_r>
  403384:	3001      	adds	r0, #1
  403386:	d00d      	beq.n	4033a4 <_malloc_trim_r+0x70>
  403388:	4b10      	ldr	r3, [pc, #64]	; (4033cc <_malloc_trim_r+0x98>)
  40338a:	68ba      	ldr	r2, [r7, #8]
  40338c:	6819      	ldr	r1, [r3, #0]
  40338e:	1b2d      	subs	r5, r5, r4
  403390:	f045 0501 	orr.w	r5, r5, #1
  403394:	4630      	mov	r0, r6
  403396:	1b09      	subs	r1, r1, r4
  403398:	6055      	str	r5, [r2, #4]
  40339a:	6019      	str	r1, [r3, #0]
  40339c:	f000 feba 	bl	404114 <__malloc_unlock>
  4033a0:	2001      	movs	r0, #1
  4033a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033a4:	2100      	movs	r1, #0
  4033a6:	4630      	mov	r0, r6
  4033a8:	f001 f860 	bl	40446c <_sbrk_r>
  4033ac:	68ba      	ldr	r2, [r7, #8]
  4033ae:	1a83      	subs	r3, r0, r2
  4033b0:	2b0f      	cmp	r3, #15
  4033b2:	ddde      	ble.n	403372 <_malloc_trim_r+0x3e>
  4033b4:	4c06      	ldr	r4, [pc, #24]	; (4033d0 <_malloc_trim_r+0x9c>)
  4033b6:	4905      	ldr	r1, [pc, #20]	; (4033cc <_malloc_trim_r+0x98>)
  4033b8:	6824      	ldr	r4, [r4, #0]
  4033ba:	f043 0301 	orr.w	r3, r3, #1
  4033be:	1b00      	subs	r0, r0, r4
  4033c0:	6053      	str	r3, [r2, #4]
  4033c2:	6008      	str	r0, [r1, #0]
  4033c4:	e7d5      	b.n	403372 <_malloc_trim_r+0x3e>
  4033c6:	bf00      	nop
  4033c8:	204005b0 	.word	0x204005b0
  4033cc:	20400a58 	.word	0x20400a58
  4033d0:	204009b8 	.word	0x204009b8

004033d4 <_free_r>:
  4033d4:	2900      	cmp	r1, #0
  4033d6:	d044      	beq.n	403462 <_free_r+0x8e>
  4033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033dc:	460d      	mov	r5, r1
  4033de:	4680      	mov	r8, r0
  4033e0:	f000 fe92 	bl	404108 <__malloc_lock>
  4033e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4033e8:	4969      	ldr	r1, [pc, #420]	; (403590 <_free_r+0x1bc>)
  4033ea:	f027 0301 	bic.w	r3, r7, #1
  4033ee:	f1a5 0408 	sub.w	r4, r5, #8
  4033f2:	18e2      	adds	r2, r4, r3
  4033f4:	688e      	ldr	r6, [r1, #8]
  4033f6:	6850      	ldr	r0, [r2, #4]
  4033f8:	42b2      	cmp	r2, r6
  4033fa:	f020 0003 	bic.w	r0, r0, #3
  4033fe:	d05e      	beq.n	4034be <_free_r+0xea>
  403400:	07fe      	lsls	r6, r7, #31
  403402:	6050      	str	r0, [r2, #4]
  403404:	d40b      	bmi.n	40341e <_free_r+0x4a>
  403406:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40340a:	1be4      	subs	r4, r4, r7
  40340c:	f101 0e08 	add.w	lr, r1, #8
  403410:	68a5      	ldr	r5, [r4, #8]
  403412:	4575      	cmp	r5, lr
  403414:	443b      	add	r3, r7
  403416:	d06d      	beq.n	4034f4 <_free_r+0x120>
  403418:	68e7      	ldr	r7, [r4, #12]
  40341a:	60ef      	str	r7, [r5, #12]
  40341c:	60bd      	str	r5, [r7, #8]
  40341e:	1815      	adds	r5, r2, r0
  403420:	686d      	ldr	r5, [r5, #4]
  403422:	07ed      	lsls	r5, r5, #31
  403424:	d53e      	bpl.n	4034a4 <_free_r+0xd0>
  403426:	f043 0201 	orr.w	r2, r3, #1
  40342a:	6062      	str	r2, [r4, #4]
  40342c:	50e3      	str	r3, [r4, r3]
  40342e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403432:	d217      	bcs.n	403464 <_free_r+0x90>
  403434:	08db      	lsrs	r3, r3, #3
  403436:	1c58      	adds	r0, r3, #1
  403438:	109a      	asrs	r2, r3, #2
  40343a:	684d      	ldr	r5, [r1, #4]
  40343c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403440:	60a7      	str	r7, [r4, #8]
  403442:	2301      	movs	r3, #1
  403444:	4093      	lsls	r3, r2
  403446:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40344a:	432b      	orrs	r3, r5
  40344c:	3a08      	subs	r2, #8
  40344e:	60e2      	str	r2, [r4, #12]
  403450:	604b      	str	r3, [r1, #4]
  403452:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403456:	60fc      	str	r4, [r7, #12]
  403458:	4640      	mov	r0, r8
  40345a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40345e:	f000 be59 	b.w	404114 <__malloc_unlock>
  403462:	4770      	bx	lr
  403464:	0a5a      	lsrs	r2, r3, #9
  403466:	2a04      	cmp	r2, #4
  403468:	d852      	bhi.n	403510 <_free_r+0x13c>
  40346a:	099a      	lsrs	r2, r3, #6
  40346c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403470:	00ff      	lsls	r7, r7, #3
  403472:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403476:	19c8      	adds	r0, r1, r7
  403478:	59ca      	ldr	r2, [r1, r7]
  40347a:	3808      	subs	r0, #8
  40347c:	4290      	cmp	r0, r2
  40347e:	d04f      	beq.n	403520 <_free_r+0x14c>
  403480:	6851      	ldr	r1, [r2, #4]
  403482:	f021 0103 	bic.w	r1, r1, #3
  403486:	428b      	cmp	r3, r1
  403488:	d232      	bcs.n	4034f0 <_free_r+0x11c>
  40348a:	6892      	ldr	r2, [r2, #8]
  40348c:	4290      	cmp	r0, r2
  40348e:	d1f7      	bne.n	403480 <_free_r+0xac>
  403490:	68c3      	ldr	r3, [r0, #12]
  403492:	60a0      	str	r0, [r4, #8]
  403494:	60e3      	str	r3, [r4, #12]
  403496:	609c      	str	r4, [r3, #8]
  403498:	60c4      	str	r4, [r0, #12]
  40349a:	4640      	mov	r0, r8
  40349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4034a0:	f000 be38 	b.w	404114 <__malloc_unlock>
  4034a4:	6895      	ldr	r5, [r2, #8]
  4034a6:	4f3b      	ldr	r7, [pc, #236]	; (403594 <_free_r+0x1c0>)
  4034a8:	42bd      	cmp	r5, r7
  4034aa:	4403      	add	r3, r0
  4034ac:	d040      	beq.n	403530 <_free_r+0x15c>
  4034ae:	68d0      	ldr	r0, [r2, #12]
  4034b0:	60e8      	str	r0, [r5, #12]
  4034b2:	f043 0201 	orr.w	r2, r3, #1
  4034b6:	6085      	str	r5, [r0, #8]
  4034b8:	6062      	str	r2, [r4, #4]
  4034ba:	50e3      	str	r3, [r4, r3]
  4034bc:	e7b7      	b.n	40342e <_free_r+0x5a>
  4034be:	07ff      	lsls	r7, r7, #31
  4034c0:	4403      	add	r3, r0
  4034c2:	d407      	bmi.n	4034d4 <_free_r+0x100>
  4034c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4034c8:	1aa4      	subs	r4, r4, r2
  4034ca:	4413      	add	r3, r2
  4034cc:	68a0      	ldr	r0, [r4, #8]
  4034ce:	68e2      	ldr	r2, [r4, #12]
  4034d0:	60c2      	str	r2, [r0, #12]
  4034d2:	6090      	str	r0, [r2, #8]
  4034d4:	4a30      	ldr	r2, [pc, #192]	; (403598 <_free_r+0x1c4>)
  4034d6:	6812      	ldr	r2, [r2, #0]
  4034d8:	f043 0001 	orr.w	r0, r3, #1
  4034dc:	4293      	cmp	r3, r2
  4034de:	6060      	str	r0, [r4, #4]
  4034e0:	608c      	str	r4, [r1, #8]
  4034e2:	d3b9      	bcc.n	403458 <_free_r+0x84>
  4034e4:	4b2d      	ldr	r3, [pc, #180]	; (40359c <_free_r+0x1c8>)
  4034e6:	4640      	mov	r0, r8
  4034e8:	6819      	ldr	r1, [r3, #0]
  4034ea:	f7ff ff23 	bl	403334 <_malloc_trim_r>
  4034ee:	e7b3      	b.n	403458 <_free_r+0x84>
  4034f0:	4610      	mov	r0, r2
  4034f2:	e7cd      	b.n	403490 <_free_r+0xbc>
  4034f4:	1811      	adds	r1, r2, r0
  4034f6:	6849      	ldr	r1, [r1, #4]
  4034f8:	07c9      	lsls	r1, r1, #31
  4034fa:	d444      	bmi.n	403586 <_free_r+0x1b2>
  4034fc:	6891      	ldr	r1, [r2, #8]
  4034fe:	68d2      	ldr	r2, [r2, #12]
  403500:	60ca      	str	r2, [r1, #12]
  403502:	4403      	add	r3, r0
  403504:	f043 0001 	orr.w	r0, r3, #1
  403508:	6091      	str	r1, [r2, #8]
  40350a:	6060      	str	r0, [r4, #4]
  40350c:	50e3      	str	r3, [r4, r3]
  40350e:	e7a3      	b.n	403458 <_free_r+0x84>
  403510:	2a14      	cmp	r2, #20
  403512:	d816      	bhi.n	403542 <_free_r+0x16e>
  403514:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403518:	00ff      	lsls	r7, r7, #3
  40351a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40351e:	e7aa      	b.n	403476 <_free_r+0xa2>
  403520:	10aa      	asrs	r2, r5, #2
  403522:	2301      	movs	r3, #1
  403524:	684d      	ldr	r5, [r1, #4]
  403526:	4093      	lsls	r3, r2
  403528:	432b      	orrs	r3, r5
  40352a:	604b      	str	r3, [r1, #4]
  40352c:	4603      	mov	r3, r0
  40352e:	e7b0      	b.n	403492 <_free_r+0xbe>
  403530:	f043 0201 	orr.w	r2, r3, #1
  403534:	614c      	str	r4, [r1, #20]
  403536:	610c      	str	r4, [r1, #16]
  403538:	60e5      	str	r5, [r4, #12]
  40353a:	60a5      	str	r5, [r4, #8]
  40353c:	6062      	str	r2, [r4, #4]
  40353e:	50e3      	str	r3, [r4, r3]
  403540:	e78a      	b.n	403458 <_free_r+0x84>
  403542:	2a54      	cmp	r2, #84	; 0x54
  403544:	d806      	bhi.n	403554 <_free_r+0x180>
  403546:	0b1a      	lsrs	r2, r3, #12
  403548:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40354c:	00ff      	lsls	r7, r7, #3
  40354e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403552:	e790      	b.n	403476 <_free_r+0xa2>
  403554:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403558:	d806      	bhi.n	403568 <_free_r+0x194>
  40355a:	0bda      	lsrs	r2, r3, #15
  40355c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403560:	00ff      	lsls	r7, r7, #3
  403562:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403566:	e786      	b.n	403476 <_free_r+0xa2>
  403568:	f240 5054 	movw	r0, #1364	; 0x554
  40356c:	4282      	cmp	r2, r0
  40356e:	d806      	bhi.n	40357e <_free_r+0x1aa>
  403570:	0c9a      	lsrs	r2, r3, #18
  403572:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403576:	00ff      	lsls	r7, r7, #3
  403578:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40357c:	e77b      	b.n	403476 <_free_r+0xa2>
  40357e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403582:	257e      	movs	r5, #126	; 0x7e
  403584:	e777      	b.n	403476 <_free_r+0xa2>
  403586:	f043 0101 	orr.w	r1, r3, #1
  40358a:	6061      	str	r1, [r4, #4]
  40358c:	6013      	str	r3, [r2, #0]
  40358e:	e763      	b.n	403458 <_free_r+0x84>
  403590:	204005b0 	.word	0x204005b0
  403594:	204005b8 	.word	0x204005b8
  403598:	204009bc 	.word	0x204009bc
  40359c:	20400a88 	.word	0x20400a88

004035a0 <__sfvwrite_r>:
  4035a0:	6893      	ldr	r3, [r2, #8]
  4035a2:	2b00      	cmp	r3, #0
  4035a4:	d073      	beq.n	40368e <__sfvwrite_r+0xee>
  4035a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035aa:	898b      	ldrh	r3, [r1, #12]
  4035ac:	b083      	sub	sp, #12
  4035ae:	460c      	mov	r4, r1
  4035b0:	0719      	lsls	r1, r3, #28
  4035b2:	9000      	str	r0, [sp, #0]
  4035b4:	4616      	mov	r6, r2
  4035b6:	d526      	bpl.n	403606 <__sfvwrite_r+0x66>
  4035b8:	6922      	ldr	r2, [r4, #16]
  4035ba:	b322      	cbz	r2, 403606 <__sfvwrite_r+0x66>
  4035bc:	f013 0002 	ands.w	r0, r3, #2
  4035c0:	6835      	ldr	r5, [r6, #0]
  4035c2:	d02c      	beq.n	40361e <__sfvwrite_r+0x7e>
  4035c4:	f04f 0900 	mov.w	r9, #0
  4035c8:	4fb0      	ldr	r7, [pc, #704]	; (40388c <__sfvwrite_r+0x2ec>)
  4035ca:	46c8      	mov	r8, r9
  4035cc:	46b2      	mov	sl, r6
  4035ce:	45b8      	cmp	r8, r7
  4035d0:	4643      	mov	r3, r8
  4035d2:	464a      	mov	r2, r9
  4035d4:	bf28      	it	cs
  4035d6:	463b      	movcs	r3, r7
  4035d8:	9800      	ldr	r0, [sp, #0]
  4035da:	f1b8 0f00 	cmp.w	r8, #0
  4035de:	d050      	beq.n	403682 <__sfvwrite_r+0xe2>
  4035e0:	69e1      	ldr	r1, [r4, #28]
  4035e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4035e4:	47b0      	blx	r6
  4035e6:	2800      	cmp	r0, #0
  4035e8:	dd58      	ble.n	40369c <__sfvwrite_r+0xfc>
  4035ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4035ee:	1a1b      	subs	r3, r3, r0
  4035f0:	4481      	add	r9, r0
  4035f2:	eba8 0800 	sub.w	r8, r8, r0
  4035f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d1e7      	bne.n	4035ce <__sfvwrite_r+0x2e>
  4035fe:	2000      	movs	r0, #0
  403600:	b003      	add	sp, #12
  403602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403606:	4621      	mov	r1, r4
  403608:	9800      	ldr	r0, [sp, #0]
  40360a:	f7ff fc51 	bl	402eb0 <__swsetup_r>
  40360e:	2800      	cmp	r0, #0
  403610:	f040 8133 	bne.w	40387a <__sfvwrite_r+0x2da>
  403614:	89a3      	ldrh	r3, [r4, #12]
  403616:	6835      	ldr	r5, [r6, #0]
  403618:	f013 0002 	ands.w	r0, r3, #2
  40361c:	d1d2      	bne.n	4035c4 <__sfvwrite_r+0x24>
  40361e:	f013 0901 	ands.w	r9, r3, #1
  403622:	d145      	bne.n	4036b0 <__sfvwrite_r+0x110>
  403624:	464f      	mov	r7, r9
  403626:	9601      	str	r6, [sp, #4]
  403628:	b337      	cbz	r7, 403678 <__sfvwrite_r+0xd8>
  40362a:	059a      	lsls	r2, r3, #22
  40362c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403630:	f140 8083 	bpl.w	40373a <__sfvwrite_r+0x19a>
  403634:	4547      	cmp	r7, r8
  403636:	46c3      	mov	fp, r8
  403638:	f0c0 80ab 	bcc.w	403792 <__sfvwrite_r+0x1f2>
  40363c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403640:	f040 80ac 	bne.w	40379c <__sfvwrite_r+0x1fc>
  403644:	6820      	ldr	r0, [r4, #0]
  403646:	46ba      	mov	sl, r7
  403648:	465a      	mov	r2, fp
  40364a:	4649      	mov	r1, r9
  40364c:	f000 fcf8 	bl	404040 <memmove>
  403650:	68a2      	ldr	r2, [r4, #8]
  403652:	6823      	ldr	r3, [r4, #0]
  403654:	eba2 0208 	sub.w	r2, r2, r8
  403658:	445b      	add	r3, fp
  40365a:	60a2      	str	r2, [r4, #8]
  40365c:	6023      	str	r3, [r4, #0]
  40365e:	9a01      	ldr	r2, [sp, #4]
  403660:	6893      	ldr	r3, [r2, #8]
  403662:	eba3 030a 	sub.w	r3, r3, sl
  403666:	44d1      	add	r9, sl
  403668:	eba7 070a 	sub.w	r7, r7, sl
  40366c:	6093      	str	r3, [r2, #8]
  40366e:	2b00      	cmp	r3, #0
  403670:	d0c5      	beq.n	4035fe <__sfvwrite_r+0x5e>
  403672:	89a3      	ldrh	r3, [r4, #12]
  403674:	2f00      	cmp	r7, #0
  403676:	d1d8      	bne.n	40362a <__sfvwrite_r+0x8a>
  403678:	f8d5 9000 	ldr.w	r9, [r5]
  40367c:	686f      	ldr	r7, [r5, #4]
  40367e:	3508      	adds	r5, #8
  403680:	e7d2      	b.n	403628 <__sfvwrite_r+0x88>
  403682:	f8d5 9000 	ldr.w	r9, [r5]
  403686:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40368a:	3508      	adds	r5, #8
  40368c:	e79f      	b.n	4035ce <__sfvwrite_r+0x2e>
  40368e:	2000      	movs	r0, #0
  403690:	4770      	bx	lr
  403692:	4621      	mov	r1, r4
  403694:	9800      	ldr	r0, [sp, #0]
  403696:	f7ff fd1f 	bl	4030d8 <_fflush_r>
  40369a:	b370      	cbz	r0, 4036fa <__sfvwrite_r+0x15a>
  40369c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4036a4:	f04f 30ff 	mov.w	r0, #4294967295
  4036a8:	81a3      	strh	r3, [r4, #12]
  4036aa:	b003      	add	sp, #12
  4036ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036b0:	4681      	mov	r9, r0
  4036b2:	4633      	mov	r3, r6
  4036b4:	464e      	mov	r6, r9
  4036b6:	46a8      	mov	r8, r5
  4036b8:	469a      	mov	sl, r3
  4036ba:	464d      	mov	r5, r9
  4036bc:	b34e      	cbz	r6, 403712 <__sfvwrite_r+0x172>
  4036be:	b380      	cbz	r0, 403722 <__sfvwrite_r+0x182>
  4036c0:	6820      	ldr	r0, [r4, #0]
  4036c2:	6923      	ldr	r3, [r4, #16]
  4036c4:	6962      	ldr	r2, [r4, #20]
  4036c6:	45b1      	cmp	r9, r6
  4036c8:	46cb      	mov	fp, r9
  4036ca:	bf28      	it	cs
  4036cc:	46b3      	movcs	fp, r6
  4036ce:	4298      	cmp	r0, r3
  4036d0:	465f      	mov	r7, fp
  4036d2:	d904      	bls.n	4036de <__sfvwrite_r+0x13e>
  4036d4:	68a3      	ldr	r3, [r4, #8]
  4036d6:	4413      	add	r3, r2
  4036d8:	459b      	cmp	fp, r3
  4036da:	f300 80a6 	bgt.w	40382a <__sfvwrite_r+0x28a>
  4036de:	4593      	cmp	fp, r2
  4036e0:	db4b      	blt.n	40377a <__sfvwrite_r+0x1da>
  4036e2:	4613      	mov	r3, r2
  4036e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4036e6:	69e1      	ldr	r1, [r4, #28]
  4036e8:	9800      	ldr	r0, [sp, #0]
  4036ea:	462a      	mov	r2, r5
  4036ec:	47b8      	blx	r7
  4036ee:	1e07      	subs	r7, r0, #0
  4036f0:	ddd4      	ble.n	40369c <__sfvwrite_r+0xfc>
  4036f2:	ebb9 0907 	subs.w	r9, r9, r7
  4036f6:	d0cc      	beq.n	403692 <__sfvwrite_r+0xf2>
  4036f8:	2001      	movs	r0, #1
  4036fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4036fe:	1bdb      	subs	r3, r3, r7
  403700:	443d      	add	r5, r7
  403702:	1bf6      	subs	r6, r6, r7
  403704:	f8ca 3008 	str.w	r3, [sl, #8]
  403708:	2b00      	cmp	r3, #0
  40370a:	f43f af78 	beq.w	4035fe <__sfvwrite_r+0x5e>
  40370e:	2e00      	cmp	r6, #0
  403710:	d1d5      	bne.n	4036be <__sfvwrite_r+0x11e>
  403712:	f108 0308 	add.w	r3, r8, #8
  403716:	e913 0060 	ldmdb	r3, {r5, r6}
  40371a:	4698      	mov	r8, r3
  40371c:	3308      	adds	r3, #8
  40371e:	2e00      	cmp	r6, #0
  403720:	d0f9      	beq.n	403716 <__sfvwrite_r+0x176>
  403722:	4632      	mov	r2, r6
  403724:	210a      	movs	r1, #10
  403726:	4628      	mov	r0, r5
  403728:	f000 fc3a 	bl	403fa0 <memchr>
  40372c:	2800      	cmp	r0, #0
  40372e:	f000 80a1 	beq.w	403874 <__sfvwrite_r+0x2d4>
  403732:	3001      	adds	r0, #1
  403734:	eba0 0905 	sub.w	r9, r0, r5
  403738:	e7c2      	b.n	4036c0 <__sfvwrite_r+0x120>
  40373a:	6820      	ldr	r0, [r4, #0]
  40373c:	6923      	ldr	r3, [r4, #16]
  40373e:	4298      	cmp	r0, r3
  403740:	d802      	bhi.n	403748 <__sfvwrite_r+0x1a8>
  403742:	6963      	ldr	r3, [r4, #20]
  403744:	429f      	cmp	r7, r3
  403746:	d25d      	bcs.n	403804 <__sfvwrite_r+0x264>
  403748:	45b8      	cmp	r8, r7
  40374a:	bf28      	it	cs
  40374c:	46b8      	movcs	r8, r7
  40374e:	4642      	mov	r2, r8
  403750:	4649      	mov	r1, r9
  403752:	f000 fc75 	bl	404040 <memmove>
  403756:	68a3      	ldr	r3, [r4, #8]
  403758:	6822      	ldr	r2, [r4, #0]
  40375a:	eba3 0308 	sub.w	r3, r3, r8
  40375e:	4442      	add	r2, r8
  403760:	60a3      	str	r3, [r4, #8]
  403762:	6022      	str	r2, [r4, #0]
  403764:	b10b      	cbz	r3, 40376a <__sfvwrite_r+0x1ca>
  403766:	46c2      	mov	sl, r8
  403768:	e779      	b.n	40365e <__sfvwrite_r+0xbe>
  40376a:	4621      	mov	r1, r4
  40376c:	9800      	ldr	r0, [sp, #0]
  40376e:	f7ff fcb3 	bl	4030d8 <_fflush_r>
  403772:	2800      	cmp	r0, #0
  403774:	d192      	bne.n	40369c <__sfvwrite_r+0xfc>
  403776:	46c2      	mov	sl, r8
  403778:	e771      	b.n	40365e <__sfvwrite_r+0xbe>
  40377a:	465a      	mov	r2, fp
  40377c:	4629      	mov	r1, r5
  40377e:	f000 fc5f 	bl	404040 <memmove>
  403782:	68a2      	ldr	r2, [r4, #8]
  403784:	6823      	ldr	r3, [r4, #0]
  403786:	eba2 020b 	sub.w	r2, r2, fp
  40378a:	445b      	add	r3, fp
  40378c:	60a2      	str	r2, [r4, #8]
  40378e:	6023      	str	r3, [r4, #0]
  403790:	e7af      	b.n	4036f2 <__sfvwrite_r+0x152>
  403792:	6820      	ldr	r0, [r4, #0]
  403794:	46b8      	mov	r8, r7
  403796:	46ba      	mov	sl, r7
  403798:	46bb      	mov	fp, r7
  40379a:	e755      	b.n	403648 <__sfvwrite_r+0xa8>
  40379c:	6962      	ldr	r2, [r4, #20]
  40379e:	6820      	ldr	r0, [r4, #0]
  4037a0:	6921      	ldr	r1, [r4, #16]
  4037a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4037a6:	eba0 0a01 	sub.w	sl, r0, r1
  4037aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4037ae:	f10a 0001 	add.w	r0, sl, #1
  4037b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4037b6:	4438      	add	r0, r7
  4037b8:	4540      	cmp	r0, r8
  4037ba:	4642      	mov	r2, r8
  4037bc:	bf84      	itt	hi
  4037be:	4680      	movhi	r8, r0
  4037c0:	4642      	movhi	r2, r8
  4037c2:	055b      	lsls	r3, r3, #21
  4037c4:	d544      	bpl.n	403850 <__sfvwrite_r+0x2b0>
  4037c6:	4611      	mov	r1, r2
  4037c8:	9800      	ldr	r0, [sp, #0]
  4037ca:	f000 f921 	bl	403a10 <_malloc_r>
  4037ce:	4683      	mov	fp, r0
  4037d0:	2800      	cmp	r0, #0
  4037d2:	d055      	beq.n	403880 <__sfvwrite_r+0x2e0>
  4037d4:	4652      	mov	r2, sl
  4037d6:	6921      	ldr	r1, [r4, #16]
  4037d8:	f7fe fa1a 	bl	401c10 <memcpy>
  4037dc:	89a3      	ldrh	r3, [r4, #12]
  4037de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4037e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037e6:	81a3      	strh	r3, [r4, #12]
  4037e8:	eb0b 000a 	add.w	r0, fp, sl
  4037ec:	eba8 030a 	sub.w	r3, r8, sl
  4037f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4037f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4037f8:	6020      	str	r0, [r4, #0]
  4037fa:	60a3      	str	r3, [r4, #8]
  4037fc:	46b8      	mov	r8, r7
  4037fe:	46ba      	mov	sl, r7
  403800:	46bb      	mov	fp, r7
  403802:	e721      	b.n	403648 <__sfvwrite_r+0xa8>
  403804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403808:	42b9      	cmp	r1, r7
  40380a:	bf28      	it	cs
  40380c:	4639      	movcs	r1, r7
  40380e:	464a      	mov	r2, r9
  403810:	fb91 f1f3 	sdiv	r1, r1, r3
  403814:	9800      	ldr	r0, [sp, #0]
  403816:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403818:	fb03 f301 	mul.w	r3, r3, r1
  40381c:	69e1      	ldr	r1, [r4, #28]
  40381e:	47b0      	blx	r6
  403820:	f1b0 0a00 	subs.w	sl, r0, #0
  403824:	f73f af1b 	bgt.w	40365e <__sfvwrite_r+0xbe>
  403828:	e738      	b.n	40369c <__sfvwrite_r+0xfc>
  40382a:	461a      	mov	r2, r3
  40382c:	4629      	mov	r1, r5
  40382e:	9301      	str	r3, [sp, #4]
  403830:	f000 fc06 	bl	404040 <memmove>
  403834:	6822      	ldr	r2, [r4, #0]
  403836:	9b01      	ldr	r3, [sp, #4]
  403838:	9800      	ldr	r0, [sp, #0]
  40383a:	441a      	add	r2, r3
  40383c:	6022      	str	r2, [r4, #0]
  40383e:	4621      	mov	r1, r4
  403840:	f7ff fc4a 	bl	4030d8 <_fflush_r>
  403844:	9b01      	ldr	r3, [sp, #4]
  403846:	2800      	cmp	r0, #0
  403848:	f47f af28 	bne.w	40369c <__sfvwrite_r+0xfc>
  40384c:	461f      	mov	r7, r3
  40384e:	e750      	b.n	4036f2 <__sfvwrite_r+0x152>
  403850:	9800      	ldr	r0, [sp, #0]
  403852:	f000 fc65 	bl	404120 <_realloc_r>
  403856:	4683      	mov	fp, r0
  403858:	2800      	cmp	r0, #0
  40385a:	d1c5      	bne.n	4037e8 <__sfvwrite_r+0x248>
  40385c:	9d00      	ldr	r5, [sp, #0]
  40385e:	6921      	ldr	r1, [r4, #16]
  403860:	4628      	mov	r0, r5
  403862:	f7ff fdb7 	bl	4033d4 <_free_r>
  403866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40386a:	220c      	movs	r2, #12
  40386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403870:	602a      	str	r2, [r5, #0]
  403872:	e715      	b.n	4036a0 <__sfvwrite_r+0x100>
  403874:	f106 0901 	add.w	r9, r6, #1
  403878:	e722      	b.n	4036c0 <__sfvwrite_r+0x120>
  40387a:	f04f 30ff 	mov.w	r0, #4294967295
  40387e:	e6bf      	b.n	403600 <__sfvwrite_r+0x60>
  403880:	9a00      	ldr	r2, [sp, #0]
  403882:	230c      	movs	r3, #12
  403884:	6013      	str	r3, [r2, #0]
  403886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40388a:	e709      	b.n	4036a0 <__sfvwrite_r+0x100>
  40388c:	7ffffc00 	.word	0x7ffffc00

00403890 <_fwalk_reent>:
  403890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403894:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403898:	d01f      	beq.n	4038da <_fwalk_reent+0x4a>
  40389a:	4688      	mov	r8, r1
  40389c:	4606      	mov	r6, r0
  40389e:	f04f 0900 	mov.w	r9, #0
  4038a2:	687d      	ldr	r5, [r7, #4]
  4038a4:	68bc      	ldr	r4, [r7, #8]
  4038a6:	3d01      	subs	r5, #1
  4038a8:	d411      	bmi.n	4038ce <_fwalk_reent+0x3e>
  4038aa:	89a3      	ldrh	r3, [r4, #12]
  4038ac:	2b01      	cmp	r3, #1
  4038ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4038b2:	d908      	bls.n	4038c6 <_fwalk_reent+0x36>
  4038b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4038b8:	3301      	adds	r3, #1
  4038ba:	4621      	mov	r1, r4
  4038bc:	4630      	mov	r0, r6
  4038be:	d002      	beq.n	4038c6 <_fwalk_reent+0x36>
  4038c0:	47c0      	blx	r8
  4038c2:	ea49 0900 	orr.w	r9, r9, r0
  4038c6:	1c6b      	adds	r3, r5, #1
  4038c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4038cc:	d1ed      	bne.n	4038aa <_fwalk_reent+0x1a>
  4038ce:	683f      	ldr	r7, [r7, #0]
  4038d0:	2f00      	cmp	r7, #0
  4038d2:	d1e6      	bne.n	4038a2 <_fwalk_reent+0x12>
  4038d4:	4648      	mov	r0, r9
  4038d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038da:	46b9      	mov	r9, r7
  4038dc:	4648      	mov	r0, r9
  4038de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038e2:	bf00      	nop

004038e4 <__locale_mb_cur_max>:
  4038e4:	4b04      	ldr	r3, [pc, #16]	; (4038f8 <__locale_mb_cur_max+0x14>)
  4038e6:	4a05      	ldr	r2, [pc, #20]	; (4038fc <__locale_mb_cur_max+0x18>)
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4038ec:	2b00      	cmp	r3, #0
  4038ee:	bf08      	it	eq
  4038f0:	4613      	moveq	r3, r2
  4038f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4038f6:	4770      	bx	lr
  4038f8:	20400014 	.word	0x20400014
  4038fc:	20400444 	.word	0x20400444

00403900 <__retarget_lock_init_recursive>:
  403900:	4770      	bx	lr
  403902:	bf00      	nop

00403904 <__retarget_lock_close_recursive>:
  403904:	4770      	bx	lr
  403906:	bf00      	nop

00403908 <__retarget_lock_acquire_recursive>:
  403908:	4770      	bx	lr
  40390a:	bf00      	nop

0040390c <__retarget_lock_release_recursive>:
  40390c:	4770      	bx	lr
  40390e:	bf00      	nop

00403910 <__swhatbuf_r>:
  403910:	b570      	push	{r4, r5, r6, lr}
  403912:	460c      	mov	r4, r1
  403914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403918:	2900      	cmp	r1, #0
  40391a:	b090      	sub	sp, #64	; 0x40
  40391c:	4615      	mov	r5, r2
  40391e:	461e      	mov	r6, r3
  403920:	db14      	blt.n	40394c <__swhatbuf_r+0x3c>
  403922:	aa01      	add	r2, sp, #4
  403924:	f000 ff74 	bl	404810 <_fstat_r>
  403928:	2800      	cmp	r0, #0
  40392a:	db0f      	blt.n	40394c <__swhatbuf_r+0x3c>
  40392c:	9a02      	ldr	r2, [sp, #8]
  40392e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403932:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403936:	fab2 f282 	clz	r2, r2
  40393a:	0952      	lsrs	r2, r2, #5
  40393c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403940:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403944:	6032      	str	r2, [r6, #0]
  403946:	602b      	str	r3, [r5, #0]
  403948:	b010      	add	sp, #64	; 0x40
  40394a:	bd70      	pop	{r4, r5, r6, pc}
  40394c:	89a2      	ldrh	r2, [r4, #12]
  40394e:	2300      	movs	r3, #0
  403950:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403954:	6033      	str	r3, [r6, #0]
  403956:	d004      	beq.n	403962 <__swhatbuf_r+0x52>
  403958:	2240      	movs	r2, #64	; 0x40
  40395a:	4618      	mov	r0, r3
  40395c:	602a      	str	r2, [r5, #0]
  40395e:	b010      	add	sp, #64	; 0x40
  403960:	bd70      	pop	{r4, r5, r6, pc}
  403962:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403966:	602b      	str	r3, [r5, #0]
  403968:	b010      	add	sp, #64	; 0x40
  40396a:	bd70      	pop	{r4, r5, r6, pc}

0040396c <__smakebuf_r>:
  40396c:	898a      	ldrh	r2, [r1, #12]
  40396e:	0792      	lsls	r2, r2, #30
  403970:	460b      	mov	r3, r1
  403972:	d506      	bpl.n	403982 <__smakebuf_r+0x16>
  403974:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403978:	2101      	movs	r1, #1
  40397a:	601a      	str	r2, [r3, #0]
  40397c:	611a      	str	r2, [r3, #16]
  40397e:	6159      	str	r1, [r3, #20]
  403980:	4770      	bx	lr
  403982:	b5f0      	push	{r4, r5, r6, r7, lr}
  403984:	b083      	sub	sp, #12
  403986:	ab01      	add	r3, sp, #4
  403988:	466a      	mov	r2, sp
  40398a:	460c      	mov	r4, r1
  40398c:	4606      	mov	r6, r0
  40398e:	f7ff ffbf 	bl	403910 <__swhatbuf_r>
  403992:	9900      	ldr	r1, [sp, #0]
  403994:	4605      	mov	r5, r0
  403996:	4630      	mov	r0, r6
  403998:	f000 f83a 	bl	403a10 <_malloc_r>
  40399c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039a0:	b1d8      	cbz	r0, 4039da <__smakebuf_r+0x6e>
  4039a2:	9a01      	ldr	r2, [sp, #4]
  4039a4:	4f15      	ldr	r7, [pc, #84]	; (4039fc <__smakebuf_r+0x90>)
  4039a6:	9900      	ldr	r1, [sp, #0]
  4039a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4039ae:	81a3      	strh	r3, [r4, #12]
  4039b0:	6020      	str	r0, [r4, #0]
  4039b2:	6120      	str	r0, [r4, #16]
  4039b4:	6161      	str	r1, [r4, #20]
  4039b6:	b91a      	cbnz	r2, 4039c0 <__smakebuf_r+0x54>
  4039b8:	432b      	orrs	r3, r5
  4039ba:	81a3      	strh	r3, [r4, #12]
  4039bc:	b003      	add	sp, #12
  4039be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4039c0:	4630      	mov	r0, r6
  4039c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4039c6:	f000 ff37 	bl	404838 <_isatty_r>
  4039ca:	b1a0      	cbz	r0, 4039f6 <__smakebuf_r+0x8a>
  4039cc:	89a3      	ldrh	r3, [r4, #12]
  4039ce:	f023 0303 	bic.w	r3, r3, #3
  4039d2:	f043 0301 	orr.w	r3, r3, #1
  4039d6:	b21b      	sxth	r3, r3
  4039d8:	e7ee      	b.n	4039b8 <__smakebuf_r+0x4c>
  4039da:	059a      	lsls	r2, r3, #22
  4039dc:	d4ee      	bmi.n	4039bc <__smakebuf_r+0x50>
  4039de:	f023 0303 	bic.w	r3, r3, #3
  4039e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4039e6:	f043 0302 	orr.w	r3, r3, #2
  4039ea:	2101      	movs	r1, #1
  4039ec:	81a3      	strh	r3, [r4, #12]
  4039ee:	6022      	str	r2, [r4, #0]
  4039f0:	6122      	str	r2, [r4, #16]
  4039f2:	6161      	str	r1, [r4, #20]
  4039f4:	e7e2      	b.n	4039bc <__smakebuf_r+0x50>
  4039f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039fa:	e7dd      	b.n	4039b8 <__smakebuf_r+0x4c>
  4039fc:	0040312d 	.word	0x0040312d

00403a00 <malloc>:
  403a00:	4b02      	ldr	r3, [pc, #8]	; (403a0c <malloc+0xc>)
  403a02:	4601      	mov	r1, r0
  403a04:	6818      	ldr	r0, [r3, #0]
  403a06:	f000 b803 	b.w	403a10 <_malloc_r>
  403a0a:	bf00      	nop
  403a0c:	20400014 	.word	0x20400014

00403a10 <_malloc_r>:
  403a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a14:	f101 060b 	add.w	r6, r1, #11
  403a18:	2e16      	cmp	r6, #22
  403a1a:	b083      	sub	sp, #12
  403a1c:	4605      	mov	r5, r0
  403a1e:	f240 809e 	bls.w	403b5e <_malloc_r+0x14e>
  403a22:	f036 0607 	bics.w	r6, r6, #7
  403a26:	f100 80bd 	bmi.w	403ba4 <_malloc_r+0x194>
  403a2a:	42b1      	cmp	r1, r6
  403a2c:	f200 80ba 	bhi.w	403ba4 <_malloc_r+0x194>
  403a30:	f000 fb6a 	bl	404108 <__malloc_lock>
  403a34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403a38:	f0c0 8293 	bcc.w	403f62 <_malloc_r+0x552>
  403a3c:	0a73      	lsrs	r3, r6, #9
  403a3e:	f000 80b8 	beq.w	403bb2 <_malloc_r+0x1a2>
  403a42:	2b04      	cmp	r3, #4
  403a44:	f200 8179 	bhi.w	403d3a <_malloc_r+0x32a>
  403a48:	09b3      	lsrs	r3, r6, #6
  403a4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403a4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403a52:	00c3      	lsls	r3, r0, #3
  403a54:	4fbf      	ldr	r7, [pc, #764]	; (403d54 <_malloc_r+0x344>)
  403a56:	443b      	add	r3, r7
  403a58:	f1a3 0108 	sub.w	r1, r3, #8
  403a5c:	685c      	ldr	r4, [r3, #4]
  403a5e:	42a1      	cmp	r1, r4
  403a60:	d106      	bne.n	403a70 <_malloc_r+0x60>
  403a62:	e00c      	b.n	403a7e <_malloc_r+0x6e>
  403a64:	2a00      	cmp	r2, #0
  403a66:	f280 80aa 	bge.w	403bbe <_malloc_r+0x1ae>
  403a6a:	68e4      	ldr	r4, [r4, #12]
  403a6c:	42a1      	cmp	r1, r4
  403a6e:	d006      	beq.n	403a7e <_malloc_r+0x6e>
  403a70:	6863      	ldr	r3, [r4, #4]
  403a72:	f023 0303 	bic.w	r3, r3, #3
  403a76:	1b9a      	subs	r2, r3, r6
  403a78:	2a0f      	cmp	r2, #15
  403a7a:	ddf3      	ble.n	403a64 <_malloc_r+0x54>
  403a7c:	4670      	mov	r0, lr
  403a7e:	693c      	ldr	r4, [r7, #16]
  403a80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403d68 <_malloc_r+0x358>
  403a84:	4574      	cmp	r4, lr
  403a86:	f000 81ab 	beq.w	403de0 <_malloc_r+0x3d0>
  403a8a:	6863      	ldr	r3, [r4, #4]
  403a8c:	f023 0303 	bic.w	r3, r3, #3
  403a90:	1b9a      	subs	r2, r3, r6
  403a92:	2a0f      	cmp	r2, #15
  403a94:	f300 8190 	bgt.w	403db8 <_malloc_r+0x3a8>
  403a98:	2a00      	cmp	r2, #0
  403a9a:	f8c7 e014 	str.w	lr, [r7, #20]
  403a9e:	f8c7 e010 	str.w	lr, [r7, #16]
  403aa2:	f280 809d 	bge.w	403be0 <_malloc_r+0x1d0>
  403aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403aaa:	f080 8161 	bcs.w	403d70 <_malloc_r+0x360>
  403aae:	08db      	lsrs	r3, r3, #3
  403ab0:	f103 0c01 	add.w	ip, r3, #1
  403ab4:	1099      	asrs	r1, r3, #2
  403ab6:	687a      	ldr	r2, [r7, #4]
  403ab8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403abc:	f8c4 8008 	str.w	r8, [r4, #8]
  403ac0:	2301      	movs	r3, #1
  403ac2:	408b      	lsls	r3, r1
  403ac4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403ac8:	4313      	orrs	r3, r2
  403aca:	3908      	subs	r1, #8
  403acc:	60e1      	str	r1, [r4, #12]
  403ace:	607b      	str	r3, [r7, #4]
  403ad0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ad4:	f8c8 400c 	str.w	r4, [r8, #12]
  403ad8:	1082      	asrs	r2, r0, #2
  403ada:	2401      	movs	r4, #1
  403adc:	4094      	lsls	r4, r2
  403ade:	429c      	cmp	r4, r3
  403ae0:	f200 808b 	bhi.w	403bfa <_malloc_r+0x1ea>
  403ae4:	421c      	tst	r4, r3
  403ae6:	d106      	bne.n	403af6 <_malloc_r+0xe6>
  403ae8:	f020 0003 	bic.w	r0, r0, #3
  403aec:	0064      	lsls	r4, r4, #1
  403aee:	421c      	tst	r4, r3
  403af0:	f100 0004 	add.w	r0, r0, #4
  403af4:	d0fa      	beq.n	403aec <_malloc_r+0xdc>
  403af6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403afa:	46cc      	mov	ip, r9
  403afc:	4680      	mov	r8, r0
  403afe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b02:	459c      	cmp	ip, r3
  403b04:	d107      	bne.n	403b16 <_malloc_r+0x106>
  403b06:	e16d      	b.n	403de4 <_malloc_r+0x3d4>
  403b08:	2a00      	cmp	r2, #0
  403b0a:	f280 817b 	bge.w	403e04 <_malloc_r+0x3f4>
  403b0e:	68db      	ldr	r3, [r3, #12]
  403b10:	459c      	cmp	ip, r3
  403b12:	f000 8167 	beq.w	403de4 <_malloc_r+0x3d4>
  403b16:	6859      	ldr	r1, [r3, #4]
  403b18:	f021 0103 	bic.w	r1, r1, #3
  403b1c:	1b8a      	subs	r2, r1, r6
  403b1e:	2a0f      	cmp	r2, #15
  403b20:	ddf2      	ble.n	403b08 <_malloc_r+0xf8>
  403b22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403b26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403b2a:	9300      	str	r3, [sp, #0]
  403b2c:	199c      	adds	r4, r3, r6
  403b2e:	4628      	mov	r0, r5
  403b30:	f046 0601 	orr.w	r6, r6, #1
  403b34:	f042 0501 	orr.w	r5, r2, #1
  403b38:	605e      	str	r6, [r3, #4]
  403b3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b3e:	f8cc 8008 	str.w	r8, [ip, #8]
  403b42:	617c      	str	r4, [r7, #20]
  403b44:	613c      	str	r4, [r7, #16]
  403b46:	f8c4 e00c 	str.w	lr, [r4, #12]
  403b4a:	f8c4 e008 	str.w	lr, [r4, #8]
  403b4e:	6065      	str	r5, [r4, #4]
  403b50:	505a      	str	r2, [r3, r1]
  403b52:	f000 fadf 	bl	404114 <__malloc_unlock>
  403b56:	9b00      	ldr	r3, [sp, #0]
  403b58:	f103 0408 	add.w	r4, r3, #8
  403b5c:	e01e      	b.n	403b9c <_malloc_r+0x18c>
  403b5e:	2910      	cmp	r1, #16
  403b60:	d820      	bhi.n	403ba4 <_malloc_r+0x194>
  403b62:	f000 fad1 	bl	404108 <__malloc_lock>
  403b66:	2610      	movs	r6, #16
  403b68:	2318      	movs	r3, #24
  403b6a:	2002      	movs	r0, #2
  403b6c:	4f79      	ldr	r7, [pc, #484]	; (403d54 <_malloc_r+0x344>)
  403b6e:	443b      	add	r3, r7
  403b70:	f1a3 0208 	sub.w	r2, r3, #8
  403b74:	685c      	ldr	r4, [r3, #4]
  403b76:	4294      	cmp	r4, r2
  403b78:	f000 813d 	beq.w	403df6 <_malloc_r+0x3e6>
  403b7c:	6863      	ldr	r3, [r4, #4]
  403b7e:	68e1      	ldr	r1, [r4, #12]
  403b80:	68a6      	ldr	r6, [r4, #8]
  403b82:	f023 0303 	bic.w	r3, r3, #3
  403b86:	4423      	add	r3, r4
  403b88:	4628      	mov	r0, r5
  403b8a:	685a      	ldr	r2, [r3, #4]
  403b8c:	60f1      	str	r1, [r6, #12]
  403b8e:	f042 0201 	orr.w	r2, r2, #1
  403b92:	608e      	str	r6, [r1, #8]
  403b94:	605a      	str	r2, [r3, #4]
  403b96:	f000 fabd 	bl	404114 <__malloc_unlock>
  403b9a:	3408      	adds	r4, #8
  403b9c:	4620      	mov	r0, r4
  403b9e:	b003      	add	sp, #12
  403ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ba4:	2400      	movs	r4, #0
  403ba6:	230c      	movs	r3, #12
  403ba8:	4620      	mov	r0, r4
  403baa:	602b      	str	r3, [r5, #0]
  403bac:	b003      	add	sp, #12
  403bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bb2:	2040      	movs	r0, #64	; 0x40
  403bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  403bb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403bbc:	e74a      	b.n	403a54 <_malloc_r+0x44>
  403bbe:	4423      	add	r3, r4
  403bc0:	68e1      	ldr	r1, [r4, #12]
  403bc2:	685a      	ldr	r2, [r3, #4]
  403bc4:	68a6      	ldr	r6, [r4, #8]
  403bc6:	f042 0201 	orr.w	r2, r2, #1
  403bca:	60f1      	str	r1, [r6, #12]
  403bcc:	4628      	mov	r0, r5
  403bce:	608e      	str	r6, [r1, #8]
  403bd0:	605a      	str	r2, [r3, #4]
  403bd2:	f000 fa9f 	bl	404114 <__malloc_unlock>
  403bd6:	3408      	adds	r4, #8
  403bd8:	4620      	mov	r0, r4
  403bda:	b003      	add	sp, #12
  403bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403be0:	4423      	add	r3, r4
  403be2:	4628      	mov	r0, r5
  403be4:	685a      	ldr	r2, [r3, #4]
  403be6:	f042 0201 	orr.w	r2, r2, #1
  403bea:	605a      	str	r2, [r3, #4]
  403bec:	f000 fa92 	bl	404114 <__malloc_unlock>
  403bf0:	3408      	adds	r4, #8
  403bf2:	4620      	mov	r0, r4
  403bf4:	b003      	add	sp, #12
  403bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bfa:	68bc      	ldr	r4, [r7, #8]
  403bfc:	6863      	ldr	r3, [r4, #4]
  403bfe:	f023 0803 	bic.w	r8, r3, #3
  403c02:	45b0      	cmp	r8, r6
  403c04:	d304      	bcc.n	403c10 <_malloc_r+0x200>
  403c06:	eba8 0306 	sub.w	r3, r8, r6
  403c0a:	2b0f      	cmp	r3, #15
  403c0c:	f300 8085 	bgt.w	403d1a <_malloc_r+0x30a>
  403c10:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403d6c <_malloc_r+0x35c>
  403c14:	4b50      	ldr	r3, [pc, #320]	; (403d58 <_malloc_r+0x348>)
  403c16:	f8d9 2000 	ldr.w	r2, [r9]
  403c1a:	681b      	ldr	r3, [r3, #0]
  403c1c:	3201      	adds	r2, #1
  403c1e:	4433      	add	r3, r6
  403c20:	eb04 0a08 	add.w	sl, r4, r8
  403c24:	f000 8155 	beq.w	403ed2 <_malloc_r+0x4c2>
  403c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403c2c:	330f      	adds	r3, #15
  403c2e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403c32:	f02b 0b0f 	bic.w	fp, fp, #15
  403c36:	4659      	mov	r1, fp
  403c38:	4628      	mov	r0, r5
  403c3a:	f000 fc17 	bl	40446c <_sbrk_r>
  403c3e:	1c41      	adds	r1, r0, #1
  403c40:	4602      	mov	r2, r0
  403c42:	f000 80fc 	beq.w	403e3e <_malloc_r+0x42e>
  403c46:	4582      	cmp	sl, r0
  403c48:	f200 80f7 	bhi.w	403e3a <_malloc_r+0x42a>
  403c4c:	4b43      	ldr	r3, [pc, #268]	; (403d5c <_malloc_r+0x34c>)
  403c4e:	6819      	ldr	r1, [r3, #0]
  403c50:	4459      	add	r1, fp
  403c52:	6019      	str	r1, [r3, #0]
  403c54:	f000 814d 	beq.w	403ef2 <_malloc_r+0x4e2>
  403c58:	f8d9 0000 	ldr.w	r0, [r9]
  403c5c:	3001      	adds	r0, #1
  403c5e:	bf1b      	ittet	ne
  403c60:	eba2 0a0a 	subne.w	sl, r2, sl
  403c64:	4451      	addne	r1, sl
  403c66:	f8c9 2000 	streq.w	r2, [r9]
  403c6a:	6019      	strne	r1, [r3, #0]
  403c6c:	f012 0107 	ands.w	r1, r2, #7
  403c70:	f000 8115 	beq.w	403e9e <_malloc_r+0x48e>
  403c74:	f1c1 0008 	rsb	r0, r1, #8
  403c78:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403c7c:	4402      	add	r2, r0
  403c7e:	3108      	adds	r1, #8
  403c80:	eb02 090b 	add.w	r9, r2, fp
  403c84:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403c88:	eba1 0909 	sub.w	r9, r1, r9
  403c8c:	4649      	mov	r1, r9
  403c8e:	4628      	mov	r0, r5
  403c90:	9301      	str	r3, [sp, #4]
  403c92:	9200      	str	r2, [sp, #0]
  403c94:	f000 fbea 	bl	40446c <_sbrk_r>
  403c98:	1c43      	adds	r3, r0, #1
  403c9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403c9e:	f000 8143 	beq.w	403f28 <_malloc_r+0x518>
  403ca2:	1a80      	subs	r0, r0, r2
  403ca4:	4448      	add	r0, r9
  403ca6:	f040 0001 	orr.w	r0, r0, #1
  403caa:	6819      	ldr	r1, [r3, #0]
  403cac:	60ba      	str	r2, [r7, #8]
  403cae:	4449      	add	r1, r9
  403cb0:	42bc      	cmp	r4, r7
  403cb2:	6050      	str	r0, [r2, #4]
  403cb4:	6019      	str	r1, [r3, #0]
  403cb6:	d017      	beq.n	403ce8 <_malloc_r+0x2d8>
  403cb8:	f1b8 0f0f 	cmp.w	r8, #15
  403cbc:	f240 80fb 	bls.w	403eb6 <_malloc_r+0x4a6>
  403cc0:	6860      	ldr	r0, [r4, #4]
  403cc2:	f1a8 020c 	sub.w	r2, r8, #12
  403cc6:	f022 0207 	bic.w	r2, r2, #7
  403cca:	eb04 0e02 	add.w	lr, r4, r2
  403cce:	f000 0001 	and.w	r0, r0, #1
  403cd2:	f04f 0c05 	mov.w	ip, #5
  403cd6:	4310      	orrs	r0, r2
  403cd8:	2a0f      	cmp	r2, #15
  403cda:	6060      	str	r0, [r4, #4]
  403cdc:	f8ce c004 	str.w	ip, [lr, #4]
  403ce0:	f8ce c008 	str.w	ip, [lr, #8]
  403ce4:	f200 8117 	bhi.w	403f16 <_malloc_r+0x506>
  403ce8:	4b1d      	ldr	r3, [pc, #116]	; (403d60 <_malloc_r+0x350>)
  403cea:	68bc      	ldr	r4, [r7, #8]
  403cec:	681a      	ldr	r2, [r3, #0]
  403cee:	4291      	cmp	r1, r2
  403cf0:	bf88      	it	hi
  403cf2:	6019      	strhi	r1, [r3, #0]
  403cf4:	4b1b      	ldr	r3, [pc, #108]	; (403d64 <_malloc_r+0x354>)
  403cf6:	681a      	ldr	r2, [r3, #0]
  403cf8:	4291      	cmp	r1, r2
  403cfa:	6862      	ldr	r2, [r4, #4]
  403cfc:	bf88      	it	hi
  403cfe:	6019      	strhi	r1, [r3, #0]
  403d00:	f022 0203 	bic.w	r2, r2, #3
  403d04:	4296      	cmp	r6, r2
  403d06:	eba2 0306 	sub.w	r3, r2, r6
  403d0a:	d801      	bhi.n	403d10 <_malloc_r+0x300>
  403d0c:	2b0f      	cmp	r3, #15
  403d0e:	dc04      	bgt.n	403d1a <_malloc_r+0x30a>
  403d10:	4628      	mov	r0, r5
  403d12:	f000 f9ff 	bl	404114 <__malloc_unlock>
  403d16:	2400      	movs	r4, #0
  403d18:	e740      	b.n	403b9c <_malloc_r+0x18c>
  403d1a:	19a2      	adds	r2, r4, r6
  403d1c:	f043 0301 	orr.w	r3, r3, #1
  403d20:	f046 0601 	orr.w	r6, r6, #1
  403d24:	6066      	str	r6, [r4, #4]
  403d26:	4628      	mov	r0, r5
  403d28:	60ba      	str	r2, [r7, #8]
  403d2a:	6053      	str	r3, [r2, #4]
  403d2c:	f000 f9f2 	bl	404114 <__malloc_unlock>
  403d30:	3408      	adds	r4, #8
  403d32:	4620      	mov	r0, r4
  403d34:	b003      	add	sp, #12
  403d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d3a:	2b14      	cmp	r3, #20
  403d3c:	d971      	bls.n	403e22 <_malloc_r+0x412>
  403d3e:	2b54      	cmp	r3, #84	; 0x54
  403d40:	f200 80a3 	bhi.w	403e8a <_malloc_r+0x47a>
  403d44:	0b33      	lsrs	r3, r6, #12
  403d46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403d4a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403d4e:	00c3      	lsls	r3, r0, #3
  403d50:	e680      	b.n	403a54 <_malloc_r+0x44>
  403d52:	bf00      	nop
  403d54:	204005b0 	.word	0x204005b0
  403d58:	20400a88 	.word	0x20400a88
  403d5c:	20400a58 	.word	0x20400a58
  403d60:	20400a80 	.word	0x20400a80
  403d64:	20400a84 	.word	0x20400a84
  403d68:	204005b8 	.word	0x204005b8
  403d6c:	204009b8 	.word	0x204009b8
  403d70:	0a5a      	lsrs	r2, r3, #9
  403d72:	2a04      	cmp	r2, #4
  403d74:	d95b      	bls.n	403e2e <_malloc_r+0x41e>
  403d76:	2a14      	cmp	r2, #20
  403d78:	f200 80ae 	bhi.w	403ed8 <_malloc_r+0x4c8>
  403d7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403d80:	00c9      	lsls	r1, r1, #3
  403d82:	325b      	adds	r2, #91	; 0x5b
  403d84:	eb07 0c01 	add.w	ip, r7, r1
  403d88:	5879      	ldr	r1, [r7, r1]
  403d8a:	f1ac 0c08 	sub.w	ip, ip, #8
  403d8e:	458c      	cmp	ip, r1
  403d90:	f000 8088 	beq.w	403ea4 <_malloc_r+0x494>
  403d94:	684a      	ldr	r2, [r1, #4]
  403d96:	f022 0203 	bic.w	r2, r2, #3
  403d9a:	4293      	cmp	r3, r2
  403d9c:	d273      	bcs.n	403e86 <_malloc_r+0x476>
  403d9e:	6889      	ldr	r1, [r1, #8]
  403da0:	458c      	cmp	ip, r1
  403da2:	d1f7      	bne.n	403d94 <_malloc_r+0x384>
  403da4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403da8:	687b      	ldr	r3, [r7, #4]
  403daa:	60e2      	str	r2, [r4, #12]
  403dac:	f8c4 c008 	str.w	ip, [r4, #8]
  403db0:	6094      	str	r4, [r2, #8]
  403db2:	f8cc 400c 	str.w	r4, [ip, #12]
  403db6:	e68f      	b.n	403ad8 <_malloc_r+0xc8>
  403db8:	19a1      	adds	r1, r4, r6
  403dba:	f046 0c01 	orr.w	ip, r6, #1
  403dbe:	f042 0601 	orr.w	r6, r2, #1
  403dc2:	f8c4 c004 	str.w	ip, [r4, #4]
  403dc6:	4628      	mov	r0, r5
  403dc8:	6179      	str	r1, [r7, #20]
  403dca:	6139      	str	r1, [r7, #16]
  403dcc:	f8c1 e00c 	str.w	lr, [r1, #12]
  403dd0:	f8c1 e008 	str.w	lr, [r1, #8]
  403dd4:	604e      	str	r6, [r1, #4]
  403dd6:	50e2      	str	r2, [r4, r3]
  403dd8:	f000 f99c 	bl	404114 <__malloc_unlock>
  403ddc:	3408      	adds	r4, #8
  403dde:	e6dd      	b.n	403b9c <_malloc_r+0x18c>
  403de0:	687b      	ldr	r3, [r7, #4]
  403de2:	e679      	b.n	403ad8 <_malloc_r+0xc8>
  403de4:	f108 0801 	add.w	r8, r8, #1
  403de8:	f018 0f03 	tst.w	r8, #3
  403dec:	f10c 0c08 	add.w	ip, ip, #8
  403df0:	f47f ae85 	bne.w	403afe <_malloc_r+0xee>
  403df4:	e02d      	b.n	403e52 <_malloc_r+0x442>
  403df6:	68dc      	ldr	r4, [r3, #12]
  403df8:	42a3      	cmp	r3, r4
  403dfa:	bf08      	it	eq
  403dfc:	3002      	addeq	r0, #2
  403dfe:	f43f ae3e 	beq.w	403a7e <_malloc_r+0x6e>
  403e02:	e6bb      	b.n	403b7c <_malloc_r+0x16c>
  403e04:	4419      	add	r1, r3
  403e06:	461c      	mov	r4, r3
  403e08:	684a      	ldr	r2, [r1, #4]
  403e0a:	68db      	ldr	r3, [r3, #12]
  403e0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e10:	f042 0201 	orr.w	r2, r2, #1
  403e14:	604a      	str	r2, [r1, #4]
  403e16:	4628      	mov	r0, r5
  403e18:	60f3      	str	r3, [r6, #12]
  403e1a:	609e      	str	r6, [r3, #8]
  403e1c:	f000 f97a 	bl	404114 <__malloc_unlock>
  403e20:	e6bc      	b.n	403b9c <_malloc_r+0x18c>
  403e22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403e26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403e2a:	00c3      	lsls	r3, r0, #3
  403e2c:	e612      	b.n	403a54 <_malloc_r+0x44>
  403e2e:	099a      	lsrs	r2, r3, #6
  403e30:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e34:	00c9      	lsls	r1, r1, #3
  403e36:	3238      	adds	r2, #56	; 0x38
  403e38:	e7a4      	b.n	403d84 <_malloc_r+0x374>
  403e3a:	42bc      	cmp	r4, r7
  403e3c:	d054      	beq.n	403ee8 <_malloc_r+0x4d8>
  403e3e:	68bc      	ldr	r4, [r7, #8]
  403e40:	6862      	ldr	r2, [r4, #4]
  403e42:	f022 0203 	bic.w	r2, r2, #3
  403e46:	e75d      	b.n	403d04 <_malloc_r+0x2f4>
  403e48:	f859 3908 	ldr.w	r3, [r9], #-8
  403e4c:	4599      	cmp	r9, r3
  403e4e:	f040 8086 	bne.w	403f5e <_malloc_r+0x54e>
  403e52:	f010 0f03 	tst.w	r0, #3
  403e56:	f100 30ff 	add.w	r0, r0, #4294967295
  403e5a:	d1f5      	bne.n	403e48 <_malloc_r+0x438>
  403e5c:	687b      	ldr	r3, [r7, #4]
  403e5e:	ea23 0304 	bic.w	r3, r3, r4
  403e62:	607b      	str	r3, [r7, #4]
  403e64:	0064      	lsls	r4, r4, #1
  403e66:	429c      	cmp	r4, r3
  403e68:	f63f aec7 	bhi.w	403bfa <_malloc_r+0x1ea>
  403e6c:	2c00      	cmp	r4, #0
  403e6e:	f43f aec4 	beq.w	403bfa <_malloc_r+0x1ea>
  403e72:	421c      	tst	r4, r3
  403e74:	4640      	mov	r0, r8
  403e76:	f47f ae3e 	bne.w	403af6 <_malloc_r+0xe6>
  403e7a:	0064      	lsls	r4, r4, #1
  403e7c:	421c      	tst	r4, r3
  403e7e:	f100 0004 	add.w	r0, r0, #4
  403e82:	d0fa      	beq.n	403e7a <_malloc_r+0x46a>
  403e84:	e637      	b.n	403af6 <_malloc_r+0xe6>
  403e86:	468c      	mov	ip, r1
  403e88:	e78c      	b.n	403da4 <_malloc_r+0x394>
  403e8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403e8e:	d815      	bhi.n	403ebc <_malloc_r+0x4ac>
  403e90:	0bf3      	lsrs	r3, r6, #15
  403e92:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403e96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403e9a:	00c3      	lsls	r3, r0, #3
  403e9c:	e5da      	b.n	403a54 <_malloc_r+0x44>
  403e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403ea2:	e6ed      	b.n	403c80 <_malloc_r+0x270>
  403ea4:	687b      	ldr	r3, [r7, #4]
  403ea6:	1092      	asrs	r2, r2, #2
  403ea8:	2101      	movs	r1, #1
  403eaa:	fa01 f202 	lsl.w	r2, r1, r2
  403eae:	4313      	orrs	r3, r2
  403eb0:	607b      	str	r3, [r7, #4]
  403eb2:	4662      	mov	r2, ip
  403eb4:	e779      	b.n	403daa <_malloc_r+0x39a>
  403eb6:	2301      	movs	r3, #1
  403eb8:	6053      	str	r3, [r2, #4]
  403eba:	e729      	b.n	403d10 <_malloc_r+0x300>
  403ebc:	f240 5254 	movw	r2, #1364	; 0x554
  403ec0:	4293      	cmp	r3, r2
  403ec2:	d822      	bhi.n	403f0a <_malloc_r+0x4fa>
  403ec4:	0cb3      	lsrs	r3, r6, #18
  403ec6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403eca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403ece:	00c3      	lsls	r3, r0, #3
  403ed0:	e5c0      	b.n	403a54 <_malloc_r+0x44>
  403ed2:	f103 0b10 	add.w	fp, r3, #16
  403ed6:	e6ae      	b.n	403c36 <_malloc_r+0x226>
  403ed8:	2a54      	cmp	r2, #84	; 0x54
  403eda:	d829      	bhi.n	403f30 <_malloc_r+0x520>
  403edc:	0b1a      	lsrs	r2, r3, #12
  403ede:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403ee2:	00c9      	lsls	r1, r1, #3
  403ee4:	326e      	adds	r2, #110	; 0x6e
  403ee6:	e74d      	b.n	403d84 <_malloc_r+0x374>
  403ee8:	4b20      	ldr	r3, [pc, #128]	; (403f6c <_malloc_r+0x55c>)
  403eea:	6819      	ldr	r1, [r3, #0]
  403eec:	4459      	add	r1, fp
  403eee:	6019      	str	r1, [r3, #0]
  403ef0:	e6b2      	b.n	403c58 <_malloc_r+0x248>
  403ef2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403ef6:	2800      	cmp	r0, #0
  403ef8:	f47f aeae 	bne.w	403c58 <_malloc_r+0x248>
  403efc:	eb08 030b 	add.w	r3, r8, fp
  403f00:	68ba      	ldr	r2, [r7, #8]
  403f02:	f043 0301 	orr.w	r3, r3, #1
  403f06:	6053      	str	r3, [r2, #4]
  403f08:	e6ee      	b.n	403ce8 <_malloc_r+0x2d8>
  403f0a:	207f      	movs	r0, #127	; 0x7f
  403f0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f14:	e59e      	b.n	403a54 <_malloc_r+0x44>
  403f16:	f104 0108 	add.w	r1, r4, #8
  403f1a:	4628      	mov	r0, r5
  403f1c:	9300      	str	r3, [sp, #0]
  403f1e:	f7ff fa59 	bl	4033d4 <_free_r>
  403f22:	9b00      	ldr	r3, [sp, #0]
  403f24:	6819      	ldr	r1, [r3, #0]
  403f26:	e6df      	b.n	403ce8 <_malloc_r+0x2d8>
  403f28:	2001      	movs	r0, #1
  403f2a:	f04f 0900 	mov.w	r9, #0
  403f2e:	e6bc      	b.n	403caa <_malloc_r+0x29a>
  403f30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f34:	d805      	bhi.n	403f42 <_malloc_r+0x532>
  403f36:	0bda      	lsrs	r2, r3, #15
  403f38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403f3c:	00c9      	lsls	r1, r1, #3
  403f3e:	3277      	adds	r2, #119	; 0x77
  403f40:	e720      	b.n	403d84 <_malloc_r+0x374>
  403f42:	f240 5154 	movw	r1, #1364	; 0x554
  403f46:	428a      	cmp	r2, r1
  403f48:	d805      	bhi.n	403f56 <_malloc_r+0x546>
  403f4a:	0c9a      	lsrs	r2, r3, #18
  403f4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403f50:	00c9      	lsls	r1, r1, #3
  403f52:	327c      	adds	r2, #124	; 0x7c
  403f54:	e716      	b.n	403d84 <_malloc_r+0x374>
  403f56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403f5a:	227e      	movs	r2, #126	; 0x7e
  403f5c:	e712      	b.n	403d84 <_malloc_r+0x374>
  403f5e:	687b      	ldr	r3, [r7, #4]
  403f60:	e780      	b.n	403e64 <_malloc_r+0x454>
  403f62:	08f0      	lsrs	r0, r6, #3
  403f64:	f106 0308 	add.w	r3, r6, #8
  403f68:	e600      	b.n	403b6c <_malloc_r+0x15c>
  403f6a:	bf00      	nop
  403f6c:	20400a58 	.word	0x20400a58

00403f70 <__ascii_mbtowc>:
  403f70:	b082      	sub	sp, #8
  403f72:	b149      	cbz	r1, 403f88 <__ascii_mbtowc+0x18>
  403f74:	b15a      	cbz	r2, 403f8e <__ascii_mbtowc+0x1e>
  403f76:	b16b      	cbz	r3, 403f94 <__ascii_mbtowc+0x24>
  403f78:	7813      	ldrb	r3, [r2, #0]
  403f7a:	600b      	str	r3, [r1, #0]
  403f7c:	7812      	ldrb	r2, [r2, #0]
  403f7e:	1c10      	adds	r0, r2, #0
  403f80:	bf18      	it	ne
  403f82:	2001      	movne	r0, #1
  403f84:	b002      	add	sp, #8
  403f86:	4770      	bx	lr
  403f88:	a901      	add	r1, sp, #4
  403f8a:	2a00      	cmp	r2, #0
  403f8c:	d1f3      	bne.n	403f76 <__ascii_mbtowc+0x6>
  403f8e:	4610      	mov	r0, r2
  403f90:	b002      	add	sp, #8
  403f92:	4770      	bx	lr
  403f94:	f06f 0001 	mvn.w	r0, #1
  403f98:	e7f4      	b.n	403f84 <__ascii_mbtowc+0x14>
  403f9a:	bf00      	nop
  403f9c:	0000      	movs	r0, r0
	...

00403fa0 <memchr>:
  403fa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403fa4:	2a10      	cmp	r2, #16
  403fa6:	db2b      	blt.n	404000 <memchr+0x60>
  403fa8:	f010 0f07 	tst.w	r0, #7
  403fac:	d008      	beq.n	403fc0 <memchr+0x20>
  403fae:	f810 3b01 	ldrb.w	r3, [r0], #1
  403fb2:	3a01      	subs	r2, #1
  403fb4:	428b      	cmp	r3, r1
  403fb6:	d02d      	beq.n	404014 <memchr+0x74>
  403fb8:	f010 0f07 	tst.w	r0, #7
  403fbc:	b342      	cbz	r2, 404010 <memchr+0x70>
  403fbe:	d1f6      	bne.n	403fae <memchr+0xe>
  403fc0:	b4f0      	push	{r4, r5, r6, r7}
  403fc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403fc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403fca:	f022 0407 	bic.w	r4, r2, #7
  403fce:	f07f 0700 	mvns.w	r7, #0
  403fd2:	2300      	movs	r3, #0
  403fd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403fd8:	3c08      	subs	r4, #8
  403fda:	ea85 0501 	eor.w	r5, r5, r1
  403fde:	ea86 0601 	eor.w	r6, r6, r1
  403fe2:	fa85 f547 	uadd8	r5, r5, r7
  403fe6:	faa3 f587 	sel	r5, r3, r7
  403fea:	fa86 f647 	uadd8	r6, r6, r7
  403fee:	faa5 f687 	sel	r6, r5, r7
  403ff2:	b98e      	cbnz	r6, 404018 <memchr+0x78>
  403ff4:	d1ee      	bne.n	403fd4 <memchr+0x34>
  403ff6:	bcf0      	pop	{r4, r5, r6, r7}
  403ff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403ffc:	f002 0207 	and.w	r2, r2, #7
  404000:	b132      	cbz	r2, 404010 <memchr+0x70>
  404002:	f810 3b01 	ldrb.w	r3, [r0], #1
  404006:	3a01      	subs	r2, #1
  404008:	ea83 0301 	eor.w	r3, r3, r1
  40400c:	b113      	cbz	r3, 404014 <memchr+0x74>
  40400e:	d1f8      	bne.n	404002 <memchr+0x62>
  404010:	2000      	movs	r0, #0
  404012:	4770      	bx	lr
  404014:	3801      	subs	r0, #1
  404016:	4770      	bx	lr
  404018:	2d00      	cmp	r5, #0
  40401a:	bf06      	itte	eq
  40401c:	4635      	moveq	r5, r6
  40401e:	3803      	subeq	r0, #3
  404020:	3807      	subne	r0, #7
  404022:	f015 0f01 	tst.w	r5, #1
  404026:	d107      	bne.n	404038 <memchr+0x98>
  404028:	3001      	adds	r0, #1
  40402a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40402e:	bf02      	ittt	eq
  404030:	3001      	addeq	r0, #1
  404032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404036:	3001      	addeq	r0, #1
  404038:	bcf0      	pop	{r4, r5, r6, r7}
  40403a:	3801      	subs	r0, #1
  40403c:	4770      	bx	lr
  40403e:	bf00      	nop

00404040 <memmove>:
  404040:	4288      	cmp	r0, r1
  404042:	b5f0      	push	{r4, r5, r6, r7, lr}
  404044:	d90d      	bls.n	404062 <memmove+0x22>
  404046:	188b      	adds	r3, r1, r2
  404048:	4298      	cmp	r0, r3
  40404a:	d20a      	bcs.n	404062 <memmove+0x22>
  40404c:	1884      	adds	r4, r0, r2
  40404e:	2a00      	cmp	r2, #0
  404050:	d051      	beq.n	4040f6 <memmove+0xb6>
  404052:	4622      	mov	r2, r4
  404054:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404058:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40405c:	4299      	cmp	r1, r3
  40405e:	d1f9      	bne.n	404054 <memmove+0x14>
  404060:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404062:	2a0f      	cmp	r2, #15
  404064:	d948      	bls.n	4040f8 <memmove+0xb8>
  404066:	ea41 0300 	orr.w	r3, r1, r0
  40406a:	079b      	lsls	r3, r3, #30
  40406c:	d146      	bne.n	4040fc <memmove+0xbc>
  40406e:	f100 0410 	add.w	r4, r0, #16
  404072:	f101 0310 	add.w	r3, r1, #16
  404076:	4615      	mov	r5, r2
  404078:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40407c:	f844 6c10 	str.w	r6, [r4, #-16]
  404080:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404084:	f844 6c0c 	str.w	r6, [r4, #-12]
  404088:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40408c:	f844 6c08 	str.w	r6, [r4, #-8]
  404090:	3d10      	subs	r5, #16
  404092:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404096:	f844 6c04 	str.w	r6, [r4, #-4]
  40409a:	2d0f      	cmp	r5, #15
  40409c:	f103 0310 	add.w	r3, r3, #16
  4040a0:	f104 0410 	add.w	r4, r4, #16
  4040a4:	d8e8      	bhi.n	404078 <memmove+0x38>
  4040a6:	f1a2 0310 	sub.w	r3, r2, #16
  4040aa:	f023 030f 	bic.w	r3, r3, #15
  4040ae:	f002 0e0f 	and.w	lr, r2, #15
  4040b2:	3310      	adds	r3, #16
  4040b4:	f1be 0f03 	cmp.w	lr, #3
  4040b8:	4419      	add	r1, r3
  4040ba:	4403      	add	r3, r0
  4040bc:	d921      	bls.n	404102 <memmove+0xc2>
  4040be:	1f1e      	subs	r6, r3, #4
  4040c0:	460d      	mov	r5, r1
  4040c2:	4674      	mov	r4, lr
  4040c4:	3c04      	subs	r4, #4
  4040c6:	f855 7b04 	ldr.w	r7, [r5], #4
  4040ca:	f846 7f04 	str.w	r7, [r6, #4]!
  4040ce:	2c03      	cmp	r4, #3
  4040d0:	d8f8      	bhi.n	4040c4 <memmove+0x84>
  4040d2:	f1ae 0404 	sub.w	r4, lr, #4
  4040d6:	f024 0403 	bic.w	r4, r4, #3
  4040da:	3404      	adds	r4, #4
  4040dc:	4421      	add	r1, r4
  4040de:	4423      	add	r3, r4
  4040e0:	f002 0203 	and.w	r2, r2, #3
  4040e4:	b162      	cbz	r2, 404100 <memmove+0xc0>
  4040e6:	3b01      	subs	r3, #1
  4040e8:	440a      	add	r2, r1
  4040ea:	f811 4b01 	ldrb.w	r4, [r1], #1
  4040ee:	f803 4f01 	strb.w	r4, [r3, #1]!
  4040f2:	428a      	cmp	r2, r1
  4040f4:	d1f9      	bne.n	4040ea <memmove+0xaa>
  4040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4040f8:	4603      	mov	r3, r0
  4040fa:	e7f3      	b.n	4040e4 <memmove+0xa4>
  4040fc:	4603      	mov	r3, r0
  4040fe:	e7f2      	b.n	4040e6 <memmove+0xa6>
  404100:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404102:	4672      	mov	r2, lr
  404104:	e7ee      	b.n	4040e4 <memmove+0xa4>
  404106:	bf00      	nop

00404108 <__malloc_lock>:
  404108:	4801      	ldr	r0, [pc, #4]	; (404110 <__malloc_lock+0x8>)
  40410a:	f7ff bbfd 	b.w	403908 <__retarget_lock_acquire_recursive>
  40410e:	bf00      	nop
  404110:	20400aec 	.word	0x20400aec

00404114 <__malloc_unlock>:
  404114:	4801      	ldr	r0, [pc, #4]	; (40411c <__malloc_unlock+0x8>)
  404116:	f7ff bbf9 	b.w	40390c <__retarget_lock_release_recursive>
  40411a:	bf00      	nop
  40411c:	20400aec 	.word	0x20400aec

00404120 <_realloc_r>:
  404120:	2900      	cmp	r1, #0
  404122:	f000 8095 	beq.w	404250 <_realloc_r+0x130>
  404126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40412a:	460d      	mov	r5, r1
  40412c:	4616      	mov	r6, r2
  40412e:	b083      	sub	sp, #12
  404130:	4680      	mov	r8, r0
  404132:	f106 070b 	add.w	r7, r6, #11
  404136:	f7ff ffe7 	bl	404108 <__malloc_lock>
  40413a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40413e:	2f16      	cmp	r7, #22
  404140:	f02e 0403 	bic.w	r4, lr, #3
  404144:	f1a5 0908 	sub.w	r9, r5, #8
  404148:	d83c      	bhi.n	4041c4 <_realloc_r+0xa4>
  40414a:	2210      	movs	r2, #16
  40414c:	4617      	mov	r7, r2
  40414e:	42be      	cmp	r6, r7
  404150:	d83d      	bhi.n	4041ce <_realloc_r+0xae>
  404152:	4294      	cmp	r4, r2
  404154:	da43      	bge.n	4041de <_realloc_r+0xbe>
  404156:	4bc4      	ldr	r3, [pc, #784]	; (404468 <_realloc_r+0x348>)
  404158:	6899      	ldr	r1, [r3, #8]
  40415a:	eb09 0004 	add.w	r0, r9, r4
  40415e:	4288      	cmp	r0, r1
  404160:	f000 80b4 	beq.w	4042cc <_realloc_r+0x1ac>
  404164:	6843      	ldr	r3, [r0, #4]
  404166:	f023 0101 	bic.w	r1, r3, #1
  40416a:	4401      	add	r1, r0
  40416c:	6849      	ldr	r1, [r1, #4]
  40416e:	07c9      	lsls	r1, r1, #31
  404170:	d54c      	bpl.n	40420c <_realloc_r+0xec>
  404172:	f01e 0f01 	tst.w	lr, #1
  404176:	f000 809b 	beq.w	4042b0 <_realloc_r+0x190>
  40417a:	4631      	mov	r1, r6
  40417c:	4640      	mov	r0, r8
  40417e:	f7ff fc47 	bl	403a10 <_malloc_r>
  404182:	4606      	mov	r6, r0
  404184:	2800      	cmp	r0, #0
  404186:	d03a      	beq.n	4041fe <_realloc_r+0xde>
  404188:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40418c:	f023 0301 	bic.w	r3, r3, #1
  404190:	444b      	add	r3, r9
  404192:	f1a0 0208 	sub.w	r2, r0, #8
  404196:	429a      	cmp	r2, r3
  404198:	f000 8121 	beq.w	4043de <_realloc_r+0x2be>
  40419c:	1f22      	subs	r2, r4, #4
  40419e:	2a24      	cmp	r2, #36	; 0x24
  4041a0:	f200 8107 	bhi.w	4043b2 <_realloc_r+0x292>
  4041a4:	2a13      	cmp	r2, #19
  4041a6:	f200 80db 	bhi.w	404360 <_realloc_r+0x240>
  4041aa:	4603      	mov	r3, r0
  4041ac:	462a      	mov	r2, r5
  4041ae:	6811      	ldr	r1, [r2, #0]
  4041b0:	6019      	str	r1, [r3, #0]
  4041b2:	6851      	ldr	r1, [r2, #4]
  4041b4:	6059      	str	r1, [r3, #4]
  4041b6:	6892      	ldr	r2, [r2, #8]
  4041b8:	609a      	str	r2, [r3, #8]
  4041ba:	4629      	mov	r1, r5
  4041bc:	4640      	mov	r0, r8
  4041be:	f7ff f909 	bl	4033d4 <_free_r>
  4041c2:	e01c      	b.n	4041fe <_realloc_r+0xde>
  4041c4:	f027 0707 	bic.w	r7, r7, #7
  4041c8:	2f00      	cmp	r7, #0
  4041ca:	463a      	mov	r2, r7
  4041cc:	dabf      	bge.n	40414e <_realloc_r+0x2e>
  4041ce:	2600      	movs	r6, #0
  4041d0:	230c      	movs	r3, #12
  4041d2:	4630      	mov	r0, r6
  4041d4:	f8c8 3000 	str.w	r3, [r8]
  4041d8:	b003      	add	sp, #12
  4041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041de:	462e      	mov	r6, r5
  4041e0:	1be3      	subs	r3, r4, r7
  4041e2:	2b0f      	cmp	r3, #15
  4041e4:	d81e      	bhi.n	404224 <_realloc_r+0x104>
  4041e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4041ea:	f003 0301 	and.w	r3, r3, #1
  4041ee:	4323      	orrs	r3, r4
  4041f0:	444c      	add	r4, r9
  4041f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4041f6:	6863      	ldr	r3, [r4, #4]
  4041f8:	f043 0301 	orr.w	r3, r3, #1
  4041fc:	6063      	str	r3, [r4, #4]
  4041fe:	4640      	mov	r0, r8
  404200:	f7ff ff88 	bl	404114 <__malloc_unlock>
  404204:	4630      	mov	r0, r6
  404206:	b003      	add	sp, #12
  404208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40420c:	f023 0303 	bic.w	r3, r3, #3
  404210:	18e1      	adds	r1, r4, r3
  404212:	4291      	cmp	r1, r2
  404214:	db1f      	blt.n	404256 <_realloc_r+0x136>
  404216:	68c3      	ldr	r3, [r0, #12]
  404218:	6882      	ldr	r2, [r0, #8]
  40421a:	462e      	mov	r6, r5
  40421c:	60d3      	str	r3, [r2, #12]
  40421e:	460c      	mov	r4, r1
  404220:	609a      	str	r2, [r3, #8]
  404222:	e7dd      	b.n	4041e0 <_realloc_r+0xc0>
  404224:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404228:	eb09 0107 	add.w	r1, r9, r7
  40422c:	f002 0201 	and.w	r2, r2, #1
  404230:	444c      	add	r4, r9
  404232:	f043 0301 	orr.w	r3, r3, #1
  404236:	4317      	orrs	r7, r2
  404238:	f8c9 7004 	str.w	r7, [r9, #4]
  40423c:	604b      	str	r3, [r1, #4]
  40423e:	6863      	ldr	r3, [r4, #4]
  404240:	f043 0301 	orr.w	r3, r3, #1
  404244:	3108      	adds	r1, #8
  404246:	6063      	str	r3, [r4, #4]
  404248:	4640      	mov	r0, r8
  40424a:	f7ff f8c3 	bl	4033d4 <_free_r>
  40424e:	e7d6      	b.n	4041fe <_realloc_r+0xde>
  404250:	4611      	mov	r1, r2
  404252:	f7ff bbdd 	b.w	403a10 <_malloc_r>
  404256:	f01e 0f01 	tst.w	lr, #1
  40425a:	d18e      	bne.n	40417a <_realloc_r+0x5a>
  40425c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404260:	eba9 0a01 	sub.w	sl, r9, r1
  404264:	f8da 1004 	ldr.w	r1, [sl, #4]
  404268:	f021 0103 	bic.w	r1, r1, #3
  40426c:	440b      	add	r3, r1
  40426e:	4423      	add	r3, r4
  404270:	4293      	cmp	r3, r2
  404272:	db25      	blt.n	4042c0 <_realloc_r+0x1a0>
  404274:	68c2      	ldr	r2, [r0, #12]
  404276:	6881      	ldr	r1, [r0, #8]
  404278:	4656      	mov	r6, sl
  40427a:	60ca      	str	r2, [r1, #12]
  40427c:	6091      	str	r1, [r2, #8]
  40427e:	f8da 100c 	ldr.w	r1, [sl, #12]
  404282:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404286:	1f22      	subs	r2, r4, #4
  404288:	2a24      	cmp	r2, #36	; 0x24
  40428a:	60c1      	str	r1, [r0, #12]
  40428c:	6088      	str	r0, [r1, #8]
  40428e:	f200 8094 	bhi.w	4043ba <_realloc_r+0x29a>
  404292:	2a13      	cmp	r2, #19
  404294:	d96f      	bls.n	404376 <_realloc_r+0x256>
  404296:	6829      	ldr	r1, [r5, #0]
  404298:	f8ca 1008 	str.w	r1, [sl, #8]
  40429c:	6869      	ldr	r1, [r5, #4]
  40429e:	f8ca 100c 	str.w	r1, [sl, #12]
  4042a2:	2a1b      	cmp	r2, #27
  4042a4:	f200 80a2 	bhi.w	4043ec <_realloc_r+0x2cc>
  4042a8:	3508      	adds	r5, #8
  4042aa:	f10a 0210 	add.w	r2, sl, #16
  4042ae:	e063      	b.n	404378 <_realloc_r+0x258>
  4042b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4042b4:	eba9 0a03 	sub.w	sl, r9, r3
  4042b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4042bc:	f021 0103 	bic.w	r1, r1, #3
  4042c0:	1863      	adds	r3, r4, r1
  4042c2:	4293      	cmp	r3, r2
  4042c4:	f6ff af59 	blt.w	40417a <_realloc_r+0x5a>
  4042c8:	4656      	mov	r6, sl
  4042ca:	e7d8      	b.n	40427e <_realloc_r+0x15e>
  4042cc:	6841      	ldr	r1, [r0, #4]
  4042ce:	f021 0b03 	bic.w	fp, r1, #3
  4042d2:	44a3      	add	fp, r4
  4042d4:	f107 0010 	add.w	r0, r7, #16
  4042d8:	4583      	cmp	fp, r0
  4042da:	da56      	bge.n	40438a <_realloc_r+0x26a>
  4042dc:	f01e 0f01 	tst.w	lr, #1
  4042e0:	f47f af4b 	bne.w	40417a <_realloc_r+0x5a>
  4042e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4042e8:	eba9 0a01 	sub.w	sl, r9, r1
  4042ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4042f0:	f021 0103 	bic.w	r1, r1, #3
  4042f4:	448b      	add	fp, r1
  4042f6:	4558      	cmp	r0, fp
  4042f8:	dce2      	bgt.n	4042c0 <_realloc_r+0x1a0>
  4042fa:	4656      	mov	r6, sl
  4042fc:	f8da 100c 	ldr.w	r1, [sl, #12]
  404300:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404304:	1f22      	subs	r2, r4, #4
  404306:	2a24      	cmp	r2, #36	; 0x24
  404308:	60c1      	str	r1, [r0, #12]
  40430a:	6088      	str	r0, [r1, #8]
  40430c:	f200 808f 	bhi.w	40442e <_realloc_r+0x30e>
  404310:	2a13      	cmp	r2, #19
  404312:	f240 808a 	bls.w	40442a <_realloc_r+0x30a>
  404316:	6829      	ldr	r1, [r5, #0]
  404318:	f8ca 1008 	str.w	r1, [sl, #8]
  40431c:	6869      	ldr	r1, [r5, #4]
  40431e:	f8ca 100c 	str.w	r1, [sl, #12]
  404322:	2a1b      	cmp	r2, #27
  404324:	f200 808a 	bhi.w	40443c <_realloc_r+0x31c>
  404328:	3508      	adds	r5, #8
  40432a:	f10a 0210 	add.w	r2, sl, #16
  40432e:	6829      	ldr	r1, [r5, #0]
  404330:	6011      	str	r1, [r2, #0]
  404332:	6869      	ldr	r1, [r5, #4]
  404334:	6051      	str	r1, [r2, #4]
  404336:	68a9      	ldr	r1, [r5, #8]
  404338:	6091      	str	r1, [r2, #8]
  40433a:	eb0a 0107 	add.w	r1, sl, r7
  40433e:	ebab 0207 	sub.w	r2, fp, r7
  404342:	f042 0201 	orr.w	r2, r2, #1
  404346:	6099      	str	r1, [r3, #8]
  404348:	604a      	str	r2, [r1, #4]
  40434a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40434e:	f003 0301 	and.w	r3, r3, #1
  404352:	431f      	orrs	r7, r3
  404354:	4640      	mov	r0, r8
  404356:	f8ca 7004 	str.w	r7, [sl, #4]
  40435a:	f7ff fedb 	bl	404114 <__malloc_unlock>
  40435e:	e751      	b.n	404204 <_realloc_r+0xe4>
  404360:	682b      	ldr	r3, [r5, #0]
  404362:	6003      	str	r3, [r0, #0]
  404364:	686b      	ldr	r3, [r5, #4]
  404366:	6043      	str	r3, [r0, #4]
  404368:	2a1b      	cmp	r2, #27
  40436a:	d82d      	bhi.n	4043c8 <_realloc_r+0x2a8>
  40436c:	f100 0308 	add.w	r3, r0, #8
  404370:	f105 0208 	add.w	r2, r5, #8
  404374:	e71b      	b.n	4041ae <_realloc_r+0x8e>
  404376:	4632      	mov	r2, r6
  404378:	6829      	ldr	r1, [r5, #0]
  40437a:	6011      	str	r1, [r2, #0]
  40437c:	6869      	ldr	r1, [r5, #4]
  40437e:	6051      	str	r1, [r2, #4]
  404380:	68a9      	ldr	r1, [r5, #8]
  404382:	6091      	str	r1, [r2, #8]
  404384:	461c      	mov	r4, r3
  404386:	46d1      	mov	r9, sl
  404388:	e72a      	b.n	4041e0 <_realloc_r+0xc0>
  40438a:	eb09 0107 	add.w	r1, r9, r7
  40438e:	ebab 0b07 	sub.w	fp, fp, r7
  404392:	f04b 0201 	orr.w	r2, fp, #1
  404396:	6099      	str	r1, [r3, #8]
  404398:	604a      	str	r2, [r1, #4]
  40439a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40439e:	f003 0301 	and.w	r3, r3, #1
  4043a2:	431f      	orrs	r7, r3
  4043a4:	4640      	mov	r0, r8
  4043a6:	f845 7c04 	str.w	r7, [r5, #-4]
  4043aa:	f7ff feb3 	bl	404114 <__malloc_unlock>
  4043ae:	462e      	mov	r6, r5
  4043b0:	e728      	b.n	404204 <_realloc_r+0xe4>
  4043b2:	4629      	mov	r1, r5
  4043b4:	f7ff fe44 	bl	404040 <memmove>
  4043b8:	e6ff      	b.n	4041ba <_realloc_r+0x9a>
  4043ba:	4629      	mov	r1, r5
  4043bc:	4630      	mov	r0, r6
  4043be:	461c      	mov	r4, r3
  4043c0:	46d1      	mov	r9, sl
  4043c2:	f7ff fe3d 	bl	404040 <memmove>
  4043c6:	e70b      	b.n	4041e0 <_realloc_r+0xc0>
  4043c8:	68ab      	ldr	r3, [r5, #8]
  4043ca:	6083      	str	r3, [r0, #8]
  4043cc:	68eb      	ldr	r3, [r5, #12]
  4043ce:	60c3      	str	r3, [r0, #12]
  4043d0:	2a24      	cmp	r2, #36	; 0x24
  4043d2:	d017      	beq.n	404404 <_realloc_r+0x2e4>
  4043d4:	f100 0310 	add.w	r3, r0, #16
  4043d8:	f105 0210 	add.w	r2, r5, #16
  4043dc:	e6e7      	b.n	4041ae <_realloc_r+0x8e>
  4043de:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4043e2:	f023 0303 	bic.w	r3, r3, #3
  4043e6:	441c      	add	r4, r3
  4043e8:	462e      	mov	r6, r5
  4043ea:	e6f9      	b.n	4041e0 <_realloc_r+0xc0>
  4043ec:	68a9      	ldr	r1, [r5, #8]
  4043ee:	f8ca 1010 	str.w	r1, [sl, #16]
  4043f2:	68e9      	ldr	r1, [r5, #12]
  4043f4:	f8ca 1014 	str.w	r1, [sl, #20]
  4043f8:	2a24      	cmp	r2, #36	; 0x24
  4043fa:	d00c      	beq.n	404416 <_realloc_r+0x2f6>
  4043fc:	3510      	adds	r5, #16
  4043fe:	f10a 0218 	add.w	r2, sl, #24
  404402:	e7b9      	b.n	404378 <_realloc_r+0x258>
  404404:	692b      	ldr	r3, [r5, #16]
  404406:	6103      	str	r3, [r0, #16]
  404408:	696b      	ldr	r3, [r5, #20]
  40440a:	6143      	str	r3, [r0, #20]
  40440c:	f105 0218 	add.w	r2, r5, #24
  404410:	f100 0318 	add.w	r3, r0, #24
  404414:	e6cb      	b.n	4041ae <_realloc_r+0x8e>
  404416:	692a      	ldr	r2, [r5, #16]
  404418:	f8ca 2018 	str.w	r2, [sl, #24]
  40441c:	696a      	ldr	r2, [r5, #20]
  40441e:	f8ca 201c 	str.w	r2, [sl, #28]
  404422:	3518      	adds	r5, #24
  404424:	f10a 0220 	add.w	r2, sl, #32
  404428:	e7a6      	b.n	404378 <_realloc_r+0x258>
  40442a:	4632      	mov	r2, r6
  40442c:	e77f      	b.n	40432e <_realloc_r+0x20e>
  40442e:	4629      	mov	r1, r5
  404430:	4630      	mov	r0, r6
  404432:	9301      	str	r3, [sp, #4]
  404434:	f7ff fe04 	bl	404040 <memmove>
  404438:	9b01      	ldr	r3, [sp, #4]
  40443a:	e77e      	b.n	40433a <_realloc_r+0x21a>
  40443c:	68a9      	ldr	r1, [r5, #8]
  40443e:	f8ca 1010 	str.w	r1, [sl, #16]
  404442:	68e9      	ldr	r1, [r5, #12]
  404444:	f8ca 1014 	str.w	r1, [sl, #20]
  404448:	2a24      	cmp	r2, #36	; 0x24
  40444a:	d003      	beq.n	404454 <_realloc_r+0x334>
  40444c:	3510      	adds	r5, #16
  40444e:	f10a 0218 	add.w	r2, sl, #24
  404452:	e76c      	b.n	40432e <_realloc_r+0x20e>
  404454:	692a      	ldr	r2, [r5, #16]
  404456:	f8ca 2018 	str.w	r2, [sl, #24]
  40445a:	696a      	ldr	r2, [r5, #20]
  40445c:	f8ca 201c 	str.w	r2, [sl, #28]
  404460:	3518      	adds	r5, #24
  404462:	f10a 0220 	add.w	r2, sl, #32
  404466:	e762      	b.n	40432e <_realloc_r+0x20e>
  404468:	204005b0 	.word	0x204005b0

0040446c <_sbrk_r>:
  40446c:	b538      	push	{r3, r4, r5, lr}
  40446e:	4c07      	ldr	r4, [pc, #28]	; (40448c <_sbrk_r+0x20>)
  404470:	2300      	movs	r3, #0
  404472:	4605      	mov	r5, r0
  404474:	4608      	mov	r0, r1
  404476:	6023      	str	r3, [r4, #0]
  404478:	f7fc fba4 	bl	400bc4 <_sbrk>
  40447c:	1c43      	adds	r3, r0, #1
  40447e:	d000      	beq.n	404482 <_sbrk_r+0x16>
  404480:	bd38      	pop	{r3, r4, r5, pc}
  404482:	6823      	ldr	r3, [r4, #0]
  404484:	2b00      	cmp	r3, #0
  404486:	d0fb      	beq.n	404480 <_sbrk_r+0x14>
  404488:	602b      	str	r3, [r5, #0]
  40448a:	bd38      	pop	{r3, r4, r5, pc}
  40448c:	20400b00 	.word	0x20400b00

00404490 <__sread>:
  404490:	b510      	push	{r4, lr}
  404492:	460c      	mov	r4, r1
  404494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404498:	f000 f9f6 	bl	404888 <_read_r>
  40449c:	2800      	cmp	r0, #0
  40449e:	db03      	blt.n	4044a8 <__sread+0x18>
  4044a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4044a2:	4403      	add	r3, r0
  4044a4:	6523      	str	r3, [r4, #80]	; 0x50
  4044a6:	bd10      	pop	{r4, pc}
  4044a8:	89a3      	ldrh	r3, [r4, #12]
  4044aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4044ae:	81a3      	strh	r3, [r4, #12]
  4044b0:	bd10      	pop	{r4, pc}
  4044b2:	bf00      	nop

004044b4 <__swrite>:
  4044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044b8:	4616      	mov	r6, r2
  4044ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4044be:	461f      	mov	r7, r3
  4044c0:	05d3      	lsls	r3, r2, #23
  4044c2:	460c      	mov	r4, r1
  4044c4:	4605      	mov	r5, r0
  4044c6:	d507      	bpl.n	4044d8 <__swrite+0x24>
  4044c8:	2200      	movs	r2, #0
  4044ca:	2302      	movs	r3, #2
  4044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4044d0:	f000 f9c4 	bl	40485c <_lseek_r>
  4044d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4044d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4044dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4044e0:	81a2      	strh	r2, [r4, #12]
  4044e2:	463b      	mov	r3, r7
  4044e4:	4632      	mov	r2, r6
  4044e6:	4628      	mov	r0, r5
  4044e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4044ec:	f000 b8a4 	b.w	404638 <_write_r>

004044f0 <__sseek>:
  4044f0:	b510      	push	{r4, lr}
  4044f2:	460c      	mov	r4, r1
  4044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4044f8:	f000 f9b0 	bl	40485c <_lseek_r>
  4044fc:	89a3      	ldrh	r3, [r4, #12]
  4044fe:	1c42      	adds	r2, r0, #1
  404500:	bf0e      	itee	eq
  404502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40450a:	6520      	strne	r0, [r4, #80]	; 0x50
  40450c:	81a3      	strh	r3, [r4, #12]
  40450e:	bd10      	pop	{r4, pc}

00404510 <__sclose>:
  404510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404514:	f000 b908 	b.w	404728 <_close_r>

00404518 <__swbuf_r>:
  404518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40451a:	460d      	mov	r5, r1
  40451c:	4614      	mov	r4, r2
  40451e:	4606      	mov	r6, r0
  404520:	b110      	cbz	r0, 404528 <__swbuf_r+0x10>
  404522:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404524:	2b00      	cmp	r3, #0
  404526:	d04b      	beq.n	4045c0 <__swbuf_r+0xa8>
  404528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40452c:	69a3      	ldr	r3, [r4, #24]
  40452e:	60a3      	str	r3, [r4, #8]
  404530:	b291      	uxth	r1, r2
  404532:	0708      	lsls	r0, r1, #28
  404534:	d539      	bpl.n	4045aa <__swbuf_r+0x92>
  404536:	6923      	ldr	r3, [r4, #16]
  404538:	2b00      	cmp	r3, #0
  40453a:	d036      	beq.n	4045aa <__swbuf_r+0x92>
  40453c:	b2ed      	uxtb	r5, r5
  40453e:	0489      	lsls	r1, r1, #18
  404540:	462f      	mov	r7, r5
  404542:	d515      	bpl.n	404570 <__swbuf_r+0x58>
  404544:	6822      	ldr	r2, [r4, #0]
  404546:	6961      	ldr	r1, [r4, #20]
  404548:	1ad3      	subs	r3, r2, r3
  40454a:	428b      	cmp	r3, r1
  40454c:	da1c      	bge.n	404588 <__swbuf_r+0x70>
  40454e:	3301      	adds	r3, #1
  404550:	68a1      	ldr	r1, [r4, #8]
  404552:	1c50      	adds	r0, r2, #1
  404554:	3901      	subs	r1, #1
  404556:	60a1      	str	r1, [r4, #8]
  404558:	6020      	str	r0, [r4, #0]
  40455a:	7015      	strb	r5, [r2, #0]
  40455c:	6962      	ldr	r2, [r4, #20]
  40455e:	429a      	cmp	r2, r3
  404560:	d01a      	beq.n	404598 <__swbuf_r+0x80>
  404562:	89a3      	ldrh	r3, [r4, #12]
  404564:	07db      	lsls	r3, r3, #31
  404566:	d501      	bpl.n	40456c <__swbuf_r+0x54>
  404568:	2d0a      	cmp	r5, #10
  40456a:	d015      	beq.n	404598 <__swbuf_r+0x80>
  40456c:	4638      	mov	r0, r7
  40456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404570:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404576:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40457a:	81a2      	strh	r2, [r4, #12]
  40457c:	6822      	ldr	r2, [r4, #0]
  40457e:	6661      	str	r1, [r4, #100]	; 0x64
  404580:	6961      	ldr	r1, [r4, #20]
  404582:	1ad3      	subs	r3, r2, r3
  404584:	428b      	cmp	r3, r1
  404586:	dbe2      	blt.n	40454e <__swbuf_r+0x36>
  404588:	4621      	mov	r1, r4
  40458a:	4630      	mov	r0, r6
  40458c:	f7fe fda4 	bl	4030d8 <_fflush_r>
  404590:	b940      	cbnz	r0, 4045a4 <__swbuf_r+0x8c>
  404592:	6822      	ldr	r2, [r4, #0]
  404594:	2301      	movs	r3, #1
  404596:	e7db      	b.n	404550 <__swbuf_r+0x38>
  404598:	4621      	mov	r1, r4
  40459a:	4630      	mov	r0, r6
  40459c:	f7fe fd9c 	bl	4030d8 <_fflush_r>
  4045a0:	2800      	cmp	r0, #0
  4045a2:	d0e3      	beq.n	40456c <__swbuf_r+0x54>
  4045a4:	f04f 37ff 	mov.w	r7, #4294967295
  4045a8:	e7e0      	b.n	40456c <__swbuf_r+0x54>
  4045aa:	4621      	mov	r1, r4
  4045ac:	4630      	mov	r0, r6
  4045ae:	f7fe fc7f 	bl	402eb0 <__swsetup_r>
  4045b2:	2800      	cmp	r0, #0
  4045b4:	d1f6      	bne.n	4045a4 <__swbuf_r+0x8c>
  4045b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4045ba:	6923      	ldr	r3, [r4, #16]
  4045bc:	b291      	uxth	r1, r2
  4045be:	e7bd      	b.n	40453c <__swbuf_r+0x24>
  4045c0:	f7fe fde2 	bl	403188 <__sinit>
  4045c4:	e7b0      	b.n	404528 <__swbuf_r+0x10>
  4045c6:	bf00      	nop

004045c8 <_wcrtomb_r>:
  4045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4045ca:	4606      	mov	r6, r0
  4045cc:	b085      	sub	sp, #20
  4045ce:	461f      	mov	r7, r3
  4045d0:	b189      	cbz	r1, 4045f6 <_wcrtomb_r+0x2e>
  4045d2:	4c10      	ldr	r4, [pc, #64]	; (404614 <_wcrtomb_r+0x4c>)
  4045d4:	4d10      	ldr	r5, [pc, #64]	; (404618 <_wcrtomb_r+0x50>)
  4045d6:	6824      	ldr	r4, [r4, #0]
  4045d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4045da:	2c00      	cmp	r4, #0
  4045dc:	bf08      	it	eq
  4045de:	462c      	moveq	r4, r5
  4045e0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4045e4:	47a0      	blx	r4
  4045e6:	1c43      	adds	r3, r0, #1
  4045e8:	d103      	bne.n	4045f2 <_wcrtomb_r+0x2a>
  4045ea:	2200      	movs	r2, #0
  4045ec:	238a      	movs	r3, #138	; 0x8a
  4045ee:	603a      	str	r2, [r7, #0]
  4045f0:	6033      	str	r3, [r6, #0]
  4045f2:	b005      	add	sp, #20
  4045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045f6:	460c      	mov	r4, r1
  4045f8:	4906      	ldr	r1, [pc, #24]	; (404614 <_wcrtomb_r+0x4c>)
  4045fa:	4a07      	ldr	r2, [pc, #28]	; (404618 <_wcrtomb_r+0x50>)
  4045fc:	6809      	ldr	r1, [r1, #0]
  4045fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404600:	2900      	cmp	r1, #0
  404602:	bf08      	it	eq
  404604:	4611      	moveq	r1, r2
  404606:	4622      	mov	r2, r4
  404608:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40460c:	a901      	add	r1, sp, #4
  40460e:	47a0      	blx	r4
  404610:	e7e9      	b.n	4045e6 <_wcrtomb_r+0x1e>
  404612:	bf00      	nop
  404614:	20400014 	.word	0x20400014
  404618:	20400444 	.word	0x20400444

0040461c <__ascii_wctomb>:
  40461c:	b121      	cbz	r1, 404628 <__ascii_wctomb+0xc>
  40461e:	2aff      	cmp	r2, #255	; 0xff
  404620:	d804      	bhi.n	40462c <__ascii_wctomb+0x10>
  404622:	700a      	strb	r2, [r1, #0]
  404624:	2001      	movs	r0, #1
  404626:	4770      	bx	lr
  404628:	4608      	mov	r0, r1
  40462a:	4770      	bx	lr
  40462c:	238a      	movs	r3, #138	; 0x8a
  40462e:	6003      	str	r3, [r0, #0]
  404630:	f04f 30ff 	mov.w	r0, #4294967295
  404634:	4770      	bx	lr
  404636:	bf00      	nop

00404638 <_write_r>:
  404638:	b570      	push	{r4, r5, r6, lr}
  40463a:	460d      	mov	r5, r1
  40463c:	4c08      	ldr	r4, [pc, #32]	; (404660 <_write_r+0x28>)
  40463e:	4611      	mov	r1, r2
  404640:	4606      	mov	r6, r0
  404642:	461a      	mov	r2, r3
  404644:	4628      	mov	r0, r5
  404646:	2300      	movs	r3, #0
  404648:	6023      	str	r3, [r4, #0]
  40464a:	f7fb fe6b 	bl	400324 <_write>
  40464e:	1c43      	adds	r3, r0, #1
  404650:	d000      	beq.n	404654 <_write_r+0x1c>
  404652:	bd70      	pop	{r4, r5, r6, pc}
  404654:	6823      	ldr	r3, [r4, #0]
  404656:	2b00      	cmp	r3, #0
  404658:	d0fb      	beq.n	404652 <_write_r+0x1a>
  40465a:	6033      	str	r3, [r6, #0]
  40465c:	bd70      	pop	{r4, r5, r6, pc}
  40465e:	bf00      	nop
  404660:	20400b00 	.word	0x20400b00

00404664 <__register_exitproc>:
  404664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404668:	4d2c      	ldr	r5, [pc, #176]	; (40471c <__register_exitproc+0xb8>)
  40466a:	4606      	mov	r6, r0
  40466c:	6828      	ldr	r0, [r5, #0]
  40466e:	4698      	mov	r8, r3
  404670:	460f      	mov	r7, r1
  404672:	4691      	mov	r9, r2
  404674:	f7ff f948 	bl	403908 <__retarget_lock_acquire_recursive>
  404678:	4b29      	ldr	r3, [pc, #164]	; (404720 <__register_exitproc+0xbc>)
  40467a:	681c      	ldr	r4, [r3, #0]
  40467c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404680:	2b00      	cmp	r3, #0
  404682:	d03e      	beq.n	404702 <__register_exitproc+0x9e>
  404684:	685a      	ldr	r2, [r3, #4]
  404686:	2a1f      	cmp	r2, #31
  404688:	dc1c      	bgt.n	4046c4 <__register_exitproc+0x60>
  40468a:	f102 0e01 	add.w	lr, r2, #1
  40468e:	b176      	cbz	r6, 4046ae <__register_exitproc+0x4a>
  404690:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404694:	2401      	movs	r4, #1
  404696:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40469a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40469e:	4094      	lsls	r4, r2
  4046a0:	4320      	orrs	r0, r4
  4046a2:	2e02      	cmp	r6, #2
  4046a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4046a8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4046ac:	d023      	beq.n	4046f6 <__register_exitproc+0x92>
  4046ae:	3202      	adds	r2, #2
  4046b0:	f8c3 e004 	str.w	lr, [r3, #4]
  4046b4:	6828      	ldr	r0, [r5, #0]
  4046b6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4046ba:	f7ff f927 	bl	40390c <__retarget_lock_release_recursive>
  4046be:	2000      	movs	r0, #0
  4046c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046c4:	4b17      	ldr	r3, [pc, #92]	; (404724 <__register_exitproc+0xc0>)
  4046c6:	b30b      	cbz	r3, 40470c <__register_exitproc+0xa8>
  4046c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4046cc:	f7ff f998 	bl	403a00 <malloc>
  4046d0:	4603      	mov	r3, r0
  4046d2:	b1d8      	cbz	r0, 40470c <__register_exitproc+0xa8>
  4046d4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4046d8:	6002      	str	r2, [r0, #0]
  4046da:	2100      	movs	r1, #0
  4046dc:	6041      	str	r1, [r0, #4]
  4046de:	460a      	mov	r2, r1
  4046e0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4046e4:	f04f 0e01 	mov.w	lr, #1
  4046e8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4046ec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4046f0:	2e00      	cmp	r6, #0
  4046f2:	d0dc      	beq.n	4046ae <__register_exitproc+0x4a>
  4046f4:	e7cc      	b.n	404690 <__register_exitproc+0x2c>
  4046f6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4046fa:	430c      	orrs	r4, r1
  4046fc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404700:	e7d5      	b.n	4046ae <__register_exitproc+0x4a>
  404702:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404706:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40470a:	e7bb      	b.n	404684 <__register_exitproc+0x20>
  40470c:	6828      	ldr	r0, [r5, #0]
  40470e:	f7ff f8fd 	bl	40390c <__retarget_lock_release_recursive>
  404712:	f04f 30ff 	mov.w	r0, #4294967295
  404716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40471a:	bf00      	nop
  40471c:	20400440 	.word	0x20400440
  404720:	00404b7c 	.word	0x00404b7c
  404724:	00403a01 	.word	0x00403a01

00404728 <_close_r>:
  404728:	b538      	push	{r3, r4, r5, lr}
  40472a:	4c07      	ldr	r4, [pc, #28]	; (404748 <_close_r+0x20>)
  40472c:	2300      	movs	r3, #0
  40472e:	4605      	mov	r5, r0
  404730:	4608      	mov	r0, r1
  404732:	6023      	str	r3, [r4, #0]
  404734:	f7fc fa62 	bl	400bfc <_close>
  404738:	1c43      	adds	r3, r0, #1
  40473a:	d000      	beq.n	40473e <_close_r+0x16>
  40473c:	bd38      	pop	{r3, r4, r5, pc}
  40473e:	6823      	ldr	r3, [r4, #0]
  404740:	2b00      	cmp	r3, #0
  404742:	d0fb      	beq.n	40473c <_close_r+0x14>
  404744:	602b      	str	r3, [r5, #0]
  404746:	bd38      	pop	{r3, r4, r5, pc}
  404748:	20400b00 	.word	0x20400b00

0040474c <_fclose_r>:
  40474c:	b570      	push	{r4, r5, r6, lr}
  40474e:	b159      	cbz	r1, 404768 <_fclose_r+0x1c>
  404750:	4605      	mov	r5, r0
  404752:	460c      	mov	r4, r1
  404754:	b110      	cbz	r0, 40475c <_fclose_r+0x10>
  404756:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404758:	2b00      	cmp	r3, #0
  40475a:	d03c      	beq.n	4047d6 <_fclose_r+0x8a>
  40475c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40475e:	07d8      	lsls	r0, r3, #31
  404760:	d505      	bpl.n	40476e <_fclose_r+0x22>
  404762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404766:	b92b      	cbnz	r3, 404774 <_fclose_r+0x28>
  404768:	2600      	movs	r6, #0
  40476a:	4630      	mov	r0, r6
  40476c:	bd70      	pop	{r4, r5, r6, pc}
  40476e:	89a3      	ldrh	r3, [r4, #12]
  404770:	0599      	lsls	r1, r3, #22
  404772:	d53c      	bpl.n	4047ee <_fclose_r+0xa2>
  404774:	4621      	mov	r1, r4
  404776:	4628      	mov	r0, r5
  404778:	f7fe fc0e 	bl	402f98 <__sflush_r>
  40477c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40477e:	4606      	mov	r6, r0
  404780:	b133      	cbz	r3, 404790 <_fclose_r+0x44>
  404782:	69e1      	ldr	r1, [r4, #28]
  404784:	4628      	mov	r0, r5
  404786:	4798      	blx	r3
  404788:	2800      	cmp	r0, #0
  40478a:	bfb8      	it	lt
  40478c:	f04f 36ff 	movlt.w	r6, #4294967295
  404790:	89a3      	ldrh	r3, [r4, #12]
  404792:	061a      	lsls	r2, r3, #24
  404794:	d422      	bmi.n	4047dc <_fclose_r+0x90>
  404796:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404798:	b141      	cbz	r1, 4047ac <_fclose_r+0x60>
  40479a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40479e:	4299      	cmp	r1, r3
  4047a0:	d002      	beq.n	4047a8 <_fclose_r+0x5c>
  4047a2:	4628      	mov	r0, r5
  4047a4:	f7fe fe16 	bl	4033d4 <_free_r>
  4047a8:	2300      	movs	r3, #0
  4047aa:	6323      	str	r3, [r4, #48]	; 0x30
  4047ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4047ae:	b121      	cbz	r1, 4047ba <_fclose_r+0x6e>
  4047b0:	4628      	mov	r0, r5
  4047b2:	f7fe fe0f 	bl	4033d4 <_free_r>
  4047b6:	2300      	movs	r3, #0
  4047b8:	6463      	str	r3, [r4, #68]	; 0x44
  4047ba:	f7fe fd11 	bl	4031e0 <__sfp_lock_acquire>
  4047be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4047c0:	2200      	movs	r2, #0
  4047c2:	07db      	lsls	r3, r3, #31
  4047c4:	81a2      	strh	r2, [r4, #12]
  4047c6:	d50e      	bpl.n	4047e6 <_fclose_r+0x9a>
  4047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047ca:	f7ff f89b 	bl	403904 <__retarget_lock_close_recursive>
  4047ce:	f7fe fd0d 	bl	4031ec <__sfp_lock_release>
  4047d2:	4630      	mov	r0, r6
  4047d4:	bd70      	pop	{r4, r5, r6, pc}
  4047d6:	f7fe fcd7 	bl	403188 <__sinit>
  4047da:	e7bf      	b.n	40475c <_fclose_r+0x10>
  4047dc:	6921      	ldr	r1, [r4, #16]
  4047de:	4628      	mov	r0, r5
  4047e0:	f7fe fdf8 	bl	4033d4 <_free_r>
  4047e4:	e7d7      	b.n	404796 <_fclose_r+0x4a>
  4047e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047e8:	f7ff f890 	bl	40390c <__retarget_lock_release_recursive>
  4047ec:	e7ec      	b.n	4047c8 <_fclose_r+0x7c>
  4047ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047f0:	f7ff f88a 	bl	403908 <__retarget_lock_acquire_recursive>
  4047f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047f8:	2b00      	cmp	r3, #0
  4047fa:	d1bb      	bne.n	404774 <_fclose_r+0x28>
  4047fc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4047fe:	f016 0601 	ands.w	r6, r6, #1
  404802:	d1b1      	bne.n	404768 <_fclose_r+0x1c>
  404804:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404806:	f7ff f881 	bl	40390c <__retarget_lock_release_recursive>
  40480a:	4630      	mov	r0, r6
  40480c:	bd70      	pop	{r4, r5, r6, pc}
  40480e:	bf00      	nop

00404810 <_fstat_r>:
  404810:	b538      	push	{r3, r4, r5, lr}
  404812:	460b      	mov	r3, r1
  404814:	4c07      	ldr	r4, [pc, #28]	; (404834 <_fstat_r+0x24>)
  404816:	4605      	mov	r5, r0
  404818:	4611      	mov	r1, r2
  40481a:	4618      	mov	r0, r3
  40481c:	2300      	movs	r3, #0
  40481e:	6023      	str	r3, [r4, #0]
  404820:	f7fc f9ef 	bl	400c02 <_fstat>
  404824:	1c43      	adds	r3, r0, #1
  404826:	d000      	beq.n	40482a <_fstat_r+0x1a>
  404828:	bd38      	pop	{r3, r4, r5, pc}
  40482a:	6823      	ldr	r3, [r4, #0]
  40482c:	2b00      	cmp	r3, #0
  40482e:	d0fb      	beq.n	404828 <_fstat_r+0x18>
  404830:	602b      	str	r3, [r5, #0]
  404832:	bd38      	pop	{r3, r4, r5, pc}
  404834:	20400b00 	.word	0x20400b00

00404838 <_isatty_r>:
  404838:	b538      	push	{r3, r4, r5, lr}
  40483a:	4c07      	ldr	r4, [pc, #28]	; (404858 <_isatty_r+0x20>)
  40483c:	2300      	movs	r3, #0
  40483e:	4605      	mov	r5, r0
  404840:	4608      	mov	r0, r1
  404842:	6023      	str	r3, [r4, #0]
  404844:	f7fc f9e2 	bl	400c0c <_isatty>
  404848:	1c43      	adds	r3, r0, #1
  40484a:	d000      	beq.n	40484e <_isatty_r+0x16>
  40484c:	bd38      	pop	{r3, r4, r5, pc}
  40484e:	6823      	ldr	r3, [r4, #0]
  404850:	2b00      	cmp	r3, #0
  404852:	d0fb      	beq.n	40484c <_isatty_r+0x14>
  404854:	602b      	str	r3, [r5, #0]
  404856:	bd38      	pop	{r3, r4, r5, pc}
  404858:	20400b00 	.word	0x20400b00

0040485c <_lseek_r>:
  40485c:	b570      	push	{r4, r5, r6, lr}
  40485e:	460d      	mov	r5, r1
  404860:	4c08      	ldr	r4, [pc, #32]	; (404884 <_lseek_r+0x28>)
  404862:	4611      	mov	r1, r2
  404864:	4606      	mov	r6, r0
  404866:	461a      	mov	r2, r3
  404868:	4628      	mov	r0, r5
  40486a:	2300      	movs	r3, #0
  40486c:	6023      	str	r3, [r4, #0]
  40486e:	f7fc f9cf 	bl	400c10 <_lseek>
  404872:	1c43      	adds	r3, r0, #1
  404874:	d000      	beq.n	404878 <_lseek_r+0x1c>
  404876:	bd70      	pop	{r4, r5, r6, pc}
  404878:	6823      	ldr	r3, [r4, #0]
  40487a:	2b00      	cmp	r3, #0
  40487c:	d0fb      	beq.n	404876 <_lseek_r+0x1a>
  40487e:	6033      	str	r3, [r6, #0]
  404880:	bd70      	pop	{r4, r5, r6, pc}
  404882:	bf00      	nop
  404884:	20400b00 	.word	0x20400b00

00404888 <_read_r>:
  404888:	b570      	push	{r4, r5, r6, lr}
  40488a:	460d      	mov	r5, r1
  40488c:	4c08      	ldr	r4, [pc, #32]	; (4048b0 <_read_r+0x28>)
  40488e:	4611      	mov	r1, r2
  404890:	4606      	mov	r6, r0
  404892:	461a      	mov	r2, r3
  404894:	4628      	mov	r0, r5
  404896:	2300      	movs	r3, #0
  404898:	6023      	str	r3, [r4, #0]
  40489a:	f7fb fc9b 	bl	4001d4 <_read>
  40489e:	1c43      	adds	r3, r0, #1
  4048a0:	d000      	beq.n	4048a4 <_read_r+0x1c>
  4048a2:	bd70      	pop	{r4, r5, r6, pc}
  4048a4:	6823      	ldr	r3, [r4, #0]
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	d0fb      	beq.n	4048a2 <_read_r+0x1a>
  4048aa:	6033      	str	r3, [r6, #0]
  4048ac:	bd70      	pop	{r4, r5, r6, pc}
  4048ae:	bf00      	nop
  4048b0:	20400b00 	.word	0x20400b00
  4048b4:	00007350 	.word	0x00007350
  4048b8:	70532d2d 	.word	0x70532d2d
  4048bc:	526e2069 	.word	0x526e2069
  4048c0:	4c343246 	.word	0x4c343246
  4048c4:	54203130 	.word	0x54203130
  4048c8:	20747365 	.word	0x20747365
  4048cc:	0a0d2d2d 	.word	0x0a0d2d2d
  4048d0:	53202d2d 	.word	0x53202d2d
  4048d4:	37454d41 	.word	0x37454d41
  4048d8:	50582d30 	.word	0x50582d30
  4048dc:	2d20444c 	.word	0x2d20444c
  4048e0:	2d0a0d2d 	.word	0x2d0a0d2d
  4048e4:	6f43202d 	.word	0x6f43202d
  4048e8:	6c69706d 	.word	0x6c69706d
  4048ec:	203a6465 	.word	0x203a6465
  4048f0:	20677541 	.word	0x20677541
  4048f4:	32203420 	.word	0x32203420
  4048f8:	20303230 	.word	0x20303230
  4048fc:	333a3332 	.word	0x333a3332
  404900:	39333a32 	.word	0x39333a32
  404904:	0d2d2d20 	.word	0x0d2d2d20
  404908:	00000000 	.word	0x00000000
  40490c:	74746553 	.word	0x74746553
  404910:	20676e69 	.word	0x20676e69
  404914:	20495053 	.word	0x20495053
  404918:	636f6c63 	.word	0x636f6c63
  40491c:	2523206b 	.word	0x2523206b
  404920:	2e20756c 	.word	0x2e20756c
  404924:	0a202e2e 	.word	0x0a202e2e
  404928:	0000000d 	.word	0x0000000d
  40492c:	202d492d 	.word	0x202d492d
  404930:	74696e49 	.word	0x74696e49
  404934:	696c6169 	.word	0x696c6169
  404938:	5320657a 	.word	0x5320657a
  40493c:	61204950 	.word	0x61204950
  404940:	616d2073 	.word	0x616d2073
  404944:	72657473 	.word	0x72657473
  404948:	0000000d 	.word	0x0000000d
  40494c:	6d6d6f63 	.word	0x6d6d6f63
  404950:	6f646e61 	.word	0x6f646e61
  404954:	20642520 	.word	0x20642520
  404958:	646e6573 	.word	0x646e6573
  40495c:	206f7420 	.word	0x206f7420
  404960:	646c6c25 	.word	0x646c6c25
  404964:	00000a0d 	.word	0x00000a0d
  404968:	6e617274 	.word	0x6e617274
  40496c:	73696d73 	.word	0x73696d73
  404970:	6e6f6973 	.word	0x6e6f6973
  404974:	69616620 	.word	0x69616620
  404978:	2064656c 	.word	0x2064656c
  40497c:	00000d0a 	.word	0x00000d0a
  404980:	6e617274 	.word	0x6e617274
  404984:	73696d73 	.word	0x73696d73
  404988:	6e6f6973 	.word	0x6e6f6973
  40498c:	63757320 	.word	0x63757320
  404990:	00736563 	.word	0x00736563

00404994 <pipe_enable_s>:
  404994:	03020100 00000504                       ........

0040499c <pipe_s>:
  40499c:	0d0c0b0a 00000f0e                       ........

004049a4 <pipe_size_s>:
  4049a4:	14131211 00001615 20495053 65657053     ........SPI Spee
  4049b4:	3d200964 646c2520 7a484d20 00000a0d     d. = %ld MHz....
  4049c4:	415f5852 5f524444 312d3050 00000000     RX_ADDR_P0-1....
  4049d4:	415f5852 5f524444 352d3250 00000000     RX_ADDR_P2-5....
  4049e4:	415f5854 09524444 00000000 505f5852     TX_ADDR.....RX_P
  4049f4:	30505f57 0000352d 55544553 57415f50     W_P0-5..SETUP_AW
  404a04:	00000000 415f4e45 00000941 525f4e45     ....EN_AA...EN_R
  404a14:	44444158 00000052 435f4652 00000948     XADDR...RF_CH...
  404a24:	535f4652 50555445 00000000 464e4f43     RF_SETUP....CONF
  404a34:	00094749 504e5944 45462f44 52555441     IG..DYNPD/FEATUR
  404a44:	00000045 61746144 74615220 3d200965     E...Data Rate. =
  404a54:	0d732520 0000000a 65646f4d 2009096c      %s.....Model.. 
  404a64:	7325203d 00000a0d 20435243 676e654c     = %s....CRC Leng
  404a74:	20096874 7325203d 00000a0d 50204150     th. = %s....PA P
  404a84:	7265776f 203d2009 0a0d7325 00000000     ower. = %s......
  404a94:	00097325 00783020 78323025 00000000     %s.. 0x.%02x....
  404aa4:	25783020 00783230 54415453 09095355      0x%02x.STATUS..
  404ab4:	30203d20 32302578 58522078 3d52445f      = 0x%02x RX_DR=
  404ac4:	54207825 53445f58 2078253d 5f58414d     %x TX_DS=%x MAX_
  404ad4:	253d5452 58522078 4e5f505f 78253d4f     RT=%x RX_P_NO=%x
  404ae4:	5f585420 4c4c5546 0d78253d 0000000a      TX_FULL=%x.....

00404af4 <rf24_crclength_e_str_0>:
  404af4:	61736944 64656c62 00000000              Disabled....

00404b00 <rf24_crclength_e_str_1>:
  404b00:	69622038 00007374                       8 bits..

00404b08 <rf24_crclength_e_str_2>:
  404b08:	62203631 00737469                       16 bits.

00404b10 <rf24_crclength_e_str_P>:
  404b10:	00404af4 00404b00 00404b08              .J@..K@..K@.

00404b1c <rf24_datarate_e_str_0>:
  404b1c:	50424d31 00000053                       1MBPS...

00404b24 <rf24_datarate_e_str_1>:
  404b24:	50424d32 00000053                       2MBPS...

00404b2c <rf24_datarate_e_str_2>:
  404b2c:	4b303532 00535042                       250KBPS.

00404b34 <rf24_datarate_e_str_P>:
  404b34:	00404b1c 00404b24 00404b2c              .K@.$K@.,K@.

00404b40 <rf24_model_e_str_1>:
  404b40:	3246526e 31304c34 0000002b              nRF24L01+...

00404b4c <rf24_pa_dbm_e_str_0>:
  404b4c:	4d5f4150 00004e49                       PA_MIN..

00404b54 <rf24_pa_dbm_e_str_1>:
  404b54:	4c5f4150 0000574f                       PA_LOW..

00404b5c <rf24_pa_dbm_e_str_2>:
  404b5c:	485f4150 00484749                       PA_HIGH.

00404b64 <rf24_pa_dbm_e_str_3>:
  404b64:	4d5f4150 00005841                       PA_MAX..

00404b6c <rf24_pa_dbm_e_str_P>:
  404b6c:	00404b4c 00404b54 00404b5c 00404b64     LK@.TK@.\K@.dK@.

00404b7c <_global_impure_ptr>:
  404b7c:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  404b8c:	46454443 00000000 33323130 37363534     CDEF....01234567
  404b9c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404bac:	0000296c                                l)..

00404bb0 <blanks.7217>:
  404bb0:	20202020 20202020 20202020 20202020                     

00404bc0 <zeroes.7218>:
  404bc0:	30303030 30303030 30303030 30303030     0000000000000000
  404bd0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404be0 <_ctype_>:
  404be0:	20202000 20202020 28282020 20282828     .         ((((( 
  404bf0:	20202020 20202020 20202020 20202020                     
  404c00:	10108820 10101010 10101010 10101010      ...............
  404c10:	04040410 04040404 10040404 10101010     ................
  404c20:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404c30:	01010101 01010101 01010101 10101010     ................
  404c40:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404c50:	02020202 02020202 02020202 10101010     ................
  404c60:	00000020 00000000 00000000 00000000      ...............
	...

00404ce4 <_init>:
  404ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ce6:	bf00      	nop
  404ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404cea:	bc08      	pop	{r3}
  404cec:	469e      	mov	lr, r3
  404cee:	4770      	bx	lr

00404cf0 <__init_array_start>:
  404cf0:	00402f79 	.word	0x00402f79

00404cf4 <__frame_dummy_init_array_entry>:
  404cf4:	0040018d                                ..@.

00404cf8 <_fini>:
  404cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404cfa:	bf00      	nop
  404cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404cfe:	bc08      	pop	{r3}
  404d00:	469e      	mov	lr, r3
  404d02:	4770      	bx	lr

00404d04 <__fini_array_start>:
  404d04:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <payload_size>:
20400010:	0020 0000                                    ...

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0adc 2040                                   ..@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	461d 0040 3f71 0040 0000 0000 4be0 0040     .F@.q?@......K@.
20400534:	4bdc 0040 49ec 0040 49ec 0040 49ec 0040     .K@..I@..I@..I@.
20400544:	49ec 0040 49ec 0040 49ec 0040 49ec 0040     .I@..I@..I@..I@.
20400554:	49ec 0040 49ec 0040 ffff ffff ffff ffff     .I@..I@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
