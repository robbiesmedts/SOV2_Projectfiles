
nRF24L01_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b10  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404b10  00404b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404b18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000128  204009c0  004054d8  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400ae8  00405600  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ae8  00407600  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016de8  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f05  00000000  00000000  0003782f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b98  00000000  00000000  0003a734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  0003b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002024c  00000000  00000000  0003be84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000bf23  00000000  00000000  0005c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00094d20  00000000  00000000  00067ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002718  00000000  00000000  000fcd14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005739  00000000  00000000  000ff42c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2a 40 20 65 09 40 00 61 09 40 00 61 09 40 00     .*@ e.@.a.@.a.@.
  400010:	61 09 40 00 61 09 40 00 61 09 40 00 00 00 00 00     a.@.a.@.a.@.....
	...
  40002c:	61 09 40 00 61 09 40 00 00 00 00 00 61 09 40 00     a.@.a.@.....a.@.
  40003c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40004c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40005c:	61 09 40 00 61 09 40 00 00 00 00 00 bd 07 40 00     a.@.a.@.......@.
  40006c:	d1 07 40 00 e5 07 40 00 61 09 40 00 61 09 40 00     ..@...@.a.@.a.@.
  40007c:	61 09 40 00 f9 07 40 00 0d 08 40 00 61 09 40 00     a.@...@...@.a.@.
  40008c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40009c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000ac:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000bc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000cc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000dc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000ec:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  4000fc:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40010c:	61 09 40 00 61 09 40 00 00 00 00 00 00 00 00 00     a.@.a.@.........
  40011c:	00 00 00 00 61 09 40 00 61 09 40 00 61 09 40 00     ....a.@.a.@.a.@.
  40012c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40013c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40014c:	61 09 40 00 61 09 40 00 61 09 40 00 61 09 40 00     a.@.a.@.a.@.a.@.
  40015c:	61 09 40 00 61 09 40 00 61 09 40 00                 a.@.a.@.a.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00404b18 	.word	0x00404b18

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404b18 	.word	0x00404b18
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00404b18 	.word	0x00404b18
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20400a94 	.word	0x20400a94
  40020c:	20400a8c 	.word	0x20400a8c

00400210 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400210:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400212:	010b      	lsls	r3, r1, #4
  400214:	4293      	cmp	r3, r2
  400216:	d914      	bls.n	400242 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400218:	00c9      	lsls	r1, r1, #3
  40021a:	084b      	lsrs	r3, r1, #1
  40021c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400220:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400224:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400226:	1e5c      	subs	r4, r3, #1
  400228:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40022c:	428c      	cmp	r4, r1
  40022e:	d901      	bls.n	400234 <usart_set_async_baudrate+0x24>
		return 1;
  400230:	2001      	movs	r0, #1
  400232:	e017      	b.n	400264 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400234:	6841      	ldr	r1, [r0, #4]
  400236:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40023a:	6041      	str	r1, [r0, #4]
  40023c:	e00c      	b.n	400258 <usart_set_async_baudrate+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	e010      	b.n	400264 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400242:	0859      	lsrs	r1, r3, #1
  400244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400248:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d8f2      	bhi.n	40023e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400258:	0412      	lsls	r2, r2, #16
  40025a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40025e:	431a      	orrs	r2, r3
  400260:	6202      	str	r2, [r0, #32]

	return 0;
  400262:	2000      	movs	r0, #0
}
  400264:	f85d 4b04 	ldr.w	r4, [sp], #4
  400268:	4770      	bx	lr
	...

0040026c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <usart_reset+0x24>)
  40026e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400272:	2300      	movs	r3, #0
  400274:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400276:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400278:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40027a:	2388      	movs	r3, #136	; 0x88
  40027c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40027e:	2324      	movs	r3, #36	; 0x24
  400280:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400282:	f44f 7380 	mov.w	r3, #256	; 0x100
  400286:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40028c:	6003      	str	r3, [r0, #0]
  40028e:	4770      	bx	lr
  400290:	55534100 	.word	0x55534100

00400294 <usart_init_rs232>:
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	4605      	mov	r5, r0
  400298:	460c      	mov	r4, r1
  40029a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40029c:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <usart_init_rs232+0x48>)
  40029e:	4798      	blx	r3
	ul_reg_val = 0;
  4002a0:	2200      	movs	r2, #0
  4002a2:	4b0f      	ldr	r3, [pc, #60]	; (4002e0 <usart_init_rs232+0x4c>)
  4002a4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002a6:	b1a4      	cbz	r4, 4002d2 <usart_init_rs232+0x3e>
  4002a8:	4632      	mov	r2, r6
  4002aa:	6821      	ldr	r1, [r4, #0]
  4002ac:	4628      	mov	r0, r5
  4002ae:	4b0d      	ldr	r3, [pc, #52]	; (4002e4 <usart_init_rs232+0x50>)
  4002b0:	4798      	blx	r3
  4002b2:	4602      	mov	r2, r0
  4002b4:	b978      	cbnz	r0, 4002d6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002b6:	6863      	ldr	r3, [r4, #4]
  4002b8:	68a1      	ldr	r1, [r4, #8]
  4002ba:	430b      	orrs	r3, r1
  4002bc:	6921      	ldr	r1, [r4, #16]
  4002be:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002c0:	68e1      	ldr	r1, [r4, #12]
  4002c2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002c4:	4906      	ldr	r1, [pc, #24]	; (4002e0 <usart_init_rs232+0x4c>)
  4002c6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002c8:	6869      	ldr	r1, [r5, #4]
  4002ca:	430b      	orrs	r3, r1
  4002cc:	606b      	str	r3, [r5, #4]
}
  4002ce:	4610      	mov	r0, r2
  4002d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002d2:	2201      	movs	r2, #1
  4002d4:	e7fb      	b.n	4002ce <usart_init_rs232+0x3a>
  4002d6:	2201      	movs	r2, #1
  4002d8:	e7f9      	b.n	4002ce <usart_init_rs232+0x3a>
  4002da:	bf00      	nop
  4002dc:	0040026d 	.word	0x0040026d
  4002e0:	204009dc 	.word	0x204009dc
  4002e4:	00400211 	.word	0x00400211

004002e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4002e8:	2340      	movs	r3, #64	; 0x40
  4002ea:	6003      	str	r3, [r0, #0]
  4002ec:	4770      	bx	lr

004002ee <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4002ee:	2310      	movs	r3, #16
  4002f0:	6003      	str	r3, [r0, #0]
  4002f2:	4770      	bx	lr

004002f4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4002f4:	6943      	ldr	r3, [r0, #20]
  4002f6:	f013 0f02 	tst.w	r3, #2
  4002fa:	d004      	beq.n	400306 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4002fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400300:	61c1      	str	r1, [r0, #28]
	return 0;
  400302:	2000      	movs	r0, #0
  400304:	4770      	bx	lr
		return 1;
  400306:	2001      	movs	r0, #1
}
  400308:	4770      	bx	lr

0040030a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40030a:	6943      	ldr	r3, [r0, #20]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d005      	beq.n	40031e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400312:	6983      	ldr	r3, [r0, #24]
  400314:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400318:	600b      	str	r3, [r1, #0]
	return 0;
  40031a:	2000      	movs	r0, #0
  40031c:	4770      	bx	lr
		return 1;
  40031e:	2001      	movs	r0, #1
}
  400320:	4770      	bx	lr
	...

00400324 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400324:	3801      	subs	r0, #1
  400326:	2802      	cmp	r0, #2
  400328:	d815      	bhi.n	400356 <_write+0x32>
{
  40032a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40032e:	460e      	mov	r6, r1
  400330:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400332:	b19a      	cbz	r2, 40035c <_write+0x38>
  400334:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400336:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400370 <_write+0x4c>
  40033a:	4f0c      	ldr	r7, [pc, #48]	; (40036c <_write+0x48>)
  40033c:	f8d8 0000 	ldr.w	r0, [r8]
  400340:	f815 1b01 	ldrb.w	r1, [r5], #1
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	4798      	blx	r3
  400348:	2800      	cmp	r0, #0
  40034a:	db0a      	blt.n	400362 <_write+0x3e>
  40034c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40034e:	3c01      	subs	r4, #1
  400350:	d1f4      	bne.n	40033c <_write+0x18>
  400352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400356:	f04f 30ff 	mov.w	r0, #4294967295
  40035a:	4770      	bx	lr
	for (; len != 0; --len) {
  40035c:	4610      	mov	r0, r2
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40036a:	bf00      	nop
  40036c:	20400a90 	.word	0x20400a90
  400370:	20400a94 	.word	0x20400a94

00400374 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400374:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400376:	4b07      	ldr	r3, [pc, #28]	; (400394 <spi_enable_clock+0x20>)
  400378:	4298      	cmp	r0, r3
  40037a:	d003      	beq.n	400384 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <spi_enable_clock+0x24>)
  40037e:	4298      	cmp	r0, r3
  400380:	d004      	beq.n	40038c <spi_enable_clock+0x18>
  400382:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400384:	2015      	movs	r0, #21
  400386:	4b05      	ldr	r3, [pc, #20]	; (40039c <spi_enable_clock+0x28>)
  400388:	4798      	blx	r3
  40038a:	bd08      	pop	{r3, pc}
  40038c:	202a      	movs	r0, #42	; 0x2a
  40038e:	4b03      	ldr	r3, [pc, #12]	; (40039c <spi_enable_clock+0x28>)
  400390:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400392:	e7f6      	b.n	400382 <spi_enable_clock+0xe>
  400394:	40008000 	.word	0x40008000
  400398:	40058000 	.word	0x40058000
  40039c:	00400941 	.word	0x00400941

004003a0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003a0:	6843      	ldr	r3, [r0, #4]
  4003a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4003a6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003a8:	6843      	ldr	r3, [r0, #4]
  4003aa:	0409      	lsls	r1, r1, #16
  4003ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003b0:	4319      	orrs	r1, r3
  4003b2:	6041      	str	r1, [r0, #4]
  4003b4:	4770      	bx	lr

004003b6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4003b6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4003b8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4003bc:	6904      	ldr	r4, [r0, #16]
  4003be:	f014 0f01 	tst.w	r4, #1
  4003c2:	d103      	bne.n	4003cc <spi_read+0x16>
		if (!timeout--) {
  4003c4:	3b01      	subs	r3, #1
  4003c6:	d1f9      	bne.n	4003bc <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4003c8:	2001      	movs	r0, #1
  4003ca:	e009      	b.n	4003e0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4003cc:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4003ce:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4003d0:	f010 0f02 	tst.w	r0, #2
  4003d4:	d002      	beq.n	4003dc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4003d6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4003da:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4003dc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4003de:	2000      	movs	r0, #0
}
  4003e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003e4:	4770      	bx	lr

004003e6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4003e6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4003e8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4003ec:	6905      	ldr	r5, [r0, #16]
  4003ee:	f015 0f02 	tst.w	r5, #2
  4003f2:	d103      	bne.n	4003fc <spi_write+0x16>
		if (!timeout--) {
  4003f4:	3c01      	subs	r4, #1
  4003f6:	d1f9      	bne.n	4003ec <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4003f8:	2001      	movs	r0, #1
  4003fa:	e00c      	b.n	400416 <spi_write+0x30>
  4003fc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4003fe:	f014 0f02 	tst.w	r4, #2
  400402:	d006      	beq.n	400412 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400404:	0412      	lsls	r2, r2, #16
  400406:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40040a:	4311      	orrs	r1, r2
		if (uc_last) {
  40040c:	b10b      	cbz	r3, 400412 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40040e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400412:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400414:	2000      	movs	r0, #0
}
  400416:	bc30      	pop	{r4, r5}
  400418:	4770      	bx	lr

0040041a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40041a:	b932      	cbnz	r2, 40042a <spi_set_clock_polarity+0x10>
  40041c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400420:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400422:	f023 0301 	bic.w	r3, r3, #1
  400426:	6303      	str	r3, [r0, #48]	; 0x30
  400428:	4770      	bx	lr
  40042a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40042e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400430:	f043 0301 	orr.w	r3, r3, #1
  400434:	6303      	str	r3, [r0, #48]	; 0x30
  400436:	4770      	bx	lr

00400438 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400438:	b932      	cbnz	r2, 400448 <spi_set_clock_phase+0x10>
  40043a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40043e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400440:	f023 0302 	bic.w	r3, r3, #2
  400444:	6303      	str	r3, [r0, #48]	; 0x30
  400446:	4770      	bx	lr
  400448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40044c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044e:	f043 0302 	orr.w	r3, r3, #2
  400452:	6303      	str	r3, [r0, #48]	; 0x30
  400454:	4770      	bx	lr

00400456 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40045a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40045c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400460:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400462:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400464:	431a      	orrs	r2, r3
  400466:	630a      	str	r2, [r1, #48]	; 0x30
  400468:	4770      	bx	lr

0040046a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40046a:	b17a      	cbz	r2, 40048c <spi_set_baudrate_div+0x22>
{
  40046c:	b410      	push	{r4}
  40046e:	4614      	mov	r4, r2
  400470:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400474:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40047a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40047c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40047e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400482:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400484:	2000      	movs	r0, #0
}
  400486:	f85d 4b04 	ldr.w	r4, [sp], #4
  40048a:	4770      	bx	lr
        return -1;
  40048c:	f04f 30ff 	mov.w	r0, #4294967295
  400490:	4770      	bx	lr

00400492 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400492:	b410      	push	{r4}
  400494:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400498:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40049a:	b280      	uxth	r0, r0
  40049c:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40049e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4004a0:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4004a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4004a8:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4004aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ae:	4770      	bx	lr

004004b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4004b0:	6943      	ldr	r3, [r0, #20]
  4004b2:	f013 0f02 	tst.w	r3, #2
  4004b6:	d002      	beq.n	4004be <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4004b8:	61c1      	str	r1, [r0, #28]
	return 0;
  4004ba:	2000      	movs	r0, #0
  4004bc:	4770      	bx	lr
		return 1;
  4004be:	2001      	movs	r0, #1
}
  4004c0:	4770      	bx	lr

004004c2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4004c2:	6943      	ldr	r3, [r0, #20]
  4004c4:	f013 0f01 	tst.w	r3, #1
  4004c8:	d003      	beq.n	4004d2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4004ca:	6983      	ldr	r3, [r0, #24]
  4004cc:	700b      	strb	r3, [r1, #0]
	return 0;
  4004ce:	2000      	movs	r0, #0
  4004d0:	4770      	bx	lr
		return 1;
  4004d2:	2001      	movs	r0, #1
}
  4004d4:	4770      	bx	lr
	...

004004d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4810      	ldr	r0, [pc, #64]	; (40051c <sysclk_init+0x44>)
  4004dc:	4b10      	ldr	r3, [pc, #64]	; (400520 <sysclk_init+0x48>)
  4004de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004e0:	213e      	movs	r1, #62	; 0x3e
  4004e2:	2000      	movs	r0, #0
  4004e4:	4b0f      	ldr	r3, [pc, #60]	; (400524 <sysclk_init+0x4c>)
  4004e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004e8:	4c0f      	ldr	r4, [pc, #60]	; (400528 <sysclk_init+0x50>)
  4004ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004ec:	2800      	cmp	r0, #0
  4004ee:	d0fc      	beq.n	4004ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004f0:	4b0e      	ldr	r3, [pc, #56]	; (40052c <sysclk_init+0x54>)
  4004f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004f4:	4a0e      	ldr	r2, [pc, #56]	; (400530 <sysclk_init+0x58>)
  4004f6:	4b0f      	ldr	r3, [pc, #60]	; (400534 <sysclk_init+0x5c>)
  4004f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4004fa:	4c0f      	ldr	r4, [pc, #60]	; (400538 <sysclk_init+0x60>)
  4004fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004fe:	2800      	cmp	r0, #0
  400500:	d0fc      	beq.n	4004fc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0d      	ldr	r3, [pc, #52]	; (40053c <sysclk_init+0x64>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2000      	movs	r0, #0
  40050a:	4b0d      	ldr	r3, [pc, #52]	; (400540 <sysclk_init+0x68>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0d      	ldr	r3, [pc, #52]	; (400544 <sysclk_init+0x6c>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	4802      	ldr	r0, [pc, #8]	; (40051c <sysclk_init+0x44>)
  400514:	4b02      	ldr	r3, [pc, #8]	; (400520 <sysclk_init+0x48>)
  400516:	4798      	blx	r3
  400518:	bd10      	pop	{r4, pc}
  40051a:	bf00      	nop
  40051c:	08f0d180 	.word	0x08f0d180
  400520:	00400b39 	.word	0x00400b39
  400524:	004008bd 	.word	0x004008bd
  400528:	00400911 	.word	0x00400911
  40052c:	00400921 	.word	0x00400921
  400530:	20183f01 	.word	0x20183f01
  400534:	400e0600 	.word	0x400e0600
  400538:	00400931 	.word	0x00400931
  40053c:	00400821 	.word	0x00400821
  400540:	00400859 	.word	0x00400859
  400544:	00400a2d 	.word	0x00400a2d

00400548 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40054a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40054e:	4b7d      	ldr	r3, [pc, #500]	; (400744 <board_init+0x1fc>)
  400550:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400556:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  40055a:	4b7b      	ldr	r3, [pc, #492]	; (400748 <board_init+0x200>)
  40055c:	2100      	movs	r1, #0
  40055e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400566:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  40056a:	695a      	ldr	r2, [r3, #20]
  40056c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400570:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400576:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  40057a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400582:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400586:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40058a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  40058e:	016e      	lsls	r6, r5, #5
  400590:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400594:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400598:	461c      	mov	r4, r3
  40059a:	ea06 000e 	and.w	r0, r6, lr
  40059e:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4005a0:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4005a2:	ea40 0102 	orr.w	r1, r0, r2
  4005a6:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4005aa:	3b01      	subs	r3, #1
  4005ac:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4005b4:	d1f5      	bne.n	4005a2 <board_init+0x5a>
    } while(sets-- != 0U);
  4005b6:	3d01      	subs	r5, #1
  4005b8:	3e20      	subs	r6, #32
  4005ba:	f1b5 3fff 	cmp.w	r5, #4294967295
  4005be:	d1ec      	bne.n	40059a <board_init+0x52>
  4005c0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4005c4:	4b60      	ldr	r3, [pc, #384]	; (400748 <board_init+0x200>)
  4005c6:	695a      	ldr	r2, [r3, #20]
  4005c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4005cc:	615a      	str	r2, [r3, #20]
  4005ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005d2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005d6:	4a5d      	ldr	r2, [pc, #372]	; (40074c <board_init+0x204>)
  4005d8:	495d      	ldr	r1, [pc, #372]	; (400750 <board_init+0x208>)
  4005da:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005dc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4005e0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4005e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005e6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4005ea:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4005ee:	f022 0201 	bic.w	r2, r2, #1
  4005f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4005f6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4005fa:	f022 0201 	bic.w	r2, r2, #1
  4005fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400606:	f3bf 8f6f 	isb	sy
  40060a:	200a      	movs	r0, #10
  40060c:	4c51      	ldr	r4, [pc, #324]	; (400754 <board_init+0x20c>)
  40060e:	47a0      	blx	r4
  400610:	200b      	movs	r0, #11
  400612:	47a0      	blx	r4
  400614:	200c      	movs	r0, #12
  400616:	47a0      	blx	r4
  400618:	2010      	movs	r0, #16
  40061a:	47a0      	blx	r4
  40061c:	2011      	movs	r0, #17
  40061e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400620:	4b4d      	ldr	r3, [pc, #308]	; (400758 <board_init+0x210>)
  400622:	f44f 7280 	mov.w	r2, #256	; 0x100
  400626:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400628:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40062c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40062e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400632:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400636:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400638:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40063c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40063e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400642:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400644:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40064a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40064c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400650:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400652:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400654:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400658:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40065a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40065e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400662:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400666:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40066a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40066c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400670:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400672:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400678:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40067a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40067e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400680:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400682:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400686:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400688:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40068a:	4934      	ldr	r1, [pc, #208]	; (40075c <board_init+0x214>)
  40068c:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400690:	f043 0310 	orr.w	r3, r3, #16
  400694:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400698:	4b31      	ldr	r3, [pc, #196]	; (400760 <board_init+0x218>)
  40069a:	2110      	movs	r1, #16
  40069c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40069e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006a2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006a4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006a6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006aa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4006ac:	4308      	orrs	r0, r1
  4006ae:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4006b0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4006b2:	4308      	orrs	r0, r1
  4006b4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006b6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4006b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4006bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4006c0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006c2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006c6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006c8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006ca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006ce:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4006d0:	4308      	orrs	r0, r1
  4006d2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006d4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4006d6:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  4006da:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006dc:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4006de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006ee:	4311      	orrs	r1, r2
  4006f0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006f4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006f8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006fa:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4006fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400700:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400706:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400708:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40070a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40070e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400710:	4311      	orrs	r1, r2
  400712:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400714:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400716:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  40071a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40071c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40071e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400722:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400728:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40072a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40072c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400730:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400732:	4311      	orrs	r1, r2
  400734:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400736:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400738:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  40073c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40073e:	605a      	str	r2, [r3, #4]
  400740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400742:	bf00      	nop
  400744:	400e1850 	.word	0x400e1850
  400748:	e000ed00 	.word	0xe000ed00
  40074c:	400e0c00 	.word	0x400e0c00
  400750:	5a00080c 	.word	0x5a00080c
  400754:	00400941 	.word	0x00400941
  400758:	400e1200 	.word	0x400e1200
  40075c:	40088000 	.word	0x40088000
  400760:	400e1000 	.word	0x400e1000

00400764 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400764:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400766:	4770      	bx	lr

00400768 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400768:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40076a:	4770      	bx	lr

0040076c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400770:	4604      	mov	r4, r0
  400772:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400774:	4b0e      	ldr	r3, [pc, #56]	; (4007b0 <pio_handler_process+0x44>)
  400776:	4798      	blx	r3
  400778:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40077a:	4620      	mov	r0, r4
  40077c:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <pio_handler_process+0x48>)
  40077e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400780:	4005      	ands	r5, r0
  400782:	d013      	beq.n	4007ac <pio_handler_process+0x40>
  400784:	4c0c      	ldr	r4, [pc, #48]	; (4007b8 <pio_handler_process+0x4c>)
  400786:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40078a:	e003      	b.n	400794 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40078c:	42b4      	cmp	r4, r6
  40078e:	d00d      	beq.n	4007ac <pio_handler_process+0x40>
  400790:	3410      	adds	r4, #16
		while (status != 0) {
  400792:	b15d      	cbz	r5, 4007ac <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400794:	6820      	ldr	r0, [r4, #0]
  400796:	4540      	cmp	r0, r8
  400798:	d1f8      	bne.n	40078c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40079a:	6861      	ldr	r1, [r4, #4]
  40079c:	4229      	tst	r1, r5
  40079e:	d0f5      	beq.n	40078c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007a0:	68e3      	ldr	r3, [r4, #12]
  4007a2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	ea25 0503 	bic.w	r5, r5, r3
  4007aa:	e7ef      	b.n	40078c <pio_handler_process+0x20>
  4007ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007b0:	00400765 	.word	0x00400765
  4007b4:	00400769 	.word	0x00400769
  4007b8:	204009e0 	.word	0x204009e0

004007bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007be:	210a      	movs	r1, #10
  4007c0:	4801      	ldr	r0, [pc, #4]	; (4007c8 <PIOA_Handler+0xc>)
  4007c2:	4b02      	ldr	r3, [pc, #8]	; (4007cc <PIOA_Handler+0x10>)
  4007c4:	4798      	blx	r3
  4007c6:	bd08      	pop	{r3, pc}
  4007c8:	400e0e00 	.word	0x400e0e00
  4007cc:	0040076d 	.word	0x0040076d

004007d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4007d2:	210b      	movs	r1, #11
  4007d4:	4801      	ldr	r0, [pc, #4]	; (4007dc <PIOB_Handler+0xc>)
  4007d6:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <PIOB_Handler+0x10>)
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}
  4007dc:	400e1000 	.word	0x400e1000
  4007e0:	0040076d 	.word	0x0040076d

004007e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007e6:	210c      	movs	r1, #12
  4007e8:	4801      	ldr	r0, [pc, #4]	; (4007f0 <PIOC_Handler+0xc>)
  4007ea:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <PIOC_Handler+0x10>)
  4007ec:	4798      	blx	r3
  4007ee:	bd08      	pop	{r3, pc}
  4007f0:	400e1200 	.word	0x400e1200
  4007f4:	0040076d 	.word	0x0040076d

004007f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4007f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4007fa:	2110      	movs	r1, #16
  4007fc:	4801      	ldr	r0, [pc, #4]	; (400804 <PIOD_Handler+0xc>)
  4007fe:	4b02      	ldr	r3, [pc, #8]	; (400808 <PIOD_Handler+0x10>)
  400800:	4798      	blx	r3
  400802:	bd08      	pop	{r3, pc}
  400804:	400e1400 	.word	0x400e1400
  400808:	0040076d 	.word	0x0040076d

0040080c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40080c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40080e:	2111      	movs	r1, #17
  400810:	4801      	ldr	r0, [pc, #4]	; (400818 <PIOE_Handler+0xc>)
  400812:	4b02      	ldr	r3, [pc, #8]	; (40081c <PIOE_Handler+0x10>)
  400814:	4798      	blx	r3
  400816:	bd08      	pop	{r3, pc}
  400818:	400e1600 	.word	0x400e1600
  40081c:	0040076d 	.word	0x0040076d

00400820 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400820:	2803      	cmp	r0, #3
  400822:	d011      	beq.n	400848 <pmc_mck_set_division+0x28>
  400824:	2804      	cmp	r0, #4
  400826:	d012      	beq.n	40084e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400828:	2802      	cmp	r0, #2
  40082a:	bf0c      	ite	eq
  40082c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400830:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400832:	4a08      	ldr	r2, [pc, #32]	; (400854 <pmc_mck_set_division+0x34>)
  400834:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40083a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40083c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40083e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400840:	f013 0f08 	tst.w	r3, #8
  400844:	d0fb      	beq.n	40083e <pmc_mck_set_division+0x1e>
}
  400846:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400848:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40084c:	e7f1      	b.n	400832 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40084e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400852:	e7ee      	b.n	400832 <pmc_mck_set_division+0x12>
  400854:	400e0600 	.word	0x400e0600

00400858 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400858:	4a17      	ldr	r2, [pc, #92]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  40085a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400860:	4318      	orrs	r0, r3
  400862:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400864:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400866:	f013 0f08 	tst.w	r3, #8
  40086a:	d10a      	bne.n	400882 <pmc_switch_mck_to_pllack+0x2a>
  40086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400870:	4911      	ldr	r1, [pc, #68]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  400872:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400874:	f012 0f08 	tst.w	r2, #8
  400878:	d103      	bne.n	400882 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40087a:	3b01      	subs	r3, #1
  40087c:	d1f9      	bne.n	400872 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40087e:	2001      	movs	r0, #1
  400880:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400882:	4a0d      	ldr	r2, [pc, #52]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  400884:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400886:	f023 0303 	bic.w	r3, r3, #3
  40088a:	f043 0302 	orr.w	r3, r3, #2
  40088e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400890:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400892:	f013 0f08 	tst.w	r3, #8
  400896:	d10a      	bne.n	4008ae <pmc_switch_mck_to_pllack+0x56>
  400898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40089c:	4906      	ldr	r1, [pc, #24]	; (4008b8 <pmc_switch_mck_to_pllack+0x60>)
  40089e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008a0:	f012 0f08 	tst.w	r2, #8
  4008a4:	d105      	bne.n	4008b2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008a6:	3b01      	subs	r3, #1
  4008a8:	d1f9      	bne.n	40089e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008aa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008ac:	4770      	bx	lr
	return 0;
  4008ae:	2000      	movs	r0, #0
  4008b0:	4770      	bx	lr
  4008b2:	2000      	movs	r0, #0
  4008b4:	4770      	bx	lr
  4008b6:	bf00      	nop
  4008b8:	400e0600 	.word	0x400e0600

004008bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008bc:	b9a0      	cbnz	r0, 4008e8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008be:	480e      	ldr	r0, [pc, #56]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008c0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008c2:	0209      	lsls	r1, r1, #8
  4008c4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008c6:	4a0d      	ldr	r2, [pc, #52]	; (4008fc <pmc_switch_mainck_to_xtal+0x40>)
  4008c8:	401a      	ands	r2, r3
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <pmc_switch_mainck_to_xtal+0x44>)
  4008cc:	4313      	orrs	r3, r2
  4008ce:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008d0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008d2:	4602      	mov	r2, r0
  4008d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008d6:	f013 0f01 	tst.w	r3, #1
  4008da:	d0fb      	beq.n	4008d4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008dc:	4a06      	ldr	r2, [pc, #24]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008de:	6a11      	ldr	r1, [r2, #32]
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <pmc_switch_mainck_to_xtal+0x48>)
  4008e2:	430b      	orrs	r3, r1
  4008e4:	6213      	str	r3, [r2, #32]
  4008e6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008e8:	4903      	ldr	r1, [pc, #12]	; (4008f8 <pmc_switch_mainck_to_xtal+0x3c>)
  4008ea:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008ec:	4a06      	ldr	r2, [pc, #24]	; (400908 <pmc_switch_mainck_to_xtal+0x4c>)
  4008ee:	401a      	ands	r2, r3
  4008f0:	4b06      	ldr	r3, [pc, #24]	; (40090c <pmc_switch_mainck_to_xtal+0x50>)
  4008f2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008f4:	620b      	str	r3, [r1, #32]
  4008f6:	4770      	bx	lr
  4008f8:	400e0600 	.word	0x400e0600
  4008fc:	ffc8fffc 	.word	0xffc8fffc
  400900:	00370001 	.word	0x00370001
  400904:	01370000 	.word	0x01370000
  400908:	fec8fffc 	.word	0xfec8fffc
  40090c:	01370002 	.word	0x01370002

00400910 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400910:	4b02      	ldr	r3, [pc, #8]	; (40091c <pmc_osc_is_ready_mainck+0xc>)
  400912:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400914:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400918:	4770      	bx	lr
  40091a:	bf00      	nop
  40091c:	400e0600 	.word	0x400e0600

00400920 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400920:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400924:	4b01      	ldr	r3, [pc, #4]	; (40092c <pmc_disable_pllack+0xc>)
  400926:	629a      	str	r2, [r3, #40]	; 0x28
  400928:	4770      	bx	lr
  40092a:	bf00      	nop
  40092c:	400e0600 	.word	0x400e0600

00400930 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400930:	4b02      	ldr	r3, [pc, #8]	; (40093c <pmc_is_locked_pllack+0xc>)
  400932:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400934:	f000 0002 	and.w	r0, r0, #2
  400938:	4770      	bx	lr
  40093a:	bf00      	nop
  40093c:	400e0600 	.word	0x400e0600

00400940 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400940:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400944:	4b05      	ldr	r3, [pc, #20]	; (40095c <pmc_enable_periph_clk+0x1c>)
  400946:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40094a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40094e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400952:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400956:	2000      	movs	r0, #0
  400958:	4770      	bx	lr
  40095a:	bf00      	nop
  40095c:	400e0600 	.word	0x400e0600

00400960 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400960:	e7fe      	b.n	400960 <Dummy_Handler>
	...

00400964 <Reset_Handler>:
{
  400964:	b500      	push	{lr}
  400966:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400968:	4b25      	ldr	r3, [pc, #148]	; (400a00 <Reset_Handler+0x9c>)
  40096a:	4a26      	ldr	r2, [pc, #152]	; (400a04 <Reset_Handler+0xa0>)
  40096c:	429a      	cmp	r2, r3
  40096e:	d010      	beq.n	400992 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400970:	4b25      	ldr	r3, [pc, #148]	; (400a08 <Reset_Handler+0xa4>)
  400972:	4a23      	ldr	r2, [pc, #140]	; (400a00 <Reset_Handler+0x9c>)
  400974:	429a      	cmp	r2, r3
  400976:	d20c      	bcs.n	400992 <Reset_Handler+0x2e>
  400978:	3b01      	subs	r3, #1
  40097a:	1a9b      	subs	r3, r3, r2
  40097c:	f023 0303 	bic.w	r3, r3, #3
  400980:	3304      	adds	r3, #4
  400982:	4413      	add	r3, r2
  400984:	491f      	ldr	r1, [pc, #124]	; (400a04 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400986:	f851 0b04 	ldr.w	r0, [r1], #4
  40098a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40098e:	429a      	cmp	r2, r3
  400990:	d1f9      	bne.n	400986 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400992:	4b1e      	ldr	r3, [pc, #120]	; (400a0c <Reset_Handler+0xa8>)
  400994:	4a1e      	ldr	r2, [pc, #120]	; (400a10 <Reset_Handler+0xac>)
  400996:	429a      	cmp	r2, r3
  400998:	d20a      	bcs.n	4009b0 <Reset_Handler+0x4c>
  40099a:	3b01      	subs	r3, #1
  40099c:	1a9b      	subs	r3, r3, r2
  40099e:	f023 0303 	bic.w	r3, r3, #3
  4009a2:	3304      	adds	r3, #4
  4009a4:	4413      	add	r3, r2
                *pDest++ = 0;
  4009a6:	2100      	movs	r1, #0
  4009a8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009ac:	4293      	cmp	r3, r2
  4009ae:	d1fb      	bne.n	4009a8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009b0:	4a18      	ldr	r2, [pc, #96]	; (400a14 <Reset_Handler+0xb0>)
  4009b2:	4b19      	ldr	r3, [pc, #100]	; (400a18 <Reset_Handler+0xb4>)
  4009b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009b8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4009ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009be:	fab3 f383 	clz	r3, r3
  4009c2:	095b      	lsrs	r3, r3, #5
  4009c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4009c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009cc:	2200      	movs	r2, #0
  4009ce:	4b13      	ldr	r3, [pc, #76]	; (400a1c <Reset_Handler+0xb8>)
  4009d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4009d2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009d4:	4a12      	ldr	r2, [pc, #72]	; (400a20 <Reset_Handler+0xbc>)
  4009d6:	6813      	ldr	r3, [r2, #0]
  4009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4009dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4009de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4009e2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009e6:	b129      	cbz	r1, 4009f4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009e8:	2201      	movs	r2, #1
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <Reset_Handler+0xb8>)
  4009ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4009ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009f2:	b662      	cpsie	i
        __libc_init_array();
  4009f4:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <Reset_Handler+0xc0>)
  4009f6:	4798      	blx	r3
        main();
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <Reset_Handler+0xc4>)
  4009fa:	4798      	blx	r3
  4009fc:	e7fe      	b.n	4009fc <Reset_Handler+0x98>
  4009fe:	bf00      	nop
  400a00:	20400000 	.word	0x20400000
  400a04:	00404b18 	.word	0x00404b18
  400a08:	204009c0 	.word	0x204009c0
  400a0c:	20400ae8 	.word	0x20400ae8
  400a10:	204009c0 	.word	0x204009c0
  400a14:	e000ed00 	.word	0xe000ed00
  400a18:	00400000 	.word	0x00400000
  400a1c:	2040000a 	.word	0x2040000a
  400a20:	e000ed88 	.word	0xe000ed88
  400a24:	004019d5 	.word	0x004019d5
  400a28:	00401501 	.word	0x00401501

00400a2c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a2c:	4b3b      	ldr	r3, [pc, #236]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a30:	f003 0303 	and.w	r3, r3, #3
  400a34:	2b01      	cmp	r3, #1
  400a36:	d01d      	beq.n	400a74 <SystemCoreClockUpdate+0x48>
  400a38:	b183      	cbz	r3, 400a5c <SystemCoreClockUpdate+0x30>
  400a3a:	2b02      	cmp	r3, #2
  400a3c:	d036      	beq.n	400aac <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a3e:	4b37      	ldr	r3, [pc, #220]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a46:	2b70      	cmp	r3, #112	; 0x70
  400a48:	d05f      	beq.n	400b0a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a4a:	4b34      	ldr	r3, [pc, #208]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a4e:	4934      	ldr	r1, [pc, #208]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a50:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a54:	680b      	ldr	r3, [r1, #0]
  400a56:	40d3      	lsrs	r3, r2
  400a58:	600b      	str	r3, [r1, #0]
  400a5a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400a5c:	4b31      	ldr	r3, [pc, #196]	; (400b24 <SystemCoreClockUpdate+0xf8>)
  400a5e:	695b      	ldr	r3, [r3, #20]
  400a60:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a64:	bf14      	ite	ne
  400a66:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a6a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a6e:	4b2c      	ldr	r3, [pc, #176]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a70:	601a      	str	r2, [r3, #0]
  400a72:	e7e4      	b.n	400a3e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a74:	4b29      	ldr	r3, [pc, #164]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a76:	6a1b      	ldr	r3, [r3, #32]
  400a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a7c:	d003      	beq.n	400a86 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a7e:	4a2a      	ldr	r2, [pc, #168]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400a80:	4b27      	ldr	r3, [pc, #156]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a82:	601a      	str	r2, [r3, #0]
  400a84:	e7db      	b.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a86:	4a29      	ldr	r2, [pc, #164]	; (400b2c <SystemCoreClockUpdate+0x100>)
  400a88:	4b25      	ldr	r3, [pc, #148]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400a8a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a8c:	4b23      	ldr	r3, [pc, #140]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400a8e:	6a1b      	ldr	r3, [r3, #32]
  400a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a94:	2b10      	cmp	r3, #16
  400a96:	d005      	beq.n	400aa4 <SystemCoreClockUpdate+0x78>
  400a98:	2b20      	cmp	r3, #32
  400a9a:	d1d0      	bne.n	400a3e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400a9c:	4a22      	ldr	r2, [pc, #136]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400a9e:	4b20      	ldr	r3, [pc, #128]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aa0:	601a      	str	r2, [r3, #0]
          break;
  400aa2:	e7cc      	b.n	400a3e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400aa4:	4a22      	ldr	r2, [pc, #136]	; (400b30 <SystemCoreClockUpdate+0x104>)
  400aa6:	4b1e      	ldr	r3, [pc, #120]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aa8:	601a      	str	r2, [r3, #0]
          break;
  400aaa:	e7c8      	b.n	400a3e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aae:	6a1b      	ldr	r3, [r3, #32]
  400ab0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab4:	d016      	beq.n	400ae4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ab6:	4a1c      	ldr	r2, [pc, #112]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400ab8:	4b19      	ldr	r3, [pc, #100]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400aba:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400abc:	4b17      	ldr	r3, [pc, #92]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ac0:	f003 0303 	and.w	r3, r3, #3
  400ac4:	2b02      	cmp	r3, #2
  400ac6:	d1ba      	bne.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ac8:	4a14      	ldr	r2, [pc, #80]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aca:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ace:	4814      	ldr	r0, [pc, #80]	; (400b20 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ad0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ad4:	6803      	ldr	r3, [r0, #0]
  400ad6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ada:	b2d2      	uxtb	r2, r2
  400adc:	fbb3 f3f2 	udiv	r3, r3, r2
  400ae0:	6003      	str	r3, [r0, #0]
  400ae2:	e7ac      	b.n	400a3e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ae4:	4a11      	ldr	r2, [pc, #68]	; (400b2c <SystemCoreClockUpdate+0x100>)
  400ae6:	4b0e      	ldr	r3, [pc, #56]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400ae8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400aea:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <SystemCoreClockUpdate+0xf0>)
  400aec:	6a1b      	ldr	r3, [r3, #32]
  400aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400af2:	2b10      	cmp	r3, #16
  400af4:	d005      	beq.n	400b02 <SystemCoreClockUpdate+0xd6>
  400af6:	2b20      	cmp	r3, #32
  400af8:	d1e0      	bne.n	400abc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400afa:	4a0b      	ldr	r2, [pc, #44]	; (400b28 <SystemCoreClockUpdate+0xfc>)
  400afc:	4b08      	ldr	r3, [pc, #32]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400afe:	601a      	str	r2, [r3, #0]
          break;
  400b00:	e7dc      	b.n	400abc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400b02:	4a0b      	ldr	r2, [pc, #44]	; (400b30 <SystemCoreClockUpdate+0x104>)
  400b04:	4b06      	ldr	r3, [pc, #24]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400b06:	601a      	str	r2, [r3, #0]
          break;
  400b08:	e7d8      	b.n	400abc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400b0a:	4a05      	ldr	r2, [pc, #20]	; (400b20 <SystemCoreClockUpdate+0xf4>)
  400b0c:	6813      	ldr	r3, [r2, #0]
  400b0e:	4909      	ldr	r1, [pc, #36]	; (400b34 <SystemCoreClockUpdate+0x108>)
  400b10:	fba1 1303 	umull	r1, r3, r1, r3
  400b14:	085b      	lsrs	r3, r3, #1
  400b16:	6013      	str	r3, [r2, #0]
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop
  400b1c:	400e0600 	.word	0x400e0600
  400b20:	2040000c 	.word	0x2040000c
  400b24:	400e1810 	.word	0x400e1810
  400b28:	00b71b00 	.word	0x00b71b00
  400b2c:	003d0900 	.word	0x003d0900
  400b30:	007a1200 	.word	0x007a1200
  400b34:	aaaaaaab 	.word	0xaaaaaaab

00400b38 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b38:	4b16      	ldr	r3, [pc, #88]	; (400b94 <system_init_flash+0x5c>)
  400b3a:	4298      	cmp	r0, r3
  400b3c:	d913      	bls.n	400b66 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b3e:	4b16      	ldr	r3, [pc, #88]	; (400b98 <system_init_flash+0x60>)
  400b40:	4298      	cmp	r0, r3
  400b42:	d915      	bls.n	400b70 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b44:	4b15      	ldr	r3, [pc, #84]	; (400b9c <system_init_flash+0x64>)
  400b46:	4298      	cmp	r0, r3
  400b48:	d916      	bls.n	400b78 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b4a:	4b15      	ldr	r3, [pc, #84]	; (400ba0 <system_init_flash+0x68>)
  400b4c:	4298      	cmp	r0, r3
  400b4e:	d917      	bls.n	400b80 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b50:	4b14      	ldr	r3, [pc, #80]	; (400ba4 <system_init_flash+0x6c>)
  400b52:	4298      	cmp	r0, r3
  400b54:	d918      	bls.n	400b88 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400b56:	4b14      	ldr	r3, [pc, #80]	; (400ba8 <system_init_flash+0x70>)
  400b58:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b5a:	bf94      	ite	ls
  400b5c:	4a13      	ldrls	r2, [pc, #76]	; (400bac <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400b5e:	4a14      	ldrhi	r2, [pc, #80]	; (400bb0 <system_init_flash+0x78>)
  400b60:	4b14      	ldr	r3, [pc, #80]	; (400bb4 <system_init_flash+0x7c>)
  400b62:	601a      	str	r2, [r3, #0]
  400b64:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b6a:	4b12      	ldr	r3, [pc, #72]	; (400bb4 <system_init_flash+0x7c>)
  400b6c:	601a      	str	r2, [r3, #0]
  400b6e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b70:	4a11      	ldr	r2, [pc, #68]	; (400bb8 <system_init_flash+0x80>)
  400b72:	4b10      	ldr	r3, [pc, #64]	; (400bb4 <system_init_flash+0x7c>)
  400b74:	601a      	str	r2, [r3, #0]
  400b76:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b78:	4a10      	ldr	r2, [pc, #64]	; (400bbc <system_init_flash+0x84>)
  400b7a:	4b0e      	ldr	r3, [pc, #56]	; (400bb4 <system_init_flash+0x7c>)
  400b7c:	601a      	str	r2, [r3, #0]
  400b7e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b80:	4a0f      	ldr	r2, [pc, #60]	; (400bc0 <system_init_flash+0x88>)
  400b82:	4b0c      	ldr	r3, [pc, #48]	; (400bb4 <system_init_flash+0x7c>)
  400b84:	601a      	str	r2, [r3, #0]
  400b86:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b88:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400b8c:	4b09      	ldr	r3, [pc, #36]	; (400bb4 <system_init_flash+0x7c>)
  400b8e:	601a      	str	r2, [r3, #0]
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	015ef3bf 	.word	0x015ef3bf
  400b98:	02bde77f 	.word	0x02bde77f
  400b9c:	041cdb3f 	.word	0x041cdb3f
  400ba0:	057bceff 	.word	0x057bceff
  400ba4:	06dac2bf 	.word	0x06dac2bf
  400ba8:	0839b67f 	.word	0x0839b67f
  400bac:	04000500 	.word	0x04000500
  400bb0:	04000600 	.word	0x04000600
  400bb4:	400e0c00 	.word	0x400e0c00
  400bb8:	04000100 	.word	0x04000100
  400bbc:	04000200 	.word	0x04000200
  400bc0:	04000300 	.word	0x04000300

00400bc4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bc4:	4b0a      	ldr	r3, [pc, #40]	; (400bf0 <_sbrk+0x2c>)
  400bc6:	681b      	ldr	r3, [r3, #0]
  400bc8:	b153      	cbz	r3, 400be0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bca:	4b09      	ldr	r3, [pc, #36]	; (400bf0 <_sbrk+0x2c>)
  400bcc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bce:	181a      	adds	r2, r3, r0
  400bd0:	4908      	ldr	r1, [pc, #32]	; (400bf4 <_sbrk+0x30>)
  400bd2:	4291      	cmp	r1, r2
  400bd4:	db08      	blt.n	400be8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bd6:	4610      	mov	r0, r2
  400bd8:	4a05      	ldr	r2, [pc, #20]	; (400bf0 <_sbrk+0x2c>)
  400bda:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400bdc:	4618      	mov	r0, r3
  400bde:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400be0:	4a05      	ldr	r2, [pc, #20]	; (400bf8 <_sbrk+0x34>)
  400be2:	4b03      	ldr	r3, [pc, #12]	; (400bf0 <_sbrk+0x2c>)
  400be4:	601a      	str	r2, [r3, #0]
  400be6:	e7f0      	b.n	400bca <_sbrk+0x6>
		return (caddr_t) -1;	
  400be8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop
  400bf0:	20400a50 	.word	0x20400a50
  400bf4:	2045fffc 	.word	0x2045fffc
  400bf8:	20402ce8 	.word	0x20402ce8

00400bfc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400bfc:	f04f 30ff 	mov.w	r0, #4294967295
  400c00:	4770      	bx	lr

00400c02 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c06:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c08:	2000      	movs	r0, #0
  400c0a:	4770      	bx	lr

00400c0c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c0c:	2001      	movs	r0, #1
  400c0e:	4770      	bx	lr

00400c10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c10:	2000      	movs	r0, #0
  400c12:	4770      	bx	lr

00400c14 <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
static void spi_master_transfer(void *p_buf, uint32_t size)
{
  400c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c18:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  400c1a:	b1d9      	cbz	r1, 400c54 <spi_master_transfer+0x40>
  400c1c:	4688      	mov	r8, r1
  400c1e:	4605      	mov	r5, r0
  400c20:	4480      	add	r8, r0
		//if (i != size-1){
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c22:	4c0f      	ldr	r4, [pc, #60]	; (400c60 <spi_master_transfer+0x4c>)
  400c24:	f8df 9048 	ldr.w	r9, [pc, #72]	; 400c70 <spi_master_transfer+0x5c>
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 1);
		}*/
		
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c28:	4e0e      	ldr	r6, [pc, #56]	; (400c64 <spi_master_transfer+0x50>)
  400c2a:	462f      	mov	r7, r5
			spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c2c:	2300      	movs	r3, #0
  400c2e:	461a      	mov	r2, r3
  400c30:	7829      	ldrb	r1, [r5, #0]
  400c32:	4620      	mov	r0, r4
  400c34:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c36:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
  400c38:	f013 0f01 	tst.w	r3, #1
  400c3c:	d0fb      	beq.n	400c36 <spi_master_transfer+0x22>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c3e:	f10d 0207 	add.w	r2, sp, #7
  400c42:	4631      	mov	r1, r6
  400c44:	4620      	mov	r0, r4
  400c46:	4b08      	ldr	r3, [pc, #32]	; (400c68 <spi_master_transfer+0x54>)
  400c48:	4798      	blx	r3
		p_buffer[i] = data;
  400c4a:	8833      	ldrh	r3, [r6, #0]
  400c4c:	703b      	strb	r3, [r7, #0]
  400c4e:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  400c50:	4545      	cmp	r5, r8
  400c52:	d1ea      	bne.n	400c2a <spi_master_transfer+0x16>
	}
	delay_us(5);
  400c54:	20fd      	movs	r0, #253	; 0xfd
  400c56:	4b05      	ldr	r3, [pc, #20]	; (400c6c <spi_master_transfer+0x58>)
  400c58:	4798      	blx	r3
}
  400c5a:	b003      	add	sp, #12
  400c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400c60:	40008000 	.word	0x40008000
  400c64:	20400a54 	.word	0x20400a54
  400c68:	004003b7 	.word	0x004003b7
  400c6c:	20400001 	.word	0x20400001
  400c70:	004003e7 	.word	0x004003e7

00400c74 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c76:	b083      	sub	sp, #12
  400c78:	4605      	mov	r5, r0
  400c7a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c7c:	2300      	movs	r3, #0
  400c7e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c80:	4b2a      	ldr	r3, [pc, #168]	; (400d2c <usart_serial_getchar+0xb8>)
  400c82:	4298      	cmp	r0, r3
  400c84:	d013      	beq.n	400cae <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c86:	4b2a      	ldr	r3, [pc, #168]	; (400d30 <usart_serial_getchar+0xbc>)
  400c88:	4298      	cmp	r0, r3
  400c8a:	d018      	beq.n	400cbe <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400c8c:	4b29      	ldr	r3, [pc, #164]	; (400d34 <usart_serial_getchar+0xc0>)
  400c8e:	4298      	cmp	r0, r3
  400c90:	d01d      	beq.n	400cce <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400c92:	4b29      	ldr	r3, [pc, #164]	; (400d38 <usart_serial_getchar+0xc4>)
  400c94:	429d      	cmp	r5, r3
  400c96:	d022      	beq.n	400cde <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c98:	4b28      	ldr	r3, [pc, #160]	; (400d3c <usart_serial_getchar+0xc8>)
  400c9a:	429d      	cmp	r5, r3
  400c9c:	d027      	beq.n	400cee <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c9e:	4b28      	ldr	r3, [pc, #160]	; (400d40 <usart_serial_getchar+0xcc>)
  400ca0:	429d      	cmp	r5, r3
  400ca2:	d02e      	beq.n	400d02 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400ca4:	4b27      	ldr	r3, [pc, #156]	; (400d44 <usart_serial_getchar+0xd0>)
  400ca6:	429d      	cmp	r5, r3
  400ca8:	d035      	beq.n	400d16 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400caa:	b003      	add	sp, #12
  400cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400cae:	461f      	mov	r7, r3
  400cb0:	4e25      	ldr	r6, [pc, #148]	; (400d48 <usart_serial_getchar+0xd4>)
  400cb2:	4621      	mov	r1, r4
  400cb4:	4638      	mov	r0, r7
  400cb6:	47b0      	blx	r6
  400cb8:	2800      	cmp	r0, #0
  400cba:	d1fa      	bne.n	400cb2 <usart_serial_getchar+0x3e>
  400cbc:	e7e9      	b.n	400c92 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400cbe:	461f      	mov	r7, r3
  400cc0:	4e21      	ldr	r6, [pc, #132]	; (400d48 <usart_serial_getchar+0xd4>)
  400cc2:	4621      	mov	r1, r4
  400cc4:	4638      	mov	r0, r7
  400cc6:	47b0      	blx	r6
  400cc8:	2800      	cmp	r0, #0
  400cca:	d1fa      	bne.n	400cc2 <usart_serial_getchar+0x4e>
  400ccc:	e7e4      	b.n	400c98 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400cce:	461f      	mov	r7, r3
  400cd0:	4e1d      	ldr	r6, [pc, #116]	; (400d48 <usart_serial_getchar+0xd4>)
  400cd2:	4621      	mov	r1, r4
  400cd4:	4638      	mov	r0, r7
  400cd6:	47b0      	blx	r6
  400cd8:	2800      	cmp	r0, #0
  400cda:	d1fa      	bne.n	400cd2 <usart_serial_getchar+0x5e>
  400cdc:	e7df      	b.n	400c9e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400cde:	461f      	mov	r7, r3
  400ce0:	4e19      	ldr	r6, [pc, #100]	; (400d48 <usart_serial_getchar+0xd4>)
  400ce2:	4621      	mov	r1, r4
  400ce4:	4638      	mov	r0, r7
  400ce6:	47b0      	blx	r6
  400ce8:	2800      	cmp	r0, #0
  400cea:	d1fa      	bne.n	400ce2 <usart_serial_getchar+0x6e>
  400cec:	e7da      	b.n	400ca4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400cee:	461e      	mov	r6, r3
  400cf0:	4d16      	ldr	r5, [pc, #88]	; (400d4c <usart_serial_getchar+0xd8>)
  400cf2:	a901      	add	r1, sp, #4
  400cf4:	4630      	mov	r0, r6
  400cf6:	47a8      	blx	r5
  400cf8:	2800      	cmp	r0, #0
  400cfa:	d1fa      	bne.n	400cf2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400cfc:	9b01      	ldr	r3, [sp, #4]
  400cfe:	7023      	strb	r3, [r4, #0]
  400d00:	e7d3      	b.n	400caa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d02:	461e      	mov	r6, r3
  400d04:	4d11      	ldr	r5, [pc, #68]	; (400d4c <usart_serial_getchar+0xd8>)
  400d06:	a901      	add	r1, sp, #4
  400d08:	4630      	mov	r0, r6
  400d0a:	47a8      	blx	r5
  400d0c:	2800      	cmp	r0, #0
  400d0e:	d1fa      	bne.n	400d06 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400d10:	9b01      	ldr	r3, [sp, #4]
  400d12:	7023      	strb	r3, [r4, #0]
  400d14:	e7c9      	b.n	400caa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d16:	461e      	mov	r6, r3
  400d18:	4d0c      	ldr	r5, [pc, #48]	; (400d4c <usart_serial_getchar+0xd8>)
  400d1a:	a901      	add	r1, sp, #4
  400d1c:	4630      	mov	r0, r6
  400d1e:	47a8      	blx	r5
  400d20:	2800      	cmp	r0, #0
  400d22:	d1fa      	bne.n	400d1a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	7023      	strb	r3, [r4, #0]
}
  400d28:	e7bf      	b.n	400caa <usart_serial_getchar+0x36>
  400d2a:	bf00      	nop
  400d2c:	400e0800 	.word	0x400e0800
  400d30:	400e0a00 	.word	0x400e0a00
  400d34:	400e1a00 	.word	0x400e1a00
  400d38:	400e1c00 	.word	0x400e1c00
  400d3c:	40024000 	.word	0x40024000
  400d40:	40028000 	.word	0x40028000
  400d44:	4002c000 	.word	0x4002c000
  400d48:	004004c3 	.word	0x004004c3
  400d4c:	0040030b 	.word	0x0040030b

00400d50 <usart_serial_putchar>:
{
  400d50:	b570      	push	{r4, r5, r6, lr}
  400d52:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400d54:	4b2a      	ldr	r3, [pc, #168]	; (400e00 <usart_serial_putchar+0xb0>)
  400d56:	4298      	cmp	r0, r3
  400d58:	d013      	beq.n	400d82 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400d5a:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <usart_serial_putchar+0xb4>)
  400d5c:	4298      	cmp	r0, r3
  400d5e:	d019      	beq.n	400d94 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400d60:	4b29      	ldr	r3, [pc, #164]	; (400e08 <usart_serial_putchar+0xb8>)
  400d62:	4298      	cmp	r0, r3
  400d64:	d01f      	beq.n	400da6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400d66:	4b29      	ldr	r3, [pc, #164]	; (400e0c <usart_serial_putchar+0xbc>)
  400d68:	4298      	cmp	r0, r3
  400d6a:	d025      	beq.n	400db8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400d6c:	4b28      	ldr	r3, [pc, #160]	; (400e10 <usart_serial_putchar+0xc0>)
  400d6e:	4298      	cmp	r0, r3
  400d70:	d02b      	beq.n	400dca <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400d72:	4b28      	ldr	r3, [pc, #160]	; (400e14 <usart_serial_putchar+0xc4>)
  400d74:	4298      	cmp	r0, r3
  400d76:	d031      	beq.n	400ddc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400d78:	4b27      	ldr	r3, [pc, #156]	; (400e18 <usart_serial_putchar+0xc8>)
  400d7a:	4298      	cmp	r0, r3
  400d7c:	d037      	beq.n	400dee <usart_serial_putchar+0x9e>
	return 0;
  400d7e:	2000      	movs	r0, #0
}
  400d80:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d82:	461e      	mov	r6, r3
  400d84:	4d25      	ldr	r5, [pc, #148]	; (400e1c <usart_serial_putchar+0xcc>)
  400d86:	4621      	mov	r1, r4
  400d88:	4630      	mov	r0, r6
  400d8a:	47a8      	blx	r5
  400d8c:	2800      	cmp	r0, #0
  400d8e:	d1fa      	bne.n	400d86 <usart_serial_putchar+0x36>
		return 1;
  400d90:	2001      	movs	r0, #1
  400d92:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d94:	461e      	mov	r6, r3
  400d96:	4d21      	ldr	r5, [pc, #132]	; (400e1c <usart_serial_putchar+0xcc>)
  400d98:	4621      	mov	r1, r4
  400d9a:	4630      	mov	r0, r6
  400d9c:	47a8      	blx	r5
  400d9e:	2800      	cmp	r0, #0
  400da0:	d1fa      	bne.n	400d98 <usart_serial_putchar+0x48>
		return 1;
  400da2:	2001      	movs	r0, #1
  400da4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400da6:	461e      	mov	r6, r3
  400da8:	4d1c      	ldr	r5, [pc, #112]	; (400e1c <usart_serial_putchar+0xcc>)
  400daa:	4621      	mov	r1, r4
  400dac:	4630      	mov	r0, r6
  400dae:	47a8      	blx	r5
  400db0:	2800      	cmp	r0, #0
  400db2:	d1fa      	bne.n	400daa <usart_serial_putchar+0x5a>
		return 1;
  400db4:	2001      	movs	r0, #1
  400db6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400db8:	461e      	mov	r6, r3
  400dba:	4d18      	ldr	r5, [pc, #96]	; (400e1c <usart_serial_putchar+0xcc>)
  400dbc:	4621      	mov	r1, r4
  400dbe:	4630      	mov	r0, r6
  400dc0:	47a8      	blx	r5
  400dc2:	2800      	cmp	r0, #0
  400dc4:	d1fa      	bne.n	400dbc <usart_serial_putchar+0x6c>
		return 1;
  400dc6:	2001      	movs	r0, #1
  400dc8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400dca:	461e      	mov	r6, r3
  400dcc:	4d14      	ldr	r5, [pc, #80]	; (400e20 <usart_serial_putchar+0xd0>)
  400dce:	4621      	mov	r1, r4
  400dd0:	4630      	mov	r0, r6
  400dd2:	47a8      	blx	r5
  400dd4:	2800      	cmp	r0, #0
  400dd6:	d1fa      	bne.n	400dce <usart_serial_putchar+0x7e>
		return 1;
  400dd8:	2001      	movs	r0, #1
  400dda:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ddc:	461e      	mov	r6, r3
  400dde:	4d10      	ldr	r5, [pc, #64]	; (400e20 <usart_serial_putchar+0xd0>)
  400de0:	4621      	mov	r1, r4
  400de2:	4630      	mov	r0, r6
  400de4:	47a8      	blx	r5
  400de6:	2800      	cmp	r0, #0
  400de8:	d1fa      	bne.n	400de0 <usart_serial_putchar+0x90>
		return 1;
  400dea:	2001      	movs	r0, #1
  400dec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400dee:	461e      	mov	r6, r3
  400df0:	4d0b      	ldr	r5, [pc, #44]	; (400e20 <usart_serial_putchar+0xd0>)
  400df2:	4621      	mov	r1, r4
  400df4:	4630      	mov	r0, r6
  400df6:	47a8      	blx	r5
  400df8:	2800      	cmp	r0, #0
  400dfa:	d1fa      	bne.n	400df2 <usart_serial_putchar+0xa2>
		return 1;
  400dfc:	2001      	movs	r0, #1
  400dfe:	bd70      	pop	{r4, r5, r6, pc}
  400e00:	400e0800 	.word	0x400e0800
  400e04:	400e0a00 	.word	0x400e0a00
  400e08:	400e1a00 	.word	0x400e1a00
  400e0c:	400e1c00 	.word	0x400e1c00
  400e10:	40024000 	.word	0x40024000
  400e14:	40028000 	.word	0x40028000
  400e18:	4002c000 	.word	0x4002c000
  400e1c:	004004b1 	.word	0x004004b1
  400e20:	004002f5 	.word	0x004002f5

00400e24 <nRF24_readRegister>:
 * 
 * \param reg register to read
 * \return data register
 */
uint8_t nRF24_readRegister(uint8_t reg)
{
  400e24:	b500      	push	{lr}
  400e26:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  400e28:	f000 001f 	and.w	r0, r0, #31
  400e2c:	f88d 0004 	strb.w	r0, [sp, #4]
  400e30:	23ff      	movs	r3, #255	; 0xff
  400e32:	f88d 3005 	strb.w	r3, [sp, #5]
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400e36:	2102      	movs	r1, #2
  400e38:	a801      	add	r0, sp, #4
  400e3a:	4b03      	ldr	r3, [pc, #12]	; (400e48 <nRF24_readRegister+0x24>)
  400e3c:	4798      	blx	r3
	/** contents of cmd after transfer:
	 * [0] contains STATUS register
	 * [1] contains requested register
	*/
	return cmd[1]; 
}
  400e3e:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400e42:	b003      	add	sp, #12
  400e44:	f85d fb04 	ldr.w	pc, [sp], #4
  400e48:	00400c15 	.word	0x00400c15

00400e4c <read_register>:

uint8_t read_register(uint8_t reg, uint8_t* buf, uint8_t len)
{
  400e4c:	b570      	push	{r4, r5, r6, lr}
  400e4e:	b082      	sub	sp, #8
  400e50:	460d      	mov	r5, r1
  400e52:	4616      	mov	r6, r2
	uint8_t status;
	status = R_REGISTER | (REGISTER_MASK & reg);
  400e54:	f000 031f 	and.w	r3, r0, #31
  400e58:	a802      	add	r0, sp, #8
  400e5a:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&status, sizeof(status));
  400e5e:	2101      	movs	r1, #1
  400e60:	4c04      	ldr	r4, [pc, #16]	; (400e74 <read_register+0x28>)
  400e62:	47a0      	blx	r4
	
	spi_master_transfer(buf, len);
  400e64:	4631      	mov	r1, r6
  400e66:	4628      	mov	r0, r5
  400e68:	47a0      	blx	r4
	
	return status;
	
}
  400e6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400e6e:	b002      	add	sp, #8
  400e70:	bd70      	pop	{r4, r5, r6, pc}
  400e72:	bf00      	nop
  400e74:	00400c15 	.word	0x00400c15

00400e78 <nRF24_writeRegister>:
 * \param reg register to write
 * \param value to write
 * \return STATUS register 
 */
uint8_t nRF24_writeRegister(uint8_t reg, uint8_t val)
{
  400e78:	b500      	push	{lr}
  400e7a:	b083      	sub	sp, #12
	uint8_t p_buf[2];
	
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400e7c:	f000 001f 	and.w	r0, r0, #31
  400e80:	f040 0020 	orr.w	r0, r0, #32
  400e84:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  400e88:	f88d 1005 	strb.w	r1, [sp, #5]
	/** contents of p_buf before transfer
	* [0] write commando to reg
	* [1] data to write
	*/
	
	spi_master_transfer(p_buf, sizeof(p_buf));
  400e8c:	2102      	movs	r1, #2
  400e8e:	a801      	add	r0, sp, #4
  400e90:	4b03      	ldr	r3, [pc, #12]	; (400ea0 <nRF24_writeRegister+0x28>)
  400e92:	4798      	blx	r3
	/** contents of p_buf after transfer
	* [0] Status register
	* [1] unknown data
	*/
	return p_buf[0]; //return STATUS
}
  400e94:	f89d 0004 	ldrb.w	r0, [sp, #4]
  400e98:	b003      	add	sp, #12
  400e9a:	f85d fb04 	ldr.w	pc, [sp], #4
  400e9e:	bf00      	nop
  400ea0:	00400c15 	.word	0x00400c15

00400ea4 <nRF_writeRegister>:

uint8_t nRF_writeRegister(uint8_t reg, const uint8_t* buf, uint8_t length)
{
  400ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400ea8:	af00      	add	r7, sp, #0
	uint8_t p_buf[length+1];
  400eaa:	f102 0801 	add.w	r8, r2, #1
  400eae:	3208      	adds	r2, #8
  400eb0:	f022 0207 	bic.w	r2, r2, #7
  400eb4:	ebad 0d02 	sub.w	sp, sp, r2
  400eb8:	466e      	mov	r6, sp
	
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400eba:	f000 001f 	and.w	r0, r0, #31
  400ebe:	f040 0020 	orr.w	r0, r0, #32
  400ec2:	f88d 0000 	strb.w	r0, [sp]
	
	for (uint8_t i = 1; i < sizeof(p_buf); i++)
  400ec6:	f1b8 0f01 	cmp.w	r8, #1
  400eca:	d90f      	bls.n	400eec <nRF_writeRegister+0x48>
  400ecc:	1e4d      	subs	r5, r1, #1
  400ece:	2401      	movs	r4, #1
	{
		p_buf[i] = (*buf++);
		printf("%d || %02x\n\r", i, p_buf[i]);
  400ed0:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400f00 <nRF_writeRegister+0x5c>
  400ed4:	f8df 902c 	ldr.w	r9, [pc, #44]	; 400f04 <nRF_writeRegister+0x60>
		p_buf[i] = (*buf++);
  400ed8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  400edc:	5532      	strb	r2, [r6, r4]
		printf("%d || %02x\n\r", i, p_buf[i]);
  400ede:	4621      	mov	r1, r4
  400ee0:	4650      	mov	r0, sl
  400ee2:	47c8      	blx	r9
	for (uint8_t i = 1; i < sizeof(p_buf); i++)
  400ee4:	3401      	adds	r4, #1
  400ee6:	b2e4      	uxtb	r4, r4
  400ee8:	45a0      	cmp	r8, r4
  400eea:	d8f5      	bhi.n	400ed8 <nRF_writeRegister+0x34>
	}
	spi_master_transfer(p_buf, sizeof(p_buf));
  400eec:	4641      	mov	r1, r8
  400eee:	4630      	mov	r0, r6
  400ef0:	4b02      	ldr	r3, [pc, #8]	; (400efc <nRF_writeRegister+0x58>)
  400ef2:	4798      	blx	r3
	spi_master_transfer(&command, sizeof(command));
	spi_master_transfer(buf, length);
	
	return command;
*/	
}
  400ef4:	7830      	ldrb	r0, [r6, #0]
  400ef6:	46bd      	mov	sp, r7
  400ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400efc:	00400c15 	.word	0x00400c15
  400f00:	0040478c 	.word	0x0040478c
  400f04:	00401a25 	.word	0x00401a25

00400f08 <nRF24_FlushRx>:
/**
 * \brief flush the RX buffer of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_FlushRx(void)
{
  400f08:	b500      	push	{lr}
  400f0a:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = FLUSH_RX;
  400f0c:	a802      	add	r0, sp, #8
  400f0e:	23e2      	movs	r3, #226	; 0xe2
  400f10:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f14:	2101      	movs	r1, #1
  400f16:	4b03      	ldr	r3, [pc, #12]	; (400f24 <nRF24_FlushRx+0x1c>)
  400f18:	4798      	blx	r3
	
	return cmd;
}
  400f1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f1e:	b003      	add	sp, #12
  400f20:	f85d fb04 	ldr.w	pc, [sp], #4
  400f24:	00400c15 	.word	0x00400c15

00400f28 <nRF24_FlushTx>:
/**
 * \brief flush the TX buffer of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_FlushTx(void)
{
  400f28:	b500      	push	{lr}
  400f2a:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = FLUSH_TX;
  400f2c:	a802      	add	r0, sp, #8
  400f2e:	23e1      	movs	r3, #225	; 0xe1
  400f30:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f34:	2101      	movs	r1, #1
  400f36:	4b03      	ldr	r3, [pc, #12]	; (400f44 <nRF24_FlushTx+0x1c>)
  400f38:	4798      	blx	r3
	return cmd;
}
  400f3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f3e:	b003      	add	sp, #12
  400f40:	f85d fb04 	ldr.w	pc, [sp], #4
  400f44:	00400c15 	.word	0x00400c15

00400f48 <nRF24_getStatus>:
/**
 * \brief Read the Status register of the nRF24L01 transceiver
 * \return STATUS
 */
uint8_t nRF24_getStatus(void)
{
  400f48:	b500      	push	{lr}
  400f4a:	b083      	sub	sp, #12
	uint8_t cmd;
	cmd = RF24_NOP;
  400f4c:	a802      	add	r0, sp, #8
  400f4e:	23ff      	movs	r3, #255	; 0xff
  400f50:	f800 3d01 	strb.w	r3, [r0, #-1]!
	
	spi_master_transfer(&cmd, sizeof(cmd));
  400f54:	2101      	movs	r1, #1
  400f56:	4b03      	ldr	r3, [pc, #12]	; (400f64 <nRF24_getStatus+0x1c>)
  400f58:	4798      	blx	r3
	return cmd;
}
  400f5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f5e:	b003      	add	sp, #12
  400f60:	f85d fb04 	ldr.w	pc, [sp], #4
  400f64:	00400c15 	.word	0x00400c15

00400f68 <nRF24_setDataRate>:

bool nRF24_setDataRate(rf24_datarate_e speed)
{
  400f68:	b538      	push	{r3, r4, r5, lr}
  400f6a:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  400f6c:	2006      	movs	r0, #6
  400f6e:	4b0c      	ldr	r3, [pc, #48]	; (400fa0 <nRF24_setDataRate+0x38>)
  400f70:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  400f72:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	
	if (speed == RF24_2MBPS) {
  400f76:	2d01      	cmp	r5, #1
  400f78:	d00b      	beq.n	400f92 <nRF24_setDataRate+0x2a>
		txDelay = 190;
		#else // 16Mhz Arduino
		txDelay = 65;
		#endif
	}
	nRF24_writeRegister(RF_SETUP, setup);
  400f7a:	4621      	mov	r1, r4
  400f7c:	2006      	movs	r0, #6
  400f7e:	4b09      	ldr	r3, [pc, #36]	; (400fa4 <nRF24_setDataRate+0x3c>)
  400f80:	4798      	blx	r3
	
	if(nRF24_readRegister(RF_SETUP) == setup)
  400f82:	2006      	movs	r0, #6
  400f84:	4b06      	ldr	r3, [pc, #24]	; (400fa0 <nRF24_setDataRate+0x38>)
  400f86:	4798      	blx	r3
	result = true;
	
	return result;
}
  400f88:	4284      	cmp	r4, r0
  400f8a:	bf14      	ite	ne
  400f8c:	2000      	movne	r0, #0
  400f8e:	2001      	moveq	r0, #1
  400f90:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  400f92:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  400f96:	2241      	movs	r2, #65	; 0x41
  400f98:	4b03      	ldr	r3, [pc, #12]	; (400fa8 <nRF24_setDataRate+0x40>)
  400f9a:	601a      	str	r2, [r3, #0]
  400f9c:	e7ed      	b.n	400f7a <nRF24_setDataRate+0x12>
  400f9e:	bf00      	nop
  400fa0:	00400e25 	.word	0x00400e25
  400fa4:	00400e79 	.word	0x00400e79
  400fa8:	20400abc 	.word	0x20400abc

00400fac <getDataRate>:

rf24_datarate_e getDataRate(void)
{
  400fac:	b508      	push	{r3, lr}
	rf24_datarate_e result;
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  400fae:	2006      	movs	r0, #6
  400fb0:	4b04      	ldr	r3, [pc, #16]	; (400fc4 <getDataRate+0x18>)
  400fb2:	4798      	blx	r3
	
	if (dr == (1<<RF_DR_HIGH)) {
  400fb4:	f000 0028 	and.w	r0, r0, #40	; 0x28
	} else {
		// '00' = 1MBPS
		result = RF24_1MBPS;
	}
	return result;
}
  400fb8:	2808      	cmp	r0, #8
  400fba:	bf14      	ite	ne
  400fbc:	2000      	movne	r0, #0
  400fbe:	2001      	moveq	r0, #1
  400fc0:	bd08      	pop	{r3, pc}
  400fc2:	bf00      	nop
  400fc4:	00400e25 	.word	0x00400e25

00400fc8 <getCRCLength>:

rf24_crclength_e getCRCLength(void)
{
  400fc8:	b538      	push	{r3, r4, r5, lr}
	rf24_crclength_e result = RF24_CRC_DISABLED;
	
	
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  400fca:	2000      	movs	r0, #0
  400fcc:	4d08      	ldr	r5, [pc, #32]	; (400ff0 <getCRCLength+0x28>)
  400fce:	47a8      	blx	r5
  400fd0:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  400fd2:	2001      	movs	r0, #1
  400fd4:	47a8      	blx	r5
	
    if (config & (1<<EN_CRC) || AA) {
  400fd6:	f014 0f08 	tst.w	r4, #8
  400fda:	d102      	bne.n	400fe2 <getCRCLength+0x1a>
  400fdc:	b908      	cbnz	r0, 400fe2 <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  400fde:	2000      	movs	r0, #0
		    result = RF24_CRC_8;
	    }
    }

    return result;	
}
  400fe0:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  400fe2:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  400fe6:	2c00      	cmp	r4, #0
  400fe8:	bf14      	ite	ne
  400fea:	2002      	movne	r0, #2
  400fec:	2001      	moveq	r0, #1
  400fee:	bd38      	pop	{r3, r4, r5, pc}
  400ff0:	00400e25 	.word	0x00400e25

00400ff4 <nRF24_getPALevel>:

uint8_t nRF24_getPALevel(void)
{
  400ff4:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  400ff6:	2006      	movs	r0, #6
  400ff8:	4b02      	ldr	r3, [pc, #8]	; (401004 <nRF24_getPALevel+0x10>)
  400ffa:	4798      	blx	r3
}
  400ffc:	f3c0 0041 	ubfx	r0, r0, #1, #2
  401000:	bd08      	pop	{r3, pc}
  401002:	bf00      	nop
  401004:	00400e25 	.word	0x00400e25

00401008 <print_status>:
	return true;
}

#ifdef DEBUG
void print_status (uint8_t status)
{
  401008:	b510      	push	{r4, lr}
  40100a:	b084      	sub	sp, #16
  40100c:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  40100e:	f000 0301 	and.w	r3, r0, #1
  401012:	9302      	str	r3, [sp, #8]
  401014:	f3c0 0340 	ubfx	r3, r0, #1, #1
  401018:	9301      	str	r3, [sp, #4]
  40101a:	f3c0 1300 	ubfx	r3, r0, #4, #1
  40101e:	9300      	str	r3, [sp, #0]
  401020:	f3c0 1340 	ubfx	r3, r0, #5, #1
  401024:	f3c0 1280 	ubfx	r2, r0, #6, #1
  401028:	4802      	ldr	r0, [pc, #8]	; (401034 <print_status+0x2c>)
  40102a:	4c03      	ldr	r4, [pc, #12]	; (401038 <print_status+0x30>)
  40102c:	47a0      	blx	r4
}
  40102e:	b004      	add	sp, #16
  401030:	bd10      	pop	{r4, pc}
  401032:	bf00      	nop
  401034:	004048b4 	.word	0x004048b4
  401038:	00401a25 	.word	0x00401a25

0040103c <print_address_register>:

void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  40103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401040:	b083      	sub	sp, #12
  401042:	af00      	add	r7, sp, #0
  401044:	460e      	mov	r6, r1
  401046:	4614      	mov	r4, r2
	printf("%s\t", name);
  401048:	4601      	mov	r1, r0
  40104a:	481b      	ldr	r0, [pc, #108]	; (4010b8 <print_address_register+0x7c>)
  40104c:	4b1b      	ldr	r3, [pc, #108]	; (4010bc <print_address_register+0x80>)
  40104e:	4798      	blx	r3
	while(qty--){
  401050:	b35c      	cbz	r4, 4010aa <print_address_register+0x6e>
  401052:	4434      	add	r4, r6
  401054:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  401058:	f8df b070 	ldr.w	fp, [pc, #112]	; 4010cc <print_address_register+0x90>
	while(qty--){
  40105c:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  401060:	f89b 4000 	ldrb.w	r4, [fp]
  401064:	1de3      	adds	r3, r4, #7
  401066:	f023 0307 	bic.w	r3, r3, #7
  40106a:	ebad 0d03 	sub.w	sp, sp, r3
  40106e:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  401070:	f106 0901 	add.w	r9, r6, #1
  401074:	fa5f f989 	uxtb.w	r9, r9
  401078:	4622      	mov	r2, r4
  40107a:	4669      	mov	r1, sp
  40107c:	4630      	mov	r0, r6
  40107e:	4b10      	ldr	r3, [pc, #64]	; (4010c0 <print_address_register+0x84>)
  401080:	4798      	blx	r3
		
		printf(" 0x");
  401082:	4810      	ldr	r0, [pc, #64]	; (4010c4 <print_address_register+0x88>)
  401084:	4b0d      	ldr	r3, [pc, #52]	; (4010bc <print_address_register+0x80>)
  401086:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  401088:	3c01      	subs	r4, #1
  40108a:	192c      	adds	r4, r5, r4
  40108c:	d208      	bcs.n	4010a0 <print_address_register+0x64>
			printf("%02x", *bufptr);
  40108e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4010d0 <print_address_register+0x94>
  401092:	4e0a      	ldr	r6, [pc, #40]	; (4010bc <print_address_register+0x80>)
  401094:	f814 1901 	ldrb.w	r1, [r4], #-1
  401098:	4640      	mov	r0, r8
  40109a:	47b0      	blx	r6
		while(--bufptr >= buffer){
  40109c:	42a5      	cmp	r5, r4
  40109e:	d9f9      	bls.n	401094 <print_address_register+0x58>
  4010a0:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  4010a4:	464e      	mov	r6, r9
	while(qty--){
  4010a6:	45ca      	cmp	sl, r9
  4010a8:	d1d8      	bne.n	40105c <print_address_register+0x20>
		}
	}
	printf("\r\n");
  4010aa:	4807      	ldr	r0, [pc, #28]	; (4010c8 <print_address_register+0x8c>)
  4010ac:	4b03      	ldr	r3, [pc, #12]	; (4010bc <print_address_register+0x80>)
  4010ae:	4798      	blx	r3
}
  4010b0:	370c      	adds	r7, #12
  4010b2:	46bd      	mov	sp, r7
  4010b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010b8:	0040489c 	.word	0x0040489c
  4010bc:	00401a25 	.word	0x00401a25
  4010c0:	00400e4d 	.word	0x00400e4d
  4010c4:	004048a0 	.word	0x004048a0
  4010c8:	00404870 	.word	0x00404870
  4010cc:	20400010 	.word	0x20400010
  4010d0:	004048a4 	.word	0x004048a4

004010d4 <print_byte_register>:

void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  4010d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4010d8:	460d      	mov	r5, r1
  4010da:	4616      	mov	r6, r2
	printf("%s\t", name);
  4010dc:	4601      	mov	r1, r0
  4010de:	480d      	ldr	r0, [pc, #52]	; (401114 <print_byte_register+0x40>)
  4010e0:	4b0d      	ldr	r3, [pc, #52]	; (401118 <print_byte_register+0x44>)
  4010e2:	4798      	blx	r3
	while (qty--)
  4010e4:	b186      	cbz	r6, 401108 <print_byte_register+0x34>
  4010e6:	442e      	add	r6, r5
  4010e8:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  4010ea:	f8df 9034 	ldr.w	r9, [pc, #52]	; 401120 <print_byte_register+0x4c>
  4010ee:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401124 <print_byte_register+0x50>
  4010f2:	4f09      	ldr	r7, [pc, #36]	; (401118 <print_byte_register+0x44>)
  4010f4:	1c6c      	adds	r4, r5, #1
  4010f6:	b2e4      	uxtb	r4, r4
  4010f8:	4628      	mov	r0, r5
  4010fa:	47c8      	blx	r9
  4010fc:	4601      	mov	r1, r0
  4010fe:	4640      	mov	r0, r8
  401100:	47b8      	blx	r7
  401102:	4625      	mov	r5, r4
	while (qty--)
  401104:	42a6      	cmp	r6, r4
  401106:	d1f5      	bne.n	4010f4 <print_byte_register+0x20>
	}
	printf("\r\n");
  401108:	4804      	ldr	r0, [pc, #16]	; (40111c <print_byte_register+0x48>)
  40110a:	4b03      	ldr	r3, [pc, #12]	; (401118 <print_byte_register+0x44>)
  40110c:	4798      	blx	r3
  40110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401112:	bf00      	nop
  401114:	0040489c 	.word	0x0040489c
  401118:	00401a25 	.word	0x00401a25
  40111c:	00404870 	.word	0x00404870
  401120:	00400e25 	.word	0x00400e25
  401124:	004048ac 	.word	0x004048ac

00401128 <printDetails>:
}

void printDetails(void)
{
  401128:	b570      	push	{r4, r5, r6, lr}
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  40112a:	2105      	movs	r1, #5
  40112c:	4826      	ldr	r0, [pc, #152]	; (4011c8 <printDetails+0xa0>)
  40112e:	4d27      	ldr	r5, [pc, #156]	; (4011cc <printDetails+0xa4>)
  401130:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  401132:	4b27      	ldr	r3, [pc, #156]	; (4011d0 <printDetails+0xa8>)
  401134:	4798      	blx	r3
  401136:	4b27      	ldr	r3, [pc, #156]	; (4011d4 <printDetails+0xac>)
  401138:	4798      	blx	r3
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  40113a:	2202      	movs	r2, #2
  40113c:	210a      	movs	r1, #10
  40113e:	4826      	ldr	r0, [pc, #152]	; (4011d8 <printDetails+0xb0>)
  401140:	4e26      	ldr	r6, [pc, #152]	; (4011dc <printDetails+0xb4>)
  401142:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  401144:	2204      	movs	r2, #4
  401146:	210c      	movs	r1, #12
  401148:	4825      	ldr	r0, [pc, #148]	; (4011e0 <printDetails+0xb8>)
  40114a:	4c26      	ldr	r4, [pc, #152]	; (4011e4 <printDetails+0xbc>)
  40114c:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  40114e:	2201      	movs	r2, #1
  401150:	2110      	movs	r1, #16
  401152:	4825      	ldr	r0, [pc, #148]	; (4011e8 <printDetails+0xc0>)
  401154:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  401156:	2206      	movs	r2, #6
  401158:	2111      	movs	r1, #17
  40115a:	4824      	ldr	r0, [pc, #144]	; (4011ec <printDetails+0xc4>)
  40115c:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  40115e:	2201      	movs	r2, #1
  401160:	2103      	movs	r1, #3
  401162:	4823      	ldr	r0, [pc, #140]	; (4011f0 <printDetails+0xc8>)
  401164:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  401166:	2201      	movs	r2, #1
  401168:	4611      	mov	r1, r2
  40116a:	4822      	ldr	r0, [pc, #136]	; (4011f4 <printDetails+0xcc>)
  40116c:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  40116e:	2201      	movs	r2, #1
  401170:	2102      	movs	r1, #2
  401172:	4821      	ldr	r0, [pc, #132]	; (4011f8 <printDetails+0xd0>)
  401174:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  401176:	2201      	movs	r2, #1
  401178:	2105      	movs	r1, #5
  40117a:	4820      	ldr	r0, [pc, #128]	; (4011fc <printDetails+0xd4>)
  40117c:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  40117e:	2201      	movs	r2, #1
  401180:	2106      	movs	r1, #6
  401182:	481f      	ldr	r0, [pc, #124]	; (401200 <printDetails+0xd8>)
  401184:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  401186:	2201      	movs	r2, #1
  401188:	2100      	movs	r1, #0
  40118a:	481e      	ldr	r0, [pc, #120]	; (401204 <printDetails+0xdc>)
  40118c:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  40118e:	2202      	movs	r2, #2
  401190:	211c      	movs	r1, #28
  401192:	481d      	ldr	r0, [pc, #116]	; (401208 <printDetails+0xe0>)
  401194:	47a0      	blx	r4
	 
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  401196:	4b1d      	ldr	r3, [pc, #116]	; (40120c <printDetails+0xe4>)
  401198:	4798      	blx	r3
  40119a:	4b1d      	ldr	r3, [pc, #116]	; (401210 <printDetails+0xe8>)
  40119c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011a0:	481c      	ldr	r0, [pc, #112]	; (401214 <printDetails+0xec>)
  4011a2:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  4011a4:	491c      	ldr	r1, [pc, #112]	; (401218 <printDetails+0xf0>)
  4011a6:	481d      	ldr	r0, [pc, #116]	; (40121c <printDetails+0xf4>)
  4011a8:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  4011aa:	4b1d      	ldr	r3, [pc, #116]	; (401220 <printDetails+0xf8>)
  4011ac:	4798      	blx	r3
  4011ae:	4b1d      	ldr	r3, [pc, #116]	; (401224 <printDetails+0xfc>)
  4011b0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011b4:	481c      	ldr	r0, [pc, #112]	; (401228 <printDetails+0x100>)
  4011b6:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  4011b8:	4b1c      	ldr	r3, [pc, #112]	; (40122c <printDetails+0x104>)
  4011ba:	4798      	blx	r3
  4011bc:	4b1c      	ldr	r3, [pc, #112]	; (401230 <printDetails+0x108>)
  4011be:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011c2:	481c      	ldr	r0, [pc, #112]	; (401234 <printDetails+0x10c>)
  4011c4:	47a8      	blx	r5
  4011c6:	bd70      	pop	{r4, r5, r6, pc}
  4011c8:	004047b4 	.word	0x004047b4
  4011cc:	00401a25 	.word	0x00401a25
  4011d0:	00400f49 	.word	0x00400f49
  4011d4:	00401009 	.word	0x00401009
  4011d8:	004047cc 	.word	0x004047cc
  4011dc:	0040103d 	.word	0x0040103d
  4011e0:	004047dc 	.word	0x004047dc
  4011e4:	004010d5 	.word	0x004010d5
  4011e8:	004047ec 	.word	0x004047ec
  4011ec:	004047f8 	.word	0x004047f8
  4011f0:	00404804 	.word	0x00404804
  4011f4:	00404810 	.word	0x00404810
  4011f8:	00404818 	.word	0x00404818
  4011fc:	00404824 	.word	0x00404824
  401200:	0040482c 	.word	0x0040482c
  401204:	00404838 	.word	0x00404838
  401208:	00404840 	.word	0x00404840
  40120c:	00400fad 	.word	0x00400fad
  401210:	0040493c 	.word	0x0040493c
  401214:	00404850 	.word	0x00404850
  401218:	00404948 	.word	0x00404948
  40121c:	00404864 	.word	0x00404864
  401220:	00400fc9 	.word	0x00400fc9
  401224:	00404918 	.word	0x00404918
  401228:	00404874 	.word	0x00404874
  40122c:	00400ff5 	.word	0x00400ff5
  401230:	00404974 	.word	0x00404974
  401234:	00404888 	.word	0x00404888

00401238 <nRF24_closeReadingPipe>:
	}
	return 1;
}

void nRF24_closeReadingPipe(uint8_t pipe)
 {
  401238:	b510      	push	{r4, lr}
  40123a:	4604      	mov	r4, r0
	 nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) & ~(1<< pipe_enable_s[pipe]));
  40123c:	2002      	movs	r0, #2
  40123e:	4b06      	ldr	r3, [pc, #24]	; (401258 <nRF24_closeReadingPipe+0x20>)
  401240:	4798      	blx	r3
  401242:	4b06      	ldr	r3, [pc, #24]	; (40125c <nRF24_closeReadingPipe+0x24>)
  401244:	5d1b      	ldrb	r3, [r3, r4]
  401246:	2101      	movs	r1, #1
  401248:	4099      	lsls	r1, r3
  40124a:	ea20 0101 	bic.w	r1, r0, r1
  40124e:	b2c9      	uxtb	r1, r1
  401250:	2002      	movs	r0, #2
  401252:	4b03      	ldr	r3, [pc, #12]	; (401260 <nRF24_closeReadingPipe+0x28>)
  401254:	4798      	blx	r3
  401256:	bd10      	pop	{r4, pc}
  401258:	00400e25 	.word	0x00400e25
  40125c:	0040479c 	.word	0x0040479c
  401260:	00400e79 	.word	0x00400e79

00401264 <nRF24_setCRCLength>:
{
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
}

void nRF24_setCRCLength(rf24_crclength_e length)
{
  401264:	b510      	push	{r4, lr}
  401266:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  401268:	2000      	movs	r0, #0
  40126a:	4b07      	ldr	r3, [pc, #28]	; (401288 <nRF24_setCRCLength+0x24>)
  40126c:	4798      	blx	r3
  40126e:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	if (length == RF24_CRC_DISABLED){
  401272:	b12c      	cbz	r4, 401280 <nRF24_setCRCLength+0x1c>
		// do nothing we turned it off above
	} 
	else if (length == RF24_CRC_8){
  401274:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  401276:	bf0c      	ite	eq
  401278:	f041 0108 	orreq.w	r1, r1, #8
	} 
	else //CRC 16 bit
	{
		config |= (1<<EN_CRC);
		config |= (1<<CRCO);
  40127c:	f041 010c 	orrne.w	r1, r1, #12
	}
	nRF24_writeRegister(NRF_CONFIG, config);
  401280:	2000      	movs	r0, #0
  401282:	4b02      	ldr	r3, [pc, #8]	; (40128c <nRF24_setCRCLength+0x28>)
  401284:	4798      	blx	r3
  401286:	bd10      	pop	{r4, pc}
  401288:	00400e25 	.word	0x00400e25
  40128c:	00400e79 	.word	0x00400e79

00401290 <toggle_features>:
}

void toggle_features(void)
{
  401290:	b500      	push	{lr}
  401292:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  401294:	4b05      	ldr	r3, [pc, #20]	; (4012ac <toggle_features+0x1c>)
  401296:	881b      	ldrh	r3, [r3, #0]
  401298:	a802      	add	r0, sp, #8
  40129a:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  40129e:	2102      	movs	r1, #2
  4012a0:	4b03      	ldr	r3, [pc, #12]	; (4012b0 <toggle_features+0x20>)
  4012a2:	4798      	blx	r3
}
  4012a4:	b003      	add	sp, #12
  4012a6:	f85d fb04 	ldr.w	pc, [sp], #4
  4012aa:	bf00      	nop
  4012ac:	004046f4 	.word	0x004046f4
  4012b0:	00400c15 	.word	0x00400c15

004012b4 <nRF24_setChannel>:

void nRF24_setChannel(uint8_t channel)
{
  4012b4:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  4012b6:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  4012b8:	bf8c      	ite	hi
  4012ba:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  4012bc:	4601      	movls	r1, r0
  4012be:	2005      	movs	r0, #5
  4012c0:	4b01      	ldr	r3, [pc, #4]	; (4012c8 <nRF24_setChannel+0x14>)
  4012c2:	4798      	blx	r3
  4012c4:	bd08      	pop	{r3, pc}
  4012c6:	bf00      	nop
  4012c8:	00400e79 	.word	0x00400e79

004012cc <nRF24_powerUp>:
}

void nRF24_powerUp(void)
{
  4012cc:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  4012ce:	2000      	movs	r0, #0
  4012d0:	4b07      	ldr	r3, [pc, #28]	; (4012f0 <nRF24_powerUp+0x24>)
  4012d2:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  4012d4:	f010 0f02 	tst.w	r0, #2
  4012d8:	d000      	beq.n	4012dc <nRF24_powerUp+0x10>
  4012da:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  4012dc:	f040 0102 	orr.w	r1, r0, #2
  4012e0:	b2c9      	uxtb	r1, r1
  4012e2:	2000      	movs	r0, #0
  4012e4:	4b03      	ldr	r3, [pc, #12]	; (4012f4 <nRF24_powerUp+0x28>)
  4012e6:	4798      	blx	r3
		delay_ms(5);
  4012e8:	4803      	ldr	r0, [pc, #12]	; (4012f8 <nRF24_powerUp+0x2c>)
  4012ea:	4b04      	ldr	r3, [pc, #16]	; (4012fc <nRF24_powerUp+0x30>)
  4012ec:	4798      	blx	r3
	}
}
  4012ee:	e7f4      	b.n	4012da <nRF24_powerUp+0xe>
  4012f0:	00400e25 	.word	0x00400e25
  4012f4:	00400e79 	.word	0x00400e79
  4012f8:	0003dbc2 	.word	0x0003dbc2
  4012fc:	20400001 	.word	0x20400001

00401300 <nRF24_startListening>:
	ioport_set_pin_level(CE, 0);
	nRF24_writeRegister(NRF_CONFIG, nRF24_readRegister(NRF_CONFIG) & ~(1<<PWR_UP));
}

void nRF24_startListening(void)
{
  401300:	b510      	push	{r4, lr}
	nRF24_powerUp();
  401302:	4b14      	ldr	r3, [pc, #80]	; (401354 <nRF24_startListening+0x54>)
  401304:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, nRF24_readRegister(NRF_CONFIG) | (1<<PRIM_RX)); 
  401306:	2000      	movs	r0, #0
  401308:	4b13      	ldr	r3, [pc, #76]	; (401358 <nRF24_startListening+0x58>)
  40130a:	4798      	blx	r3
  40130c:	f040 0101 	orr.w	r1, r0, #1
  401310:	b2c9      	uxtb	r1, r1
  401312:	2000      	movs	r0, #0
  401314:	4c11      	ldr	r4, [pc, #68]	; (40135c <nRF24_startListening+0x5c>)
  401316:	47a0      	blx	r4
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  401318:	2170      	movs	r1, #112	; 0x70
  40131a:	2007      	movs	r0, #7
  40131c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40131e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401322:	4b0f      	ldr	r3, [pc, #60]	; (401360 <nRF24_startListening+0x60>)
  401324:	631a      	str	r2, [r3, #48]	; 0x30
	
	ioport_set_pin_level(CE, 1);
	
	if (pipe0_reading_address[0] > 0){
  401326:	4b0f      	ldr	r3, [pc, #60]	; (401364 <nRF24_startListening+0x64>)
  401328:	781b      	ldrb	r3, [r3, #0]
  40132a:	b163      	cbz	r3, 401346 <nRF24_startListening+0x46>
		nRF_writeRegister(RX_ADDR_P0, pipe0_reading_address, addr_width);
  40132c:	4b0e      	ldr	r3, [pc, #56]	; (401368 <nRF24_startListening+0x68>)
  40132e:	781a      	ldrb	r2, [r3, #0]
  401330:	490c      	ldr	r1, [pc, #48]	; (401364 <nRF24_startListening+0x64>)
  401332:	200a      	movs	r0, #10
  401334:	4b0d      	ldr	r3, [pc, #52]	; (40136c <nRF24_startListening+0x6c>)
  401336:	4798      	blx	r3
	} else {
		nRF24_closeReadingPipe(0);
	}
	
	if (nRF24_readRegister(FEATURE) & (1<<EN_ACK_PAY)){
  401338:	201d      	movs	r0, #29
  40133a:	4b07      	ldr	r3, [pc, #28]	; (401358 <nRF24_startListening+0x58>)
  40133c:	4798      	blx	r3
  40133e:	f010 0f02 	tst.w	r0, #2
  401342:	d104      	bne.n	40134e <nRF24_startListening+0x4e>
  401344:	bd10      	pop	{r4, pc}
		nRF24_closeReadingPipe(0);
  401346:	2000      	movs	r0, #0
  401348:	4b09      	ldr	r3, [pc, #36]	; (401370 <nRF24_startListening+0x70>)
  40134a:	4798      	blx	r3
  40134c:	e7f4      	b.n	401338 <nRF24_startListening+0x38>
		nRF24_FlushTx();
  40134e:	4b09      	ldr	r3, [pc, #36]	; (401374 <nRF24_startListening+0x74>)
  401350:	4798      	blx	r3
	}
}
  401352:	e7f7      	b.n	401344 <nRF24_startListening+0x44>
  401354:	004012cd 	.word	0x004012cd
  401358:	00400e25 	.word	0x00400e25
  40135c:	00400e79 	.word	0x00400e79
  401360:	400e1200 	.word	0x400e1200
  401364:	20400aa8 	.word	0x20400aa8
  401368:	20400010 	.word	0x20400010
  40136c:	00400ea5 	.word	0x00400ea5
  401370:	00401239 	.word	0x00401239
  401374:	00400f29 	.word	0x00400f29

00401378 <nRF24_begin>:
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
}

bool nRF24_begin(void)
{
  401378:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40137a:	4b19      	ldr	r3, [pc, #100]	; (4013e0 <nRF24_begin+0x68>)
  40137c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401380:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401382:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401386:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  401388:	210c      	movs	r1, #12
  40138a:	2000      	movs	r0, #0
  40138c:	4c15      	ldr	r4, [pc, #84]	; (4013e4 <nRF24_begin+0x6c>)
  40138e:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  401390:	215f      	movs	r1, #95	; 0x5f
  401392:	2004      	movs	r0, #4
  401394:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  401396:	2000      	movs	r0, #0
  401398:	4b13      	ldr	r3, [pc, #76]	; (4013e8 <nRF24_begin+0x70>)
  40139a:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  40139c:	2002      	movs	r0, #2
  40139e:	4b13      	ldr	r3, [pc, #76]	; (4013ec <nRF24_begin+0x74>)
  4013a0:	4798      	blx	r3
	toggle_features();
  4013a2:	4b13      	ldr	r3, [pc, #76]	; (4013f0 <nRF24_begin+0x78>)
  4013a4:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4013a6:	2170      	movs	r1, #112	; 0x70
  4013a8:	2007      	movs	r0, #7
  4013aa:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  4013ac:	204c      	movs	r0, #76	; 0x4c
  4013ae:	4b11      	ldr	r3, [pc, #68]	; (4013f4 <nRF24_begin+0x7c>)
  4013b0:	4798      	blx	r3
	//nRF24_setAddressWidth(addr_width);
	
	nRF24_FlushRx();
  4013b2:	4b11      	ldr	r3, [pc, #68]	; (4013f8 <nRF24_begin+0x80>)
  4013b4:	4798      	blx	r3
	nRF24_FlushTx();
  4013b6:	4b11      	ldr	r3, [pc, #68]	; (4013fc <nRF24_begin+0x84>)
  4013b8:	4798      	blx	r3
	
	nRF24_powerUp();
  4013ba:	4b11      	ldr	r3, [pc, #68]	; (401400 <nRF24_begin+0x88>)
  4013bc:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4013be:	2000      	movs	r0, #0
  4013c0:	4d10      	ldr	r5, [pc, #64]	; (401404 <nRF24_begin+0x8c>)
  4013c2:	47a8      	blx	r5
  4013c4:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4013c8:	2000      	movs	r0, #0
  4013ca:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  4013cc:	2006      	movs	r0, #6
  4013ce:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  4013d0:	3801      	subs	r0, #1
  4013d2:	b2c0      	uxtb	r0, r0
}
  4013d4:	28fd      	cmp	r0, #253	; 0xfd
  4013d6:	bf8c      	ite	hi
  4013d8:	2000      	movhi	r0, #0
  4013da:	2001      	movls	r0, #1
  4013dc:	bd38      	pop	{r3, r4, r5, pc}
  4013de:	bf00      	nop
  4013e0:	400e1200 	.word	0x400e1200
  4013e4:	00400e79 	.word	0x00400e79
  4013e8:	00400f69 	.word	0x00400f69
  4013ec:	00401265 	.word	0x00401265
  4013f0:	00401291 	.word	0x00401291
  4013f4:	004012b5 	.word	0x004012b5
  4013f8:	00400f09 	.word	0x00400f09
  4013fc:	00400f29 	.word	0x00400f29
  401400:	004012cd 	.word	0x004012cd
  401404:	00400e25 	.word	0x00400e25

00401408 <nRF24_openWritingPipe>:

void nRF24_openWritingPipe(uint32_t address)
{
  401408:	b570      	push	{r4, r5, r6, lr}
  40140a:	b082      	sub	sp, #8
  40140c:	ac02      	add	r4, sp, #8
  40140e:	f844 0d04 	str.w	r0, [r4, #-4]!
	nRF_writeRegister(RX_ADDR_P0, (uint8_t *)(&address), addr_width);
  401412:	4e08      	ldr	r6, [pc, #32]	; (401434 <nRF24_openWritingPipe+0x2c>)
  401414:	7832      	ldrb	r2, [r6, #0]
  401416:	4621      	mov	r1, r4
  401418:	200a      	movs	r0, #10
  40141a:	4d07      	ldr	r5, [pc, #28]	; (401438 <nRF24_openWritingPipe+0x30>)
  40141c:	47a8      	blx	r5
	nRF_writeRegister(TX_ADDR, (uint8_t *)(&address), addr_width);
  40141e:	7832      	ldrb	r2, [r6, #0]
  401420:	4621      	mov	r1, r4
  401422:	2010      	movs	r0, #16
  401424:	47a8      	blx	r5
	
	nRF24_writeRegister(RX_PW_P0, payload_size);
  401426:	4b05      	ldr	r3, [pc, #20]	; (40143c <nRF24_openWritingPipe+0x34>)
  401428:	7819      	ldrb	r1, [r3, #0]
  40142a:	2011      	movs	r0, #17
  40142c:	4b04      	ldr	r3, [pc, #16]	; (401440 <nRF24_openWritingPipe+0x38>)
  40142e:	4798      	blx	r3
}
  401430:	b002      	add	sp, #8
  401432:	bd70      	pop	{r4, r5, r6, pc}
  401434:	20400010 	.word	0x20400010
  401438:	00400ea5 	.word	0x00400ea5
  40143c:	20400011 	.word	0x20400011
  401440:	00400e79 	.word	0x00400e79

00401444 <nRF24_openReadingPipe>:
{
	return payload_size;
}

void nRF24_openReadingPipe(uint8_t pipe, uint32_t address)
{	
  401444:	b510      	push	{r4, lr}
  401446:	b082      	sub	sp, #8
  401448:	9101      	str	r1, [sp, #4]
	if (pipe == 0){
  40144a:	4604      	mov	r4, r0
  40144c:	b1f0      	cbz	r0, 40148c <nRF24_openReadingPipe+0x48>
		memcpy(pipe0_reading_address, &address, addr_width);
	}
	if (pipe <= 5){
  40144e:	2805      	cmp	r0, #5
  401450:	d80d      	bhi.n	40146e <nRF24_openReadingPipe+0x2a>
		if (pipe < 2){
  401452:	2801      	cmp	r0, #1
  401454:	d920      	bls.n	401498 <nRF24_openReadingPipe+0x54>
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
		} else {
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), 1);
  401456:	2201      	movs	r2, #1
  401458:	a901      	add	r1, sp, #4
  40145a:	4b13      	ldr	r3, [pc, #76]	; (4014a8 <nRF24_openReadingPipe+0x64>)
  40145c:	5c18      	ldrb	r0, [r3, r0]
  40145e:	4b13      	ldr	r3, [pc, #76]	; (4014ac <nRF24_openReadingPipe+0x68>)
  401460:	4798      	blx	r3
		}
		nRF24_writeRegister(pipe_size_s[pipe], payload_size);
  401462:	4b13      	ldr	r3, [pc, #76]	; (4014b0 <nRF24_openReadingPipe+0x6c>)
  401464:	7819      	ldrb	r1, [r3, #0]
  401466:	4b13      	ldr	r3, [pc, #76]	; (4014b4 <nRF24_openReadingPipe+0x70>)
  401468:	5d18      	ldrb	r0, [r3, r4]
  40146a:	4b13      	ldr	r3, [pc, #76]	; (4014b8 <nRF24_openReadingPipe+0x74>)
  40146c:	4798      	blx	r3
	}
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister((EN_RXADDR) | (1 << pipe_enable_s[pipe])));
  40146e:	4b13      	ldr	r3, [pc, #76]	; (4014bc <nRF24_openReadingPipe+0x78>)
  401470:	5d1b      	ldrb	r3, [r3, r4]
  401472:	2001      	movs	r0, #1
  401474:	4098      	lsls	r0, r3
  401476:	f040 0002 	orr.w	r0, r0, #2
  40147a:	b2c0      	uxtb	r0, r0
  40147c:	4b10      	ldr	r3, [pc, #64]	; (4014c0 <nRF24_openReadingPipe+0x7c>)
  40147e:	4798      	blx	r3
  401480:	4601      	mov	r1, r0
  401482:	2002      	movs	r0, #2
  401484:	4b0c      	ldr	r3, [pc, #48]	; (4014b8 <nRF24_openReadingPipe+0x74>)
  401486:	4798      	blx	r3
}
  401488:	b002      	add	sp, #8
  40148a:	bd10      	pop	{r4, pc}
		memcpy(pipe0_reading_address, &address, addr_width);
  40148c:	4b0d      	ldr	r3, [pc, #52]	; (4014c4 <nRF24_openReadingPipe+0x80>)
  40148e:	781a      	ldrb	r2, [r3, #0]
  401490:	a901      	add	r1, sp, #4
  401492:	480d      	ldr	r0, [pc, #52]	; (4014c8 <nRF24_openReadingPipe+0x84>)
  401494:	4b0d      	ldr	r3, [pc, #52]	; (4014cc <nRF24_openReadingPipe+0x88>)
  401496:	4798      	blx	r3
			nRF_writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
  401498:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <nRF24_openReadingPipe+0x80>)
  40149a:	781a      	ldrb	r2, [r3, #0]
  40149c:	a901      	add	r1, sp, #4
  40149e:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <nRF24_openReadingPipe+0x64>)
  4014a0:	5d18      	ldrb	r0, [r3, r4]
  4014a2:	4b02      	ldr	r3, [pc, #8]	; (4014ac <nRF24_openReadingPipe+0x68>)
  4014a4:	4798      	blx	r3
  4014a6:	e7dc      	b.n	401462 <nRF24_openReadingPipe+0x1e>
  4014a8:	004047a4 	.word	0x004047a4
  4014ac:	00400ea5 	.word	0x00400ea5
  4014b0:	20400011 	.word	0x20400011
  4014b4:	004047ac 	.word	0x004047ac
  4014b8:	00400e79 	.word	0x00400e79
  4014bc:	0040479c 	.word	0x0040479c
  4014c0:	00400e25 	.word	0x00400e25
  4014c4:	20400010 	.word	0x20400010
  4014c8:	20400aa8 	.word	0x20400aa8
  4014cc:	00401a4d 	.word	0x00401a4d

004014d0 <nRF24_setPALevel>:
	}
	return 0;
}

void nRF24_setPALevel(uint8_t level)
{
  4014d0:	b510      	push	{r4, lr}
  4014d2:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  4014d4:	2006      	movs	r0, #6
  4014d6:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <nRF24_setPALevel+0x28>)
  4014d8:	4798      	blx	r3
  4014da:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	
	
	if (level > 3) {
  4014de:	2c03      	cmp	r4, #3
  4014e0:	d808      	bhi.n	4014f4 <nRF24_setPALevel+0x24>
		level = (RF_PA_MAX << 1) + 1;
	} else {
		level = (level << 1) + 1;
  4014e2:	0064      	lsls	r4, r4, #1
  4014e4:	3401      	adds	r4, #1
  4014e6:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	}
	nRF24_writeRegister(RF_SETUP, setup |= level);
  4014ea:	4321      	orrs	r1, r4
  4014ec:	2006      	movs	r0, #6
  4014ee:	4b03      	ldr	r3, [pc, #12]	; (4014fc <nRF24_setPALevel+0x2c>)
  4014f0:	4798      	blx	r3
  4014f2:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  4014f4:	2407      	movs	r4, #7
  4014f6:	e7f8      	b.n	4014ea <nRF24_setPALevel+0x1a>
  4014f8:	00400e25 	.word	0x00400e25
  4014fc:	00400e79 	.word	0x00400e79

00401500 <main>:
{
	return nRFwrite(buf, len, 0);
}

int main (void)
{
  401500:	b580      	push	{r7, lr}
  401502:	b086      	sub	sp, #24
	
	/* Initialize the SAM system. */
	sysclk_init();
  401504:	4b47      	ldr	r3, [pc, #284]	; (401624 <main+0x124>)
  401506:	4798      	blx	r3
	board_init();
  401508:	4b47      	ldr	r3, [pc, #284]	; (401628 <main+0x128>)
  40150a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40150c:	4c47      	ldr	r4, [pc, #284]	; (40162c <main+0x12c>)
  40150e:	4b48      	ldr	r3, [pc, #288]	; (401630 <main+0x130>)
  401510:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401512:	4a48      	ldr	r2, [pc, #288]	; (401634 <main+0x134>)
  401514:	4b48      	ldr	r3, [pc, #288]	; (401638 <main+0x138>)
  401516:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401518:	4a48      	ldr	r2, [pc, #288]	; (40163c <main+0x13c>)
  40151a:	4b49      	ldr	r3, [pc, #292]	; (401640 <main+0x140>)
  40151c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40151e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401522:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  401524:	23c0      	movs	r3, #192	; 0xc0
  401526:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  401528:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40152c:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40152e:	2500      	movs	r5, #0
  401530:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401532:	9504      	str	r5, [sp, #16]
  401534:	200e      	movs	r0, #14
  401536:	4b43      	ldr	r3, [pc, #268]	; (401644 <main+0x144>)
  401538:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40153a:	4a43      	ldr	r2, [pc, #268]	; (401648 <main+0x148>)
  40153c:	4669      	mov	r1, sp
  40153e:	4620      	mov	r0, r4
  401540:	4b42      	ldr	r3, [pc, #264]	; (40164c <main+0x14c>)
  401542:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401544:	4620      	mov	r0, r4
  401546:	4b42      	ldr	r3, [pc, #264]	; (401650 <main+0x150>)
  401548:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40154a:	4620      	mov	r0, r4
  40154c:	4b41      	ldr	r3, [pc, #260]	; (401654 <main+0x154>)
  40154e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401550:	4e41      	ldr	r6, [pc, #260]	; (401658 <main+0x158>)
  401552:	6833      	ldr	r3, [r6, #0]
  401554:	4629      	mov	r1, r5
  401556:	6898      	ldr	r0, [r3, #8]
  401558:	4c40      	ldr	r4, [pc, #256]	; (40165c <main+0x15c>)
  40155a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40155c:	6833      	ldr	r3, [r6, #0]
  40155e:	4629      	mov	r1, r5
  401560:	6858      	ldr	r0, [r3, #4]
  401562:	47a0      	blx	r4

	/* Initialize the console UART. */
	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  401564:	483e      	ldr	r0, [pc, #248]	; (401660 <main+0x160>)
  401566:	4c3f      	ldr	r4, [pc, #252]	; (401664 <main+0x164>)
  401568:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40156a:	4b3f      	ldr	r3, [pc, #252]	; (401668 <main+0x168>)
  40156c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401570:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40157c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401580:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401584:	601a      	str	r2, [r3, #0]
	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  401586:	4939      	ldr	r1, [pc, #228]	; (40166c <main+0x16c>)
  401588:	4839      	ldr	r0, [pc, #228]	; (401670 <main+0x170>)
  40158a:	4b3a      	ldr	r3, [pc, #232]	; (401674 <main+0x174>)
  40158c:	4798      	blx	r3
	g_uc_role = MASTER_MODE;
  40158e:	4b3a      	ldr	r3, [pc, #232]	; (401678 <main+0x178>)
  401590:	601d      	str	r5, [r3, #0]
	puts("-I- Initialize SPI as master\r");
  401592:	483a      	ldr	r0, [pc, #232]	; (40167c <main+0x17c>)
  401594:	47a0      	blx	r4
	spi_enable_clock(SPI_MASTER_BASE);
  401596:	4c3a      	ldr	r4, [pc, #232]	; (401680 <main+0x180>)
  401598:	4620      	mov	r0, r4
  40159a:	4b3a      	ldr	r3, [pc, #232]	; (401684 <main+0x184>)
  40159c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40159e:	2602      	movs	r6, #2
  4015a0:	6026      	str	r6, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4015a2:	2380      	movs	r3, #128	; 0x80
  4015a4:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4015a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4015aa:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4015ac:	6863      	ldr	r3, [r4, #4]
  4015ae:	f043 0301 	orr.w	r3, r3, #1
  4015b2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4015b4:	6863      	ldr	r3, [r4, #4]
  4015b6:	f043 0310 	orr.w	r3, r3, #16
  4015ba:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
  4015bc:	210d      	movs	r1, #13
  4015be:	4620      	mov	r0, r4
  4015c0:	4b31      	ldr	r3, [pc, #196]	; (401688 <main+0x188>)
  4015c2:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4015c4:	462a      	mov	r2, r5
  4015c6:	2101      	movs	r1, #1
  4015c8:	4620      	mov	r0, r4
  4015ca:	4b30      	ldr	r3, [pc, #192]	; (40168c <main+0x18c>)
  4015cc:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  4015ce:	2201      	movs	r2, #1
  4015d0:	4611      	mov	r1, r2
  4015d2:	4620      	mov	r0, r4
  4015d4:	4b2e      	ldr	r3, [pc, #184]	; (401690 <main+0x190>)
  4015d6:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL,
  4015d8:	462a      	mov	r2, r5
  4015da:	2101      	movs	r1, #1
  4015dc:	4620      	mov	r0, r4
  4015de:	4b2d      	ldr	r3, [pc, #180]	; (401694 <main+0x194>)
  4015e0:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL,
  4015e2:	221e      	movs	r2, #30
  4015e4:	2101      	movs	r1, #1
  4015e6:	4620      	mov	r0, r4
  4015e8:	4b2b      	ldr	r3, [pc, #172]	; (401698 <main+0x198>)
  4015ea:	4798      	blx	r3
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
  4015ec:	2310      	movs	r3, #16
  4015ee:	2240      	movs	r2, #64	; 0x40
  4015f0:	2101      	movs	r1, #1
  4015f2:	4620      	mov	r0, r4
  4015f4:	4f29      	ldr	r7, [pc, #164]	; (40169c <main+0x19c>)
  4015f6:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4015f8:	2701      	movs	r7, #1
  4015fa:	6027      	str	r7, [r4, #0]
	/* Insert application code here, after the board has been initialized. */
	
	spi_set_clock_configuration(gs_ul_spi_clock);
		
	nRF24_begin();
  4015fc:	4b28      	ldr	r3, [pc, #160]	; (4016a0 <main+0x1a0>)
  4015fe:	4798      	blx	r3
	nRF24_openReadingPipe(1, listeningPipes[1]);
  401600:	4928      	ldr	r1, [pc, #160]	; (4016a4 <main+0x1a4>)
  401602:	4638      	mov	r0, r7
  401604:	4c28      	ldr	r4, [pc, #160]	; (4016a8 <main+0x1a8>)
  401606:	47a0      	blx	r4
	nRF24_openReadingPipe(2, listeningPipes[2]);
  401608:	4928      	ldr	r1, [pc, #160]	; (4016ac <main+0x1ac>)
  40160a:	4630      	mov	r0, r6
  40160c:	47a0      	blx	r4
	nRF24_openWritingPipe(listeningPipes[localAddr]);
  40160e:	4828      	ldr	r0, [pc, #160]	; (4016b0 <main+0x1b0>)
  401610:	4b28      	ldr	r3, [pc, #160]	; (4016b4 <main+0x1b4>)
  401612:	4798      	blx	r3
	nRF24_setPALevel(RF_PA_MIN);
  401614:	4628      	mov	r0, r5
  401616:	4b28      	ldr	r3, [pc, #160]	; (4016b8 <main+0x1b8>)
  401618:	4798      	blx	r3
	nRF24_startListening();
  40161a:	4b28      	ldr	r3, [pc, #160]	; (4016bc <main+0x1bc>)
  40161c:	4798      	blx	r3

#ifdef DEBUG	
	printDetails();
  40161e:	4b28      	ldr	r3, [pc, #160]	; (4016c0 <main+0x1c0>)
  401620:	4798      	blx	r3
  401622:	e7fe      	b.n	401622 <main+0x122>
  401624:	004004d9 	.word	0x004004d9
  401628:	00400549 	.word	0x00400549
  40162c:	40028000 	.word	0x40028000
  401630:	20400a94 	.word	0x20400a94
  401634:	00400d51 	.word	0x00400d51
  401638:	20400a90 	.word	0x20400a90
  40163c:	00400c75 	.word	0x00400c75
  401640:	20400a8c 	.word	0x20400a8c
  401644:	00400941 	.word	0x00400941
  401648:	08f0d180 	.word	0x08f0d180
  40164c:	00400295 	.word	0x00400295
  401650:	004002e9 	.word	0x004002e9
  401654:	004002ef 	.word	0x004002ef
  401658:	20400014 	.word	0x20400014
  40165c:	00401cc9 	.word	0x00401cc9
  401660:	004046f8 	.word	0x004046f8
  401664:	00401cb9 	.word	0x00401cb9
  401668:	e000e100 	.word	0xe000e100
  40166c:	004c4b40 	.word	0x004c4b40
  401670:	0040474c 	.word	0x0040474c
  401674:	00401a25 	.word	0x00401a25
  401678:	20400a98 	.word	0x20400a98
  40167c:	0040476c 	.word	0x0040476c
  401680:	40008000 	.word	0x40008000
  401684:	00400375 	.word	0x00400375
  401688:	004003a1 	.word	0x004003a1
  40168c:	0040041b 	.word	0x0040041b
  401690:	00400439 	.word	0x00400439
  401694:	00400457 	.word	0x00400457
  401698:	0040046b 	.word	0x0040046b
  40169c:	00400493 	.word	0x00400493
  4016a0:	00401379 	.word	0x00401379
  4016a4:	3a3a3ac3 	.word	0x3a3a3ac3
  4016a8:	00401445 	.word	0x00401445
  4016ac:	3a3a3ab4 	.word	0x3a3a3ab4
  4016b0:	3a3a3ad2 	.word	0x3a3a3ad2
  4016b4:	00401409 	.word	0x00401409
  4016b8:	004014d1 	.word	0x004014d1
  4016bc:	00401301 	.word	0x00401301
  4016c0:	00401129 	.word	0x00401129

004016c4 <__aeabi_uldivmod>:
  4016c4:	b953      	cbnz	r3, 4016dc <__aeabi_uldivmod+0x18>
  4016c6:	b94a      	cbnz	r2, 4016dc <__aeabi_uldivmod+0x18>
  4016c8:	2900      	cmp	r1, #0
  4016ca:	bf08      	it	eq
  4016cc:	2800      	cmpeq	r0, #0
  4016ce:	bf1c      	itt	ne
  4016d0:	f04f 31ff 	movne.w	r1, #4294967295
  4016d4:	f04f 30ff 	movne.w	r0, #4294967295
  4016d8:	f000 b97a 	b.w	4019d0 <__aeabi_idiv0>
  4016dc:	f1ad 0c08 	sub.w	ip, sp, #8
  4016e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4016e4:	f000 f806 	bl	4016f4 <__udivmoddi4>
  4016e8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4016ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4016f0:	b004      	add	sp, #16
  4016f2:	4770      	bx	lr

004016f4 <__udivmoddi4>:
  4016f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4016f8:	468c      	mov	ip, r1
  4016fa:	460d      	mov	r5, r1
  4016fc:	4604      	mov	r4, r0
  4016fe:	9e08      	ldr	r6, [sp, #32]
  401700:	2b00      	cmp	r3, #0
  401702:	d151      	bne.n	4017a8 <__udivmoddi4+0xb4>
  401704:	428a      	cmp	r2, r1
  401706:	4617      	mov	r7, r2
  401708:	d96d      	bls.n	4017e6 <__udivmoddi4+0xf2>
  40170a:	fab2 fe82 	clz	lr, r2
  40170e:	f1be 0f00 	cmp.w	lr, #0
  401712:	d00b      	beq.n	40172c <__udivmoddi4+0x38>
  401714:	f1ce 0c20 	rsb	ip, lr, #32
  401718:	fa01 f50e 	lsl.w	r5, r1, lr
  40171c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401720:	fa02 f70e 	lsl.w	r7, r2, lr
  401724:	ea4c 0c05 	orr.w	ip, ip, r5
  401728:	fa00 f40e 	lsl.w	r4, r0, lr
  40172c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401730:	0c25      	lsrs	r5, r4, #16
  401732:	fbbc f8fa 	udiv	r8, ip, sl
  401736:	fa1f f987 	uxth.w	r9, r7
  40173a:	fb0a cc18 	mls	ip, sl, r8, ip
  40173e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401742:	fb08 f309 	mul.w	r3, r8, r9
  401746:	42ab      	cmp	r3, r5
  401748:	d90a      	bls.n	401760 <__udivmoddi4+0x6c>
  40174a:	19ed      	adds	r5, r5, r7
  40174c:	f108 32ff 	add.w	r2, r8, #4294967295
  401750:	f080 8123 	bcs.w	40199a <__udivmoddi4+0x2a6>
  401754:	42ab      	cmp	r3, r5
  401756:	f240 8120 	bls.w	40199a <__udivmoddi4+0x2a6>
  40175a:	f1a8 0802 	sub.w	r8, r8, #2
  40175e:	443d      	add	r5, r7
  401760:	1aed      	subs	r5, r5, r3
  401762:	b2a4      	uxth	r4, r4
  401764:	fbb5 f0fa 	udiv	r0, r5, sl
  401768:	fb0a 5510 	mls	r5, sl, r0, r5
  40176c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401770:	fb00 f909 	mul.w	r9, r0, r9
  401774:	45a1      	cmp	r9, r4
  401776:	d909      	bls.n	40178c <__udivmoddi4+0x98>
  401778:	19e4      	adds	r4, r4, r7
  40177a:	f100 33ff 	add.w	r3, r0, #4294967295
  40177e:	f080 810a 	bcs.w	401996 <__udivmoddi4+0x2a2>
  401782:	45a1      	cmp	r9, r4
  401784:	f240 8107 	bls.w	401996 <__udivmoddi4+0x2a2>
  401788:	3802      	subs	r0, #2
  40178a:	443c      	add	r4, r7
  40178c:	eba4 0409 	sub.w	r4, r4, r9
  401790:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401794:	2100      	movs	r1, #0
  401796:	2e00      	cmp	r6, #0
  401798:	d061      	beq.n	40185e <__udivmoddi4+0x16a>
  40179a:	fa24 f40e 	lsr.w	r4, r4, lr
  40179e:	2300      	movs	r3, #0
  4017a0:	6034      	str	r4, [r6, #0]
  4017a2:	6073      	str	r3, [r6, #4]
  4017a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017a8:	428b      	cmp	r3, r1
  4017aa:	d907      	bls.n	4017bc <__udivmoddi4+0xc8>
  4017ac:	2e00      	cmp	r6, #0
  4017ae:	d054      	beq.n	40185a <__udivmoddi4+0x166>
  4017b0:	2100      	movs	r1, #0
  4017b2:	e886 0021 	stmia.w	r6, {r0, r5}
  4017b6:	4608      	mov	r0, r1
  4017b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017bc:	fab3 f183 	clz	r1, r3
  4017c0:	2900      	cmp	r1, #0
  4017c2:	f040 808e 	bne.w	4018e2 <__udivmoddi4+0x1ee>
  4017c6:	42ab      	cmp	r3, r5
  4017c8:	d302      	bcc.n	4017d0 <__udivmoddi4+0xdc>
  4017ca:	4282      	cmp	r2, r0
  4017cc:	f200 80fa 	bhi.w	4019c4 <__udivmoddi4+0x2d0>
  4017d0:	1a84      	subs	r4, r0, r2
  4017d2:	eb65 0503 	sbc.w	r5, r5, r3
  4017d6:	2001      	movs	r0, #1
  4017d8:	46ac      	mov	ip, r5
  4017da:	2e00      	cmp	r6, #0
  4017dc:	d03f      	beq.n	40185e <__udivmoddi4+0x16a>
  4017de:	e886 1010 	stmia.w	r6, {r4, ip}
  4017e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017e6:	b912      	cbnz	r2, 4017ee <__udivmoddi4+0xfa>
  4017e8:	2701      	movs	r7, #1
  4017ea:	fbb7 f7f2 	udiv	r7, r7, r2
  4017ee:	fab7 fe87 	clz	lr, r7
  4017f2:	f1be 0f00 	cmp.w	lr, #0
  4017f6:	d134      	bne.n	401862 <__udivmoddi4+0x16e>
  4017f8:	1beb      	subs	r3, r5, r7
  4017fa:	0c3a      	lsrs	r2, r7, #16
  4017fc:	fa1f fc87 	uxth.w	ip, r7
  401800:	2101      	movs	r1, #1
  401802:	fbb3 f8f2 	udiv	r8, r3, r2
  401806:	0c25      	lsrs	r5, r4, #16
  401808:	fb02 3318 	mls	r3, r2, r8, r3
  40180c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401810:	fb0c f308 	mul.w	r3, ip, r8
  401814:	42ab      	cmp	r3, r5
  401816:	d907      	bls.n	401828 <__udivmoddi4+0x134>
  401818:	19ed      	adds	r5, r5, r7
  40181a:	f108 30ff 	add.w	r0, r8, #4294967295
  40181e:	d202      	bcs.n	401826 <__udivmoddi4+0x132>
  401820:	42ab      	cmp	r3, r5
  401822:	f200 80d1 	bhi.w	4019c8 <__udivmoddi4+0x2d4>
  401826:	4680      	mov	r8, r0
  401828:	1aed      	subs	r5, r5, r3
  40182a:	b2a3      	uxth	r3, r4
  40182c:	fbb5 f0f2 	udiv	r0, r5, r2
  401830:	fb02 5510 	mls	r5, r2, r0, r5
  401834:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401838:	fb0c fc00 	mul.w	ip, ip, r0
  40183c:	45a4      	cmp	ip, r4
  40183e:	d907      	bls.n	401850 <__udivmoddi4+0x15c>
  401840:	19e4      	adds	r4, r4, r7
  401842:	f100 33ff 	add.w	r3, r0, #4294967295
  401846:	d202      	bcs.n	40184e <__udivmoddi4+0x15a>
  401848:	45a4      	cmp	ip, r4
  40184a:	f200 80b8 	bhi.w	4019be <__udivmoddi4+0x2ca>
  40184e:	4618      	mov	r0, r3
  401850:	eba4 040c 	sub.w	r4, r4, ip
  401854:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401858:	e79d      	b.n	401796 <__udivmoddi4+0xa2>
  40185a:	4631      	mov	r1, r6
  40185c:	4630      	mov	r0, r6
  40185e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401862:	f1ce 0420 	rsb	r4, lr, #32
  401866:	fa05 f30e 	lsl.w	r3, r5, lr
  40186a:	fa07 f70e 	lsl.w	r7, r7, lr
  40186e:	fa20 f804 	lsr.w	r8, r0, r4
  401872:	0c3a      	lsrs	r2, r7, #16
  401874:	fa25 f404 	lsr.w	r4, r5, r4
  401878:	ea48 0803 	orr.w	r8, r8, r3
  40187c:	fbb4 f1f2 	udiv	r1, r4, r2
  401880:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401884:	fb02 4411 	mls	r4, r2, r1, r4
  401888:	fa1f fc87 	uxth.w	ip, r7
  40188c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401890:	fb01 f30c 	mul.w	r3, r1, ip
  401894:	42ab      	cmp	r3, r5
  401896:	fa00 f40e 	lsl.w	r4, r0, lr
  40189a:	d909      	bls.n	4018b0 <__udivmoddi4+0x1bc>
  40189c:	19ed      	adds	r5, r5, r7
  40189e:	f101 30ff 	add.w	r0, r1, #4294967295
  4018a2:	f080 808a 	bcs.w	4019ba <__udivmoddi4+0x2c6>
  4018a6:	42ab      	cmp	r3, r5
  4018a8:	f240 8087 	bls.w	4019ba <__udivmoddi4+0x2c6>
  4018ac:	3902      	subs	r1, #2
  4018ae:	443d      	add	r5, r7
  4018b0:	1aeb      	subs	r3, r5, r3
  4018b2:	fa1f f588 	uxth.w	r5, r8
  4018b6:	fbb3 f0f2 	udiv	r0, r3, r2
  4018ba:	fb02 3310 	mls	r3, r2, r0, r3
  4018be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4018c2:	fb00 f30c 	mul.w	r3, r0, ip
  4018c6:	42ab      	cmp	r3, r5
  4018c8:	d907      	bls.n	4018da <__udivmoddi4+0x1e6>
  4018ca:	19ed      	adds	r5, r5, r7
  4018cc:	f100 38ff 	add.w	r8, r0, #4294967295
  4018d0:	d26f      	bcs.n	4019b2 <__udivmoddi4+0x2be>
  4018d2:	42ab      	cmp	r3, r5
  4018d4:	d96d      	bls.n	4019b2 <__udivmoddi4+0x2be>
  4018d6:	3802      	subs	r0, #2
  4018d8:	443d      	add	r5, r7
  4018da:	1aeb      	subs	r3, r5, r3
  4018dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4018e0:	e78f      	b.n	401802 <__udivmoddi4+0x10e>
  4018e2:	f1c1 0720 	rsb	r7, r1, #32
  4018e6:	fa22 f807 	lsr.w	r8, r2, r7
  4018ea:	408b      	lsls	r3, r1
  4018ec:	fa05 f401 	lsl.w	r4, r5, r1
  4018f0:	ea48 0303 	orr.w	r3, r8, r3
  4018f4:	fa20 fe07 	lsr.w	lr, r0, r7
  4018f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4018fc:	40fd      	lsrs	r5, r7
  4018fe:	ea4e 0e04 	orr.w	lr, lr, r4
  401902:	fbb5 f9fc 	udiv	r9, r5, ip
  401906:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40190a:	fb0c 5519 	mls	r5, ip, r9, r5
  40190e:	fa1f f883 	uxth.w	r8, r3
  401912:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401916:	fb09 f408 	mul.w	r4, r9, r8
  40191a:	42ac      	cmp	r4, r5
  40191c:	fa02 f201 	lsl.w	r2, r2, r1
  401920:	fa00 fa01 	lsl.w	sl, r0, r1
  401924:	d908      	bls.n	401938 <__udivmoddi4+0x244>
  401926:	18ed      	adds	r5, r5, r3
  401928:	f109 30ff 	add.w	r0, r9, #4294967295
  40192c:	d243      	bcs.n	4019b6 <__udivmoddi4+0x2c2>
  40192e:	42ac      	cmp	r4, r5
  401930:	d941      	bls.n	4019b6 <__udivmoddi4+0x2c2>
  401932:	f1a9 0902 	sub.w	r9, r9, #2
  401936:	441d      	add	r5, r3
  401938:	1b2d      	subs	r5, r5, r4
  40193a:	fa1f fe8e 	uxth.w	lr, lr
  40193e:	fbb5 f0fc 	udiv	r0, r5, ip
  401942:	fb0c 5510 	mls	r5, ip, r0, r5
  401946:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40194a:	fb00 f808 	mul.w	r8, r0, r8
  40194e:	45a0      	cmp	r8, r4
  401950:	d907      	bls.n	401962 <__udivmoddi4+0x26e>
  401952:	18e4      	adds	r4, r4, r3
  401954:	f100 35ff 	add.w	r5, r0, #4294967295
  401958:	d229      	bcs.n	4019ae <__udivmoddi4+0x2ba>
  40195a:	45a0      	cmp	r8, r4
  40195c:	d927      	bls.n	4019ae <__udivmoddi4+0x2ba>
  40195e:	3802      	subs	r0, #2
  401960:	441c      	add	r4, r3
  401962:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401966:	eba4 0408 	sub.w	r4, r4, r8
  40196a:	fba0 8902 	umull	r8, r9, r0, r2
  40196e:	454c      	cmp	r4, r9
  401970:	46c6      	mov	lr, r8
  401972:	464d      	mov	r5, r9
  401974:	d315      	bcc.n	4019a2 <__udivmoddi4+0x2ae>
  401976:	d012      	beq.n	40199e <__udivmoddi4+0x2aa>
  401978:	b156      	cbz	r6, 401990 <__udivmoddi4+0x29c>
  40197a:	ebba 030e 	subs.w	r3, sl, lr
  40197e:	eb64 0405 	sbc.w	r4, r4, r5
  401982:	fa04 f707 	lsl.w	r7, r4, r7
  401986:	40cb      	lsrs	r3, r1
  401988:	431f      	orrs	r7, r3
  40198a:	40cc      	lsrs	r4, r1
  40198c:	6037      	str	r7, [r6, #0]
  40198e:	6074      	str	r4, [r6, #4]
  401990:	2100      	movs	r1, #0
  401992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401996:	4618      	mov	r0, r3
  401998:	e6f8      	b.n	40178c <__udivmoddi4+0x98>
  40199a:	4690      	mov	r8, r2
  40199c:	e6e0      	b.n	401760 <__udivmoddi4+0x6c>
  40199e:	45c2      	cmp	sl, r8
  4019a0:	d2ea      	bcs.n	401978 <__udivmoddi4+0x284>
  4019a2:	ebb8 0e02 	subs.w	lr, r8, r2
  4019a6:	eb69 0503 	sbc.w	r5, r9, r3
  4019aa:	3801      	subs	r0, #1
  4019ac:	e7e4      	b.n	401978 <__udivmoddi4+0x284>
  4019ae:	4628      	mov	r0, r5
  4019b0:	e7d7      	b.n	401962 <__udivmoddi4+0x26e>
  4019b2:	4640      	mov	r0, r8
  4019b4:	e791      	b.n	4018da <__udivmoddi4+0x1e6>
  4019b6:	4681      	mov	r9, r0
  4019b8:	e7be      	b.n	401938 <__udivmoddi4+0x244>
  4019ba:	4601      	mov	r1, r0
  4019bc:	e778      	b.n	4018b0 <__udivmoddi4+0x1bc>
  4019be:	3802      	subs	r0, #2
  4019c0:	443c      	add	r4, r7
  4019c2:	e745      	b.n	401850 <__udivmoddi4+0x15c>
  4019c4:	4608      	mov	r0, r1
  4019c6:	e708      	b.n	4017da <__udivmoddi4+0xe6>
  4019c8:	f1a8 0802 	sub.w	r8, r8, #2
  4019cc:	443d      	add	r5, r7
  4019ce:	e72b      	b.n	401828 <__udivmoddi4+0x134>

004019d0 <__aeabi_idiv0>:
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop

004019d4 <__libc_init_array>:
  4019d4:	b570      	push	{r4, r5, r6, lr}
  4019d6:	4e0f      	ldr	r6, [pc, #60]	; (401a14 <__libc_init_array+0x40>)
  4019d8:	4d0f      	ldr	r5, [pc, #60]	; (401a18 <__libc_init_array+0x44>)
  4019da:	1b76      	subs	r6, r6, r5
  4019dc:	10b6      	asrs	r6, r6, #2
  4019de:	bf18      	it	ne
  4019e0:	2400      	movne	r4, #0
  4019e2:	d005      	beq.n	4019f0 <__libc_init_array+0x1c>
  4019e4:	3401      	adds	r4, #1
  4019e6:	f855 3b04 	ldr.w	r3, [r5], #4
  4019ea:	4798      	blx	r3
  4019ec:	42a6      	cmp	r6, r4
  4019ee:	d1f9      	bne.n	4019e4 <__libc_init_array+0x10>
  4019f0:	4e0a      	ldr	r6, [pc, #40]	; (401a1c <__libc_init_array+0x48>)
  4019f2:	4d0b      	ldr	r5, [pc, #44]	; (401a20 <__libc_init_array+0x4c>)
  4019f4:	1b76      	subs	r6, r6, r5
  4019f6:	f003 f879 	bl	404aec <_init>
  4019fa:	10b6      	asrs	r6, r6, #2
  4019fc:	bf18      	it	ne
  4019fe:	2400      	movne	r4, #0
  401a00:	d006      	beq.n	401a10 <__libc_init_array+0x3c>
  401a02:	3401      	adds	r4, #1
  401a04:	f855 3b04 	ldr.w	r3, [r5], #4
  401a08:	4798      	blx	r3
  401a0a:	42a6      	cmp	r6, r4
  401a0c:	d1f9      	bne.n	401a02 <__libc_init_array+0x2e>
  401a0e:	bd70      	pop	{r4, r5, r6, pc}
  401a10:	bd70      	pop	{r4, r5, r6, pc}
  401a12:	bf00      	nop
  401a14:	00404af8 	.word	0x00404af8
  401a18:	00404af8 	.word	0x00404af8
  401a1c:	00404b00 	.word	0x00404b00
  401a20:	00404af8 	.word	0x00404af8

00401a24 <iprintf>:
  401a24:	b40f      	push	{r0, r1, r2, r3}
  401a26:	b500      	push	{lr}
  401a28:	4907      	ldr	r1, [pc, #28]	; (401a48 <iprintf+0x24>)
  401a2a:	b083      	sub	sp, #12
  401a2c:	ab04      	add	r3, sp, #16
  401a2e:	6808      	ldr	r0, [r1, #0]
  401a30:	f853 2b04 	ldr.w	r2, [r3], #4
  401a34:	6881      	ldr	r1, [r0, #8]
  401a36:	9301      	str	r3, [sp, #4]
  401a38:	f000 fad0 	bl	401fdc <_vfiprintf_r>
  401a3c:	b003      	add	sp, #12
  401a3e:	f85d eb04 	ldr.w	lr, [sp], #4
  401a42:	b004      	add	sp, #16
  401a44:	4770      	bx	lr
  401a46:	bf00      	nop
  401a48:	20400014 	.word	0x20400014

00401a4c <memcpy>:
  401a4c:	4684      	mov	ip, r0
  401a4e:	ea41 0300 	orr.w	r3, r1, r0
  401a52:	f013 0303 	ands.w	r3, r3, #3
  401a56:	d16d      	bne.n	401b34 <memcpy+0xe8>
  401a58:	3a40      	subs	r2, #64	; 0x40
  401a5a:	d341      	bcc.n	401ae0 <memcpy+0x94>
  401a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  401a60:	f840 3b04 	str.w	r3, [r0], #4
  401a64:	f851 3b04 	ldr.w	r3, [r1], #4
  401a68:	f840 3b04 	str.w	r3, [r0], #4
  401a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  401a70:	f840 3b04 	str.w	r3, [r0], #4
  401a74:	f851 3b04 	ldr.w	r3, [r1], #4
  401a78:	f840 3b04 	str.w	r3, [r0], #4
  401a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  401a80:	f840 3b04 	str.w	r3, [r0], #4
  401a84:	f851 3b04 	ldr.w	r3, [r1], #4
  401a88:	f840 3b04 	str.w	r3, [r0], #4
  401a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  401a90:	f840 3b04 	str.w	r3, [r0], #4
  401a94:	f851 3b04 	ldr.w	r3, [r1], #4
  401a98:	f840 3b04 	str.w	r3, [r0], #4
  401a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  401aa0:	f840 3b04 	str.w	r3, [r0], #4
  401aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  401aa8:	f840 3b04 	str.w	r3, [r0], #4
  401aac:	f851 3b04 	ldr.w	r3, [r1], #4
  401ab0:	f840 3b04 	str.w	r3, [r0], #4
  401ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ab8:	f840 3b04 	str.w	r3, [r0], #4
  401abc:	f851 3b04 	ldr.w	r3, [r1], #4
  401ac0:	f840 3b04 	str.w	r3, [r0], #4
  401ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ac8:	f840 3b04 	str.w	r3, [r0], #4
  401acc:	f851 3b04 	ldr.w	r3, [r1], #4
  401ad0:	f840 3b04 	str.w	r3, [r0], #4
  401ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ad8:	f840 3b04 	str.w	r3, [r0], #4
  401adc:	3a40      	subs	r2, #64	; 0x40
  401ade:	d2bd      	bcs.n	401a5c <memcpy+0x10>
  401ae0:	3230      	adds	r2, #48	; 0x30
  401ae2:	d311      	bcc.n	401b08 <memcpy+0xbc>
  401ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ae8:	f840 3b04 	str.w	r3, [r0], #4
  401aec:	f851 3b04 	ldr.w	r3, [r1], #4
  401af0:	f840 3b04 	str.w	r3, [r0], #4
  401af4:	f851 3b04 	ldr.w	r3, [r1], #4
  401af8:	f840 3b04 	str.w	r3, [r0], #4
  401afc:	f851 3b04 	ldr.w	r3, [r1], #4
  401b00:	f840 3b04 	str.w	r3, [r0], #4
  401b04:	3a10      	subs	r2, #16
  401b06:	d2ed      	bcs.n	401ae4 <memcpy+0x98>
  401b08:	320c      	adds	r2, #12
  401b0a:	d305      	bcc.n	401b18 <memcpy+0xcc>
  401b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b10:	f840 3b04 	str.w	r3, [r0], #4
  401b14:	3a04      	subs	r2, #4
  401b16:	d2f9      	bcs.n	401b0c <memcpy+0xc0>
  401b18:	3204      	adds	r2, #4
  401b1a:	d008      	beq.n	401b2e <memcpy+0xe2>
  401b1c:	07d2      	lsls	r2, r2, #31
  401b1e:	bf1c      	itt	ne
  401b20:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401b24:	f800 3b01 	strbne.w	r3, [r0], #1
  401b28:	d301      	bcc.n	401b2e <memcpy+0xe2>
  401b2a:	880b      	ldrh	r3, [r1, #0]
  401b2c:	8003      	strh	r3, [r0, #0]
  401b2e:	4660      	mov	r0, ip
  401b30:	4770      	bx	lr
  401b32:	bf00      	nop
  401b34:	2a08      	cmp	r2, #8
  401b36:	d313      	bcc.n	401b60 <memcpy+0x114>
  401b38:	078b      	lsls	r3, r1, #30
  401b3a:	d08d      	beq.n	401a58 <memcpy+0xc>
  401b3c:	f010 0303 	ands.w	r3, r0, #3
  401b40:	d08a      	beq.n	401a58 <memcpy+0xc>
  401b42:	f1c3 0304 	rsb	r3, r3, #4
  401b46:	1ad2      	subs	r2, r2, r3
  401b48:	07db      	lsls	r3, r3, #31
  401b4a:	bf1c      	itt	ne
  401b4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401b50:	f800 3b01 	strbne.w	r3, [r0], #1
  401b54:	d380      	bcc.n	401a58 <memcpy+0xc>
  401b56:	f831 3b02 	ldrh.w	r3, [r1], #2
  401b5a:	f820 3b02 	strh.w	r3, [r0], #2
  401b5e:	e77b      	b.n	401a58 <memcpy+0xc>
  401b60:	3a04      	subs	r2, #4
  401b62:	d3d9      	bcc.n	401b18 <memcpy+0xcc>
  401b64:	3a01      	subs	r2, #1
  401b66:	f811 3b01 	ldrb.w	r3, [r1], #1
  401b6a:	f800 3b01 	strb.w	r3, [r0], #1
  401b6e:	d2f9      	bcs.n	401b64 <memcpy+0x118>
  401b70:	780b      	ldrb	r3, [r1, #0]
  401b72:	7003      	strb	r3, [r0, #0]
  401b74:	784b      	ldrb	r3, [r1, #1]
  401b76:	7043      	strb	r3, [r0, #1]
  401b78:	788b      	ldrb	r3, [r1, #2]
  401b7a:	7083      	strb	r3, [r0, #2]
  401b7c:	4660      	mov	r0, ip
  401b7e:	4770      	bx	lr

00401b80 <memset>:
  401b80:	b470      	push	{r4, r5, r6}
  401b82:	0786      	lsls	r6, r0, #30
  401b84:	d046      	beq.n	401c14 <memset+0x94>
  401b86:	1e54      	subs	r4, r2, #1
  401b88:	2a00      	cmp	r2, #0
  401b8a:	d041      	beq.n	401c10 <memset+0x90>
  401b8c:	b2ca      	uxtb	r2, r1
  401b8e:	4603      	mov	r3, r0
  401b90:	e002      	b.n	401b98 <memset+0x18>
  401b92:	f114 34ff 	adds.w	r4, r4, #4294967295
  401b96:	d33b      	bcc.n	401c10 <memset+0x90>
  401b98:	f803 2b01 	strb.w	r2, [r3], #1
  401b9c:	079d      	lsls	r5, r3, #30
  401b9e:	d1f8      	bne.n	401b92 <memset+0x12>
  401ba0:	2c03      	cmp	r4, #3
  401ba2:	d92e      	bls.n	401c02 <memset+0x82>
  401ba4:	b2cd      	uxtb	r5, r1
  401ba6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401baa:	2c0f      	cmp	r4, #15
  401bac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401bb0:	d919      	bls.n	401be6 <memset+0x66>
  401bb2:	f103 0210 	add.w	r2, r3, #16
  401bb6:	4626      	mov	r6, r4
  401bb8:	3e10      	subs	r6, #16
  401bba:	2e0f      	cmp	r6, #15
  401bbc:	f842 5c10 	str.w	r5, [r2, #-16]
  401bc0:	f842 5c0c 	str.w	r5, [r2, #-12]
  401bc4:	f842 5c08 	str.w	r5, [r2, #-8]
  401bc8:	f842 5c04 	str.w	r5, [r2, #-4]
  401bcc:	f102 0210 	add.w	r2, r2, #16
  401bd0:	d8f2      	bhi.n	401bb8 <memset+0x38>
  401bd2:	f1a4 0210 	sub.w	r2, r4, #16
  401bd6:	f022 020f 	bic.w	r2, r2, #15
  401bda:	f004 040f 	and.w	r4, r4, #15
  401bde:	3210      	adds	r2, #16
  401be0:	2c03      	cmp	r4, #3
  401be2:	4413      	add	r3, r2
  401be4:	d90d      	bls.n	401c02 <memset+0x82>
  401be6:	461e      	mov	r6, r3
  401be8:	4622      	mov	r2, r4
  401bea:	3a04      	subs	r2, #4
  401bec:	2a03      	cmp	r2, #3
  401bee:	f846 5b04 	str.w	r5, [r6], #4
  401bf2:	d8fa      	bhi.n	401bea <memset+0x6a>
  401bf4:	1f22      	subs	r2, r4, #4
  401bf6:	f022 0203 	bic.w	r2, r2, #3
  401bfa:	3204      	adds	r2, #4
  401bfc:	4413      	add	r3, r2
  401bfe:	f004 0403 	and.w	r4, r4, #3
  401c02:	b12c      	cbz	r4, 401c10 <memset+0x90>
  401c04:	b2c9      	uxtb	r1, r1
  401c06:	441c      	add	r4, r3
  401c08:	f803 1b01 	strb.w	r1, [r3], #1
  401c0c:	429c      	cmp	r4, r3
  401c0e:	d1fb      	bne.n	401c08 <memset+0x88>
  401c10:	bc70      	pop	{r4, r5, r6}
  401c12:	4770      	bx	lr
  401c14:	4614      	mov	r4, r2
  401c16:	4603      	mov	r3, r0
  401c18:	e7c2      	b.n	401ba0 <memset+0x20>
  401c1a:	bf00      	nop

00401c1c <_puts_r>:
  401c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c1e:	4605      	mov	r5, r0
  401c20:	b089      	sub	sp, #36	; 0x24
  401c22:	4608      	mov	r0, r1
  401c24:	460c      	mov	r4, r1
  401c26:	f000 f92b 	bl	401e80 <strlen>
  401c2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401c2c:	4f21      	ldr	r7, [pc, #132]	; (401cb4 <_puts_r+0x98>)
  401c2e:	9404      	str	r4, [sp, #16]
  401c30:	2601      	movs	r6, #1
  401c32:	1c44      	adds	r4, r0, #1
  401c34:	a904      	add	r1, sp, #16
  401c36:	2202      	movs	r2, #2
  401c38:	9403      	str	r4, [sp, #12]
  401c3a:	9005      	str	r0, [sp, #20]
  401c3c:	68ac      	ldr	r4, [r5, #8]
  401c3e:	9706      	str	r7, [sp, #24]
  401c40:	9607      	str	r6, [sp, #28]
  401c42:	9101      	str	r1, [sp, #4]
  401c44:	9202      	str	r2, [sp, #8]
  401c46:	b353      	cbz	r3, 401c9e <_puts_r+0x82>
  401c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401c4a:	f013 0f01 	tst.w	r3, #1
  401c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c52:	b29a      	uxth	r2, r3
  401c54:	d101      	bne.n	401c5a <_puts_r+0x3e>
  401c56:	0590      	lsls	r0, r2, #22
  401c58:	d525      	bpl.n	401ca6 <_puts_r+0x8a>
  401c5a:	0491      	lsls	r1, r2, #18
  401c5c:	d406      	bmi.n	401c6c <_puts_r+0x50>
  401c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401c68:	81a3      	strh	r3, [r4, #12]
  401c6a:	6662      	str	r2, [r4, #100]	; 0x64
  401c6c:	4628      	mov	r0, r5
  401c6e:	aa01      	add	r2, sp, #4
  401c70:	4621      	mov	r1, r4
  401c72:	f001 fbb5 	bl	4033e0 <__sfvwrite_r>
  401c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401c78:	2800      	cmp	r0, #0
  401c7a:	bf0c      	ite	eq
  401c7c:	250a      	moveq	r5, #10
  401c7e:	f04f 35ff 	movne.w	r5, #4294967295
  401c82:	07da      	lsls	r2, r3, #31
  401c84:	d402      	bmi.n	401c8c <_puts_r+0x70>
  401c86:	89a3      	ldrh	r3, [r4, #12]
  401c88:	059b      	lsls	r3, r3, #22
  401c8a:	d502      	bpl.n	401c92 <_puts_r+0x76>
  401c8c:	4628      	mov	r0, r5
  401c8e:	b009      	add	sp, #36	; 0x24
  401c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c94:	f001 fd5a 	bl	40374c <__retarget_lock_release_recursive>
  401c98:	4628      	mov	r0, r5
  401c9a:	b009      	add	sp, #36	; 0x24
  401c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c9e:	4628      	mov	r0, r5
  401ca0:	f001 f992 	bl	402fc8 <__sinit>
  401ca4:	e7d0      	b.n	401c48 <_puts_r+0x2c>
  401ca6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401ca8:	f001 fd4e 	bl	403748 <__retarget_lock_acquire_recursive>
  401cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401cb0:	b29a      	uxth	r2, r3
  401cb2:	e7d2      	b.n	401c5a <_puts_r+0x3e>
  401cb4:	00404860 	.word	0x00404860

00401cb8 <puts>:
  401cb8:	4b02      	ldr	r3, [pc, #8]	; (401cc4 <puts+0xc>)
  401cba:	4601      	mov	r1, r0
  401cbc:	6818      	ldr	r0, [r3, #0]
  401cbe:	f7ff bfad 	b.w	401c1c <_puts_r>
  401cc2:	bf00      	nop
  401cc4:	20400014 	.word	0x20400014

00401cc8 <setbuf>:
  401cc8:	2900      	cmp	r1, #0
  401cca:	bf0c      	ite	eq
  401ccc:	2202      	moveq	r2, #2
  401cce:	2200      	movne	r2, #0
  401cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cd4:	f000 b800 	b.w	401cd8 <setvbuf>

00401cd8 <setvbuf>:
  401cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401cdc:	4c61      	ldr	r4, [pc, #388]	; (401e64 <setvbuf+0x18c>)
  401cde:	6825      	ldr	r5, [r4, #0]
  401ce0:	b083      	sub	sp, #12
  401ce2:	4604      	mov	r4, r0
  401ce4:	460f      	mov	r7, r1
  401ce6:	4690      	mov	r8, r2
  401ce8:	461e      	mov	r6, r3
  401cea:	b115      	cbz	r5, 401cf2 <setvbuf+0x1a>
  401cec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d064      	beq.n	401dbc <setvbuf+0xe4>
  401cf2:	f1b8 0f02 	cmp.w	r8, #2
  401cf6:	d006      	beq.n	401d06 <setvbuf+0x2e>
  401cf8:	f1b8 0f01 	cmp.w	r8, #1
  401cfc:	f200 809f 	bhi.w	401e3e <setvbuf+0x166>
  401d00:	2e00      	cmp	r6, #0
  401d02:	f2c0 809c 	blt.w	401e3e <setvbuf+0x166>
  401d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401d08:	07d8      	lsls	r0, r3, #31
  401d0a:	d534      	bpl.n	401d76 <setvbuf+0x9e>
  401d0c:	4621      	mov	r1, r4
  401d0e:	4628      	mov	r0, r5
  401d10:	f001 f902 	bl	402f18 <_fflush_r>
  401d14:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d16:	b141      	cbz	r1, 401d2a <setvbuf+0x52>
  401d18:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401d1c:	4299      	cmp	r1, r3
  401d1e:	d002      	beq.n	401d26 <setvbuf+0x4e>
  401d20:	4628      	mov	r0, r5
  401d22:	f001 fa77 	bl	403214 <_free_r>
  401d26:	2300      	movs	r3, #0
  401d28:	6323      	str	r3, [r4, #48]	; 0x30
  401d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d2e:	2200      	movs	r2, #0
  401d30:	61a2      	str	r2, [r4, #24]
  401d32:	6062      	str	r2, [r4, #4]
  401d34:	061a      	lsls	r2, r3, #24
  401d36:	d43a      	bmi.n	401dae <setvbuf+0xd6>
  401d38:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401d3c:	f023 0303 	bic.w	r3, r3, #3
  401d40:	f1b8 0f02 	cmp.w	r8, #2
  401d44:	81a3      	strh	r3, [r4, #12]
  401d46:	d01d      	beq.n	401d84 <setvbuf+0xac>
  401d48:	ab01      	add	r3, sp, #4
  401d4a:	466a      	mov	r2, sp
  401d4c:	4621      	mov	r1, r4
  401d4e:	4628      	mov	r0, r5
  401d50:	f001 fcfe 	bl	403750 <__swhatbuf_r>
  401d54:	89a3      	ldrh	r3, [r4, #12]
  401d56:	4318      	orrs	r0, r3
  401d58:	81a0      	strh	r0, [r4, #12]
  401d5a:	2e00      	cmp	r6, #0
  401d5c:	d132      	bne.n	401dc4 <setvbuf+0xec>
  401d5e:	9e00      	ldr	r6, [sp, #0]
  401d60:	4630      	mov	r0, r6
  401d62:	f001 fd6d 	bl	403840 <malloc>
  401d66:	4607      	mov	r7, r0
  401d68:	2800      	cmp	r0, #0
  401d6a:	d06b      	beq.n	401e44 <setvbuf+0x16c>
  401d6c:	89a3      	ldrh	r3, [r4, #12]
  401d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d72:	81a3      	strh	r3, [r4, #12]
  401d74:	e028      	b.n	401dc8 <setvbuf+0xf0>
  401d76:	89a3      	ldrh	r3, [r4, #12]
  401d78:	0599      	lsls	r1, r3, #22
  401d7a:	d4c7      	bmi.n	401d0c <setvbuf+0x34>
  401d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401d7e:	f001 fce3 	bl	403748 <__retarget_lock_acquire_recursive>
  401d82:	e7c3      	b.n	401d0c <setvbuf+0x34>
  401d84:	2500      	movs	r5, #0
  401d86:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d88:	2600      	movs	r6, #0
  401d8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401d8e:	f043 0302 	orr.w	r3, r3, #2
  401d92:	2001      	movs	r0, #1
  401d94:	60a6      	str	r6, [r4, #8]
  401d96:	07ce      	lsls	r6, r1, #31
  401d98:	81a3      	strh	r3, [r4, #12]
  401d9a:	6022      	str	r2, [r4, #0]
  401d9c:	6122      	str	r2, [r4, #16]
  401d9e:	6160      	str	r0, [r4, #20]
  401da0:	d401      	bmi.n	401da6 <setvbuf+0xce>
  401da2:	0598      	lsls	r0, r3, #22
  401da4:	d53e      	bpl.n	401e24 <setvbuf+0x14c>
  401da6:	4628      	mov	r0, r5
  401da8:	b003      	add	sp, #12
  401daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dae:	6921      	ldr	r1, [r4, #16]
  401db0:	4628      	mov	r0, r5
  401db2:	f001 fa2f 	bl	403214 <_free_r>
  401db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dba:	e7bd      	b.n	401d38 <setvbuf+0x60>
  401dbc:	4628      	mov	r0, r5
  401dbe:	f001 f903 	bl	402fc8 <__sinit>
  401dc2:	e796      	b.n	401cf2 <setvbuf+0x1a>
  401dc4:	2f00      	cmp	r7, #0
  401dc6:	d0cb      	beq.n	401d60 <setvbuf+0x88>
  401dc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401dca:	2b00      	cmp	r3, #0
  401dcc:	d033      	beq.n	401e36 <setvbuf+0x15e>
  401dce:	9b00      	ldr	r3, [sp, #0]
  401dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401dd4:	6027      	str	r7, [r4, #0]
  401dd6:	429e      	cmp	r6, r3
  401dd8:	bf1c      	itt	ne
  401dda:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401dde:	81a2      	strhne	r2, [r4, #12]
  401de0:	f1b8 0f01 	cmp.w	r8, #1
  401de4:	bf04      	itt	eq
  401de6:	f042 0201 	orreq.w	r2, r2, #1
  401dea:	81a2      	strheq	r2, [r4, #12]
  401dec:	b292      	uxth	r2, r2
  401dee:	f012 0308 	ands.w	r3, r2, #8
  401df2:	6127      	str	r7, [r4, #16]
  401df4:	6166      	str	r6, [r4, #20]
  401df6:	d00e      	beq.n	401e16 <setvbuf+0x13e>
  401df8:	07d1      	lsls	r1, r2, #31
  401dfa:	d51a      	bpl.n	401e32 <setvbuf+0x15a>
  401dfc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401dfe:	4276      	negs	r6, r6
  401e00:	2300      	movs	r3, #0
  401e02:	f015 0501 	ands.w	r5, r5, #1
  401e06:	61a6      	str	r6, [r4, #24]
  401e08:	60a3      	str	r3, [r4, #8]
  401e0a:	d009      	beq.n	401e20 <setvbuf+0x148>
  401e0c:	2500      	movs	r5, #0
  401e0e:	4628      	mov	r0, r5
  401e10:	b003      	add	sp, #12
  401e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e16:	60a3      	str	r3, [r4, #8]
  401e18:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401e1a:	f015 0501 	ands.w	r5, r5, #1
  401e1e:	d1f5      	bne.n	401e0c <setvbuf+0x134>
  401e20:	0593      	lsls	r3, r2, #22
  401e22:	d4c0      	bmi.n	401da6 <setvbuf+0xce>
  401e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e26:	f001 fc91 	bl	40374c <__retarget_lock_release_recursive>
  401e2a:	4628      	mov	r0, r5
  401e2c:	b003      	add	sp, #12
  401e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e32:	60a6      	str	r6, [r4, #8]
  401e34:	e7f0      	b.n	401e18 <setvbuf+0x140>
  401e36:	4628      	mov	r0, r5
  401e38:	f001 f8c6 	bl	402fc8 <__sinit>
  401e3c:	e7c7      	b.n	401dce <setvbuf+0xf6>
  401e3e:	f04f 35ff 	mov.w	r5, #4294967295
  401e42:	e7b0      	b.n	401da6 <setvbuf+0xce>
  401e44:	f8dd 9000 	ldr.w	r9, [sp]
  401e48:	45b1      	cmp	r9, r6
  401e4a:	d004      	beq.n	401e56 <setvbuf+0x17e>
  401e4c:	4648      	mov	r0, r9
  401e4e:	f001 fcf7 	bl	403840 <malloc>
  401e52:	4607      	mov	r7, r0
  401e54:	b920      	cbnz	r0, 401e60 <setvbuf+0x188>
  401e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e5a:	f04f 35ff 	mov.w	r5, #4294967295
  401e5e:	e792      	b.n	401d86 <setvbuf+0xae>
  401e60:	464e      	mov	r6, r9
  401e62:	e783      	b.n	401d6c <setvbuf+0x94>
  401e64:	20400014 	.word	0x20400014
	...

00401e80 <strlen>:
  401e80:	f890 f000 	pld	[r0]
  401e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401e88:	f020 0107 	bic.w	r1, r0, #7
  401e8c:	f06f 0c00 	mvn.w	ip, #0
  401e90:	f010 0407 	ands.w	r4, r0, #7
  401e94:	f891 f020 	pld	[r1, #32]
  401e98:	f040 8049 	bne.w	401f2e <strlen+0xae>
  401e9c:	f04f 0400 	mov.w	r4, #0
  401ea0:	f06f 0007 	mvn.w	r0, #7
  401ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
  401ea8:	f891 f040 	pld	[r1, #64]	; 0x40
  401eac:	f100 0008 	add.w	r0, r0, #8
  401eb0:	fa82 f24c 	uadd8	r2, r2, ip
  401eb4:	faa4 f28c 	sel	r2, r4, ip
  401eb8:	fa83 f34c 	uadd8	r3, r3, ip
  401ebc:	faa2 f38c 	sel	r3, r2, ip
  401ec0:	bb4b      	cbnz	r3, 401f16 <strlen+0x96>
  401ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401ec6:	fa82 f24c 	uadd8	r2, r2, ip
  401eca:	f100 0008 	add.w	r0, r0, #8
  401ece:	faa4 f28c 	sel	r2, r4, ip
  401ed2:	fa83 f34c 	uadd8	r3, r3, ip
  401ed6:	faa2 f38c 	sel	r3, r2, ip
  401eda:	b9e3      	cbnz	r3, 401f16 <strlen+0x96>
  401edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401ee0:	fa82 f24c 	uadd8	r2, r2, ip
  401ee4:	f100 0008 	add.w	r0, r0, #8
  401ee8:	faa4 f28c 	sel	r2, r4, ip
  401eec:	fa83 f34c 	uadd8	r3, r3, ip
  401ef0:	faa2 f38c 	sel	r3, r2, ip
  401ef4:	b97b      	cbnz	r3, 401f16 <strlen+0x96>
  401ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401efa:	f101 0120 	add.w	r1, r1, #32
  401efe:	fa82 f24c 	uadd8	r2, r2, ip
  401f02:	f100 0008 	add.w	r0, r0, #8
  401f06:	faa4 f28c 	sel	r2, r4, ip
  401f0a:	fa83 f34c 	uadd8	r3, r3, ip
  401f0e:	faa2 f38c 	sel	r3, r2, ip
  401f12:	2b00      	cmp	r3, #0
  401f14:	d0c6      	beq.n	401ea4 <strlen+0x24>
  401f16:	2a00      	cmp	r2, #0
  401f18:	bf04      	itt	eq
  401f1a:	3004      	addeq	r0, #4
  401f1c:	461a      	moveq	r2, r3
  401f1e:	ba12      	rev	r2, r2
  401f20:	fab2 f282 	clz	r2, r2
  401f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401f2c:	4770      	bx	lr
  401f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401f32:	f004 0503 	and.w	r5, r4, #3
  401f36:	f1c4 0000 	rsb	r0, r4, #0
  401f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401f3e:	f014 0f04 	tst.w	r4, #4
  401f42:	f891 f040 	pld	[r1, #64]	; 0x40
  401f46:	fa0c f505 	lsl.w	r5, ip, r5
  401f4a:	ea62 0205 	orn	r2, r2, r5
  401f4e:	bf1c      	itt	ne
  401f50:	ea63 0305 	ornne	r3, r3, r5
  401f54:	4662      	movne	r2, ip
  401f56:	f04f 0400 	mov.w	r4, #0
  401f5a:	e7a9      	b.n	401eb0 <strlen+0x30>

00401f5c <__sprint_r.part.0>:
  401f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401f62:	049c      	lsls	r4, r3, #18
  401f64:	4693      	mov	fp, r2
  401f66:	d52f      	bpl.n	401fc8 <__sprint_r.part.0+0x6c>
  401f68:	6893      	ldr	r3, [r2, #8]
  401f6a:	6812      	ldr	r2, [r2, #0]
  401f6c:	b353      	cbz	r3, 401fc4 <__sprint_r.part.0+0x68>
  401f6e:	460e      	mov	r6, r1
  401f70:	4607      	mov	r7, r0
  401f72:	f102 0908 	add.w	r9, r2, #8
  401f76:	e919 0420 	ldmdb	r9, {r5, sl}
  401f7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401f7e:	d017      	beq.n	401fb0 <__sprint_r.part.0+0x54>
  401f80:	3d04      	subs	r5, #4
  401f82:	2400      	movs	r4, #0
  401f84:	e001      	b.n	401f8a <__sprint_r.part.0+0x2e>
  401f86:	45a0      	cmp	r8, r4
  401f88:	d010      	beq.n	401fac <__sprint_r.part.0+0x50>
  401f8a:	4632      	mov	r2, r6
  401f8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401f90:	4638      	mov	r0, r7
  401f92:	f001 f8bb 	bl	40310c <_fputwc_r>
  401f96:	1c43      	adds	r3, r0, #1
  401f98:	f104 0401 	add.w	r4, r4, #1
  401f9c:	d1f3      	bne.n	401f86 <__sprint_r.part.0+0x2a>
  401f9e:	2300      	movs	r3, #0
  401fa0:	f8cb 3008 	str.w	r3, [fp, #8]
  401fa4:	f8cb 3004 	str.w	r3, [fp, #4]
  401fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fac:	f8db 3008 	ldr.w	r3, [fp, #8]
  401fb0:	f02a 0a03 	bic.w	sl, sl, #3
  401fb4:	eba3 030a 	sub.w	r3, r3, sl
  401fb8:	f8cb 3008 	str.w	r3, [fp, #8]
  401fbc:	f109 0908 	add.w	r9, r9, #8
  401fc0:	2b00      	cmp	r3, #0
  401fc2:	d1d8      	bne.n	401f76 <__sprint_r.part.0+0x1a>
  401fc4:	2000      	movs	r0, #0
  401fc6:	e7ea      	b.n	401f9e <__sprint_r.part.0+0x42>
  401fc8:	f001 fa0a 	bl	4033e0 <__sfvwrite_r>
  401fcc:	2300      	movs	r3, #0
  401fce:	f8cb 3008 	str.w	r3, [fp, #8]
  401fd2:	f8cb 3004 	str.w	r3, [fp, #4]
  401fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fda:	bf00      	nop

00401fdc <_vfiprintf_r>:
  401fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fe0:	b0ad      	sub	sp, #180	; 0xb4
  401fe2:	461d      	mov	r5, r3
  401fe4:	468b      	mov	fp, r1
  401fe6:	4690      	mov	r8, r2
  401fe8:	9307      	str	r3, [sp, #28]
  401fea:	9006      	str	r0, [sp, #24]
  401fec:	b118      	cbz	r0, 401ff6 <_vfiprintf_r+0x1a>
  401fee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401ff0:	2b00      	cmp	r3, #0
  401ff2:	f000 80f3 	beq.w	4021dc <_vfiprintf_r+0x200>
  401ff6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401ffa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401ffe:	07df      	lsls	r7, r3, #31
  402000:	b281      	uxth	r1, r0
  402002:	d402      	bmi.n	40200a <_vfiprintf_r+0x2e>
  402004:	058e      	lsls	r6, r1, #22
  402006:	f140 80fc 	bpl.w	402202 <_vfiprintf_r+0x226>
  40200a:	048c      	lsls	r4, r1, #18
  40200c:	d40a      	bmi.n	402024 <_vfiprintf_r+0x48>
  40200e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402012:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40201a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40201e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402022:	b289      	uxth	r1, r1
  402024:	0708      	lsls	r0, r1, #28
  402026:	f140 80b3 	bpl.w	402190 <_vfiprintf_r+0x1b4>
  40202a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40202e:	2b00      	cmp	r3, #0
  402030:	f000 80ae 	beq.w	402190 <_vfiprintf_r+0x1b4>
  402034:	f001 031a 	and.w	r3, r1, #26
  402038:	2b0a      	cmp	r3, #10
  40203a:	f000 80b5 	beq.w	4021a8 <_vfiprintf_r+0x1cc>
  40203e:	2300      	movs	r3, #0
  402040:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402044:	930b      	str	r3, [sp, #44]	; 0x2c
  402046:	9311      	str	r3, [sp, #68]	; 0x44
  402048:	9310      	str	r3, [sp, #64]	; 0x40
  40204a:	9303      	str	r3, [sp, #12]
  40204c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402050:	46ca      	mov	sl, r9
  402052:	f8cd b010 	str.w	fp, [sp, #16]
  402056:	f898 3000 	ldrb.w	r3, [r8]
  40205a:	4644      	mov	r4, r8
  40205c:	b1fb      	cbz	r3, 40209e <_vfiprintf_r+0xc2>
  40205e:	2b25      	cmp	r3, #37	; 0x25
  402060:	d102      	bne.n	402068 <_vfiprintf_r+0x8c>
  402062:	e01c      	b.n	40209e <_vfiprintf_r+0xc2>
  402064:	2b25      	cmp	r3, #37	; 0x25
  402066:	d003      	beq.n	402070 <_vfiprintf_r+0x94>
  402068:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40206c:	2b00      	cmp	r3, #0
  40206e:	d1f9      	bne.n	402064 <_vfiprintf_r+0x88>
  402070:	eba4 0508 	sub.w	r5, r4, r8
  402074:	b19d      	cbz	r5, 40209e <_vfiprintf_r+0xc2>
  402076:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402078:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40207a:	f8ca 8000 	str.w	r8, [sl]
  40207e:	3301      	adds	r3, #1
  402080:	442a      	add	r2, r5
  402082:	2b07      	cmp	r3, #7
  402084:	f8ca 5004 	str.w	r5, [sl, #4]
  402088:	9211      	str	r2, [sp, #68]	; 0x44
  40208a:	9310      	str	r3, [sp, #64]	; 0x40
  40208c:	dd7a      	ble.n	402184 <_vfiprintf_r+0x1a8>
  40208e:	2a00      	cmp	r2, #0
  402090:	f040 84b0 	bne.w	4029f4 <_vfiprintf_r+0xa18>
  402094:	9b03      	ldr	r3, [sp, #12]
  402096:	9210      	str	r2, [sp, #64]	; 0x40
  402098:	442b      	add	r3, r5
  40209a:	46ca      	mov	sl, r9
  40209c:	9303      	str	r3, [sp, #12]
  40209e:	7823      	ldrb	r3, [r4, #0]
  4020a0:	2b00      	cmp	r3, #0
  4020a2:	f000 83e0 	beq.w	402866 <_vfiprintf_r+0x88a>
  4020a6:	2000      	movs	r0, #0
  4020a8:	f04f 0300 	mov.w	r3, #0
  4020ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4020b0:	f104 0801 	add.w	r8, r4, #1
  4020b4:	7862      	ldrb	r2, [r4, #1]
  4020b6:	4605      	mov	r5, r0
  4020b8:	4606      	mov	r6, r0
  4020ba:	4603      	mov	r3, r0
  4020bc:	f04f 34ff 	mov.w	r4, #4294967295
  4020c0:	f108 0801 	add.w	r8, r8, #1
  4020c4:	f1a2 0120 	sub.w	r1, r2, #32
  4020c8:	2958      	cmp	r1, #88	; 0x58
  4020ca:	f200 82de 	bhi.w	40268a <_vfiprintf_r+0x6ae>
  4020ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4020d2:	0221      	.short	0x0221
  4020d4:	02dc02dc 	.word	0x02dc02dc
  4020d8:	02dc0229 	.word	0x02dc0229
  4020dc:	02dc02dc 	.word	0x02dc02dc
  4020e0:	02dc02dc 	.word	0x02dc02dc
  4020e4:	028902dc 	.word	0x028902dc
  4020e8:	02dc0295 	.word	0x02dc0295
  4020ec:	02bd00a2 	.word	0x02bd00a2
  4020f0:	019f02dc 	.word	0x019f02dc
  4020f4:	01a401a4 	.word	0x01a401a4
  4020f8:	01a401a4 	.word	0x01a401a4
  4020fc:	01a401a4 	.word	0x01a401a4
  402100:	01a401a4 	.word	0x01a401a4
  402104:	02dc01a4 	.word	0x02dc01a4
  402108:	02dc02dc 	.word	0x02dc02dc
  40210c:	02dc02dc 	.word	0x02dc02dc
  402110:	02dc02dc 	.word	0x02dc02dc
  402114:	02dc02dc 	.word	0x02dc02dc
  402118:	01b202dc 	.word	0x01b202dc
  40211c:	02dc02dc 	.word	0x02dc02dc
  402120:	02dc02dc 	.word	0x02dc02dc
  402124:	02dc02dc 	.word	0x02dc02dc
  402128:	02dc02dc 	.word	0x02dc02dc
  40212c:	02dc02dc 	.word	0x02dc02dc
  402130:	02dc0197 	.word	0x02dc0197
  402134:	02dc02dc 	.word	0x02dc02dc
  402138:	02dc02dc 	.word	0x02dc02dc
  40213c:	02dc019b 	.word	0x02dc019b
  402140:	025302dc 	.word	0x025302dc
  402144:	02dc02dc 	.word	0x02dc02dc
  402148:	02dc02dc 	.word	0x02dc02dc
  40214c:	02dc02dc 	.word	0x02dc02dc
  402150:	02dc02dc 	.word	0x02dc02dc
  402154:	02dc02dc 	.word	0x02dc02dc
  402158:	021b025a 	.word	0x021b025a
  40215c:	02dc02dc 	.word	0x02dc02dc
  402160:	026e02dc 	.word	0x026e02dc
  402164:	02dc021b 	.word	0x02dc021b
  402168:	027302dc 	.word	0x027302dc
  40216c:	01f502dc 	.word	0x01f502dc
  402170:	02090182 	.word	0x02090182
  402174:	02dc02d7 	.word	0x02dc02d7
  402178:	02dc029a 	.word	0x02dc029a
  40217c:	02dc00a7 	.word	0x02dc00a7
  402180:	022e02dc 	.word	0x022e02dc
  402184:	f10a 0a08 	add.w	sl, sl, #8
  402188:	9b03      	ldr	r3, [sp, #12]
  40218a:	442b      	add	r3, r5
  40218c:	9303      	str	r3, [sp, #12]
  40218e:	e786      	b.n	40209e <_vfiprintf_r+0xc2>
  402190:	4659      	mov	r1, fp
  402192:	9806      	ldr	r0, [sp, #24]
  402194:	f000 fdac 	bl	402cf0 <__swsetup_r>
  402198:	bb18      	cbnz	r0, 4021e2 <_vfiprintf_r+0x206>
  40219a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40219e:	f001 031a 	and.w	r3, r1, #26
  4021a2:	2b0a      	cmp	r3, #10
  4021a4:	f47f af4b 	bne.w	40203e <_vfiprintf_r+0x62>
  4021a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4021ac:	2b00      	cmp	r3, #0
  4021ae:	f6ff af46 	blt.w	40203e <_vfiprintf_r+0x62>
  4021b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4021b6:	07db      	lsls	r3, r3, #31
  4021b8:	d405      	bmi.n	4021c6 <_vfiprintf_r+0x1ea>
  4021ba:	058f      	lsls	r7, r1, #22
  4021bc:	d403      	bmi.n	4021c6 <_vfiprintf_r+0x1ea>
  4021be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4021c2:	f001 fac3 	bl	40374c <__retarget_lock_release_recursive>
  4021c6:	462b      	mov	r3, r5
  4021c8:	4642      	mov	r2, r8
  4021ca:	4659      	mov	r1, fp
  4021cc:	9806      	ldr	r0, [sp, #24]
  4021ce:	f000 fd4d 	bl	402c6c <__sbprintf>
  4021d2:	9003      	str	r0, [sp, #12]
  4021d4:	9803      	ldr	r0, [sp, #12]
  4021d6:	b02d      	add	sp, #180	; 0xb4
  4021d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021dc:	f000 fef4 	bl	402fc8 <__sinit>
  4021e0:	e709      	b.n	401ff6 <_vfiprintf_r+0x1a>
  4021e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4021e6:	07d9      	lsls	r1, r3, #31
  4021e8:	d404      	bmi.n	4021f4 <_vfiprintf_r+0x218>
  4021ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4021ee:	059a      	lsls	r2, r3, #22
  4021f0:	f140 84aa 	bpl.w	402b48 <_vfiprintf_r+0xb6c>
  4021f4:	f04f 33ff 	mov.w	r3, #4294967295
  4021f8:	9303      	str	r3, [sp, #12]
  4021fa:	9803      	ldr	r0, [sp, #12]
  4021fc:	b02d      	add	sp, #180	; 0xb4
  4021fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402202:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402206:	f001 fa9f 	bl	403748 <__retarget_lock_acquire_recursive>
  40220a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40220e:	b281      	uxth	r1, r0
  402210:	e6fb      	b.n	40200a <_vfiprintf_r+0x2e>
  402212:	4276      	negs	r6, r6
  402214:	9207      	str	r2, [sp, #28]
  402216:	f043 0304 	orr.w	r3, r3, #4
  40221a:	f898 2000 	ldrb.w	r2, [r8]
  40221e:	e74f      	b.n	4020c0 <_vfiprintf_r+0xe4>
  402220:	9608      	str	r6, [sp, #32]
  402222:	069e      	lsls	r6, r3, #26
  402224:	f100 8450 	bmi.w	402ac8 <_vfiprintf_r+0xaec>
  402228:	9907      	ldr	r1, [sp, #28]
  40222a:	06dd      	lsls	r5, r3, #27
  40222c:	460a      	mov	r2, r1
  40222e:	f100 83ef 	bmi.w	402a10 <_vfiprintf_r+0xa34>
  402232:	0658      	lsls	r0, r3, #25
  402234:	f140 83ec 	bpl.w	402a10 <_vfiprintf_r+0xa34>
  402238:	880e      	ldrh	r6, [r1, #0]
  40223a:	3104      	adds	r1, #4
  40223c:	2700      	movs	r7, #0
  40223e:	2201      	movs	r2, #1
  402240:	9107      	str	r1, [sp, #28]
  402242:	f04f 0100 	mov.w	r1, #0
  402246:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40224a:	2500      	movs	r5, #0
  40224c:	1c61      	adds	r1, r4, #1
  40224e:	f000 8116 	beq.w	40247e <_vfiprintf_r+0x4a2>
  402252:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402256:	9102      	str	r1, [sp, #8]
  402258:	ea56 0107 	orrs.w	r1, r6, r7
  40225c:	f040 8114 	bne.w	402488 <_vfiprintf_r+0x4ac>
  402260:	2c00      	cmp	r4, #0
  402262:	f040 835c 	bne.w	40291e <_vfiprintf_r+0x942>
  402266:	2a00      	cmp	r2, #0
  402268:	f040 83b7 	bne.w	4029da <_vfiprintf_r+0x9fe>
  40226c:	f013 0301 	ands.w	r3, r3, #1
  402270:	9305      	str	r3, [sp, #20]
  402272:	f000 8457 	beq.w	402b24 <_vfiprintf_r+0xb48>
  402276:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40227a:	2330      	movs	r3, #48	; 0x30
  40227c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402280:	9b05      	ldr	r3, [sp, #20]
  402282:	42a3      	cmp	r3, r4
  402284:	bfb8      	it	lt
  402286:	4623      	movlt	r3, r4
  402288:	9301      	str	r3, [sp, #4]
  40228a:	b10d      	cbz	r5, 402290 <_vfiprintf_r+0x2b4>
  40228c:	3301      	adds	r3, #1
  40228e:	9301      	str	r3, [sp, #4]
  402290:	9b02      	ldr	r3, [sp, #8]
  402292:	f013 0302 	ands.w	r3, r3, #2
  402296:	9309      	str	r3, [sp, #36]	; 0x24
  402298:	d002      	beq.n	4022a0 <_vfiprintf_r+0x2c4>
  40229a:	9b01      	ldr	r3, [sp, #4]
  40229c:	3302      	adds	r3, #2
  40229e:	9301      	str	r3, [sp, #4]
  4022a0:	9b02      	ldr	r3, [sp, #8]
  4022a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4022a6:	930a      	str	r3, [sp, #40]	; 0x28
  4022a8:	f040 8217 	bne.w	4026da <_vfiprintf_r+0x6fe>
  4022ac:	9b08      	ldr	r3, [sp, #32]
  4022ae:	9a01      	ldr	r2, [sp, #4]
  4022b0:	1a9d      	subs	r5, r3, r2
  4022b2:	2d00      	cmp	r5, #0
  4022b4:	f340 8211 	ble.w	4026da <_vfiprintf_r+0x6fe>
  4022b8:	2d10      	cmp	r5, #16
  4022ba:	f340 8490 	ble.w	402bde <_vfiprintf_r+0xc02>
  4022be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4022c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022c2:	4ec4      	ldr	r6, [pc, #784]	; (4025d4 <_vfiprintf_r+0x5f8>)
  4022c4:	46d6      	mov	lr, sl
  4022c6:	2710      	movs	r7, #16
  4022c8:	46a2      	mov	sl, r4
  4022ca:	4619      	mov	r1, r3
  4022cc:	9c06      	ldr	r4, [sp, #24]
  4022ce:	e007      	b.n	4022e0 <_vfiprintf_r+0x304>
  4022d0:	f101 0c02 	add.w	ip, r1, #2
  4022d4:	f10e 0e08 	add.w	lr, lr, #8
  4022d8:	4601      	mov	r1, r0
  4022da:	3d10      	subs	r5, #16
  4022dc:	2d10      	cmp	r5, #16
  4022de:	dd11      	ble.n	402304 <_vfiprintf_r+0x328>
  4022e0:	1c48      	adds	r0, r1, #1
  4022e2:	3210      	adds	r2, #16
  4022e4:	2807      	cmp	r0, #7
  4022e6:	9211      	str	r2, [sp, #68]	; 0x44
  4022e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4022ec:	9010      	str	r0, [sp, #64]	; 0x40
  4022ee:	ddef      	ble.n	4022d0 <_vfiprintf_r+0x2f4>
  4022f0:	2a00      	cmp	r2, #0
  4022f2:	f040 81e4 	bne.w	4026be <_vfiprintf_r+0x6e2>
  4022f6:	3d10      	subs	r5, #16
  4022f8:	2d10      	cmp	r5, #16
  4022fa:	4611      	mov	r1, r2
  4022fc:	f04f 0c01 	mov.w	ip, #1
  402300:	46ce      	mov	lr, r9
  402302:	dced      	bgt.n	4022e0 <_vfiprintf_r+0x304>
  402304:	4654      	mov	r4, sl
  402306:	4661      	mov	r1, ip
  402308:	46f2      	mov	sl, lr
  40230a:	442a      	add	r2, r5
  40230c:	2907      	cmp	r1, #7
  40230e:	9211      	str	r2, [sp, #68]	; 0x44
  402310:	f8ca 6000 	str.w	r6, [sl]
  402314:	f8ca 5004 	str.w	r5, [sl, #4]
  402318:	9110      	str	r1, [sp, #64]	; 0x40
  40231a:	f300 82ec 	bgt.w	4028f6 <_vfiprintf_r+0x91a>
  40231e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402322:	f10a 0a08 	add.w	sl, sl, #8
  402326:	1c48      	adds	r0, r1, #1
  402328:	2d00      	cmp	r5, #0
  40232a:	f040 81de 	bne.w	4026ea <_vfiprintf_r+0x70e>
  40232e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402330:	2b00      	cmp	r3, #0
  402332:	f000 81f8 	beq.w	402726 <_vfiprintf_r+0x74a>
  402336:	3202      	adds	r2, #2
  402338:	a90e      	add	r1, sp, #56	; 0x38
  40233a:	2302      	movs	r3, #2
  40233c:	2807      	cmp	r0, #7
  40233e:	9211      	str	r2, [sp, #68]	; 0x44
  402340:	9010      	str	r0, [sp, #64]	; 0x40
  402342:	e88a 000a 	stmia.w	sl, {r1, r3}
  402346:	f340 81ea 	ble.w	40271e <_vfiprintf_r+0x742>
  40234a:	2a00      	cmp	r2, #0
  40234c:	f040 838c 	bne.w	402a68 <_vfiprintf_r+0xa8c>
  402350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402352:	2b80      	cmp	r3, #128	; 0x80
  402354:	f04f 0001 	mov.w	r0, #1
  402358:	4611      	mov	r1, r2
  40235a:	46ca      	mov	sl, r9
  40235c:	f040 81e7 	bne.w	40272e <_vfiprintf_r+0x752>
  402360:	9b08      	ldr	r3, [sp, #32]
  402362:	9d01      	ldr	r5, [sp, #4]
  402364:	1b5e      	subs	r6, r3, r5
  402366:	2e00      	cmp	r6, #0
  402368:	f340 81e1 	ble.w	40272e <_vfiprintf_r+0x752>
  40236c:	2e10      	cmp	r6, #16
  40236e:	4d9a      	ldr	r5, [pc, #616]	; (4025d8 <_vfiprintf_r+0x5fc>)
  402370:	f340 8450 	ble.w	402c14 <_vfiprintf_r+0xc38>
  402374:	46d4      	mov	ip, sl
  402376:	2710      	movs	r7, #16
  402378:	46a2      	mov	sl, r4
  40237a:	9c06      	ldr	r4, [sp, #24]
  40237c:	e007      	b.n	40238e <_vfiprintf_r+0x3b2>
  40237e:	f101 0e02 	add.w	lr, r1, #2
  402382:	f10c 0c08 	add.w	ip, ip, #8
  402386:	4601      	mov	r1, r0
  402388:	3e10      	subs	r6, #16
  40238a:	2e10      	cmp	r6, #16
  40238c:	dd11      	ble.n	4023b2 <_vfiprintf_r+0x3d6>
  40238e:	1c48      	adds	r0, r1, #1
  402390:	3210      	adds	r2, #16
  402392:	2807      	cmp	r0, #7
  402394:	9211      	str	r2, [sp, #68]	; 0x44
  402396:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40239a:	9010      	str	r0, [sp, #64]	; 0x40
  40239c:	ddef      	ble.n	40237e <_vfiprintf_r+0x3a2>
  40239e:	2a00      	cmp	r2, #0
  4023a0:	f040 829d 	bne.w	4028de <_vfiprintf_r+0x902>
  4023a4:	3e10      	subs	r6, #16
  4023a6:	2e10      	cmp	r6, #16
  4023a8:	f04f 0e01 	mov.w	lr, #1
  4023ac:	4611      	mov	r1, r2
  4023ae:	46cc      	mov	ip, r9
  4023b0:	dced      	bgt.n	40238e <_vfiprintf_r+0x3b2>
  4023b2:	4654      	mov	r4, sl
  4023b4:	46e2      	mov	sl, ip
  4023b6:	4432      	add	r2, r6
  4023b8:	f1be 0f07 	cmp.w	lr, #7
  4023bc:	9211      	str	r2, [sp, #68]	; 0x44
  4023be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4023c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4023c6:	f300 8369 	bgt.w	402a9c <_vfiprintf_r+0xac0>
  4023ca:	f10a 0a08 	add.w	sl, sl, #8
  4023ce:	f10e 0001 	add.w	r0, lr, #1
  4023d2:	4671      	mov	r1, lr
  4023d4:	e1ab      	b.n	40272e <_vfiprintf_r+0x752>
  4023d6:	9608      	str	r6, [sp, #32]
  4023d8:	f013 0220 	ands.w	r2, r3, #32
  4023dc:	f040 838c 	bne.w	402af8 <_vfiprintf_r+0xb1c>
  4023e0:	f013 0110 	ands.w	r1, r3, #16
  4023e4:	f040 831a 	bne.w	402a1c <_vfiprintf_r+0xa40>
  4023e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4023ec:	f000 8316 	beq.w	402a1c <_vfiprintf_r+0xa40>
  4023f0:	9807      	ldr	r0, [sp, #28]
  4023f2:	460a      	mov	r2, r1
  4023f4:	4601      	mov	r1, r0
  4023f6:	3104      	adds	r1, #4
  4023f8:	8806      	ldrh	r6, [r0, #0]
  4023fa:	9107      	str	r1, [sp, #28]
  4023fc:	2700      	movs	r7, #0
  4023fe:	e720      	b.n	402242 <_vfiprintf_r+0x266>
  402400:	9608      	str	r6, [sp, #32]
  402402:	f043 0310 	orr.w	r3, r3, #16
  402406:	e7e7      	b.n	4023d8 <_vfiprintf_r+0x3fc>
  402408:	9608      	str	r6, [sp, #32]
  40240a:	f043 0310 	orr.w	r3, r3, #16
  40240e:	e708      	b.n	402222 <_vfiprintf_r+0x246>
  402410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402414:	f898 2000 	ldrb.w	r2, [r8]
  402418:	e652      	b.n	4020c0 <_vfiprintf_r+0xe4>
  40241a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40241e:	2600      	movs	r6, #0
  402420:	f818 2b01 	ldrb.w	r2, [r8], #1
  402424:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402428:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40242c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402430:	2909      	cmp	r1, #9
  402432:	d9f5      	bls.n	402420 <_vfiprintf_r+0x444>
  402434:	e646      	b.n	4020c4 <_vfiprintf_r+0xe8>
  402436:	9608      	str	r6, [sp, #32]
  402438:	2800      	cmp	r0, #0
  40243a:	f040 8408 	bne.w	402c4e <_vfiprintf_r+0xc72>
  40243e:	f043 0310 	orr.w	r3, r3, #16
  402442:	069e      	lsls	r6, r3, #26
  402444:	f100 834c 	bmi.w	402ae0 <_vfiprintf_r+0xb04>
  402448:	06dd      	lsls	r5, r3, #27
  40244a:	f100 82f3 	bmi.w	402a34 <_vfiprintf_r+0xa58>
  40244e:	0658      	lsls	r0, r3, #25
  402450:	f140 82f0 	bpl.w	402a34 <_vfiprintf_r+0xa58>
  402454:	9d07      	ldr	r5, [sp, #28]
  402456:	f9b5 6000 	ldrsh.w	r6, [r5]
  40245a:	462a      	mov	r2, r5
  40245c:	17f7      	asrs	r7, r6, #31
  40245e:	3204      	adds	r2, #4
  402460:	4630      	mov	r0, r6
  402462:	4639      	mov	r1, r7
  402464:	9207      	str	r2, [sp, #28]
  402466:	2800      	cmp	r0, #0
  402468:	f171 0200 	sbcs.w	r2, r1, #0
  40246c:	f2c0 835d 	blt.w	402b2a <_vfiprintf_r+0xb4e>
  402470:	1c61      	adds	r1, r4, #1
  402472:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402476:	f04f 0201 	mov.w	r2, #1
  40247a:	f47f aeea 	bne.w	402252 <_vfiprintf_r+0x276>
  40247e:	ea56 0107 	orrs.w	r1, r6, r7
  402482:	f000 824d 	beq.w	402920 <_vfiprintf_r+0x944>
  402486:	9302      	str	r3, [sp, #8]
  402488:	2a01      	cmp	r2, #1
  40248a:	f000 828c 	beq.w	4029a6 <_vfiprintf_r+0x9ca>
  40248e:	2a02      	cmp	r2, #2
  402490:	f040 825c 	bne.w	40294c <_vfiprintf_r+0x970>
  402494:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402496:	46cb      	mov	fp, r9
  402498:	0933      	lsrs	r3, r6, #4
  40249a:	f006 010f 	and.w	r1, r6, #15
  40249e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4024a2:	093a      	lsrs	r2, r7, #4
  4024a4:	461e      	mov	r6, r3
  4024a6:	4617      	mov	r7, r2
  4024a8:	5c43      	ldrb	r3, [r0, r1]
  4024aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4024ae:	ea56 0307 	orrs.w	r3, r6, r7
  4024b2:	d1f1      	bne.n	402498 <_vfiprintf_r+0x4bc>
  4024b4:	eba9 030b 	sub.w	r3, r9, fp
  4024b8:	9305      	str	r3, [sp, #20]
  4024ba:	e6e1      	b.n	402280 <_vfiprintf_r+0x2a4>
  4024bc:	2800      	cmp	r0, #0
  4024be:	f040 83c0 	bne.w	402c42 <_vfiprintf_r+0xc66>
  4024c2:	0699      	lsls	r1, r3, #26
  4024c4:	f100 8367 	bmi.w	402b96 <_vfiprintf_r+0xbba>
  4024c8:	06da      	lsls	r2, r3, #27
  4024ca:	f100 80f1 	bmi.w	4026b0 <_vfiprintf_r+0x6d4>
  4024ce:	065b      	lsls	r3, r3, #25
  4024d0:	f140 80ee 	bpl.w	4026b0 <_vfiprintf_r+0x6d4>
  4024d4:	9a07      	ldr	r2, [sp, #28]
  4024d6:	6813      	ldr	r3, [r2, #0]
  4024d8:	3204      	adds	r2, #4
  4024da:	9207      	str	r2, [sp, #28]
  4024dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4024e0:	801a      	strh	r2, [r3, #0]
  4024e2:	e5b8      	b.n	402056 <_vfiprintf_r+0x7a>
  4024e4:	9807      	ldr	r0, [sp, #28]
  4024e6:	4a3d      	ldr	r2, [pc, #244]	; (4025dc <_vfiprintf_r+0x600>)
  4024e8:	9608      	str	r6, [sp, #32]
  4024ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4024ec:	6806      	ldr	r6, [r0, #0]
  4024ee:	2278      	movs	r2, #120	; 0x78
  4024f0:	2130      	movs	r1, #48	; 0x30
  4024f2:	3004      	adds	r0, #4
  4024f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4024f8:	f043 0302 	orr.w	r3, r3, #2
  4024fc:	9007      	str	r0, [sp, #28]
  4024fe:	2700      	movs	r7, #0
  402500:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402504:	2202      	movs	r2, #2
  402506:	e69c      	b.n	402242 <_vfiprintf_r+0x266>
  402508:	9608      	str	r6, [sp, #32]
  40250a:	2800      	cmp	r0, #0
  40250c:	d099      	beq.n	402442 <_vfiprintf_r+0x466>
  40250e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402512:	e796      	b.n	402442 <_vfiprintf_r+0x466>
  402514:	f898 2000 	ldrb.w	r2, [r8]
  402518:	2d00      	cmp	r5, #0
  40251a:	f47f add1 	bne.w	4020c0 <_vfiprintf_r+0xe4>
  40251e:	2001      	movs	r0, #1
  402520:	2520      	movs	r5, #32
  402522:	e5cd      	b.n	4020c0 <_vfiprintf_r+0xe4>
  402524:	f043 0301 	orr.w	r3, r3, #1
  402528:	f898 2000 	ldrb.w	r2, [r8]
  40252c:	e5c8      	b.n	4020c0 <_vfiprintf_r+0xe4>
  40252e:	9608      	str	r6, [sp, #32]
  402530:	2800      	cmp	r0, #0
  402532:	f040 8393 	bne.w	402c5c <_vfiprintf_r+0xc80>
  402536:	4929      	ldr	r1, [pc, #164]	; (4025dc <_vfiprintf_r+0x600>)
  402538:	910b      	str	r1, [sp, #44]	; 0x2c
  40253a:	069f      	lsls	r7, r3, #26
  40253c:	f100 82e8 	bmi.w	402b10 <_vfiprintf_r+0xb34>
  402540:	9807      	ldr	r0, [sp, #28]
  402542:	06de      	lsls	r6, r3, #27
  402544:	4601      	mov	r1, r0
  402546:	f100 8270 	bmi.w	402a2a <_vfiprintf_r+0xa4e>
  40254a:	065d      	lsls	r5, r3, #25
  40254c:	f140 826d 	bpl.w	402a2a <_vfiprintf_r+0xa4e>
  402550:	3104      	adds	r1, #4
  402552:	8806      	ldrh	r6, [r0, #0]
  402554:	9107      	str	r1, [sp, #28]
  402556:	2700      	movs	r7, #0
  402558:	07d8      	lsls	r0, r3, #31
  40255a:	f140 8222 	bpl.w	4029a2 <_vfiprintf_r+0x9c6>
  40255e:	ea56 0107 	orrs.w	r1, r6, r7
  402562:	f000 821e 	beq.w	4029a2 <_vfiprintf_r+0x9c6>
  402566:	2130      	movs	r1, #48	; 0x30
  402568:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40256c:	f043 0302 	orr.w	r3, r3, #2
  402570:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402574:	2202      	movs	r2, #2
  402576:	e664      	b.n	402242 <_vfiprintf_r+0x266>
  402578:	9608      	str	r6, [sp, #32]
  40257a:	2800      	cmp	r0, #0
  40257c:	f040 836b 	bne.w	402c56 <_vfiprintf_r+0xc7a>
  402580:	4917      	ldr	r1, [pc, #92]	; (4025e0 <_vfiprintf_r+0x604>)
  402582:	910b      	str	r1, [sp, #44]	; 0x2c
  402584:	e7d9      	b.n	40253a <_vfiprintf_r+0x55e>
  402586:	9907      	ldr	r1, [sp, #28]
  402588:	9608      	str	r6, [sp, #32]
  40258a:	680a      	ldr	r2, [r1, #0]
  40258c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402590:	f04f 0000 	mov.w	r0, #0
  402594:	460a      	mov	r2, r1
  402596:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40259a:	3204      	adds	r2, #4
  40259c:	2001      	movs	r0, #1
  40259e:	9001      	str	r0, [sp, #4]
  4025a0:	9207      	str	r2, [sp, #28]
  4025a2:	9005      	str	r0, [sp, #20]
  4025a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4025a8:	9302      	str	r3, [sp, #8]
  4025aa:	2400      	movs	r4, #0
  4025ac:	e670      	b.n	402290 <_vfiprintf_r+0x2b4>
  4025ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025b2:	f898 2000 	ldrb.w	r2, [r8]
  4025b6:	e583      	b.n	4020c0 <_vfiprintf_r+0xe4>
  4025b8:	f898 2000 	ldrb.w	r2, [r8]
  4025bc:	2a6c      	cmp	r2, #108	; 0x6c
  4025be:	bf03      	ittte	eq
  4025c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4025c4:	f043 0320 	orreq.w	r3, r3, #32
  4025c8:	f108 0801 	addeq.w	r8, r8, #1
  4025cc:	f043 0310 	orrne.w	r3, r3, #16
  4025d0:	e576      	b.n	4020c0 <_vfiprintf_r+0xe4>
  4025d2:	bf00      	nop
  4025d4:	004049b8 	.word	0x004049b8
  4025d8:	004049c8 	.word	0x004049c8
  4025dc:	0040499c 	.word	0x0040499c
  4025e0:	00404988 	.word	0x00404988
  4025e4:	9907      	ldr	r1, [sp, #28]
  4025e6:	680e      	ldr	r6, [r1, #0]
  4025e8:	460a      	mov	r2, r1
  4025ea:	2e00      	cmp	r6, #0
  4025ec:	f102 0204 	add.w	r2, r2, #4
  4025f0:	f6ff ae0f 	blt.w	402212 <_vfiprintf_r+0x236>
  4025f4:	9207      	str	r2, [sp, #28]
  4025f6:	f898 2000 	ldrb.w	r2, [r8]
  4025fa:	e561      	b.n	4020c0 <_vfiprintf_r+0xe4>
  4025fc:	f898 2000 	ldrb.w	r2, [r8]
  402600:	2001      	movs	r0, #1
  402602:	252b      	movs	r5, #43	; 0x2b
  402604:	e55c      	b.n	4020c0 <_vfiprintf_r+0xe4>
  402606:	9907      	ldr	r1, [sp, #28]
  402608:	9608      	str	r6, [sp, #32]
  40260a:	f8d1 b000 	ldr.w	fp, [r1]
  40260e:	f04f 0200 	mov.w	r2, #0
  402612:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402616:	1d0e      	adds	r6, r1, #4
  402618:	f1bb 0f00 	cmp.w	fp, #0
  40261c:	f000 82e5 	beq.w	402bea <_vfiprintf_r+0xc0e>
  402620:	1c67      	adds	r7, r4, #1
  402622:	f000 82c4 	beq.w	402bae <_vfiprintf_r+0xbd2>
  402626:	4622      	mov	r2, r4
  402628:	2100      	movs	r1, #0
  40262a:	4658      	mov	r0, fp
  40262c:	9301      	str	r3, [sp, #4]
  40262e:	f001 fbd7 	bl	403de0 <memchr>
  402632:	9b01      	ldr	r3, [sp, #4]
  402634:	2800      	cmp	r0, #0
  402636:	f000 82e5 	beq.w	402c04 <_vfiprintf_r+0xc28>
  40263a:	eba0 020b 	sub.w	r2, r0, fp
  40263e:	9205      	str	r2, [sp, #20]
  402640:	9607      	str	r6, [sp, #28]
  402642:	9302      	str	r3, [sp, #8]
  402644:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402648:	2400      	movs	r4, #0
  40264a:	e619      	b.n	402280 <_vfiprintf_r+0x2a4>
  40264c:	f898 2000 	ldrb.w	r2, [r8]
  402650:	2a2a      	cmp	r2, #42	; 0x2a
  402652:	f108 0701 	add.w	r7, r8, #1
  402656:	f000 82e9 	beq.w	402c2c <_vfiprintf_r+0xc50>
  40265a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40265e:	2909      	cmp	r1, #9
  402660:	46b8      	mov	r8, r7
  402662:	f04f 0400 	mov.w	r4, #0
  402666:	f63f ad2d 	bhi.w	4020c4 <_vfiprintf_r+0xe8>
  40266a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40266e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402672:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402676:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40267a:	2909      	cmp	r1, #9
  40267c:	d9f5      	bls.n	40266a <_vfiprintf_r+0x68e>
  40267e:	e521      	b.n	4020c4 <_vfiprintf_r+0xe8>
  402680:	f043 0320 	orr.w	r3, r3, #32
  402684:	f898 2000 	ldrb.w	r2, [r8]
  402688:	e51a      	b.n	4020c0 <_vfiprintf_r+0xe4>
  40268a:	9608      	str	r6, [sp, #32]
  40268c:	2800      	cmp	r0, #0
  40268e:	f040 82db 	bne.w	402c48 <_vfiprintf_r+0xc6c>
  402692:	2a00      	cmp	r2, #0
  402694:	f000 80e7 	beq.w	402866 <_vfiprintf_r+0x88a>
  402698:	2101      	movs	r1, #1
  40269a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40269e:	f04f 0200 	mov.w	r2, #0
  4026a2:	9101      	str	r1, [sp, #4]
  4026a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4026a8:	9105      	str	r1, [sp, #20]
  4026aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4026ae:	e77b      	b.n	4025a8 <_vfiprintf_r+0x5cc>
  4026b0:	9a07      	ldr	r2, [sp, #28]
  4026b2:	6813      	ldr	r3, [r2, #0]
  4026b4:	3204      	adds	r2, #4
  4026b6:	9207      	str	r2, [sp, #28]
  4026b8:	9a03      	ldr	r2, [sp, #12]
  4026ba:	601a      	str	r2, [r3, #0]
  4026bc:	e4cb      	b.n	402056 <_vfiprintf_r+0x7a>
  4026be:	aa0f      	add	r2, sp, #60	; 0x3c
  4026c0:	9904      	ldr	r1, [sp, #16]
  4026c2:	4620      	mov	r0, r4
  4026c4:	f7ff fc4a 	bl	401f5c <__sprint_r.part.0>
  4026c8:	2800      	cmp	r0, #0
  4026ca:	f040 8139 	bne.w	402940 <_vfiprintf_r+0x964>
  4026ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026d2:	f101 0c01 	add.w	ip, r1, #1
  4026d6:	46ce      	mov	lr, r9
  4026d8:	e5ff      	b.n	4022da <_vfiprintf_r+0x2fe>
  4026da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026de:	1c48      	adds	r0, r1, #1
  4026e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4026e4:	2d00      	cmp	r5, #0
  4026e6:	f43f ae22 	beq.w	40232e <_vfiprintf_r+0x352>
  4026ea:	3201      	adds	r2, #1
  4026ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4026f0:	2101      	movs	r1, #1
  4026f2:	2807      	cmp	r0, #7
  4026f4:	9211      	str	r2, [sp, #68]	; 0x44
  4026f6:	9010      	str	r0, [sp, #64]	; 0x40
  4026f8:	f8ca 5000 	str.w	r5, [sl]
  4026fc:	f8ca 1004 	str.w	r1, [sl, #4]
  402700:	f340 8108 	ble.w	402914 <_vfiprintf_r+0x938>
  402704:	2a00      	cmp	r2, #0
  402706:	f040 81bc 	bne.w	402a82 <_vfiprintf_r+0xaa6>
  40270a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40270c:	2b00      	cmp	r3, #0
  40270e:	f43f ae1f 	beq.w	402350 <_vfiprintf_r+0x374>
  402712:	ab0e      	add	r3, sp, #56	; 0x38
  402714:	2202      	movs	r2, #2
  402716:	4608      	mov	r0, r1
  402718:	931c      	str	r3, [sp, #112]	; 0x70
  40271a:	921d      	str	r2, [sp, #116]	; 0x74
  40271c:	46ca      	mov	sl, r9
  40271e:	4601      	mov	r1, r0
  402720:	f10a 0a08 	add.w	sl, sl, #8
  402724:	3001      	adds	r0, #1
  402726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402728:	2b80      	cmp	r3, #128	; 0x80
  40272a:	f43f ae19 	beq.w	402360 <_vfiprintf_r+0x384>
  40272e:	9b05      	ldr	r3, [sp, #20]
  402730:	1ae4      	subs	r4, r4, r3
  402732:	2c00      	cmp	r4, #0
  402734:	dd2e      	ble.n	402794 <_vfiprintf_r+0x7b8>
  402736:	2c10      	cmp	r4, #16
  402738:	4db3      	ldr	r5, [pc, #716]	; (402a08 <_vfiprintf_r+0xa2c>)
  40273a:	dd1e      	ble.n	40277a <_vfiprintf_r+0x79e>
  40273c:	46d6      	mov	lr, sl
  40273e:	2610      	movs	r6, #16
  402740:	9f06      	ldr	r7, [sp, #24]
  402742:	f8dd a010 	ldr.w	sl, [sp, #16]
  402746:	e006      	b.n	402756 <_vfiprintf_r+0x77a>
  402748:	1c88      	adds	r0, r1, #2
  40274a:	f10e 0e08 	add.w	lr, lr, #8
  40274e:	4619      	mov	r1, r3
  402750:	3c10      	subs	r4, #16
  402752:	2c10      	cmp	r4, #16
  402754:	dd10      	ble.n	402778 <_vfiprintf_r+0x79c>
  402756:	1c4b      	adds	r3, r1, #1
  402758:	3210      	adds	r2, #16
  40275a:	2b07      	cmp	r3, #7
  40275c:	9211      	str	r2, [sp, #68]	; 0x44
  40275e:	e88e 0060 	stmia.w	lr, {r5, r6}
  402762:	9310      	str	r3, [sp, #64]	; 0x40
  402764:	ddf0      	ble.n	402748 <_vfiprintf_r+0x76c>
  402766:	2a00      	cmp	r2, #0
  402768:	d165      	bne.n	402836 <_vfiprintf_r+0x85a>
  40276a:	3c10      	subs	r4, #16
  40276c:	2c10      	cmp	r4, #16
  40276e:	f04f 0001 	mov.w	r0, #1
  402772:	4611      	mov	r1, r2
  402774:	46ce      	mov	lr, r9
  402776:	dcee      	bgt.n	402756 <_vfiprintf_r+0x77a>
  402778:	46f2      	mov	sl, lr
  40277a:	4422      	add	r2, r4
  40277c:	2807      	cmp	r0, #7
  40277e:	9211      	str	r2, [sp, #68]	; 0x44
  402780:	f8ca 5000 	str.w	r5, [sl]
  402784:	f8ca 4004 	str.w	r4, [sl, #4]
  402788:	9010      	str	r0, [sp, #64]	; 0x40
  40278a:	f300 8085 	bgt.w	402898 <_vfiprintf_r+0x8bc>
  40278e:	f10a 0a08 	add.w	sl, sl, #8
  402792:	3001      	adds	r0, #1
  402794:	9905      	ldr	r1, [sp, #20]
  402796:	f8ca b000 	str.w	fp, [sl]
  40279a:	440a      	add	r2, r1
  40279c:	2807      	cmp	r0, #7
  40279e:	9211      	str	r2, [sp, #68]	; 0x44
  4027a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4027a4:	9010      	str	r0, [sp, #64]	; 0x40
  4027a6:	f340 8082 	ble.w	4028ae <_vfiprintf_r+0x8d2>
  4027aa:	2a00      	cmp	r2, #0
  4027ac:	f040 8118 	bne.w	4029e0 <_vfiprintf_r+0xa04>
  4027b0:	9b02      	ldr	r3, [sp, #8]
  4027b2:	9210      	str	r2, [sp, #64]	; 0x40
  4027b4:	0758      	lsls	r0, r3, #29
  4027b6:	d535      	bpl.n	402824 <_vfiprintf_r+0x848>
  4027b8:	9b08      	ldr	r3, [sp, #32]
  4027ba:	9901      	ldr	r1, [sp, #4]
  4027bc:	1a5c      	subs	r4, r3, r1
  4027be:	2c00      	cmp	r4, #0
  4027c0:	f340 80e7 	ble.w	402992 <_vfiprintf_r+0x9b6>
  4027c4:	46ca      	mov	sl, r9
  4027c6:	2c10      	cmp	r4, #16
  4027c8:	f340 8218 	ble.w	402bfc <_vfiprintf_r+0xc20>
  4027cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027ce:	4e8f      	ldr	r6, [pc, #572]	; (402a0c <_vfiprintf_r+0xa30>)
  4027d0:	9f06      	ldr	r7, [sp, #24]
  4027d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4027d6:	2510      	movs	r5, #16
  4027d8:	e006      	b.n	4027e8 <_vfiprintf_r+0x80c>
  4027da:	1c88      	adds	r0, r1, #2
  4027dc:	f10a 0a08 	add.w	sl, sl, #8
  4027e0:	4619      	mov	r1, r3
  4027e2:	3c10      	subs	r4, #16
  4027e4:	2c10      	cmp	r4, #16
  4027e6:	dd11      	ble.n	40280c <_vfiprintf_r+0x830>
  4027e8:	1c4b      	adds	r3, r1, #1
  4027ea:	3210      	adds	r2, #16
  4027ec:	2b07      	cmp	r3, #7
  4027ee:	9211      	str	r2, [sp, #68]	; 0x44
  4027f0:	f8ca 6000 	str.w	r6, [sl]
  4027f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4027f8:	9310      	str	r3, [sp, #64]	; 0x40
  4027fa:	ddee      	ble.n	4027da <_vfiprintf_r+0x7fe>
  4027fc:	bb42      	cbnz	r2, 402850 <_vfiprintf_r+0x874>
  4027fe:	3c10      	subs	r4, #16
  402800:	2c10      	cmp	r4, #16
  402802:	f04f 0001 	mov.w	r0, #1
  402806:	4611      	mov	r1, r2
  402808:	46ca      	mov	sl, r9
  40280a:	dced      	bgt.n	4027e8 <_vfiprintf_r+0x80c>
  40280c:	4422      	add	r2, r4
  40280e:	2807      	cmp	r0, #7
  402810:	9211      	str	r2, [sp, #68]	; 0x44
  402812:	f8ca 6000 	str.w	r6, [sl]
  402816:	f8ca 4004 	str.w	r4, [sl, #4]
  40281a:	9010      	str	r0, [sp, #64]	; 0x40
  40281c:	dd51      	ble.n	4028c2 <_vfiprintf_r+0x8e6>
  40281e:	2a00      	cmp	r2, #0
  402820:	f040 819b 	bne.w	402b5a <_vfiprintf_r+0xb7e>
  402824:	9b03      	ldr	r3, [sp, #12]
  402826:	9a08      	ldr	r2, [sp, #32]
  402828:	9901      	ldr	r1, [sp, #4]
  40282a:	428a      	cmp	r2, r1
  40282c:	bfac      	ite	ge
  40282e:	189b      	addge	r3, r3, r2
  402830:	185b      	addlt	r3, r3, r1
  402832:	9303      	str	r3, [sp, #12]
  402834:	e04e      	b.n	4028d4 <_vfiprintf_r+0x8f8>
  402836:	aa0f      	add	r2, sp, #60	; 0x3c
  402838:	4651      	mov	r1, sl
  40283a:	4638      	mov	r0, r7
  40283c:	f7ff fb8e 	bl	401f5c <__sprint_r.part.0>
  402840:	2800      	cmp	r0, #0
  402842:	f040 813f 	bne.w	402ac4 <_vfiprintf_r+0xae8>
  402846:	9910      	ldr	r1, [sp, #64]	; 0x40
  402848:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40284a:	1c48      	adds	r0, r1, #1
  40284c:	46ce      	mov	lr, r9
  40284e:	e77f      	b.n	402750 <_vfiprintf_r+0x774>
  402850:	aa0f      	add	r2, sp, #60	; 0x3c
  402852:	4659      	mov	r1, fp
  402854:	4638      	mov	r0, r7
  402856:	f7ff fb81 	bl	401f5c <__sprint_r.part.0>
  40285a:	b960      	cbnz	r0, 402876 <_vfiprintf_r+0x89a>
  40285c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40285e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402860:	1c48      	adds	r0, r1, #1
  402862:	46ca      	mov	sl, r9
  402864:	e7bd      	b.n	4027e2 <_vfiprintf_r+0x806>
  402866:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402868:	f8dd b010 	ldr.w	fp, [sp, #16]
  40286c:	2b00      	cmp	r3, #0
  40286e:	f040 81d4 	bne.w	402c1a <_vfiprintf_r+0xc3e>
  402872:	2300      	movs	r3, #0
  402874:	9310      	str	r3, [sp, #64]	; 0x40
  402876:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40287a:	f013 0f01 	tst.w	r3, #1
  40287e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402882:	d102      	bne.n	40288a <_vfiprintf_r+0x8ae>
  402884:	059a      	lsls	r2, r3, #22
  402886:	f140 80de 	bpl.w	402a46 <_vfiprintf_r+0xa6a>
  40288a:	065b      	lsls	r3, r3, #25
  40288c:	f53f acb2 	bmi.w	4021f4 <_vfiprintf_r+0x218>
  402890:	9803      	ldr	r0, [sp, #12]
  402892:	b02d      	add	sp, #180	; 0xb4
  402894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402898:	2a00      	cmp	r2, #0
  40289a:	f040 8106 	bne.w	402aaa <_vfiprintf_r+0xace>
  40289e:	9a05      	ldr	r2, [sp, #20]
  4028a0:	921d      	str	r2, [sp, #116]	; 0x74
  4028a2:	2301      	movs	r3, #1
  4028a4:	9211      	str	r2, [sp, #68]	; 0x44
  4028a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4028aa:	9310      	str	r3, [sp, #64]	; 0x40
  4028ac:	46ca      	mov	sl, r9
  4028ae:	f10a 0a08 	add.w	sl, sl, #8
  4028b2:	9b02      	ldr	r3, [sp, #8]
  4028b4:	0759      	lsls	r1, r3, #29
  4028b6:	d504      	bpl.n	4028c2 <_vfiprintf_r+0x8e6>
  4028b8:	9b08      	ldr	r3, [sp, #32]
  4028ba:	9901      	ldr	r1, [sp, #4]
  4028bc:	1a5c      	subs	r4, r3, r1
  4028be:	2c00      	cmp	r4, #0
  4028c0:	dc81      	bgt.n	4027c6 <_vfiprintf_r+0x7ea>
  4028c2:	9b03      	ldr	r3, [sp, #12]
  4028c4:	9908      	ldr	r1, [sp, #32]
  4028c6:	9801      	ldr	r0, [sp, #4]
  4028c8:	4281      	cmp	r1, r0
  4028ca:	bfac      	ite	ge
  4028cc:	185b      	addge	r3, r3, r1
  4028ce:	181b      	addlt	r3, r3, r0
  4028d0:	9303      	str	r3, [sp, #12]
  4028d2:	bb72      	cbnz	r2, 402932 <_vfiprintf_r+0x956>
  4028d4:	2300      	movs	r3, #0
  4028d6:	9310      	str	r3, [sp, #64]	; 0x40
  4028d8:	46ca      	mov	sl, r9
  4028da:	f7ff bbbc 	b.w	402056 <_vfiprintf_r+0x7a>
  4028de:	aa0f      	add	r2, sp, #60	; 0x3c
  4028e0:	9904      	ldr	r1, [sp, #16]
  4028e2:	4620      	mov	r0, r4
  4028e4:	f7ff fb3a 	bl	401f5c <__sprint_r.part.0>
  4028e8:	bb50      	cbnz	r0, 402940 <_vfiprintf_r+0x964>
  4028ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028ee:	f101 0e01 	add.w	lr, r1, #1
  4028f2:	46cc      	mov	ip, r9
  4028f4:	e548      	b.n	402388 <_vfiprintf_r+0x3ac>
  4028f6:	2a00      	cmp	r2, #0
  4028f8:	f040 8140 	bne.w	402b7c <_vfiprintf_r+0xba0>
  4028fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402900:	2900      	cmp	r1, #0
  402902:	f000 811b 	beq.w	402b3c <_vfiprintf_r+0xb60>
  402906:	2201      	movs	r2, #1
  402908:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40290c:	4610      	mov	r0, r2
  40290e:	921d      	str	r2, [sp, #116]	; 0x74
  402910:	911c      	str	r1, [sp, #112]	; 0x70
  402912:	46ca      	mov	sl, r9
  402914:	4601      	mov	r1, r0
  402916:	f10a 0a08 	add.w	sl, sl, #8
  40291a:	3001      	adds	r0, #1
  40291c:	e507      	b.n	40232e <_vfiprintf_r+0x352>
  40291e:	9b02      	ldr	r3, [sp, #8]
  402920:	2a01      	cmp	r2, #1
  402922:	f000 8098 	beq.w	402a56 <_vfiprintf_r+0xa7a>
  402926:	2a02      	cmp	r2, #2
  402928:	d10d      	bne.n	402946 <_vfiprintf_r+0x96a>
  40292a:	9302      	str	r3, [sp, #8]
  40292c:	2600      	movs	r6, #0
  40292e:	2700      	movs	r7, #0
  402930:	e5b0      	b.n	402494 <_vfiprintf_r+0x4b8>
  402932:	aa0f      	add	r2, sp, #60	; 0x3c
  402934:	9904      	ldr	r1, [sp, #16]
  402936:	9806      	ldr	r0, [sp, #24]
  402938:	f7ff fb10 	bl	401f5c <__sprint_r.part.0>
  40293c:	2800      	cmp	r0, #0
  40293e:	d0c9      	beq.n	4028d4 <_vfiprintf_r+0x8f8>
  402940:	f8dd b010 	ldr.w	fp, [sp, #16]
  402944:	e797      	b.n	402876 <_vfiprintf_r+0x89a>
  402946:	9302      	str	r3, [sp, #8]
  402948:	2600      	movs	r6, #0
  40294a:	2700      	movs	r7, #0
  40294c:	4649      	mov	r1, r9
  40294e:	e000      	b.n	402952 <_vfiprintf_r+0x976>
  402950:	4659      	mov	r1, fp
  402952:	08f2      	lsrs	r2, r6, #3
  402954:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402958:	08f8      	lsrs	r0, r7, #3
  40295a:	f006 0307 	and.w	r3, r6, #7
  40295e:	4607      	mov	r7, r0
  402960:	4616      	mov	r6, r2
  402962:	3330      	adds	r3, #48	; 0x30
  402964:	ea56 0207 	orrs.w	r2, r6, r7
  402968:	f801 3c01 	strb.w	r3, [r1, #-1]
  40296c:	f101 3bff 	add.w	fp, r1, #4294967295
  402970:	d1ee      	bne.n	402950 <_vfiprintf_r+0x974>
  402972:	9a02      	ldr	r2, [sp, #8]
  402974:	07d6      	lsls	r6, r2, #31
  402976:	f57f ad9d 	bpl.w	4024b4 <_vfiprintf_r+0x4d8>
  40297a:	2b30      	cmp	r3, #48	; 0x30
  40297c:	f43f ad9a 	beq.w	4024b4 <_vfiprintf_r+0x4d8>
  402980:	3902      	subs	r1, #2
  402982:	2330      	movs	r3, #48	; 0x30
  402984:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402988:	eba9 0301 	sub.w	r3, r9, r1
  40298c:	9305      	str	r3, [sp, #20]
  40298e:	468b      	mov	fp, r1
  402990:	e476      	b.n	402280 <_vfiprintf_r+0x2a4>
  402992:	9b03      	ldr	r3, [sp, #12]
  402994:	9a08      	ldr	r2, [sp, #32]
  402996:	428a      	cmp	r2, r1
  402998:	bfac      	ite	ge
  40299a:	189b      	addge	r3, r3, r2
  40299c:	185b      	addlt	r3, r3, r1
  40299e:	9303      	str	r3, [sp, #12]
  4029a0:	e798      	b.n	4028d4 <_vfiprintf_r+0x8f8>
  4029a2:	2202      	movs	r2, #2
  4029a4:	e44d      	b.n	402242 <_vfiprintf_r+0x266>
  4029a6:	2f00      	cmp	r7, #0
  4029a8:	bf08      	it	eq
  4029aa:	2e0a      	cmpeq	r6, #10
  4029ac:	d352      	bcc.n	402a54 <_vfiprintf_r+0xa78>
  4029ae:	46cb      	mov	fp, r9
  4029b0:	4630      	mov	r0, r6
  4029b2:	4639      	mov	r1, r7
  4029b4:	220a      	movs	r2, #10
  4029b6:	2300      	movs	r3, #0
  4029b8:	f7fe fe84 	bl	4016c4 <__aeabi_uldivmod>
  4029bc:	3230      	adds	r2, #48	; 0x30
  4029be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4029c2:	4630      	mov	r0, r6
  4029c4:	4639      	mov	r1, r7
  4029c6:	2300      	movs	r3, #0
  4029c8:	220a      	movs	r2, #10
  4029ca:	f7fe fe7b 	bl	4016c4 <__aeabi_uldivmod>
  4029ce:	4606      	mov	r6, r0
  4029d0:	460f      	mov	r7, r1
  4029d2:	ea56 0307 	orrs.w	r3, r6, r7
  4029d6:	d1eb      	bne.n	4029b0 <_vfiprintf_r+0x9d4>
  4029d8:	e56c      	b.n	4024b4 <_vfiprintf_r+0x4d8>
  4029da:	9405      	str	r4, [sp, #20]
  4029dc:	46cb      	mov	fp, r9
  4029de:	e44f      	b.n	402280 <_vfiprintf_r+0x2a4>
  4029e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4029e2:	9904      	ldr	r1, [sp, #16]
  4029e4:	9806      	ldr	r0, [sp, #24]
  4029e6:	f7ff fab9 	bl	401f5c <__sprint_r.part.0>
  4029ea:	2800      	cmp	r0, #0
  4029ec:	d1a8      	bne.n	402940 <_vfiprintf_r+0x964>
  4029ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029f0:	46ca      	mov	sl, r9
  4029f2:	e75e      	b.n	4028b2 <_vfiprintf_r+0x8d6>
  4029f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4029f6:	9904      	ldr	r1, [sp, #16]
  4029f8:	9806      	ldr	r0, [sp, #24]
  4029fa:	f7ff faaf 	bl	401f5c <__sprint_r.part.0>
  4029fe:	2800      	cmp	r0, #0
  402a00:	d19e      	bne.n	402940 <_vfiprintf_r+0x964>
  402a02:	46ca      	mov	sl, r9
  402a04:	f7ff bbc0 	b.w	402188 <_vfiprintf_r+0x1ac>
  402a08:	004049c8 	.word	0x004049c8
  402a0c:	004049b8 	.word	0x004049b8
  402a10:	3104      	adds	r1, #4
  402a12:	6816      	ldr	r6, [r2, #0]
  402a14:	9107      	str	r1, [sp, #28]
  402a16:	2201      	movs	r2, #1
  402a18:	2700      	movs	r7, #0
  402a1a:	e412      	b.n	402242 <_vfiprintf_r+0x266>
  402a1c:	9807      	ldr	r0, [sp, #28]
  402a1e:	4601      	mov	r1, r0
  402a20:	3104      	adds	r1, #4
  402a22:	6806      	ldr	r6, [r0, #0]
  402a24:	9107      	str	r1, [sp, #28]
  402a26:	2700      	movs	r7, #0
  402a28:	e40b      	b.n	402242 <_vfiprintf_r+0x266>
  402a2a:	680e      	ldr	r6, [r1, #0]
  402a2c:	3104      	adds	r1, #4
  402a2e:	9107      	str	r1, [sp, #28]
  402a30:	2700      	movs	r7, #0
  402a32:	e591      	b.n	402558 <_vfiprintf_r+0x57c>
  402a34:	9907      	ldr	r1, [sp, #28]
  402a36:	680e      	ldr	r6, [r1, #0]
  402a38:	460a      	mov	r2, r1
  402a3a:	17f7      	asrs	r7, r6, #31
  402a3c:	3204      	adds	r2, #4
  402a3e:	9207      	str	r2, [sp, #28]
  402a40:	4630      	mov	r0, r6
  402a42:	4639      	mov	r1, r7
  402a44:	e50f      	b.n	402466 <_vfiprintf_r+0x48a>
  402a46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402a4a:	f000 fe7f 	bl	40374c <__retarget_lock_release_recursive>
  402a4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402a52:	e71a      	b.n	40288a <_vfiprintf_r+0x8ae>
  402a54:	9b02      	ldr	r3, [sp, #8]
  402a56:	9302      	str	r3, [sp, #8]
  402a58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402a5c:	3630      	adds	r6, #48	; 0x30
  402a5e:	2301      	movs	r3, #1
  402a60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402a64:	9305      	str	r3, [sp, #20]
  402a66:	e40b      	b.n	402280 <_vfiprintf_r+0x2a4>
  402a68:	aa0f      	add	r2, sp, #60	; 0x3c
  402a6a:	9904      	ldr	r1, [sp, #16]
  402a6c:	9806      	ldr	r0, [sp, #24]
  402a6e:	f7ff fa75 	bl	401f5c <__sprint_r.part.0>
  402a72:	2800      	cmp	r0, #0
  402a74:	f47f af64 	bne.w	402940 <_vfiprintf_r+0x964>
  402a78:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a7c:	1c48      	adds	r0, r1, #1
  402a7e:	46ca      	mov	sl, r9
  402a80:	e651      	b.n	402726 <_vfiprintf_r+0x74a>
  402a82:	aa0f      	add	r2, sp, #60	; 0x3c
  402a84:	9904      	ldr	r1, [sp, #16]
  402a86:	9806      	ldr	r0, [sp, #24]
  402a88:	f7ff fa68 	bl	401f5c <__sprint_r.part.0>
  402a8c:	2800      	cmp	r0, #0
  402a8e:	f47f af57 	bne.w	402940 <_vfiprintf_r+0x964>
  402a92:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a96:	1c48      	adds	r0, r1, #1
  402a98:	46ca      	mov	sl, r9
  402a9a:	e448      	b.n	40232e <_vfiprintf_r+0x352>
  402a9c:	2a00      	cmp	r2, #0
  402a9e:	f040 8091 	bne.w	402bc4 <_vfiprintf_r+0xbe8>
  402aa2:	2001      	movs	r0, #1
  402aa4:	4611      	mov	r1, r2
  402aa6:	46ca      	mov	sl, r9
  402aa8:	e641      	b.n	40272e <_vfiprintf_r+0x752>
  402aaa:	aa0f      	add	r2, sp, #60	; 0x3c
  402aac:	9904      	ldr	r1, [sp, #16]
  402aae:	9806      	ldr	r0, [sp, #24]
  402ab0:	f7ff fa54 	bl	401f5c <__sprint_r.part.0>
  402ab4:	2800      	cmp	r0, #0
  402ab6:	f47f af43 	bne.w	402940 <_vfiprintf_r+0x964>
  402aba:	9810      	ldr	r0, [sp, #64]	; 0x40
  402abc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402abe:	3001      	adds	r0, #1
  402ac0:	46ca      	mov	sl, r9
  402ac2:	e667      	b.n	402794 <_vfiprintf_r+0x7b8>
  402ac4:	46d3      	mov	fp, sl
  402ac6:	e6d6      	b.n	402876 <_vfiprintf_r+0x89a>
  402ac8:	9e07      	ldr	r6, [sp, #28]
  402aca:	3607      	adds	r6, #7
  402acc:	f026 0207 	bic.w	r2, r6, #7
  402ad0:	f102 0108 	add.w	r1, r2, #8
  402ad4:	e9d2 6700 	ldrd	r6, r7, [r2]
  402ad8:	9107      	str	r1, [sp, #28]
  402ada:	2201      	movs	r2, #1
  402adc:	f7ff bbb1 	b.w	402242 <_vfiprintf_r+0x266>
  402ae0:	9e07      	ldr	r6, [sp, #28]
  402ae2:	3607      	adds	r6, #7
  402ae4:	f026 0607 	bic.w	r6, r6, #7
  402ae8:	e9d6 0100 	ldrd	r0, r1, [r6]
  402aec:	f106 0208 	add.w	r2, r6, #8
  402af0:	9207      	str	r2, [sp, #28]
  402af2:	4606      	mov	r6, r0
  402af4:	460f      	mov	r7, r1
  402af6:	e4b6      	b.n	402466 <_vfiprintf_r+0x48a>
  402af8:	9e07      	ldr	r6, [sp, #28]
  402afa:	3607      	adds	r6, #7
  402afc:	f026 0207 	bic.w	r2, r6, #7
  402b00:	f102 0108 	add.w	r1, r2, #8
  402b04:	e9d2 6700 	ldrd	r6, r7, [r2]
  402b08:	9107      	str	r1, [sp, #28]
  402b0a:	2200      	movs	r2, #0
  402b0c:	f7ff bb99 	b.w	402242 <_vfiprintf_r+0x266>
  402b10:	9e07      	ldr	r6, [sp, #28]
  402b12:	3607      	adds	r6, #7
  402b14:	f026 0107 	bic.w	r1, r6, #7
  402b18:	f101 0008 	add.w	r0, r1, #8
  402b1c:	9007      	str	r0, [sp, #28]
  402b1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402b22:	e519      	b.n	402558 <_vfiprintf_r+0x57c>
  402b24:	46cb      	mov	fp, r9
  402b26:	f7ff bbab 	b.w	402280 <_vfiprintf_r+0x2a4>
  402b2a:	252d      	movs	r5, #45	; 0x2d
  402b2c:	4276      	negs	r6, r6
  402b2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402b32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b36:	2201      	movs	r2, #1
  402b38:	f7ff bb88 	b.w	40224c <_vfiprintf_r+0x270>
  402b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402b3e:	b9b3      	cbnz	r3, 402b6e <_vfiprintf_r+0xb92>
  402b40:	4611      	mov	r1, r2
  402b42:	2001      	movs	r0, #1
  402b44:	46ca      	mov	sl, r9
  402b46:	e5f2      	b.n	40272e <_vfiprintf_r+0x752>
  402b48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402b4c:	f000 fdfe 	bl	40374c <__retarget_lock_release_recursive>
  402b50:	f04f 33ff 	mov.w	r3, #4294967295
  402b54:	9303      	str	r3, [sp, #12]
  402b56:	f7ff bb50 	b.w	4021fa <_vfiprintf_r+0x21e>
  402b5a:	aa0f      	add	r2, sp, #60	; 0x3c
  402b5c:	9904      	ldr	r1, [sp, #16]
  402b5e:	9806      	ldr	r0, [sp, #24]
  402b60:	f7ff f9fc 	bl	401f5c <__sprint_r.part.0>
  402b64:	2800      	cmp	r0, #0
  402b66:	f47f aeeb 	bne.w	402940 <_vfiprintf_r+0x964>
  402b6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b6c:	e6a9      	b.n	4028c2 <_vfiprintf_r+0x8e6>
  402b6e:	ab0e      	add	r3, sp, #56	; 0x38
  402b70:	2202      	movs	r2, #2
  402b72:	931c      	str	r3, [sp, #112]	; 0x70
  402b74:	921d      	str	r2, [sp, #116]	; 0x74
  402b76:	2001      	movs	r0, #1
  402b78:	46ca      	mov	sl, r9
  402b7a:	e5d0      	b.n	40271e <_vfiprintf_r+0x742>
  402b7c:	aa0f      	add	r2, sp, #60	; 0x3c
  402b7e:	9904      	ldr	r1, [sp, #16]
  402b80:	9806      	ldr	r0, [sp, #24]
  402b82:	f7ff f9eb 	bl	401f5c <__sprint_r.part.0>
  402b86:	2800      	cmp	r0, #0
  402b88:	f47f aeda 	bne.w	402940 <_vfiprintf_r+0x964>
  402b8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b90:	1c48      	adds	r0, r1, #1
  402b92:	46ca      	mov	sl, r9
  402b94:	e5a4      	b.n	4026e0 <_vfiprintf_r+0x704>
  402b96:	9a07      	ldr	r2, [sp, #28]
  402b98:	9903      	ldr	r1, [sp, #12]
  402b9a:	6813      	ldr	r3, [r2, #0]
  402b9c:	17cd      	asrs	r5, r1, #31
  402b9e:	4608      	mov	r0, r1
  402ba0:	3204      	adds	r2, #4
  402ba2:	4629      	mov	r1, r5
  402ba4:	9207      	str	r2, [sp, #28]
  402ba6:	e9c3 0100 	strd	r0, r1, [r3]
  402baa:	f7ff ba54 	b.w	402056 <_vfiprintf_r+0x7a>
  402bae:	4658      	mov	r0, fp
  402bb0:	9607      	str	r6, [sp, #28]
  402bb2:	9302      	str	r3, [sp, #8]
  402bb4:	f7ff f964 	bl	401e80 <strlen>
  402bb8:	2400      	movs	r4, #0
  402bba:	9005      	str	r0, [sp, #20]
  402bbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402bc0:	f7ff bb5e 	b.w	402280 <_vfiprintf_r+0x2a4>
  402bc4:	aa0f      	add	r2, sp, #60	; 0x3c
  402bc6:	9904      	ldr	r1, [sp, #16]
  402bc8:	9806      	ldr	r0, [sp, #24]
  402bca:	f7ff f9c7 	bl	401f5c <__sprint_r.part.0>
  402bce:	2800      	cmp	r0, #0
  402bd0:	f47f aeb6 	bne.w	402940 <_vfiprintf_r+0x964>
  402bd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  402bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402bd8:	1c48      	adds	r0, r1, #1
  402bda:	46ca      	mov	sl, r9
  402bdc:	e5a7      	b.n	40272e <_vfiprintf_r+0x752>
  402bde:	9910      	ldr	r1, [sp, #64]	; 0x40
  402be0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402be2:	4e20      	ldr	r6, [pc, #128]	; (402c64 <_vfiprintf_r+0xc88>)
  402be4:	3101      	adds	r1, #1
  402be6:	f7ff bb90 	b.w	40230a <_vfiprintf_r+0x32e>
  402bea:	2c06      	cmp	r4, #6
  402bec:	bf28      	it	cs
  402bee:	2406      	movcs	r4, #6
  402bf0:	9405      	str	r4, [sp, #20]
  402bf2:	9607      	str	r6, [sp, #28]
  402bf4:	9401      	str	r4, [sp, #4]
  402bf6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402c68 <_vfiprintf_r+0xc8c>
  402bfa:	e4d5      	b.n	4025a8 <_vfiprintf_r+0x5cc>
  402bfc:	9810      	ldr	r0, [sp, #64]	; 0x40
  402bfe:	4e19      	ldr	r6, [pc, #100]	; (402c64 <_vfiprintf_r+0xc88>)
  402c00:	3001      	adds	r0, #1
  402c02:	e603      	b.n	40280c <_vfiprintf_r+0x830>
  402c04:	9405      	str	r4, [sp, #20]
  402c06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402c0a:	9607      	str	r6, [sp, #28]
  402c0c:	9302      	str	r3, [sp, #8]
  402c0e:	4604      	mov	r4, r0
  402c10:	f7ff bb36 	b.w	402280 <_vfiprintf_r+0x2a4>
  402c14:	4686      	mov	lr, r0
  402c16:	f7ff bbce 	b.w	4023b6 <_vfiprintf_r+0x3da>
  402c1a:	9806      	ldr	r0, [sp, #24]
  402c1c:	aa0f      	add	r2, sp, #60	; 0x3c
  402c1e:	4659      	mov	r1, fp
  402c20:	f7ff f99c 	bl	401f5c <__sprint_r.part.0>
  402c24:	2800      	cmp	r0, #0
  402c26:	f43f ae24 	beq.w	402872 <_vfiprintf_r+0x896>
  402c2a:	e624      	b.n	402876 <_vfiprintf_r+0x89a>
  402c2c:	9907      	ldr	r1, [sp, #28]
  402c2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402c32:	680c      	ldr	r4, [r1, #0]
  402c34:	3104      	adds	r1, #4
  402c36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402c3a:	46b8      	mov	r8, r7
  402c3c:	9107      	str	r1, [sp, #28]
  402c3e:	f7ff ba3f 	b.w	4020c0 <_vfiprintf_r+0xe4>
  402c42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c46:	e43c      	b.n	4024c2 <_vfiprintf_r+0x4e6>
  402c48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c4c:	e521      	b.n	402692 <_vfiprintf_r+0x6b6>
  402c4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c52:	f7ff bbf4 	b.w	40243e <_vfiprintf_r+0x462>
  402c56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c5a:	e491      	b.n	402580 <_vfiprintf_r+0x5a4>
  402c5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c60:	e469      	b.n	402536 <_vfiprintf_r+0x55a>
  402c62:	bf00      	nop
  402c64:	004049b8 	.word	0x004049b8
  402c68:	004049b0 	.word	0x004049b0

00402c6c <__sbprintf>:
  402c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c70:	460c      	mov	r4, r1
  402c72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402c76:	8989      	ldrh	r1, [r1, #12]
  402c78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402c7a:	89e5      	ldrh	r5, [r4, #14]
  402c7c:	9619      	str	r6, [sp, #100]	; 0x64
  402c7e:	f021 0102 	bic.w	r1, r1, #2
  402c82:	4606      	mov	r6, r0
  402c84:	69e0      	ldr	r0, [r4, #28]
  402c86:	f8ad 100c 	strh.w	r1, [sp, #12]
  402c8a:	4617      	mov	r7, r2
  402c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402c92:	f8ad 500e 	strh.w	r5, [sp, #14]
  402c96:	4698      	mov	r8, r3
  402c98:	ad1a      	add	r5, sp, #104	; 0x68
  402c9a:	2300      	movs	r3, #0
  402c9c:	9007      	str	r0, [sp, #28]
  402c9e:	a816      	add	r0, sp, #88	; 0x58
  402ca0:	9209      	str	r2, [sp, #36]	; 0x24
  402ca2:	9306      	str	r3, [sp, #24]
  402ca4:	9500      	str	r5, [sp, #0]
  402ca6:	9504      	str	r5, [sp, #16]
  402ca8:	9102      	str	r1, [sp, #8]
  402caa:	9105      	str	r1, [sp, #20]
  402cac:	f000 fd48 	bl	403740 <__retarget_lock_init_recursive>
  402cb0:	4643      	mov	r3, r8
  402cb2:	463a      	mov	r2, r7
  402cb4:	4669      	mov	r1, sp
  402cb6:	4630      	mov	r0, r6
  402cb8:	f7ff f990 	bl	401fdc <_vfiprintf_r>
  402cbc:	1e05      	subs	r5, r0, #0
  402cbe:	db07      	blt.n	402cd0 <__sbprintf+0x64>
  402cc0:	4630      	mov	r0, r6
  402cc2:	4669      	mov	r1, sp
  402cc4:	f000 f928 	bl	402f18 <_fflush_r>
  402cc8:	2800      	cmp	r0, #0
  402cca:	bf18      	it	ne
  402ccc:	f04f 35ff 	movne.w	r5, #4294967295
  402cd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402cd4:	065b      	lsls	r3, r3, #25
  402cd6:	d503      	bpl.n	402ce0 <__sbprintf+0x74>
  402cd8:	89a3      	ldrh	r3, [r4, #12]
  402cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cde:	81a3      	strh	r3, [r4, #12]
  402ce0:	9816      	ldr	r0, [sp, #88]	; 0x58
  402ce2:	f000 fd2f 	bl	403744 <__retarget_lock_close_recursive>
  402ce6:	4628      	mov	r0, r5
  402ce8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402cf0 <__swsetup_r>:
  402cf0:	b538      	push	{r3, r4, r5, lr}
  402cf2:	4b30      	ldr	r3, [pc, #192]	; (402db4 <__swsetup_r+0xc4>)
  402cf4:	681b      	ldr	r3, [r3, #0]
  402cf6:	4605      	mov	r5, r0
  402cf8:	460c      	mov	r4, r1
  402cfa:	b113      	cbz	r3, 402d02 <__swsetup_r+0x12>
  402cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402cfe:	2a00      	cmp	r2, #0
  402d00:	d038      	beq.n	402d74 <__swsetup_r+0x84>
  402d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402d06:	b293      	uxth	r3, r2
  402d08:	0718      	lsls	r0, r3, #28
  402d0a:	d50c      	bpl.n	402d26 <__swsetup_r+0x36>
  402d0c:	6920      	ldr	r0, [r4, #16]
  402d0e:	b1a8      	cbz	r0, 402d3c <__swsetup_r+0x4c>
  402d10:	f013 0201 	ands.w	r2, r3, #1
  402d14:	d01e      	beq.n	402d54 <__swsetup_r+0x64>
  402d16:	6963      	ldr	r3, [r4, #20]
  402d18:	2200      	movs	r2, #0
  402d1a:	425b      	negs	r3, r3
  402d1c:	61a3      	str	r3, [r4, #24]
  402d1e:	60a2      	str	r2, [r4, #8]
  402d20:	b1f0      	cbz	r0, 402d60 <__swsetup_r+0x70>
  402d22:	2000      	movs	r0, #0
  402d24:	bd38      	pop	{r3, r4, r5, pc}
  402d26:	06d9      	lsls	r1, r3, #27
  402d28:	d53c      	bpl.n	402da4 <__swsetup_r+0xb4>
  402d2a:	0758      	lsls	r0, r3, #29
  402d2c:	d426      	bmi.n	402d7c <__swsetup_r+0x8c>
  402d2e:	6920      	ldr	r0, [r4, #16]
  402d30:	f042 0308 	orr.w	r3, r2, #8
  402d34:	81a3      	strh	r3, [r4, #12]
  402d36:	b29b      	uxth	r3, r3
  402d38:	2800      	cmp	r0, #0
  402d3a:	d1e9      	bne.n	402d10 <__swsetup_r+0x20>
  402d3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402d40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402d44:	d0e4      	beq.n	402d10 <__swsetup_r+0x20>
  402d46:	4628      	mov	r0, r5
  402d48:	4621      	mov	r1, r4
  402d4a:	f000 fd2f 	bl	4037ac <__smakebuf_r>
  402d4e:	89a3      	ldrh	r3, [r4, #12]
  402d50:	6920      	ldr	r0, [r4, #16]
  402d52:	e7dd      	b.n	402d10 <__swsetup_r+0x20>
  402d54:	0799      	lsls	r1, r3, #30
  402d56:	bf58      	it	pl
  402d58:	6962      	ldrpl	r2, [r4, #20]
  402d5a:	60a2      	str	r2, [r4, #8]
  402d5c:	2800      	cmp	r0, #0
  402d5e:	d1e0      	bne.n	402d22 <__swsetup_r+0x32>
  402d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d64:	061a      	lsls	r2, r3, #24
  402d66:	d5dd      	bpl.n	402d24 <__swsetup_r+0x34>
  402d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d6c:	81a3      	strh	r3, [r4, #12]
  402d6e:	f04f 30ff 	mov.w	r0, #4294967295
  402d72:	bd38      	pop	{r3, r4, r5, pc}
  402d74:	4618      	mov	r0, r3
  402d76:	f000 f927 	bl	402fc8 <__sinit>
  402d7a:	e7c2      	b.n	402d02 <__swsetup_r+0x12>
  402d7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402d7e:	b151      	cbz	r1, 402d96 <__swsetup_r+0xa6>
  402d80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402d84:	4299      	cmp	r1, r3
  402d86:	d004      	beq.n	402d92 <__swsetup_r+0xa2>
  402d88:	4628      	mov	r0, r5
  402d8a:	f000 fa43 	bl	403214 <_free_r>
  402d8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402d92:	2300      	movs	r3, #0
  402d94:	6323      	str	r3, [r4, #48]	; 0x30
  402d96:	2300      	movs	r3, #0
  402d98:	6920      	ldr	r0, [r4, #16]
  402d9a:	6063      	str	r3, [r4, #4]
  402d9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402da0:	6020      	str	r0, [r4, #0]
  402da2:	e7c5      	b.n	402d30 <__swsetup_r+0x40>
  402da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402da8:	2309      	movs	r3, #9
  402daa:	602b      	str	r3, [r5, #0]
  402dac:	f04f 30ff 	mov.w	r0, #4294967295
  402db0:	81a2      	strh	r2, [r4, #12]
  402db2:	bd38      	pop	{r3, r4, r5, pc}
  402db4:	20400014 	.word	0x20400014

00402db8 <register_fini>:
  402db8:	4b02      	ldr	r3, [pc, #8]	; (402dc4 <register_fini+0xc>)
  402dba:	b113      	cbz	r3, 402dc2 <register_fini+0xa>
  402dbc:	4802      	ldr	r0, [pc, #8]	; (402dc8 <register_fini+0x10>)
  402dbe:	f000 b805 	b.w	402dcc <atexit>
  402dc2:	4770      	bx	lr
  402dc4:	00000000 	.word	0x00000000
  402dc8:	00403039 	.word	0x00403039

00402dcc <atexit>:
  402dcc:	2300      	movs	r3, #0
  402dce:	4601      	mov	r1, r0
  402dd0:	461a      	mov	r2, r3
  402dd2:	4618      	mov	r0, r3
  402dd4:	f001 bb66 	b.w	4044a4 <__register_exitproc>

00402dd8 <__sflush_r>:
  402dd8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402ddc:	b29a      	uxth	r2, r3
  402dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402de2:	460d      	mov	r5, r1
  402de4:	0711      	lsls	r1, r2, #28
  402de6:	4680      	mov	r8, r0
  402de8:	d43a      	bmi.n	402e60 <__sflush_r+0x88>
  402dea:	686a      	ldr	r2, [r5, #4]
  402dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402df0:	2a00      	cmp	r2, #0
  402df2:	81ab      	strh	r3, [r5, #12]
  402df4:	dd6f      	ble.n	402ed6 <__sflush_r+0xfe>
  402df6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402df8:	2c00      	cmp	r4, #0
  402dfa:	d049      	beq.n	402e90 <__sflush_r+0xb8>
  402dfc:	2200      	movs	r2, #0
  402dfe:	b29b      	uxth	r3, r3
  402e00:	f8d8 6000 	ldr.w	r6, [r8]
  402e04:	f8c8 2000 	str.w	r2, [r8]
  402e08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402e0c:	d067      	beq.n	402ede <__sflush_r+0x106>
  402e0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402e10:	075f      	lsls	r7, r3, #29
  402e12:	d505      	bpl.n	402e20 <__sflush_r+0x48>
  402e14:	6869      	ldr	r1, [r5, #4]
  402e16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402e18:	1a52      	subs	r2, r2, r1
  402e1a:	b10b      	cbz	r3, 402e20 <__sflush_r+0x48>
  402e1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402e1e:	1ad2      	subs	r2, r2, r3
  402e20:	2300      	movs	r3, #0
  402e22:	69e9      	ldr	r1, [r5, #28]
  402e24:	4640      	mov	r0, r8
  402e26:	47a0      	blx	r4
  402e28:	1c44      	adds	r4, r0, #1
  402e2a:	d03c      	beq.n	402ea6 <__sflush_r+0xce>
  402e2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402e30:	692a      	ldr	r2, [r5, #16]
  402e32:	602a      	str	r2, [r5, #0]
  402e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402e38:	2200      	movs	r2, #0
  402e3a:	81ab      	strh	r3, [r5, #12]
  402e3c:	04db      	lsls	r3, r3, #19
  402e3e:	606a      	str	r2, [r5, #4]
  402e40:	d447      	bmi.n	402ed2 <__sflush_r+0xfa>
  402e42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402e44:	f8c8 6000 	str.w	r6, [r8]
  402e48:	b311      	cbz	r1, 402e90 <__sflush_r+0xb8>
  402e4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402e4e:	4299      	cmp	r1, r3
  402e50:	d002      	beq.n	402e58 <__sflush_r+0x80>
  402e52:	4640      	mov	r0, r8
  402e54:	f000 f9de 	bl	403214 <_free_r>
  402e58:	2000      	movs	r0, #0
  402e5a:	6328      	str	r0, [r5, #48]	; 0x30
  402e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e60:	692e      	ldr	r6, [r5, #16]
  402e62:	b1ae      	cbz	r6, 402e90 <__sflush_r+0xb8>
  402e64:	682c      	ldr	r4, [r5, #0]
  402e66:	602e      	str	r6, [r5, #0]
  402e68:	0791      	lsls	r1, r2, #30
  402e6a:	bf0c      	ite	eq
  402e6c:	696b      	ldreq	r3, [r5, #20]
  402e6e:	2300      	movne	r3, #0
  402e70:	1ba4      	subs	r4, r4, r6
  402e72:	60ab      	str	r3, [r5, #8]
  402e74:	e00a      	b.n	402e8c <__sflush_r+0xb4>
  402e76:	4623      	mov	r3, r4
  402e78:	4632      	mov	r2, r6
  402e7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402e7c:	69e9      	ldr	r1, [r5, #28]
  402e7e:	4640      	mov	r0, r8
  402e80:	47b8      	blx	r7
  402e82:	2800      	cmp	r0, #0
  402e84:	eba4 0400 	sub.w	r4, r4, r0
  402e88:	4406      	add	r6, r0
  402e8a:	dd04      	ble.n	402e96 <__sflush_r+0xbe>
  402e8c:	2c00      	cmp	r4, #0
  402e8e:	dcf2      	bgt.n	402e76 <__sflush_r+0x9e>
  402e90:	2000      	movs	r0, #0
  402e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e96:	89ab      	ldrh	r3, [r5, #12]
  402e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e9c:	81ab      	strh	r3, [r5, #12]
  402e9e:	f04f 30ff 	mov.w	r0, #4294967295
  402ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ea6:	f8d8 4000 	ldr.w	r4, [r8]
  402eaa:	2c1d      	cmp	r4, #29
  402eac:	d8f3      	bhi.n	402e96 <__sflush_r+0xbe>
  402eae:	4b19      	ldr	r3, [pc, #100]	; (402f14 <__sflush_r+0x13c>)
  402eb0:	40e3      	lsrs	r3, r4
  402eb2:	43db      	mvns	r3, r3
  402eb4:	f013 0301 	ands.w	r3, r3, #1
  402eb8:	d1ed      	bne.n	402e96 <__sflush_r+0xbe>
  402eba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402ebe:	606b      	str	r3, [r5, #4]
  402ec0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402ec4:	6929      	ldr	r1, [r5, #16]
  402ec6:	81ab      	strh	r3, [r5, #12]
  402ec8:	04da      	lsls	r2, r3, #19
  402eca:	6029      	str	r1, [r5, #0]
  402ecc:	d5b9      	bpl.n	402e42 <__sflush_r+0x6a>
  402ece:	2c00      	cmp	r4, #0
  402ed0:	d1b7      	bne.n	402e42 <__sflush_r+0x6a>
  402ed2:	6528      	str	r0, [r5, #80]	; 0x50
  402ed4:	e7b5      	b.n	402e42 <__sflush_r+0x6a>
  402ed6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402ed8:	2a00      	cmp	r2, #0
  402eda:	dc8c      	bgt.n	402df6 <__sflush_r+0x1e>
  402edc:	e7d8      	b.n	402e90 <__sflush_r+0xb8>
  402ede:	2301      	movs	r3, #1
  402ee0:	69e9      	ldr	r1, [r5, #28]
  402ee2:	4640      	mov	r0, r8
  402ee4:	47a0      	blx	r4
  402ee6:	1c43      	adds	r3, r0, #1
  402ee8:	4602      	mov	r2, r0
  402eea:	d002      	beq.n	402ef2 <__sflush_r+0x11a>
  402eec:	89ab      	ldrh	r3, [r5, #12]
  402eee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402ef0:	e78e      	b.n	402e10 <__sflush_r+0x38>
  402ef2:	f8d8 3000 	ldr.w	r3, [r8]
  402ef6:	2b00      	cmp	r3, #0
  402ef8:	d0f8      	beq.n	402eec <__sflush_r+0x114>
  402efa:	2b1d      	cmp	r3, #29
  402efc:	d001      	beq.n	402f02 <__sflush_r+0x12a>
  402efe:	2b16      	cmp	r3, #22
  402f00:	d102      	bne.n	402f08 <__sflush_r+0x130>
  402f02:	f8c8 6000 	str.w	r6, [r8]
  402f06:	e7c3      	b.n	402e90 <__sflush_r+0xb8>
  402f08:	89ab      	ldrh	r3, [r5, #12]
  402f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f0e:	81ab      	strh	r3, [r5, #12]
  402f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f14:	20400001 	.word	0x20400001

00402f18 <_fflush_r>:
  402f18:	b538      	push	{r3, r4, r5, lr}
  402f1a:	460d      	mov	r5, r1
  402f1c:	4604      	mov	r4, r0
  402f1e:	b108      	cbz	r0, 402f24 <_fflush_r+0xc>
  402f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402f22:	b1bb      	cbz	r3, 402f54 <_fflush_r+0x3c>
  402f24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402f28:	b188      	cbz	r0, 402f4e <_fflush_r+0x36>
  402f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402f2c:	07db      	lsls	r3, r3, #31
  402f2e:	d401      	bmi.n	402f34 <_fflush_r+0x1c>
  402f30:	0581      	lsls	r1, r0, #22
  402f32:	d517      	bpl.n	402f64 <_fflush_r+0x4c>
  402f34:	4620      	mov	r0, r4
  402f36:	4629      	mov	r1, r5
  402f38:	f7ff ff4e 	bl	402dd8 <__sflush_r>
  402f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402f3e:	07da      	lsls	r2, r3, #31
  402f40:	4604      	mov	r4, r0
  402f42:	d402      	bmi.n	402f4a <_fflush_r+0x32>
  402f44:	89ab      	ldrh	r3, [r5, #12]
  402f46:	059b      	lsls	r3, r3, #22
  402f48:	d507      	bpl.n	402f5a <_fflush_r+0x42>
  402f4a:	4620      	mov	r0, r4
  402f4c:	bd38      	pop	{r3, r4, r5, pc}
  402f4e:	4604      	mov	r4, r0
  402f50:	4620      	mov	r0, r4
  402f52:	bd38      	pop	{r3, r4, r5, pc}
  402f54:	f000 f838 	bl	402fc8 <__sinit>
  402f58:	e7e4      	b.n	402f24 <_fflush_r+0xc>
  402f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402f5c:	f000 fbf6 	bl	40374c <__retarget_lock_release_recursive>
  402f60:	4620      	mov	r0, r4
  402f62:	bd38      	pop	{r3, r4, r5, pc}
  402f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402f66:	f000 fbef 	bl	403748 <__retarget_lock_acquire_recursive>
  402f6a:	e7e3      	b.n	402f34 <_fflush_r+0x1c>

00402f6c <_cleanup_r>:
  402f6c:	4901      	ldr	r1, [pc, #4]	; (402f74 <_cleanup_r+0x8>)
  402f6e:	f000 bbaf 	b.w	4036d0 <_fwalk_reent>
  402f72:	bf00      	nop
  402f74:	0040458d 	.word	0x0040458d

00402f78 <std.isra.0>:
  402f78:	b510      	push	{r4, lr}
  402f7a:	2300      	movs	r3, #0
  402f7c:	4604      	mov	r4, r0
  402f7e:	8181      	strh	r1, [r0, #12]
  402f80:	81c2      	strh	r2, [r0, #14]
  402f82:	6003      	str	r3, [r0, #0]
  402f84:	6043      	str	r3, [r0, #4]
  402f86:	6083      	str	r3, [r0, #8]
  402f88:	6643      	str	r3, [r0, #100]	; 0x64
  402f8a:	6103      	str	r3, [r0, #16]
  402f8c:	6143      	str	r3, [r0, #20]
  402f8e:	6183      	str	r3, [r0, #24]
  402f90:	4619      	mov	r1, r3
  402f92:	2208      	movs	r2, #8
  402f94:	305c      	adds	r0, #92	; 0x5c
  402f96:	f7fe fdf3 	bl	401b80 <memset>
  402f9a:	4807      	ldr	r0, [pc, #28]	; (402fb8 <std.isra.0+0x40>)
  402f9c:	4907      	ldr	r1, [pc, #28]	; (402fbc <std.isra.0+0x44>)
  402f9e:	4a08      	ldr	r2, [pc, #32]	; (402fc0 <std.isra.0+0x48>)
  402fa0:	4b08      	ldr	r3, [pc, #32]	; (402fc4 <std.isra.0+0x4c>)
  402fa2:	6220      	str	r0, [r4, #32]
  402fa4:	61e4      	str	r4, [r4, #28]
  402fa6:	6261      	str	r1, [r4, #36]	; 0x24
  402fa8:	62a2      	str	r2, [r4, #40]	; 0x28
  402faa:	62e3      	str	r3, [r4, #44]	; 0x2c
  402fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402fb4:	f000 bbc4 	b.w	403740 <__retarget_lock_init_recursive>
  402fb8:	004042d1 	.word	0x004042d1
  402fbc:	004042f5 	.word	0x004042f5
  402fc0:	00404331 	.word	0x00404331
  402fc4:	00404351 	.word	0x00404351

00402fc8 <__sinit>:
  402fc8:	b510      	push	{r4, lr}
  402fca:	4604      	mov	r4, r0
  402fcc:	4812      	ldr	r0, [pc, #72]	; (403018 <__sinit+0x50>)
  402fce:	f000 fbbb 	bl	403748 <__retarget_lock_acquire_recursive>
  402fd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402fd4:	b9d2      	cbnz	r2, 40300c <__sinit+0x44>
  402fd6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402fda:	4810      	ldr	r0, [pc, #64]	; (40301c <__sinit+0x54>)
  402fdc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402fe0:	2103      	movs	r1, #3
  402fe2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402fe6:	63e0      	str	r0, [r4, #60]	; 0x3c
  402fe8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402fec:	6860      	ldr	r0, [r4, #4]
  402fee:	2104      	movs	r1, #4
  402ff0:	f7ff ffc2 	bl	402f78 <std.isra.0>
  402ff4:	2201      	movs	r2, #1
  402ff6:	2109      	movs	r1, #9
  402ff8:	68a0      	ldr	r0, [r4, #8]
  402ffa:	f7ff ffbd 	bl	402f78 <std.isra.0>
  402ffe:	2202      	movs	r2, #2
  403000:	2112      	movs	r1, #18
  403002:	68e0      	ldr	r0, [r4, #12]
  403004:	f7ff ffb8 	bl	402f78 <std.isra.0>
  403008:	2301      	movs	r3, #1
  40300a:	63a3      	str	r3, [r4, #56]	; 0x38
  40300c:	4802      	ldr	r0, [pc, #8]	; (403018 <__sinit+0x50>)
  40300e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403012:	f000 bb9b 	b.w	40374c <__retarget_lock_release_recursive>
  403016:	bf00      	nop
  403018:	20400acc 	.word	0x20400acc
  40301c:	00402f6d 	.word	0x00402f6d

00403020 <__sfp_lock_acquire>:
  403020:	4801      	ldr	r0, [pc, #4]	; (403028 <__sfp_lock_acquire+0x8>)
  403022:	f000 bb91 	b.w	403748 <__retarget_lock_acquire_recursive>
  403026:	bf00      	nop
  403028:	20400ae0 	.word	0x20400ae0

0040302c <__sfp_lock_release>:
  40302c:	4801      	ldr	r0, [pc, #4]	; (403034 <__sfp_lock_release+0x8>)
  40302e:	f000 bb8d 	b.w	40374c <__retarget_lock_release_recursive>
  403032:	bf00      	nop
  403034:	20400ae0 	.word	0x20400ae0

00403038 <__libc_fini_array>:
  403038:	b538      	push	{r3, r4, r5, lr}
  40303a:	4c0a      	ldr	r4, [pc, #40]	; (403064 <__libc_fini_array+0x2c>)
  40303c:	4d0a      	ldr	r5, [pc, #40]	; (403068 <__libc_fini_array+0x30>)
  40303e:	1b64      	subs	r4, r4, r5
  403040:	10a4      	asrs	r4, r4, #2
  403042:	d00a      	beq.n	40305a <__libc_fini_array+0x22>
  403044:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403048:	3b01      	subs	r3, #1
  40304a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40304e:	3c01      	subs	r4, #1
  403050:	f855 3904 	ldr.w	r3, [r5], #-4
  403054:	4798      	blx	r3
  403056:	2c00      	cmp	r4, #0
  403058:	d1f9      	bne.n	40304e <__libc_fini_array+0x16>
  40305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40305e:	f001 bd4f 	b.w	404b00 <_fini>
  403062:	bf00      	nop
  403064:	00404b10 	.word	0x00404b10
  403068:	00404b0c 	.word	0x00404b0c

0040306c <__fputwc>:
  40306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403070:	b082      	sub	sp, #8
  403072:	4680      	mov	r8, r0
  403074:	4689      	mov	r9, r1
  403076:	4614      	mov	r4, r2
  403078:	f000 fb54 	bl	403724 <__locale_mb_cur_max>
  40307c:	2801      	cmp	r0, #1
  40307e:	d036      	beq.n	4030ee <__fputwc+0x82>
  403080:	464a      	mov	r2, r9
  403082:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403086:	a901      	add	r1, sp, #4
  403088:	4640      	mov	r0, r8
  40308a:	f001 f9bd 	bl	404408 <_wcrtomb_r>
  40308e:	1c42      	adds	r2, r0, #1
  403090:	4606      	mov	r6, r0
  403092:	d025      	beq.n	4030e0 <__fputwc+0x74>
  403094:	b3a8      	cbz	r0, 403102 <__fputwc+0x96>
  403096:	f89d e004 	ldrb.w	lr, [sp, #4]
  40309a:	2500      	movs	r5, #0
  40309c:	f10d 0a04 	add.w	sl, sp, #4
  4030a0:	e009      	b.n	4030b6 <__fputwc+0x4a>
  4030a2:	6823      	ldr	r3, [r4, #0]
  4030a4:	1c5a      	adds	r2, r3, #1
  4030a6:	6022      	str	r2, [r4, #0]
  4030a8:	f883 e000 	strb.w	lr, [r3]
  4030ac:	3501      	adds	r5, #1
  4030ae:	42b5      	cmp	r5, r6
  4030b0:	d227      	bcs.n	403102 <__fputwc+0x96>
  4030b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4030b6:	68a3      	ldr	r3, [r4, #8]
  4030b8:	3b01      	subs	r3, #1
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	60a3      	str	r3, [r4, #8]
  4030be:	daf0      	bge.n	4030a2 <__fputwc+0x36>
  4030c0:	69a7      	ldr	r7, [r4, #24]
  4030c2:	42bb      	cmp	r3, r7
  4030c4:	4671      	mov	r1, lr
  4030c6:	4622      	mov	r2, r4
  4030c8:	4640      	mov	r0, r8
  4030ca:	db02      	blt.n	4030d2 <__fputwc+0x66>
  4030cc:	f1be 0f0a 	cmp.w	lr, #10
  4030d0:	d1e7      	bne.n	4030a2 <__fputwc+0x36>
  4030d2:	f001 f941 	bl	404358 <__swbuf_r>
  4030d6:	1c43      	adds	r3, r0, #1
  4030d8:	d1e8      	bne.n	4030ac <__fputwc+0x40>
  4030da:	b002      	add	sp, #8
  4030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4030e0:	89a3      	ldrh	r3, [r4, #12]
  4030e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030e6:	81a3      	strh	r3, [r4, #12]
  4030e8:	b002      	add	sp, #8
  4030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4030ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4030f2:	2bfe      	cmp	r3, #254	; 0xfe
  4030f4:	d8c4      	bhi.n	403080 <__fputwc+0x14>
  4030f6:	fa5f fe89 	uxtb.w	lr, r9
  4030fa:	4606      	mov	r6, r0
  4030fc:	f88d e004 	strb.w	lr, [sp, #4]
  403100:	e7cb      	b.n	40309a <__fputwc+0x2e>
  403102:	4648      	mov	r0, r9
  403104:	b002      	add	sp, #8
  403106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40310a:	bf00      	nop

0040310c <_fputwc_r>:
  40310c:	b530      	push	{r4, r5, lr}
  40310e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403110:	f013 0f01 	tst.w	r3, #1
  403114:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403118:	4614      	mov	r4, r2
  40311a:	b083      	sub	sp, #12
  40311c:	4605      	mov	r5, r0
  40311e:	b29a      	uxth	r2, r3
  403120:	d101      	bne.n	403126 <_fputwc_r+0x1a>
  403122:	0590      	lsls	r0, r2, #22
  403124:	d51c      	bpl.n	403160 <_fputwc_r+0x54>
  403126:	0490      	lsls	r0, r2, #18
  403128:	d406      	bmi.n	403138 <_fputwc_r+0x2c>
  40312a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40312c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403134:	81a3      	strh	r3, [r4, #12]
  403136:	6662      	str	r2, [r4, #100]	; 0x64
  403138:	4628      	mov	r0, r5
  40313a:	4622      	mov	r2, r4
  40313c:	f7ff ff96 	bl	40306c <__fputwc>
  403140:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403142:	07da      	lsls	r2, r3, #31
  403144:	4605      	mov	r5, r0
  403146:	d402      	bmi.n	40314e <_fputwc_r+0x42>
  403148:	89a3      	ldrh	r3, [r4, #12]
  40314a:	059b      	lsls	r3, r3, #22
  40314c:	d502      	bpl.n	403154 <_fputwc_r+0x48>
  40314e:	4628      	mov	r0, r5
  403150:	b003      	add	sp, #12
  403152:	bd30      	pop	{r4, r5, pc}
  403154:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403156:	f000 faf9 	bl	40374c <__retarget_lock_release_recursive>
  40315a:	4628      	mov	r0, r5
  40315c:	b003      	add	sp, #12
  40315e:	bd30      	pop	{r4, r5, pc}
  403160:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403162:	9101      	str	r1, [sp, #4]
  403164:	f000 faf0 	bl	403748 <__retarget_lock_acquire_recursive>
  403168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40316c:	9901      	ldr	r1, [sp, #4]
  40316e:	b29a      	uxth	r2, r3
  403170:	e7d9      	b.n	403126 <_fputwc_r+0x1a>
  403172:	bf00      	nop

00403174 <_malloc_trim_r>:
  403174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403176:	4f24      	ldr	r7, [pc, #144]	; (403208 <_malloc_trim_r+0x94>)
  403178:	460c      	mov	r4, r1
  40317a:	4606      	mov	r6, r0
  40317c:	f000 fee4 	bl	403f48 <__malloc_lock>
  403180:	68bb      	ldr	r3, [r7, #8]
  403182:	685d      	ldr	r5, [r3, #4]
  403184:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403188:	310f      	adds	r1, #15
  40318a:	f025 0503 	bic.w	r5, r5, #3
  40318e:	4429      	add	r1, r5
  403190:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403194:	f021 010f 	bic.w	r1, r1, #15
  403198:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40319c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4031a0:	db07      	blt.n	4031b2 <_malloc_trim_r+0x3e>
  4031a2:	2100      	movs	r1, #0
  4031a4:	4630      	mov	r0, r6
  4031a6:	f001 f881 	bl	4042ac <_sbrk_r>
  4031aa:	68bb      	ldr	r3, [r7, #8]
  4031ac:	442b      	add	r3, r5
  4031ae:	4298      	cmp	r0, r3
  4031b0:	d004      	beq.n	4031bc <_malloc_trim_r+0x48>
  4031b2:	4630      	mov	r0, r6
  4031b4:	f000 fece 	bl	403f54 <__malloc_unlock>
  4031b8:	2000      	movs	r0, #0
  4031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031bc:	4261      	negs	r1, r4
  4031be:	4630      	mov	r0, r6
  4031c0:	f001 f874 	bl	4042ac <_sbrk_r>
  4031c4:	3001      	adds	r0, #1
  4031c6:	d00d      	beq.n	4031e4 <_malloc_trim_r+0x70>
  4031c8:	4b10      	ldr	r3, [pc, #64]	; (40320c <_malloc_trim_r+0x98>)
  4031ca:	68ba      	ldr	r2, [r7, #8]
  4031cc:	6819      	ldr	r1, [r3, #0]
  4031ce:	1b2d      	subs	r5, r5, r4
  4031d0:	f045 0501 	orr.w	r5, r5, #1
  4031d4:	4630      	mov	r0, r6
  4031d6:	1b09      	subs	r1, r1, r4
  4031d8:	6055      	str	r5, [r2, #4]
  4031da:	6019      	str	r1, [r3, #0]
  4031dc:	f000 feba 	bl	403f54 <__malloc_unlock>
  4031e0:	2001      	movs	r0, #1
  4031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031e4:	2100      	movs	r1, #0
  4031e6:	4630      	mov	r0, r6
  4031e8:	f001 f860 	bl	4042ac <_sbrk_r>
  4031ec:	68ba      	ldr	r2, [r7, #8]
  4031ee:	1a83      	subs	r3, r0, r2
  4031f0:	2b0f      	cmp	r3, #15
  4031f2:	ddde      	ble.n	4031b2 <_malloc_trim_r+0x3e>
  4031f4:	4c06      	ldr	r4, [pc, #24]	; (403210 <_malloc_trim_r+0x9c>)
  4031f6:	4905      	ldr	r1, [pc, #20]	; (40320c <_malloc_trim_r+0x98>)
  4031f8:	6824      	ldr	r4, [r4, #0]
  4031fa:	f043 0301 	orr.w	r3, r3, #1
  4031fe:	1b00      	subs	r0, r0, r4
  403200:	6053      	str	r3, [r2, #4]
  403202:	6008      	str	r0, [r1, #0]
  403204:	e7d5      	b.n	4031b2 <_malloc_trim_r+0x3e>
  403206:	bf00      	nop
  403208:	204005b0 	.word	0x204005b0
  40320c:	20400a58 	.word	0x20400a58
  403210:	204009b8 	.word	0x204009b8

00403214 <_free_r>:
  403214:	2900      	cmp	r1, #0
  403216:	d044      	beq.n	4032a2 <_free_r+0x8e>
  403218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40321c:	460d      	mov	r5, r1
  40321e:	4680      	mov	r8, r0
  403220:	f000 fe92 	bl	403f48 <__malloc_lock>
  403224:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403228:	4969      	ldr	r1, [pc, #420]	; (4033d0 <_free_r+0x1bc>)
  40322a:	f027 0301 	bic.w	r3, r7, #1
  40322e:	f1a5 0408 	sub.w	r4, r5, #8
  403232:	18e2      	adds	r2, r4, r3
  403234:	688e      	ldr	r6, [r1, #8]
  403236:	6850      	ldr	r0, [r2, #4]
  403238:	42b2      	cmp	r2, r6
  40323a:	f020 0003 	bic.w	r0, r0, #3
  40323e:	d05e      	beq.n	4032fe <_free_r+0xea>
  403240:	07fe      	lsls	r6, r7, #31
  403242:	6050      	str	r0, [r2, #4]
  403244:	d40b      	bmi.n	40325e <_free_r+0x4a>
  403246:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40324a:	1be4      	subs	r4, r4, r7
  40324c:	f101 0e08 	add.w	lr, r1, #8
  403250:	68a5      	ldr	r5, [r4, #8]
  403252:	4575      	cmp	r5, lr
  403254:	443b      	add	r3, r7
  403256:	d06d      	beq.n	403334 <_free_r+0x120>
  403258:	68e7      	ldr	r7, [r4, #12]
  40325a:	60ef      	str	r7, [r5, #12]
  40325c:	60bd      	str	r5, [r7, #8]
  40325e:	1815      	adds	r5, r2, r0
  403260:	686d      	ldr	r5, [r5, #4]
  403262:	07ed      	lsls	r5, r5, #31
  403264:	d53e      	bpl.n	4032e4 <_free_r+0xd0>
  403266:	f043 0201 	orr.w	r2, r3, #1
  40326a:	6062      	str	r2, [r4, #4]
  40326c:	50e3      	str	r3, [r4, r3]
  40326e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403272:	d217      	bcs.n	4032a4 <_free_r+0x90>
  403274:	08db      	lsrs	r3, r3, #3
  403276:	1c58      	adds	r0, r3, #1
  403278:	109a      	asrs	r2, r3, #2
  40327a:	684d      	ldr	r5, [r1, #4]
  40327c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403280:	60a7      	str	r7, [r4, #8]
  403282:	2301      	movs	r3, #1
  403284:	4093      	lsls	r3, r2
  403286:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40328a:	432b      	orrs	r3, r5
  40328c:	3a08      	subs	r2, #8
  40328e:	60e2      	str	r2, [r4, #12]
  403290:	604b      	str	r3, [r1, #4]
  403292:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403296:	60fc      	str	r4, [r7, #12]
  403298:	4640      	mov	r0, r8
  40329a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40329e:	f000 be59 	b.w	403f54 <__malloc_unlock>
  4032a2:	4770      	bx	lr
  4032a4:	0a5a      	lsrs	r2, r3, #9
  4032a6:	2a04      	cmp	r2, #4
  4032a8:	d852      	bhi.n	403350 <_free_r+0x13c>
  4032aa:	099a      	lsrs	r2, r3, #6
  4032ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4032b0:	00ff      	lsls	r7, r7, #3
  4032b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4032b6:	19c8      	adds	r0, r1, r7
  4032b8:	59ca      	ldr	r2, [r1, r7]
  4032ba:	3808      	subs	r0, #8
  4032bc:	4290      	cmp	r0, r2
  4032be:	d04f      	beq.n	403360 <_free_r+0x14c>
  4032c0:	6851      	ldr	r1, [r2, #4]
  4032c2:	f021 0103 	bic.w	r1, r1, #3
  4032c6:	428b      	cmp	r3, r1
  4032c8:	d232      	bcs.n	403330 <_free_r+0x11c>
  4032ca:	6892      	ldr	r2, [r2, #8]
  4032cc:	4290      	cmp	r0, r2
  4032ce:	d1f7      	bne.n	4032c0 <_free_r+0xac>
  4032d0:	68c3      	ldr	r3, [r0, #12]
  4032d2:	60a0      	str	r0, [r4, #8]
  4032d4:	60e3      	str	r3, [r4, #12]
  4032d6:	609c      	str	r4, [r3, #8]
  4032d8:	60c4      	str	r4, [r0, #12]
  4032da:	4640      	mov	r0, r8
  4032dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4032e0:	f000 be38 	b.w	403f54 <__malloc_unlock>
  4032e4:	6895      	ldr	r5, [r2, #8]
  4032e6:	4f3b      	ldr	r7, [pc, #236]	; (4033d4 <_free_r+0x1c0>)
  4032e8:	42bd      	cmp	r5, r7
  4032ea:	4403      	add	r3, r0
  4032ec:	d040      	beq.n	403370 <_free_r+0x15c>
  4032ee:	68d0      	ldr	r0, [r2, #12]
  4032f0:	60e8      	str	r0, [r5, #12]
  4032f2:	f043 0201 	orr.w	r2, r3, #1
  4032f6:	6085      	str	r5, [r0, #8]
  4032f8:	6062      	str	r2, [r4, #4]
  4032fa:	50e3      	str	r3, [r4, r3]
  4032fc:	e7b7      	b.n	40326e <_free_r+0x5a>
  4032fe:	07ff      	lsls	r7, r7, #31
  403300:	4403      	add	r3, r0
  403302:	d407      	bmi.n	403314 <_free_r+0x100>
  403304:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403308:	1aa4      	subs	r4, r4, r2
  40330a:	4413      	add	r3, r2
  40330c:	68a0      	ldr	r0, [r4, #8]
  40330e:	68e2      	ldr	r2, [r4, #12]
  403310:	60c2      	str	r2, [r0, #12]
  403312:	6090      	str	r0, [r2, #8]
  403314:	4a30      	ldr	r2, [pc, #192]	; (4033d8 <_free_r+0x1c4>)
  403316:	6812      	ldr	r2, [r2, #0]
  403318:	f043 0001 	orr.w	r0, r3, #1
  40331c:	4293      	cmp	r3, r2
  40331e:	6060      	str	r0, [r4, #4]
  403320:	608c      	str	r4, [r1, #8]
  403322:	d3b9      	bcc.n	403298 <_free_r+0x84>
  403324:	4b2d      	ldr	r3, [pc, #180]	; (4033dc <_free_r+0x1c8>)
  403326:	4640      	mov	r0, r8
  403328:	6819      	ldr	r1, [r3, #0]
  40332a:	f7ff ff23 	bl	403174 <_malloc_trim_r>
  40332e:	e7b3      	b.n	403298 <_free_r+0x84>
  403330:	4610      	mov	r0, r2
  403332:	e7cd      	b.n	4032d0 <_free_r+0xbc>
  403334:	1811      	adds	r1, r2, r0
  403336:	6849      	ldr	r1, [r1, #4]
  403338:	07c9      	lsls	r1, r1, #31
  40333a:	d444      	bmi.n	4033c6 <_free_r+0x1b2>
  40333c:	6891      	ldr	r1, [r2, #8]
  40333e:	68d2      	ldr	r2, [r2, #12]
  403340:	60ca      	str	r2, [r1, #12]
  403342:	4403      	add	r3, r0
  403344:	f043 0001 	orr.w	r0, r3, #1
  403348:	6091      	str	r1, [r2, #8]
  40334a:	6060      	str	r0, [r4, #4]
  40334c:	50e3      	str	r3, [r4, r3]
  40334e:	e7a3      	b.n	403298 <_free_r+0x84>
  403350:	2a14      	cmp	r2, #20
  403352:	d816      	bhi.n	403382 <_free_r+0x16e>
  403354:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403358:	00ff      	lsls	r7, r7, #3
  40335a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40335e:	e7aa      	b.n	4032b6 <_free_r+0xa2>
  403360:	10aa      	asrs	r2, r5, #2
  403362:	2301      	movs	r3, #1
  403364:	684d      	ldr	r5, [r1, #4]
  403366:	4093      	lsls	r3, r2
  403368:	432b      	orrs	r3, r5
  40336a:	604b      	str	r3, [r1, #4]
  40336c:	4603      	mov	r3, r0
  40336e:	e7b0      	b.n	4032d2 <_free_r+0xbe>
  403370:	f043 0201 	orr.w	r2, r3, #1
  403374:	614c      	str	r4, [r1, #20]
  403376:	610c      	str	r4, [r1, #16]
  403378:	60e5      	str	r5, [r4, #12]
  40337a:	60a5      	str	r5, [r4, #8]
  40337c:	6062      	str	r2, [r4, #4]
  40337e:	50e3      	str	r3, [r4, r3]
  403380:	e78a      	b.n	403298 <_free_r+0x84>
  403382:	2a54      	cmp	r2, #84	; 0x54
  403384:	d806      	bhi.n	403394 <_free_r+0x180>
  403386:	0b1a      	lsrs	r2, r3, #12
  403388:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40338c:	00ff      	lsls	r7, r7, #3
  40338e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403392:	e790      	b.n	4032b6 <_free_r+0xa2>
  403394:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403398:	d806      	bhi.n	4033a8 <_free_r+0x194>
  40339a:	0bda      	lsrs	r2, r3, #15
  40339c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4033a0:	00ff      	lsls	r7, r7, #3
  4033a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4033a6:	e786      	b.n	4032b6 <_free_r+0xa2>
  4033a8:	f240 5054 	movw	r0, #1364	; 0x554
  4033ac:	4282      	cmp	r2, r0
  4033ae:	d806      	bhi.n	4033be <_free_r+0x1aa>
  4033b0:	0c9a      	lsrs	r2, r3, #18
  4033b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4033b6:	00ff      	lsls	r7, r7, #3
  4033b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4033bc:	e77b      	b.n	4032b6 <_free_r+0xa2>
  4033be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4033c2:	257e      	movs	r5, #126	; 0x7e
  4033c4:	e777      	b.n	4032b6 <_free_r+0xa2>
  4033c6:	f043 0101 	orr.w	r1, r3, #1
  4033ca:	6061      	str	r1, [r4, #4]
  4033cc:	6013      	str	r3, [r2, #0]
  4033ce:	e763      	b.n	403298 <_free_r+0x84>
  4033d0:	204005b0 	.word	0x204005b0
  4033d4:	204005b8 	.word	0x204005b8
  4033d8:	204009bc 	.word	0x204009bc
  4033dc:	20400a88 	.word	0x20400a88

004033e0 <__sfvwrite_r>:
  4033e0:	6893      	ldr	r3, [r2, #8]
  4033e2:	2b00      	cmp	r3, #0
  4033e4:	d073      	beq.n	4034ce <__sfvwrite_r+0xee>
  4033e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033ea:	898b      	ldrh	r3, [r1, #12]
  4033ec:	b083      	sub	sp, #12
  4033ee:	460c      	mov	r4, r1
  4033f0:	0719      	lsls	r1, r3, #28
  4033f2:	9000      	str	r0, [sp, #0]
  4033f4:	4616      	mov	r6, r2
  4033f6:	d526      	bpl.n	403446 <__sfvwrite_r+0x66>
  4033f8:	6922      	ldr	r2, [r4, #16]
  4033fa:	b322      	cbz	r2, 403446 <__sfvwrite_r+0x66>
  4033fc:	f013 0002 	ands.w	r0, r3, #2
  403400:	6835      	ldr	r5, [r6, #0]
  403402:	d02c      	beq.n	40345e <__sfvwrite_r+0x7e>
  403404:	f04f 0900 	mov.w	r9, #0
  403408:	4fb0      	ldr	r7, [pc, #704]	; (4036cc <__sfvwrite_r+0x2ec>)
  40340a:	46c8      	mov	r8, r9
  40340c:	46b2      	mov	sl, r6
  40340e:	45b8      	cmp	r8, r7
  403410:	4643      	mov	r3, r8
  403412:	464a      	mov	r2, r9
  403414:	bf28      	it	cs
  403416:	463b      	movcs	r3, r7
  403418:	9800      	ldr	r0, [sp, #0]
  40341a:	f1b8 0f00 	cmp.w	r8, #0
  40341e:	d050      	beq.n	4034c2 <__sfvwrite_r+0xe2>
  403420:	69e1      	ldr	r1, [r4, #28]
  403422:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403424:	47b0      	blx	r6
  403426:	2800      	cmp	r0, #0
  403428:	dd58      	ble.n	4034dc <__sfvwrite_r+0xfc>
  40342a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40342e:	1a1b      	subs	r3, r3, r0
  403430:	4481      	add	r9, r0
  403432:	eba8 0800 	sub.w	r8, r8, r0
  403436:	f8ca 3008 	str.w	r3, [sl, #8]
  40343a:	2b00      	cmp	r3, #0
  40343c:	d1e7      	bne.n	40340e <__sfvwrite_r+0x2e>
  40343e:	2000      	movs	r0, #0
  403440:	b003      	add	sp, #12
  403442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403446:	4621      	mov	r1, r4
  403448:	9800      	ldr	r0, [sp, #0]
  40344a:	f7ff fc51 	bl	402cf0 <__swsetup_r>
  40344e:	2800      	cmp	r0, #0
  403450:	f040 8133 	bne.w	4036ba <__sfvwrite_r+0x2da>
  403454:	89a3      	ldrh	r3, [r4, #12]
  403456:	6835      	ldr	r5, [r6, #0]
  403458:	f013 0002 	ands.w	r0, r3, #2
  40345c:	d1d2      	bne.n	403404 <__sfvwrite_r+0x24>
  40345e:	f013 0901 	ands.w	r9, r3, #1
  403462:	d145      	bne.n	4034f0 <__sfvwrite_r+0x110>
  403464:	464f      	mov	r7, r9
  403466:	9601      	str	r6, [sp, #4]
  403468:	b337      	cbz	r7, 4034b8 <__sfvwrite_r+0xd8>
  40346a:	059a      	lsls	r2, r3, #22
  40346c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403470:	f140 8083 	bpl.w	40357a <__sfvwrite_r+0x19a>
  403474:	4547      	cmp	r7, r8
  403476:	46c3      	mov	fp, r8
  403478:	f0c0 80ab 	bcc.w	4035d2 <__sfvwrite_r+0x1f2>
  40347c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403480:	f040 80ac 	bne.w	4035dc <__sfvwrite_r+0x1fc>
  403484:	6820      	ldr	r0, [r4, #0]
  403486:	46ba      	mov	sl, r7
  403488:	465a      	mov	r2, fp
  40348a:	4649      	mov	r1, r9
  40348c:	f000 fcf8 	bl	403e80 <memmove>
  403490:	68a2      	ldr	r2, [r4, #8]
  403492:	6823      	ldr	r3, [r4, #0]
  403494:	eba2 0208 	sub.w	r2, r2, r8
  403498:	445b      	add	r3, fp
  40349a:	60a2      	str	r2, [r4, #8]
  40349c:	6023      	str	r3, [r4, #0]
  40349e:	9a01      	ldr	r2, [sp, #4]
  4034a0:	6893      	ldr	r3, [r2, #8]
  4034a2:	eba3 030a 	sub.w	r3, r3, sl
  4034a6:	44d1      	add	r9, sl
  4034a8:	eba7 070a 	sub.w	r7, r7, sl
  4034ac:	6093      	str	r3, [r2, #8]
  4034ae:	2b00      	cmp	r3, #0
  4034b0:	d0c5      	beq.n	40343e <__sfvwrite_r+0x5e>
  4034b2:	89a3      	ldrh	r3, [r4, #12]
  4034b4:	2f00      	cmp	r7, #0
  4034b6:	d1d8      	bne.n	40346a <__sfvwrite_r+0x8a>
  4034b8:	f8d5 9000 	ldr.w	r9, [r5]
  4034bc:	686f      	ldr	r7, [r5, #4]
  4034be:	3508      	adds	r5, #8
  4034c0:	e7d2      	b.n	403468 <__sfvwrite_r+0x88>
  4034c2:	f8d5 9000 	ldr.w	r9, [r5]
  4034c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4034ca:	3508      	adds	r5, #8
  4034cc:	e79f      	b.n	40340e <__sfvwrite_r+0x2e>
  4034ce:	2000      	movs	r0, #0
  4034d0:	4770      	bx	lr
  4034d2:	4621      	mov	r1, r4
  4034d4:	9800      	ldr	r0, [sp, #0]
  4034d6:	f7ff fd1f 	bl	402f18 <_fflush_r>
  4034da:	b370      	cbz	r0, 40353a <__sfvwrite_r+0x15a>
  4034dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4034e4:	f04f 30ff 	mov.w	r0, #4294967295
  4034e8:	81a3      	strh	r3, [r4, #12]
  4034ea:	b003      	add	sp, #12
  4034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034f0:	4681      	mov	r9, r0
  4034f2:	4633      	mov	r3, r6
  4034f4:	464e      	mov	r6, r9
  4034f6:	46a8      	mov	r8, r5
  4034f8:	469a      	mov	sl, r3
  4034fa:	464d      	mov	r5, r9
  4034fc:	b34e      	cbz	r6, 403552 <__sfvwrite_r+0x172>
  4034fe:	b380      	cbz	r0, 403562 <__sfvwrite_r+0x182>
  403500:	6820      	ldr	r0, [r4, #0]
  403502:	6923      	ldr	r3, [r4, #16]
  403504:	6962      	ldr	r2, [r4, #20]
  403506:	45b1      	cmp	r9, r6
  403508:	46cb      	mov	fp, r9
  40350a:	bf28      	it	cs
  40350c:	46b3      	movcs	fp, r6
  40350e:	4298      	cmp	r0, r3
  403510:	465f      	mov	r7, fp
  403512:	d904      	bls.n	40351e <__sfvwrite_r+0x13e>
  403514:	68a3      	ldr	r3, [r4, #8]
  403516:	4413      	add	r3, r2
  403518:	459b      	cmp	fp, r3
  40351a:	f300 80a6 	bgt.w	40366a <__sfvwrite_r+0x28a>
  40351e:	4593      	cmp	fp, r2
  403520:	db4b      	blt.n	4035ba <__sfvwrite_r+0x1da>
  403522:	4613      	mov	r3, r2
  403524:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403526:	69e1      	ldr	r1, [r4, #28]
  403528:	9800      	ldr	r0, [sp, #0]
  40352a:	462a      	mov	r2, r5
  40352c:	47b8      	blx	r7
  40352e:	1e07      	subs	r7, r0, #0
  403530:	ddd4      	ble.n	4034dc <__sfvwrite_r+0xfc>
  403532:	ebb9 0907 	subs.w	r9, r9, r7
  403536:	d0cc      	beq.n	4034d2 <__sfvwrite_r+0xf2>
  403538:	2001      	movs	r0, #1
  40353a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40353e:	1bdb      	subs	r3, r3, r7
  403540:	443d      	add	r5, r7
  403542:	1bf6      	subs	r6, r6, r7
  403544:	f8ca 3008 	str.w	r3, [sl, #8]
  403548:	2b00      	cmp	r3, #0
  40354a:	f43f af78 	beq.w	40343e <__sfvwrite_r+0x5e>
  40354e:	2e00      	cmp	r6, #0
  403550:	d1d5      	bne.n	4034fe <__sfvwrite_r+0x11e>
  403552:	f108 0308 	add.w	r3, r8, #8
  403556:	e913 0060 	ldmdb	r3, {r5, r6}
  40355a:	4698      	mov	r8, r3
  40355c:	3308      	adds	r3, #8
  40355e:	2e00      	cmp	r6, #0
  403560:	d0f9      	beq.n	403556 <__sfvwrite_r+0x176>
  403562:	4632      	mov	r2, r6
  403564:	210a      	movs	r1, #10
  403566:	4628      	mov	r0, r5
  403568:	f000 fc3a 	bl	403de0 <memchr>
  40356c:	2800      	cmp	r0, #0
  40356e:	f000 80a1 	beq.w	4036b4 <__sfvwrite_r+0x2d4>
  403572:	3001      	adds	r0, #1
  403574:	eba0 0905 	sub.w	r9, r0, r5
  403578:	e7c2      	b.n	403500 <__sfvwrite_r+0x120>
  40357a:	6820      	ldr	r0, [r4, #0]
  40357c:	6923      	ldr	r3, [r4, #16]
  40357e:	4298      	cmp	r0, r3
  403580:	d802      	bhi.n	403588 <__sfvwrite_r+0x1a8>
  403582:	6963      	ldr	r3, [r4, #20]
  403584:	429f      	cmp	r7, r3
  403586:	d25d      	bcs.n	403644 <__sfvwrite_r+0x264>
  403588:	45b8      	cmp	r8, r7
  40358a:	bf28      	it	cs
  40358c:	46b8      	movcs	r8, r7
  40358e:	4642      	mov	r2, r8
  403590:	4649      	mov	r1, r9
  403592:	f000 fc75 	bl	403e80 <memmove>
  403596:	68a3      	ldr	r3, [r4, #8]
  403598:	6822      	ldr	r2, [r4, #0]
  40359a:	eba3 0308 	sub.w	r3, r3, r8
  40359e:	4442      	add	r2, r8
  4035a0:	60a3      	str	r3, [r4, #8]
  4035a2:	6022      	str	r2, [r4, #0]
  4035a4:	b10b      	cbz	r3, 4035aa <__sfvwrite_r+0x1ca>
  4035a6:	46c2      	mov	sl, r8
  4035a8:	e779      	b.n	40349e <__sfvwrite_r+0xbe>
  4035aa:	4621      	mov	r1, r4
  4035ac:	9800      	ldr	r0, [sp, #0]
  4035ae:	f7ff fcb3 	bl	402f18 <_fflush_r>
  4035b2:	2800      	cmp	r0, #0
  4035b4:	d192      	bne.n	4034dc <__sfvwrite_r+0xfc>
  4035b6:	46c2      	mov	sl, r8
  4035b8:	e771      	b.n	40349e <__sfvwrite_r+0xbe>
  4035ba:	465a      	mov	r2, fp
  4035bc:	4629      	mov	r1, r5
  4035be:	f000 fc5f 	bl	403e80 <memmove>
  4035c2:	68a2      	ldr	r2, [r4, #8]
  4035c4:	6823      	ldr	r3, [r4, #0]
  4035c6:	eba2 020b 	sub.w	r2, r2, fp
  4035ca:	445b      	add	r3, fp
  4035cc:	60a2      	str	r2, [r4, #8]
  4035ce:	6023      	str	r3, [r4, #0]
  4035d0:	e7af      	b.n	403532 <__sfvwrite_r+0x152>
  4035d2:	6820      	ldr	r0, [r4, #0]
  4035d4:	46b8      	mov	r8, r7
  4035d6:	46ba      	mov	sl, r7
  4035d8:	46bb      	mov	fp, r7
  4035da:	e755      	b.n	403488 <__sfvwrite_r+0xa8>
  4035dc:	6962      	ldr	r2, [r4, #20]
  4035de:	6820      	ldr	r0, [r4, #0]
  4035e0:	6921      	ldr	r1, [r4, #16]
  4035e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4035e6:	eba0 0a01 	sub.w	sl, r0, r1
  4035ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4035ee:	f10a 0001 	add.w	r0, sl, #1
  4035f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4035f6:	4438      	add	r0, r7
  4035f8:	4540      	cmp	r0, r8
  4035fa:	4642      	mov	r2, r8
  4035fc:	bf84      	itt	hi
  4035fe:	4680      	movhi	r8, r0
  403600:	4642      	movhi	r2, r8
  403602:	055b      	lsls	r3, r3, #21
  403604:	d544      	bpl.n	403690 <__sfvwrite_r+0x2b0>
  403606:	4611      	mov	r1, r2
  403608:	9800      	ldr	r0, [sp, #0]
  40360a:	f000 f921 	bl	403850 <_malloc_r>
  40360e:	4683      	mov	fp, r0
  403610:	2800      	cmp	r0, #0
  403612:	d055      	beq.n	4036c0 <__sfvwrite_r+0x2e0>
  403614:	4652      	mov	r2, sl
  403616:	6921      	ldr	r1, [r4, #16]
  403618:	f7fe fa18 	bl	401a4c <memcpy>
  40361c:	89a3      	ldrh	r3, [r4, #12]
  40361e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403626:	81a3      	strh	r3, [r4, #12]
  403628:	eb0b 000a 	add.w	r0, fp, sl
  40362c:	eba8 030a 	sub.w	r3, r8, sl
  403630:	f8c4 b010 	str.w	fp, [r4, #16]
  403634:	f8c4 8014 	str.w	r8, [r4, #20]
  403638:	6020      	str	r0, [r4, #0]
  40363a:	60a3      	str	r3, [r4, #8]
  40363c:	46b8      	mov	r8, r7
  40363e:	46ba      	mov	sl, r7
  403640:	46bb      	mov	fp, r7
  403642:	e721      	b.n	403488 <__sfvwrite_r+0xa8>
  403644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403648:	42b9      	cmp	r1, r7
  40364a:	bf28      	it	cs
  40364c:	4639      	movcs	r1, r7
  40364e:	464a      	mov	r2, r9
  403650:	fb91 f1f3 	sdiv	r1, r1, r3
  403654:	9800      	ldr	r0, [sp, #0]
  403656:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403658:	fb03 f301 	mul.w	r3, r3, r1
  40365c:	69e1      	ldr	r1, [r4, #28]
  40365e:	47b0      	blx	r6
  403660:	f1b0 0a00 	subs.w	sl, r0, #0
  403664:	f73f af1b 	bgt.w	40349e <__sfvwrite_r+0xbe>
  403668:	e738      	b.n	4034dc <__sfvwrite_r+0xfc>
  40366a:	461a      	mov	r2, r3
  40366c:	4629      	mov	r1, r5
  40366e:	9301      	str	r3, [sp, #4]
  403670:	f000 fc06 	bl	403e80 <memmove>
  403674:	6822      	ldr	r2, [r4, #0]
  403676:	9b01      	ldr	r3, [sp, #4]
  403678:	9800      	ldr	r0, [sp, #0]
  40367a:	441a      	add	r2, r3
  40367c:	6022      	str	r2, [r4, #0]
  40367e:	4621      	mov	r1, r4
  403680:	f7ff fc4a 	bl	402f18 <_fflush_r>
  403684:	9b01      	ldr	r3, [sp, #4]
  403686:	2800      	cmp	r0, #0
  403688:	f47f af28 	bne.w	4034dc <__sfvwrite_r+0xfc>
  40368c:	461f      	mov	r7, r3
  40368e:	e750      	b.n	403532 <__sfvwrite_r+0x152>
  403690:	9800      	ldr	r0, [sp, #0]
  403692:	f000 fc65 	bl	403f60 <_realloc_r>
  403696:	4683      	mov	fp, r0
  403698:	2800      	cmp	r0, #0
  40369a:	d1c5      	bne.n	403628 <__sfvwrite_r+0x248>
  40369c:	9d00      	ldr	r5, [sp, #0]
  40369e:	6921      	ldr	r1, [r4, #16]
  4036a0:	4628      	mov	r0, r5
  4036a2:	f7ff fdb7 	bl	403214 <_free_r>
  4036a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036aa:	220c      	movs	r2, #12
  4036ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4036b0:	602a      	str	r2, [r5, #0]
  4036b2:	e715      	b.n	4034e0 <__sfvwrite_r+0x100>
  4036b4:	f106 0901 	add.w	r9, r6, #1
  4036b8:	e722      	b.n	403500 <__sfvwrite_r+0x120>
  4036ba:	f04f 30ff 	mov.w	r0, #4294967295
  4036be:	e6bf      	b.n	403440 <__sfvwrite_r+0x60>
  4036c0:	9a00      	ldr	r2, [sp, #0]
  4036c2:	230c      	movs	r3, #12
  4036c4:	6013      	str	r3, [r2, #0]
  4036c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036ca:	e709      	b.n	4034e0 <__sfvwrite_r+0x100>
  4036cc:	7ffffc00 	.word	0x7ffffc00

004036d0 <_fwalk_reent>:
  4036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4036d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4036d8:	d01f      	beq.n	40371a <_fwalk_reent+0x4a>
  4036da:	4688      	mov	r8, r1
  4036dc:	4606      	mov	r6, r0
  4036de:	f04f 0900 	mov.w	r9, #0
  4036e2:	687d      	ldr	r5, [r7, #4]
  4036e4:	68bc      	ldr	r4, [r7, #8]
  4036e6:	3d01      	subs	r5, #1
  4036e8:	d411      	bmi.n	40370e <_fwalk_reent+0x3e>
  4036ea:	89a3      	ldrh	r3, [r4, #12]
  4036ec:	2b01      	cmp	r3, #1
  4036ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4036f2:	d908      	bls.n	403706 <_fwalk_reent+0x36>
  4036f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4036f8:	3301      	adds	r3, #1
  4036fa:	4621      	mov	r1, r4
  4036fc:	4630      	mov	r0, r6
  4036fe:	d002      	beq.n	403706 <_fwalk_reent+0x36>
  403700:	47c0      	blx	r8
  403702:	ea49 0900 	orr.w	r9, r9, r0
  403706:	1c6b      	adds	r3, r5, #1
  403708:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40370c:	d1ed      	bne.n	4036ea <_fwalk_reent+0x1a>
  40370e:	683f      	ldr	r7, [r7, #0]
  403710:	2f00      	cmp	r7, #0
  403712:	d1e6      	bne.n	4036e2 <_fwalk_reent+0x12>
  403714:	4648      	mov	r0, r9
  403716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40371a:	46b9      	mov	r9, r7
  40371c:	4648      	mov	r0, r9
  40371e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403722:	bf00      	nop

00403724 <__locale_mb_cur_max>:
  403724:	4b04      	ldr	r3, [pc, #16]	; (403738 <__locale_mb_cur_max+0x14>)
  403726:	4a05      	ldr	r2, [pc, #20]	; (40373c <__locale_mb_cur_max+0x18>)
  403728:	681b      	ldr	r3, [r3, #0]
  40372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40372c:	2b00      	cmp	r3, #0
  40372e:	bf08      	it	eq
  403730:	4613      	moveq	r3, r2
  403732:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403736:	4770      	bx	lr
  403738:	20400014 	.word	0x20400014
  40373c:	20400444 	.word	0x20400444

00403740 <__retarget_lock_init_recursive>:
  403740:	4770      	bx	lr
  403742:	bf00      	nop

00403744 <__retarget_lock_close_recursive>:
  403744:	4770      	bx	lr
  403746:	bf00      	nop

00403748 <__retarget_lock_acquire_recursive>:
  403748:	4770      	bx	lr
  40374a:	bf00      	nop

0040374c <__retarget_lock_release_recursive>:
  40374c:	4770      	bx	lr
  40374e:	bf00      	nop

00403750 <__swhatbuf_r>:
  403750:	b570      	push	{r4, r5, r6, lr}
  403752:	460c      	mov	r4, r1
  403754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403758:	2900      	cmp	r1, #0
  40375a:	b090      	sub	sp, #64	; 0x40
  40375c:	4615      	mov	r5, r2
  40375e:	461e      	mov	r6, r3
  403760:	db14      	blt.n	40378c <__swhatbuf_r+0x3c>
  403762:	aa01      	add	r2, sp, #4
  403764:	f000 ff74 	bl	404650 <_fstat_r>
  403768:	2800      	cmp	r0, #0
  40376a:	db0f      	blt.n	40378c <__swhatbuf_r+0x3c>
  40376c:	9a02      	ldr	r2, [sp, #8]
  40376e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403772:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403776:	fab2 f282 	clz	r2, r2
  40377a:	0952      	lsrs	r2, r2, #5
  40377c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403780:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403784:	6032      	str	r2, [r6, #0]
  403786:	602b      	str	r3, [r5, #0]
  403788:	b010      	add	sp, #64	; 0x40
  40378a:	bd70      	pop	{r4, r5, r6, pc}
  40378c:	89a2      	ldrh	r2, [r4, #12]
  40378e:	2300      	movs	r3, #0
  403790:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403794:	6033      	str	r3, [r6, #0]
  403796:	d004      	beq.n	4037a2 <__swhatbuf_r+0x52>
  403798:	2240      	movs	r2, #64	; 0x40
  40379a:	4618      	mov	r0, r3
  40379c:	602a      	str	r2, [r5, #0]
  40379e:	b010      	add	sp, #64	; 0x40
  4037a0:	bd70      	pop	{r4, r5, r6, pc}
  4037a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4037a6:	602b      	str	r3, [r5, #0]
  4037a8:	b010      	add	sp, #64	; 0x40
  4037aa:	bd70      	pop	{r4, r5, r6, pc}

004037ac <__smakebuf_r>:
  4037ac:	898a      	ldrh	r2, [r1, #12]
  4037ae:	0792      	lsls	r2, r2, #30
  4037b0:	460b      	mov	r3, r1
  4037b2:	d506      	bpl.n	4037c2 <__smakebuf_r+0x16>
  4037b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4037b8:	2101      	movs	r1, #1
  4037ba:	601a      	str	r2, [r3, #0]
  4037bc:	611a      	str	r2, [r3, #16]
  4037be:	6159      	str	r1, [r3, #20]
  4037c0:	4770      	bx	lr
  4037c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037c4:	b083      	sub	sp, #12
  4037c6:	ab01      	add	r3, sp, #4
  4037c8:	466a      	mov	r2, sp
  4037ca:	460c      	mov	r4, r1
  4037cc:	4606      	mov	r6, r0
  4037ce:	f7ff ffbf 	bl	403750 <__swhatbuf_r>
  4037d2:	9900      	ldr	r1, [sp, #0]
  4037d4:	4605      	mov	r5, r0
  4037d6:	4630      	mov	r0, r6
  4037d8:	f000 f83a 	bl	403850 <_malloc_r>
  4037dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4037e0:	b1d8      	cbz	r0, 40381a <__smakebuf_r+0x6e>
  4037e2:	9a01      	ldr	r2, [sp, #4]
  4037e4:	4f15      	ldr	r7, [pc, #84]	; (40383c <__smakebuf_r+0x90>)
  4037e6:	9900      	ldr	r1, [sp, #0]
  4037e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037ee:	81a3      	strh	r3, [r4, #12]
  4037f0:	6020      	str	r0, [r4, #0]
  4037f2:	6120      	str	r0, [r4, #16]
  4037f4:	6161      	str	r1, [r4, #20]
  4037f6:	b91a      	cbnz	r2, 403800 <__smakebuf_r+0x54>
  4037f8:	432b      	orrs	r3, r5
  4037fa:	81a3      	strh	r3, [r4, #12]
  4037fc:	b003      	add	sp, #12
  4037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403800:	4630      	mov	r0, r6
  403802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403806:	f000 ff37 	bl	404678 <_isatty_r>
  40380a:	b1a0      	cbz	r0, 403836 <__smakebuf_r+0x8a>
  40380c:	89a3      	ldrh	r3, [r4, #12]
  40380e:	f023 0303 	bic.w	r3, r3, #3
  403812:	f043 0301 	orr.w	r3, r3, #1
  403816:	b21b      	sxth	r3, r3
  403818:	e7ee      	b.n	4037f8 <__smakebuf_r+0x4c>
  40381a:	059a      	lsls	r2, r3, #22
  40381c:	d4ee      	bmi.n	4037fc <__smakebuf_r+0x50>
  40381e:	f023 0303 	bic.w	r3, r3, #3
  403822:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403826:	f043 0302 	orr.w	r3, r3, #2
  40382a:	2101      	movs	r1, #1
  40382c:	81a3      	strh	r3, [r4, #12]
  40382e:	6022      	str	r2, [r4, #0]
  403830:	6122      	str	r2, [r4, #16]
  403832:	6161      	str	r1, [r4, #20]
  403834:	e7e2      	b.n	4037fc <__smakebuf_r+0x50>
  403836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40383a:	e7dd      	b.n	4037f8 <__smakebuf_r+0x4c>
  40383c:	00402f6d 	.word	0x00402f6d

00403840 <malloc>:
  403840:	4b02      	ldr	r3, [pc, #8]	; (40384c <malloc+0xc>)
  403842:	4601      	mov	r1, r0
  403844:	6818      	ldr	r0, [r3, #0]
  403846:	f000 b803 	b.w	403850 <_malloc_r>
  40384a:	bf00      	nop
  40384c:	20400014 	.word	0x20400014

00403850 <_malloc_r>:
  403850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403854:	f101 060b 	add.w	r6, r1, #11
  403858:	2e16      	cmp	r6, #22
  40385a:	b083      	sub	sp, #12
  40385c:	4605      	mov	r5, r0
  40385e:	f240 809e 	bls.w	40399e <_malloc_r+0x14e>
  403862:	f036 0607 	bics.w	r6, r6, #7
  403866:	f100 80bd 	bmi.w	4039e4 <_malloc_r+0x194>
  40386a:	42b1      	cmp	r1, r6
  40386c:	f200 80ba 	bhi.w	4039e4 <_malloc_r+0x194>
  403870:	f000 fb6a 	bl	403f48 <__malloc_lock>
  403874:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403878:	f0c0 8293 	bcc.w	403da2 <_malloc_r+0x552>
  40387c:	0a73      	lsrs	r3, r6, #9
  40387e:	f000 80b8 	beq.w	4039f2 <_malloc_r+0x1a2>
  403882:	2b04      	cmp	r3, #4
  403884:	f200 8179 	bhi.w	403b7a <_malloc_r+0x32a>
  403888:	09b3      	lsrs	r3, r6, #6
  40388a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40388e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403892:	00c3      	lsls	r3, r0, #3
  403894:	4fbf      	ldr	r7, [pc, #764]	; (403b94 <_malloc_r+0x344>)
  403896:	443b      	add	r3, r7
  403898:	f1a3 0108 	sub.w	r1, r3, #8
  40389c:	685c      	ldr	r4, [r3, #4]
  40389e:	42a1      	cmp	r1, r4
  4038a0:	d106      	bne.n	4038b0 <_malloc_r+0x60>
  4038a2:	e00c      	b.n	4038be <_malloc_r+0x6e>
  4038a4:	2a00      	cmp	r2, #0
  4038a6:	f280 80aa 	bge.w	4039fe <_malloc_r+0x1ae>
  4038aa:	68e4      	ldr	r4, [r4, #12]
  4038ac:	42a1      	cmp	r1, r4
  4038ae:	d006      	beq.n	4038be <_malloc_r+0x6e>
  4038b0:	6863      	ldr	r3, [r4, #4]
  4038b2:	f023 0303 	bic.w	r3, r3, #3
  4038b6:	1b9a      	subs	r2, r3, r6
  4038b8:	2a0f      	cmp	r2, #15
  4038ba:	ddf3      	ble.n	4038a4 <_malloc_r+0x54>
  4038bc:	4670      	mov	r0, lr
  4038be:	693c      	ldr	r4, [r7, #16]
  4038c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403ba8 <_malloc_r+0x358>
  4038c4:	4574      	cmp	r4, lr
  4038c6:	f000 81ab 	beq.w	403c20 <_malloc_r+0x3d0>
  4038ca:	6863      	ldr	r3, [r4, #4]
  4038cc:	f023 0303 	bic.w	r3, r3, #3
  4038d0:	1b9a      	subs	r2, r3, r6
  4038d2:	2a0f      	cmp	r2, #15
  4038d4:	f300 8190 	bgt.w	403bf8 <_malloc_r+0x3a8>
  4038d8:	2a00      	cmp	r2, #0
  4038da:	f8c7 e014 	str.w	lr, [r7, #20]
  4038de:	f8c7 e010 	str.w	lr, [r7, #16]
  4038e2:	f280 809d 	bge.w	403a20 <_malloc_r+0x1d0>
  4038e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4038ea:	f080 8161 	bcs.w	403bb0 <_malloc_r+0x360>
  4038ee:	08db      	lsrs	r3, r3, #3
  4038f0:	f103 0c01 	add.w	ip, r3, #1
  4038f4:	1099      	asrs	r1, r3, #2
  4038f6:	687a      	ldr	r2, [r7, #4]
  4038f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4038fc:	f8c4 8008 	str.w	r8, [r4, #8]
  403900:	2301      	movs	r3, #1
  403902:	408b      	lsls	r3, r1
  403904:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403908:	4313      	orrs	r3, r2
  40390a:	3908      	subs	r1, #8
  40390c:	60e1      	str	r1, [r4, #12]
  40390e:	607b      	str	r3, [r7, #4]
  403910:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403914:	f8c8 400c 	str.w	r4, [r8, #12]
  403918:	1082      	asrs	r2, r0, #2
  40391a:	2401      	movs	r4, #1
  40391c:	4094      	lsls	r4, r2
  40391e:	429c      	cmp	r4, r3
  403920:	f200 808b 	bhi.w	403a3a <_malloc_r+0x1ea>
  403924:	421c      	tst	r4, r3
  403926:	d106      	bne.n	403936 <_malloc_r+0xe6>
  403928:	f020 0003 	bic.w	r0, r0, #3
  40392c:	0064      	lsls	r4, r4, #1
  40392e:	421c      	tst	r4, r3
  403930:	f100 0004 	add.w	r0, r0, #4
  403934:	d0fa      	beq.n	40392c <_malloc_r+0xdc>
  403936:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40393a:	46cc      	mov	ip, r9
  40393c:	4680      	mov	r8, r0
  40393e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403942:	459c      	cmp	ip, r3
  403944:	d107      	bne.n	403956 <_malloc_r+0x106>
  403946:	e16d      	b.n	403c24 <_malloc_r+0x3d4>
  403948:	2a00      	cmp	r2, #0
  40394a:	f280 817b 	bge.w	403c44 <_malloc_r+0x3f4>
  40394e:	68db      	ldr	r3, [r3, #12]
  403950:	459c      	cmp	ip, r3
  403952:	f000 8167 	beq.w	403c24 <_malloc_r+0x3d4>
  403956:	6859      	ldr	r1, [r3, #4]
  403958:	f021 0103 	bic.w	r1, r1, #3
  40395c:	1b8a      	subs	r2, r1, r6
  40395e:	2a0f      	cmp	r2, #15
  403960:	ddf2      	ble.n	403948 <_malloc_r+0xf8>
  403962:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403966:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40396a:	9300      	str	r3, [sp, #0]
  40396c:	199c      	adds	r4, r3, r6
  40396e:	4628      	mov	r0, r5
  403970:	f046 0601 	orr.w	r6, r6, #1
  403974:	f042 0501 	orr.w	r5, r2, #1
  403978:	605e      	str	r6, [r3, #4]
  40397a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40397e:	f8cc 8008 	str.w	r8, [ip, #8]
  403982:	617c      	str	r4, [r7, #20]
  403984:	613c      	str	r4, [r7, #16]
  403986:	f8c4 e00c 	str.w	lr, [r4, #12]
  40398a:	f8c4 e008 	str.w	lr, [r4, #8]
  40398e:	6065      	str	r5, [r4, #4]
  403990:	505a      	str	r2, [r3, r1]
  403992:	f000 fadf 	bl	403f54 <__malloc_unlock>
  403996:	9b00      	ldr	r3, [sp, #0]
  403998:	f103 0408 	add.w	r4, r3, #8
  40399c:	e01e      	b.n	4039dc <_malloc_r+0x18c>
  40399e:	2910      	cmp	r1, #16
  4039a0:	d820      	bhi.n	4039e4 <_malloc_r+0x194>
  4039a2:	f000 fad1 	bl	403f48 <__malloc_lock>
  4039a6:	2610      	movs	r6, #16
  4039a8:	2318      	movs	r3, #24
  4039aa:	2002      	movs	r0, #2
  4039ac:	4f79      	ldr	r7, [pc, #484]	; (403b94 <_malloc_r+0x344>)
  4039ae:	443b      	add	r3, r7
  4039b0:	f1a3 0208 	sub.w	r2, r3, #8
  4039b4:	685c      	ldr	r4, [r3, #4]
  4039b6:	4294      	cmp	r4, r2
  4039b8:	f000 813d 	beq.w	403c36 <_malloc_r+0x3e6>
  4039bc:	6863      	ldr	r3, [r4, #4]
  4039be:	68e1      	ldr	r1, [r4, #12]
  4039c0:	68a6      	ldr	r6, [r4, #8]
  4039c2:	f023 0303 	bic.w	r3, r3, #3
  4039c6:	4423      	add	r3, r4
  4039c8:	4628      	mov	r0, r5
  4039ca:	685a      	ldr	r2, [r3, #4]
  4039cc:	60f1      	str	r1, [r6, #12]
  4039ce:	f042 0201 	orr.w	r2, r2, #1
  4039d2:	608e      	str	r6, [r1, #8]
  4039d4:	605a      	str	r2, [r3, #4]
  4039d6:	f000 fabd 	bl	403f54 <__malloc_unlock>
  4039da:	3408      	adds	r4, #8
  4039dc:	4620      	mov	r0, r4
  4039de:	b003      	add	sp, #12
  4039e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039e4:	2400      	movs	r4, #0
  4039e6:	230c      	movs	r3, #12
  4039e8:	4620      	mov	r0, r4
  4039ea:	602b      	str	r3, [r5, #0]
  4039ec:	b003      	add	sp, #12
  4039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039f2:	2040      	movs	r0, #64	; 0x40
  4039f4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4039f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4039fc:	e74a      	b.n	403894 <_malloc_r+0x44>
  4039fe:	4423      	add	r3, r4
  403a00:	68e1      	ldr	r1, [r4, #12]
  403a02:	685a      	ldr	r2, [r3, #4]
  403a04:	68a6      	ldr	r6, [r4, #8]
  403a06:	f042 0201 	orr.w	r2, r2, #1
  403a0a:	60f1      	str	r1, [r6, #12]
  403a0c:	4628      	mov	r0, r5
  403a0e:	608e      	str	r6, [r1, #8]
  403a10:	605a      	str	r2, [r3, #4]
  403a12:	f000 fa9f 	bl	403f54 <__malloc_unlock>
  403a16:	3408      	adds	r4, #8
  403a18:	4620      	mov	r0, r4
  403a1a:	b003      	add	sp, #12
  403a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a20:	4423      	add	r3, r4
  403a22:	4628      	mov	r0, r5
  403a24:	685a      	ldr	r2, [r3, #4]
  403a26:	f042 0201 	orr.w	r2, r2, #1
  403a2a:	605a      	str	r2, [r3, #4]
  403a2c:	f000 fa92 	bl	403f54 <__malloc_unlock>
  403a30:	3408      	adds	r4, #8
  403a32:	4620      	mov	r0, r4
  403a34:	b003      	add	sp, #12
  403a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a3a:	68bc      	ldr	r4, [r7, #8]
  403a3c:	6863      	ldr	r3, [r4, #4]
  403a3e:	f023 0803 	bic.w	r8, r3, #3
  403a42:	45b0      	cmp	r8, r6
  403a44:	d304      	bcc.n	403a50 <_malloc_r+0x200>
  403a46:	eba8 0306 	sub.w	r3, r8, r6
  403a4a:	2b0f      	cmp	r3, #15
  403a4c:	f300 8085 	bgt.w	403b5a <_malloc_r+0x30a>
  403a50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403bac <_malloc_r+0x35c>
  403a54:	4b50      	ldr	r3, [pc, #320]	; (403b98 <_malloc_r+0x348>)
  403a56:	f8d9 2000 	ldr.w	r2, [r9]
  403a5a:	681b      	ldr	r3, [r3, #0]
  403a5c:	3201      	adds	r2, #1
  403a5e:	4433      	add	r3, r6
  403a60:	eb04 0a08 	add.w	sl, r4, r8
  403a64:	f000 8155 	beq.w	403d12 <_malloc_r+0x4c2>
  403a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403a6c:	330f      	adds	r3, #15
  403a6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403a72:	f02b 0b0f 	bic.w	fp, fp, #15
  403a76:	4659      	mov	r1, fp
  403a78:	4628      	mov	r0, r5
  403a7a:	f000 fc17 	bl	4042ac <_sbrk_r>
  403a7e:	1c41      	adds	r1, r0, #1
  403a80:	4602      	mov	r2, r0
  403a82:	f000 80fc 	beq.w	403c7e <_malloc_r+0x42e>
  403a86:	4582      	cmp	sl, r0
  403a88:	f200 80f7 	bhi.w	403c7a <_malloc_r+0x42a>
  403a8c:	4b43      	ldr	r3, [pc, #268]	; (403b9c <_malloc_r+0x34c>)
  403a8e:	6819      	ldr	r1, [r3, #0]
  403a90:	4459      	add	r1, fp
  403a92:	6019      	str	r1, [r3, #0]
  403a94:	f000 814d 	beq.w	403d32 <_malloc_r+0x4e2>
  403a98:	f8d9 0000 	ldr.w	r0, [r9]
  403a9c:	3001      	adds	r0, #1
  403a9e:	bf1b      	ittet	ne
  403aa0:	eba2 0a0a 	subne.w	sl, r2, sl
  403aa4:	4451      	addne	r1, sl
  403aa6:	f8c9 2000 	streq.w	r2, [r9]
  403aaa:	6019      	strne	r1, [r3, #0]
  403aac:	f012 0107 	ands.w	r1, r2, #7
  403ab0:	f000 8115 	beq.w	403cde <_malloc_r+0x48e>
  403ab4:	f1c1 0008 	rsb	r0, r1, #8
  403ab8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403abc:	4402      	add	r2, r0
  403abe:	3108      	adds	r1, #8
  403ac0:	eb02 090b 	add.w	r9, r2, fp
  403ac4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403ac8:	eba1 0909 	sub.w	r9, r1, r9
  403acc:	4649      	mov	r1, r9
  403ace:	4628      	mov	r0, r5
  403ad0:	9301      	str	r3, [sp, #4]
  403ad2:	9200      	str	r2, [sp, #0]
  403ad4:	f000 fbea 	bl	4042ac <_sbrk_r>
  403ad8:	1c43      	adds	r3, r0, #1
  403ada:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403ade:	f000 8143 	beq.w	403d68 <_malloc_r+0x518>
  403ae2:	1a80      	subs	r0, r0, r2
  403ae4:	4448      	add	r0, r9
  403ae6:	f040 0001 	orr.w	r0, r0, #1
  403aea:	6819      	ldr	r1, [r3, #0]
  403aec:	60ba      	str	r2, [r7, #8]
  403aee:	4449      	add	r1, r9
  403af0:	42bc      	cmp	r4, r7
  403af2:	6050      	str	r0, [r2, #4]
  403af4:	6019      	str	r1, [r3, #0]
  403af6:	d017      	beq.n	403b28 <_malloc_r+0x2d8>
  403af8:	f1b8 0f0f 	cmp.w	r8, #15
  403afc:	f240 80fb 	bls.w	403cf6 <_malloc_r+0x4a6>
  403b00:	6860      	ldr	r0, [r4, #4]
  403b02:	f1a8 020c 	sub.w	r2, r8, #12
  403b06:	f022 0207 	bic.w	r2, r2, #7
  403b0a:	eb04 0e02 	add.w	lr, r4, r2
  403b0e:	f000 0001 	and.w	r0, r0, #1
  403b12:	f04f 0c05 	mov.w	ip, #5
  403b16:	4310      	orrs	r0, r2
  403b18:	2a0f      	cmp	r2, #15
  403b1a:	6060      	str	r0, [r4, #4]
  403b1c:	f8ce c004 	str.w	ip, [lr, #4]
  403b20:	f8ce c008 	str.w	ip, [lr, #8]
  403b24:	f200 8117 	bhi.w	403d56 <_malloc_r+0x506>
  403b28:	4b1d      	ldr	r3, [pc, #116]	; (403ba0 <_malloc_r+0x350>)
  403b2a:	68bc      	ldr	r4, [r7, #8]
  403b2c:	681a      	ldr	r2, [r3, #0]
  403b2e:	4291      	cmp	r1, r2
  403b30:	bf88      	it	hi
  403b32:	6019      	strhi	r1, [r3, #0]
  403b34:	4b1b      	ldr	r3, [pc, #108]	; (403ba4 <_malloc_r+0x354>)
  403b36:	681a      	ldr	r2, [r3, #0]
  403b38:	4291      	cmp	r1, r2
  403b3a:	6862      	ldr	r2, [r4, #4]
  403b3c:	bf88      	it	hi
  403b3e:	6019      	strhi	r1, [r3, #0]
  403b40:	f022 0203 	bic.w	r2, r2, #3
  403b44:	4296      	cmp	r6, r2
  403b46:	eba2 0306 	sub.w	r3, r2, r6
  403b4a:	d801      	bhi.n	403b50 <_malloc_r+0x300>
  403b4c:	2b0f      	cmp	r3, #15
  403b4e:	dc04      	bgt.n	403b5a <_malloc_r+0x30a>
  403b50:	4628      	mov	r0, r5
  403b52:	f000 f9ff 	bl	403f54 <__malloc_unlock>
  403b56:	2400      	movs	r4, #0
  403b58:	e740      	b.n	4039dc <_malloc_r+0x18c>
  403b5a:	19a2      	adds	r2, r4, r6
  403b5c:	f043 0301 	orr.w	r3, r3, #1
  403b60:	f046 0601 	orr.w	r6, r6, #1
  403b64:	6066      	str	r6, [r4, #4]
  403b66:	4628      	mov	r0, r5
  403b68:	60ba      	str	r2, [r7, #8]
  403b6a:	6053      	str	r3, [r2, #4]
  403b6c:	f000 f9f2 	bl	403f54 <__malloc_unlock>
  403b70:	3408      	adds	r4, #8
  403b72:	4620      	mov	r0, r4
  403b74:	b003      	add	sp, #12
  403b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b7a:	2b14      	cmp	r3, #20
  403b7c:	d971      	bls.n	403c62 <_malloc_r+0x412>
  403b7e:	2b54      	cmp	r3, #84	; 0x54
  403b80:	f200 80a3 	bhi.w	403cca <_malloc_r+0x47a>
  403b84:	0b33      	lsrs	r3, r6, #12
  403b86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403b8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403b8e:	00c3      	lsls	r3, r0, #3
  403b90:	e680      	b.n	403894 <_malloc_r+0x44>
  403b92:	bf00      	nop
  403b94:	204005b0 	.word	0x204005b0
  403b98:	20400a88 	.word	0x20400a88
  403b9c:	20400a58 	.word	0x20400a58
  403ba0:	20400a80 	.word	0x20400a80
  403ba4:	20400a84 	.word	0x20400a84
  403ba8:	204005b8 	.word	0x204005b8
  403bac:	204009b8 	.word	0x204009b8
  403bb0:	0a5a      	lsrs	r2, r3, #9
  403bb2:	2a04      	cmp	r2, #4
  403bb4:	d95b      	bls.n	403c6e <_malloc_r+0x41e>
  403bb6:	2a14      	cmp	r2, #20
  403bb8:	f200 80ae 	bhi.w	403d18 <_malloc_r+0x4c8>
  403bbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403bc0:	00c9      	lsls	r1, r1, #3
  403bc2:	325b      	adds	r2, #91	; 0x5b
  403bc4:	eb07 0c01 	add.w	ip, r7, r1
  403bc8:	5879      	ldr	r1, [r7, r1]
  403bca:	f1ac 0c08 	sub.w	ip, ip, #8
  403bce:	458c      	cmp	ip, r1
  403bd0:	f000 8088 	beq.w	403ce4 <_malloc_r+0x494>
  403bd4:	684a      	ldr	r2, [r1, #4]
  403bd6:	f022 0203 	bic.w	r2, r2, #3
  403bda:	4293      	cmp	r3, r2
  403bdc:	d273      	bcs.n	403cc6 <_malloc_r+0x476>
  403bde:	6889      	ldr	r1, [r1, #8]
  403be0:	458c      	cmp	ip, r1
  403be2:	d1f7      	bne.n	403bd4 <_malloc_r+0x384>
  403be4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403be8:	687b      	ldr	r3, [r7, #4]
  403bea:	60e2      	str	r2, [r4, #12]
  403bec:	f8c4 c008 	str.w	ip, [r4, #8]
  403bf0:	6094      	str	r4, [r2, #8]
  403bf2:	f8cc 400c 	str.w	r4, [ip, #12]
  403bf6:	e68f      	b.n	403918 <_malloc_r+0xc8>
  403bf8:	19a1      	adds	r1, r4, r6
  403bfa:	f046 0c01 	orr.w	ip, r6, #1
  403bfe:	f042 0601 	orr.w	r6, r2, #1
  403c02:	f8c4 c004 	str.w	ip, [r4, #4]
  403c06:	4628      	mov	r0, r5
  403c08:	6179      	str	r1, [r7, #20]
  403c0a:	6139      	str	r1, [r7, #16]
  403c0c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403c10:	f8c1 e008 	str.w	lr, [r1, #8]
  403c14:	604e      	str	r6, [r1, #4]
  403c16:	50e2      	str	r2, [r4, r3]
  403c18:	f000 f99c 	bl	403f54 <__malloc_unlock>
  403c1c:	3408      	adds	r4, #8
  403c1e:	e6dd      	b.n	4039dc <_malloc_r+0x18c>
  403c20:	687b      	ldr	r3, [r7, #4]
  403c22:	e679      	b.n	403918 <_malloc_r+0xc8>
  403c24:	f108 0801 	add.w	r8, r8, #1
  403c28:	f018 0f03 	tst.w	r8, #3
  403c2c:	f10c 0c08 	add.w	ip, ip, #8
  403c30:	f47f ae85 	bne.w	40393e <_malloc_r+0xee>
  403c34:	e02d      	b.n	403c92 <_malloc_r+0x442>
  403c36:	68dc      	ldr	r4, [r3, #12]
  403c38:	42a3      	cmp	r3, r4
  403c3a:	bf08      	it	eq
  403c3c:	3002      	addeq	r0, #2
  403c3e:	f43f ae3e 	beq.w	4038be <_malloc_r+0x6e>
  403c42:	e6bb      	b.n	4039bc <_malloc_r+0x16c>
  403c44:	4419      	add	r1, r3
  403c46:	461c      	mov	r4, r3
  403c48:	684a      	ldr	r2, [r1, #4]
  403c4a:	68db      	ldr	r3, [r3, #12]
  403c4c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403c50:	f042 0201 	orr.w	r2, r2, #1
  403c54:	604a      	str	r2, [r1, #4]
  403c56:	4628      	mov	r0, r5
  403c58:	60f3      	str	r3, [r6, #12]
  403c5a:	609e      	str	r6, [r3, #8]
  403c5c:	f000 f97a 	bl	403f54 <__malloc_unlock>
  403c60:	e6bc      	b.n	4039dc <_malloc_r+0x18c>
  403c62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403c66:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403c6a:	00c3      	lsls	r3, r0, #3
  403c6c:	e612      	b.n	403894 <_malloc_r+0x44>
  403c6e:	099a      	lsrs	r2, r3, #6
  403c70:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403c74:	00c9      	lsls	r1, r1, #3
  403c76:	3238      	adds	r2, #56	; 0x38
  403c78:	e7a4      	b.n	403bc4 <_malloc_r+0x374>
  403c7a:	42bc      	cmp	r4, r7
  403c7c:	d054      	beq.n	403d28 <_malloc_r+0x4d8>
  403c7e:	68bc      	ldr	r4, [r7, #8]
  403c80:	6862      	ldr	r2, [r4, #4]
  403c82:	f022 0203 	bic.w	r2, r2, #3
  403c86:	e75d      	b.n	403b44 <_malloc_r+0x2f4>
  403c88:	f859 3908 	ldr.w	r3, [r9], #-8
  403c8c:	4599      	cmp	r9, r3
  403c8e:	f040 8086 	bne.w	403d9e <_malloc_r+0x54e>
  403c92:	f010 0f03 	tst.w	r0, #3
  403c96:	f100 30ff 	add.w	r0, r0, #4294967295
  403c9a:	d1f5      	bne.n	403c88 <_malloc_r+0x438>
  403c9c:	687b      	ldr	r3, [r7, #4]
  403c9e:	ea23 0304 	bic.w	r3, r3, r4
  403ca2:	607b      	str	r3, [r7, #4]
  403ca4:	0064      	lsls	r4, r4, #1
  403ca6:	429c      	cmp	r4, r3
  403ca8:	f63f aec7 	bhi.w	403a3a <_malloc_r+0x1ea>
  403cac:	2c00      	cmp	r4, #0
  403cae:	f43f aec4 	beq.w	403a3a <_malloc_r+0x1ea>
  403cb2:	421c      	tst	r4, r3
  403cb4:	4640      	mov	r0, r8
  403cb6:	f47f ae3e 	bne.w	403936 <_malloc_r+0xe6>
  403cba:	0064      	lsls	r4, r4, #1
  403cbc:	421c      	tst	r4, r3
  403cbe:	f100 0004 	add.w	r0, r0, #4
  403cc2:	d0fa      	beq.n	403cba <_malloc_r+0x46a>
  403cc4:	e637      	b.n	403936 <_malloc_r+0xe6>
  403cc6:	468c      	mov	ip, r1
  403cc8:	e78c      	b.n	403be4 <_malloc_r+0x394>
  403cca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403cce:	d815      	bhi.n	403cfc <_malloc_r+0x4ac>
  403cd0:	0bf3      	lsrs	r3, r6, #15
  403cd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403cd6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403cda:	00c3      	lsls	r3, r0, #3
  403cdc:	e5da      	b.n	403894 <_malloc_r+0x44>
  403cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403ce2:	e6ed      	b.n	403ac0 <_malloc_r+0x270>
  403ce4:	687b      	ldr	r3, [r7, #4]
  403ce6:	1092      	asrs	r2, r2, #2
  403ce8:	2101      	movs	r1, #1
  403cea:	fa01 f202 	lsl.w	r2, r1, r2
  403cee:	4313      	orrs	r3, r2
  403cf0:	607b      	str	r3, [r7, #4]
  403cf2:	4662      	mov	r2, ip
  403cf4:	e779      	b.n	403bea <_malloc_r+0x39a>
  403cf6:	2301      	movs	r3, #1
  403cf8:	6053      	str	r3, [r2, #4]
  403cfa:	e729      	b.n	403b50 <_malloc_r+0x300>
  403cfc:	f240 5254 	movw	r2, #1364	; 0x554
  403d00:	4293      	cmp	r3, r2
  403d02:	d822      	bhi.n	403d4a <_malloc_r+0x4fa>
  403d04:	0cb3      	lsrs	r3, r6, #18
  403d06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403d0a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403d0e:	00c3      	lsls	r3, r0, #3
  403d10:	e5c0      	b.n	403894 <_malloc_r+0x44>
  403d12:	f103 0b10 	add.w	fp, r3, #16
  403d16:	e6ae      	b.n	403a76 <_malloc_r+0x226>
  403d18:	2a54      	cmp	r2, #84	; 0x54
  403d1a:	d829      	bhi.n	403d70 <_malloc_r+0x520>
  403d1c:	0b1a      	lsrs	r2, r3, #12
  403d1e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403d22:	00c9      	lsls	r1, r1, #3
  403d24:	326e      	adds	r2, #110	; 0x6e
  403d26:	e74d      	b.n	403bc4 <_malloc_r+0x374>
  403d28:	4b20      	ldr	r3, [pc, #128]	; (403dac <_malloc_r+0x55c>)
  403d2a:	6819      	ldr	r1, [r3, #0]
  403d2c:	4459      	add	r1, fp
  403d2e:	6019      	str	r1, [r3, #0]
  403d30:	e6b2      	b.n	403a98 <_malloc_r+0x248>
  403d32:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403d36:	2800      	cmp	r0, #0
  403d38:	f47f aeae 	bne.w	403a98 <_malloc_r+0x248>
  403d3c:	eb08 030b 	add.w	r3, r8, fp
  403d40:	68ba      	ldr	r2, [r7, #8]
  403d42:	f043 0301 	orr.w	r3, r3, #1
  403d46:	6053      	str	r3, [r2, #4]
  403d48:	e6ee      	b.n	403b28 <_malloc_r+0x2d8>
  403d4a:	207f      	movs	r0, #127	; 0x7f
  403d4c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403d50:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403d54:	e59e      	b.n	403894 <_malloc_r+0x44>
  403d56:	f104 0108 	add.w	r1, r4, #8
  403d5a:	4628      	mov	r0, r5
  403d5c:	9300      	str	r3, [sp, #0]
  403d5e:	f7ff fa59 	bl	403214 <_free_r>
  403d62:	9b00      	ldr	r3, [sp, #0]
  403d64:	6819      	ldr	r1, [r3, #0]
  403d66:	e6df      	b.n	403b28 <_malloc_r+0x2d8>
  403d68:	2001      	movs	r0, #1
  403d6a:	f04f 0900 	mov.w	r9, #0
  403d6e:	e6bc      	b.n	403aea <_malloc_r+0x29a>
  403d70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403d74:	d805      	bhi.n	403d82 <_malloc_r+0x532>
  403d76:	0bda      	lsrs	r2, r3, #15
  403d78:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403d7c:	00c9      	lsls	r1, r1, #3
  403d7e:	3277      	adds	r2, #119	; 0x77
  403d80:	e720      	b.n	403bc4 <_malloc_r+0x374>
  403d82:	f240 5154 	movw	r1, #1364	; 0x554
  403d86:	428a      	cmp	r2, r1
  403d88:	d805      	bhi.n	403d96 <_malloc_r+0x546>
  403d8a:	0c9a      	lsrs	r2, r3, #18
  403d8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403d90:	00c9      	lsls	r1, r1, #3
  403d92:	327c      	adds	r2, #124	; 0x7c
  403d94:	e716      	b.n	403bc4 <_malloc_r+0x374>
  403d96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403d9a:	227e      	movs	r2, #126	; 0x7e
  403d9c:	e712      	b.n	403bc4 <_malloc_r+0x374>
  403d9e:	687b      	ldr	r3, [r7, #4]
  403da0:	e780      	b.n	403ca4 <_malloc_r+0x454>
  403da2:	08f0      	lsrs	r0, r6, #3
  403da4:	f106 0308 	add.w	r3, r6, #8
  403da8:	e600      	b.n	4039ac <_malloc_r+0x15c>
  403daa:	bf00      	nop
  403dac:	20400a58 	.word	0x20400a58

00403db0 <__ascii_mbtowc>:
  403db0:	b082      	sub	sp, #8
  403db2:	b149      	cbz	r1, 403dc8 <__ascii_mbtowc+0x18>
  403db4:	b15a      	cbz	r2, 403dce <__ascii_mbtowc+0x1e>
  403db6:	b16b      	cbz	r3, 403dd4 <__ascii_mbtowc+0x24>
  403db8:	7813      	ldrb	r3, [r2, #0]
  403dba:	600b      	str	r3, [r1, #0]
  403dbc:	7812      	ldrb	r2, [r2, #0]
  403dbe:	1c10      	adds	r0, r2, #0
  403dc0:	bf18      	it	ne
  403dc2:	2001      	movne	r0, #1
  403dc4:	b002      	add	sp, #8
  403dc6:	4770      	bx	lr
  403dc8:	a901      	add	r1, sp, #4
  403dca:	2a00      	cmp	r2, #0
  403dcc:	d1f3      	bne.n	403db6 <__ascii_mbtowc+0x6>
  403dce:	4610      	mov	r0, r2
  403dd0:	b002      	add	sp, #8
  403dd2:	4770      	bx	lr
  403dd4:	f06f 0001 	mvn.w	r0, #1
  403dd8:	e7f4      	b.n	403dc4 <__ascii_mbtowc+0x14>
  403dda:	bf00      	nop
  403ddc:	0000      	movs	r0, r0
	...

00403de0 <memchr>:
  403de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403de4:	2a10      	cmp	r2, #16
  403de6:	db2b      	blt.n	403e40 <memchr+0x60>
  403de8:	f010 0f07 	tst.w	r0, #7
  403dec:	d008      	beq.n	403e00 <memchr+0x20>
  403dee:	f810 3b01 	ldrb.w	r3, [r0], #1
  403df2:	3a01      	subs	r2, #1
  403df4:	428b      	cmp	r3, r1
  403df6:	d02d      	beq.n	403e54 <memchr+0x74>
  403df8:	f010 0f07 	tst.w	r0, #7
  403dfc:	b342      	cbz	r2, 403e50 <memchr+0x70>
  403dfe:	d1f6      	bne.n	403dee <memchr+0xe>
  403e00:	b4f0      	push	{r4, r5, r6, r7}
  403e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403e0a:	f022 0407 	bic.w	r4, r2, #7
  403e0e:	f07f 0700 	mvns.w	r7, #0
  403e12:	2300      	movs	r3, #0
  403e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403e18:	3c08      	subs	r4, #8
  403e1a:	ea85 0501 	eor.w	r5, r5, r1
  403e1e:	ea86 0601 	eor.w	r6, r6, r1
  403e22:	fa85 f547 	uadd8	r5, r5, r7
  403e26:	faa3 f587 	sel	r5, r3, r7
  403e2a:	fa86 f647 	uadd8	r6, r6, r7
  403e2e:	faa5 f687 	sel	r6, r5, r7
  403e32:	b98e      	cbnz	r6, 403e58 <memchr+0x78>
  403e34:	d1ee      	bne.n	403e14 <memchr+0x34>
  403e36:	bcf0      	pop	{r4, r5, r6, r7}
  403e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403e3c:	f002 0207 	and.w	r2, r2, #7
  403e40:	b132      	cbz	r2, 403e50 <memchr+0x70>
  403e42:	f810 3b01 	ldrb.w	r3, [r0], #1
  403e46:	3a01      	subs	r2, #1
  403e48:	ea83 0301 	eor.w	r3, r3, r1
  403e4c:	b113      	cbz	r3, 403e54 <memchr+0x74>
  403e4e:	d1f8      	bne.n	403e42 <memchr+0x62>
  403e50:	2000      	movs	r0, #0
  403e52:	4770      	bx	lr
  403e54:	3801      	subs	r0, #1
  403e56:	4770      	bx	lr
  403e58:	2d00      	cmp	r5, #0
  403e5a:	bf06      	itte	eq
  403e5c:	4635      	moveq	r5, r6
  403e5e:	3803      	subeq	r0, #3
  403e60:	3807      	subne	r0, #7
  403e62:	f015 0f01 	tst.w	r5, #1
  403e66:	d107      	bne.n	403e78 <memchr+0x98>
  403e68:	3001      	adds	r0, #1
  403e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403e6e:	bf02      	ittt	eq
  403e70:	3001      	addeq	r0, #1
  403e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403e76:	3001      	addeq	r0, #1
  403e78:	bcf0      	pop	{r4, r5, r6, r7}
  403e7a:	3801      	subs	r0, #1
  403e7c:	4770      	bx	lr
  403e7e:	bf00      	nop

00403e80 <memmove>:
  403e80:	4288      	cmp	r0, r1
  403e82:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e84:	d90d      	bls.n	403ea2 <memmove+0x22>
  403e86:	188b      	adds	r3, r1, r2
  403e88:	4298      	cmp	r0, r3
  403e8a:	d20a      	bcs.n	403ea2 <memmove+0x22>
  403e8c:	1884      	adds	r4, r0, r2
  403e8e:	2a00      	cmp	r2, #0
  403e90:	d051      	beq.n	403f36 <memmove+0xb6>
  403e92:	4622      	mov	r2, r4
  403e94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403e98:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403e9c:	4299      	cmp	r1, r3
  403e9e:	d1f9      	bne.n	403e94 <memmove+0x14>
  403ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ea2:	2a0f      	cmp	r2, #15
  403ea4:	d948      	bls.n	403f38 <memmove+0xb8>
  403ea6:	ea41 0300 	orr.w	r3, r1, r0
  403eaa:	079b      	lsls	r3, r3, #30
  403eac:	d146      	bne.n	403f3c <memmove+0xbc>
  403eae:	f100 0410 	add.w	r4, r0, #16
  403eb2:	f101 0310 	add.w	r3, r1, #16
  403eb6:	4615      	mov	r5, r2
  403eb8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403ebc:	f844 6c10 	str.w	r6, [r4, #-16]
  403ec0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403ec4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403ec8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403ecc:	f844 6c08 	str.w	r6, [r4, #-8]
  403ed0:	3d10      	subs	r5, #16
  403ed2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403ed6:	f844 6c04 	str.w	r6, [r4, #-4]
  403eda:	2d0f      	cmp	r5, #15
  403edc:	f103 0310 	add.w	r3, r3, #16
  403ee0:	f104 0410 	add.w	r4, r4, #16
  403ee4:	d8e8      	bhi.n	403eb8 <memmove+0x38>
  403ee6:	f1a2 0310 	sub.w	r3, r2, #16
  403eea:	f023 030f 	bic.w	r3, r3, #15
  403eee:	f002 0e0f 	and.w	lr, r2, #15
  403ef2:	3310      	adds	r3, #16
  403ef4:	f1be 0f03 	cmp.w	lr, #3
  403ef8:	4419      	add	r1, r3
  403efa:	4403      	add	r3, r0
  403efc:	d921      	bls.n	403f42 <memmove+0xc2>
  403efe:	1f1e      	subs	r6, r3, #4
  403f00:	460d      	mov	r5, r1
  403f02:	4674      	mov	r4, lr
  403f04:	3c04      	subs	r4, #4
  403f06:	f855 7b04 	ldr.w	r7, [r5], #4
  403f0a:	f846 7f04 	str.w	r7, [r6, #4]!
  403f0e:	2c03      	cmp	r4, #3
  403f10:	d8f8      	bhi.n	403f04 <memmove+0x84>
  403f12:	f1ae 0404 	sub.w	r4, lr, #4
  403f16:	f024 0403 	bic.w	r4, r4, #3
  403f1a:	3404      	adds	r4, #4
  403f1c:	4421      	add	r1, r4
  403f1e:	4423      	add	r3, r4
  403f20:	f002 0203 	and.w	r2, r2, #3
  403f24:	b162      	cbz	r2, 403f40 <memmove+0xc0>
  403f26:	3b01      	subs	r3, #1
  403f28:	440a      	add	r2, r1
  403f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403f32:	428a      	cmp	r2, r1
  403f34:	d1f9      	bne.n	403f2a <memmove+0xaa>
  403f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f38:	4603      	mov	r3, r0
  403f3a:	e7f3      	b.n	403f24 <memmove+0xa4>
  403f3c:	4603      	mov	r3, r0
  403f3e:	e7f2      	b.n	403f26 <memmove+0xa6>
  403f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f42:	4672      	mov	r2, lr
  403f44:	e7ee      	b.n	403f24 <memmove+0xa4>
  403f46:	bf00      	nop

00403f48 <__malloc_lock>:
  403f48:	4801      	ldr	r0, [pc, #4]	; (403f50 <__malloc_lock+0x8>)
  403f4a:	f7ff bbfd 	b.w	403748 <__retarget_lock_acquire_recursive>
  403f4e:	bf00      	nop
  403f50:	20400ad0 	.word	0x20400ad0

00403f54 <__malloc_unlock>:
  403f54:	4801      	ldr	r0, [pc, #4]	; (403f5c <__malloc_unlock+0x8>)
  403f56:	f7ff bbf9 	b.w	40374c <__retarget_lock_release_recursive>
  403f5a:	bf00      	nop
  403f5c:	20400ad0 	.word	0x20400ad0

00403f60 <_realloc_r>:
  403f60:	2900      	cmp	r1, #0
  403f62:	f000 8095 	beq.w	404090 <_realloc_r+0x130>
  403f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f6a:	460d      	mov	r5, r1
  403f6c:	4616      	mov	r6, r2
  403f6e:	b083      	sub	sp, #12
  403f70:	4680      	mov	r8, r0
  403f72:	f106 070b 	add.w	r7, r6, #11
  403f76:	f7ff ffe7 	bl	403f48 <__malloc_lock>
  403f7a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403f7e:	2f16      	cmp	r7, #22
  403f80:	f02e 0403 	bic.w	r4, lr, #3
  403f84:	f1a5 0908 	sub.w	r9, r5, #8
  403f88:	d83c      	bhi.n	404004 <_realloc_r+0xa4>
  403f8a:	2210      	movs	r2, #16
  403f8c:	4617      	mov	r7, r2
  403f8e:	42be      	cmp	r6, r7
  403f90:	d83d      	bhi.n	40400e <_realloc_r+0xae>
  403f92:	4294      	cmp	r4, r2
  403f94:	da43      	bge.n	40401e <_realloc_r+0xbe>
  403f96:	4bc4      	ldr	r3, [pc, #784]	; (4042a8 <_realloc_r+0x348>)
  403f98:	6899      	ldr	r1, [r3, #8]
  403f9a:	eb09 0004 	add.w	r0, r9, r4
  403f9e:	4288      	cmp	r0, r1
  403fa0:	f000 80b4 	beq.w	40410c <_realloc_r+0x1ac>
  403fa4:	6843      	ldr	r3, [r0, #4]
  403fa6:	f023 0101 	bic.w	r1, r3, #1
  403faa:	4401      	add	r1, r0
  403fac:	6849      	ldr	r1, [r1, #4]
  403fae:	07c9      	lsls	r1, r1, #31
  403fb0:	d54c      	bpl.n	40404c <_realloc_r+0xec>
  403fb2:	f01e 0f01 	tst.w	lr, #1
  403fb6:	f000 809b 	beq.w	4040f0 <_realloc_r+0x190>
  403fba:	4631      	mov	r1, r6
  403fbc:	4640      	mov	r0, r8
  403fbe:	f7ff fc47 	bl	403850 <_malloc_r>
  403fc2:	4606      	mov	r6, r0
  403fc4:	2800      	cmp	r0, #0
  403fc6:	d03a      	beq.n	40403e <_realloc_r+0xde>
  403fc8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403fcc:	f023 0301 	bic.w	r3, r3, #1
  403fd0:	444b      	add	r3, r9
  403fd2:	f1a0 0208 	sub.w	r2, r0, #8
  403fd6:	429a      	cmp	r2, r3
  403fd8:	f000 8121 	beq.w	40421e <_realloc_r+0x2be>
  403fdc:	1f22      	subs	r2, r4, #4
  403fde:	2a24      	cmp	r2, #36	; 0x24
  403fe0:	f200 8107 	bhi.w	4041f2 <_realloc_r+0x292>
  403fe4:	2a13      	cmp	r2, #19
  403fe6:	f200 80db 	bhi.w	4041a0 <_realloc_r+0x240>
  403fea:	4603      	mov	r3, r0
  403fec:	462a      	mov	r2, r5
  403fee:	6811      	ldr	r1, [r2, #0]
  403ff0:	6019      	str	r1, [r3, #0]
  403ff2:	6851      	ldr	r1, [r2, #4]
  403ff4:	6059      	str	r1, [r3, #4]
  403ff6:	6892      	ldr	r2, [r2, #8]
  403ff8:	609a      	str	r2, [r3, #8]
  403ffa:	4629      	mov	r1, r5
  403ffc:	4640      	mov	r0, r8
  403ffe:	f7ff f909 	bl	403214 <_free_r>
  404002:	e01c      	b.n	40403e <_realloc_r+0xde>
  404004:	f027 0707 	bic.w	r7, r7, #7
  404008:	2f00      	cmp	r7, #0
  40400a:	463a      	mov	r2, r7
  40400c:	dabf      	bge.n	403f8e <_realloc_r+0x2e>
  40400e:	2600      	movs	r6, #0
  404010:	230c      	movs	r3, #12
  404012:	4630      	mov	r0, r6
  404014:	f8c8 3000 	str.w	r3, [r8]
  404018:	b003      	add	sp, #12
  40401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40401e:	462e      	mov	r6, r5
  404020:	1be3      	subs	r3, r4, r7
  404022:	2b0f      	cmp	r3, #15
  404024:	d81e      	bhi.n	404064 <_realloc_r+0x104>
  404026:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40402a:	f003 0301 	and.w	r3, r3, #1
  40402e:	4323      	orrs	r3, r4
  404030:	444c      	add	r4, r9
  404032:	f8c9 3004 	str.w	r3, [r9, #4]
  404036:	6863      	ldr	r3, [r4, #4]
  404038:	f043 0301 	orr.w	r3, r3, #1
  40403c:	6063      	str	r3, [r4, #4]
  40403e:	4640      	mov	r0, r8
  404040:	f7ff ff88 	bl	403f54 <__malloc_unlock>
  404044:	4630      	mov	r0, r6
  404046:	b003      	add	sp, #12
  404048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40404c:	f023 0303 	bic.w	r3, r3, #3
  404050:	18e1      	adds	r1, r4, r3
  404052:	4291      	cmp	r1, r2
  404054:	db1f      	blt.n	404096 <_realloc_r+0x136>
  404056:	68c3      	ldr	r3, [r0, #12]
  404058:	6882      	ldr	r2, [r0, #8]
  40405a:	462e      	mov	r6, r5
  40405c:	60d3      	str	r3, [r2, #12]
  40405e:	460c      	mov	r4, r1
  404060:	609a      	str	r2, [r3, #8]
  404062:	e7dd      	b.n	404020 <_realloc_r+0xc0>
  404064:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404068:	eb09 0107 	add.w	r1, r9, r7
  40406c:	f002 0201 	and.w	r2, r2, #1
  404070:	444c      	add	r4, r9
  404072:	f043 0301 	orr.w	r3, r3, #1
  404076:	4317      	orrs	r7, r2
  404078:	f8c9 7004 	str.w	r7, [r9, #4]
  40407c:	604b      	str	r3, [r1, #4]
  40407e:	6863      	ldr	r3, [r4, #4]
  404080:	f043 0301 	orr.w	r3, r3, #1
  404084:	3108      	adds	r1, #8
  404086:	6063      	str	r3, [r4, #4]
  404088:	4640      	mov	r0, r8
  40408a:	f7ff f8c3 	bl	403214 <_free_r>
  40408e:	e7d6      	b.n	40403e <_realloc_r+0xde>
  404090:	4611      	mov	r1, r2
  404092:	f7ff bbdd 	b.w	403850 <_malloc_r>
  404096:	f01e 0f01 	tst.w	lr, #1
  40409a:	d18e      	bne.n	403fba <_realloc_r+0x5a>
  40409c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4040a0:	eba9 0a01 	sub.w	sl, r9, r1
  4040a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4040a8:	f021 0103 	bic.w	r1, r1, #3
  4040ac:	440b      	add	r3, r1
  4040ae:	4423      	add	r3, r4
  4040b0:	4293      	cmp	r3, r2
  4040b2:	db25      	blt.n	404100 <_realloc_r+0x1a0>
  4040b4:	68c2      	ldr	r2, [r0, #12]
  4040b6:	6881      	ldr	r1, [r0, #8]
  4040b8:	4656      	mov	r6, sl
  4040ba:	60ca      	str	r2, [r1, #12]
  4040bc:	6091      	str	r1, [r2, #8]
  4040be:	f8da 100c 	ldr.w	r1, [sl, #12]
  4040c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4040c6:	1f22      	subs	r2, r4, #4
  4040c8:	2a24      	cmp	r2, #36	; 0x24
  4040ca:	60c1      	str	r1, [r0, #12]
  4040cc:	6088      	str	r0, [r1, #8]
  4040ce:	f200 8094 	bhi.w	4041fa <_realloc_r+0x29a>
  4040d2:	2a13      	cmp	r2, #19
  4040d4:	d96f      	bls.n	4041b6 <_realloc_r+0x256>
  4040d6:	6829      	ldr	r1, [r5, #0]
  4040d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4040dc:	6869      	ldr	r1, [r5, #4]
  4040de:	f8ca 100c 	str.w	r1, [sl, #12]
  4040e2:	2a1b      	cmp	r2, #27
  4040e4:	f200 80a2 	bhi.w	40422c <_realloc_r+0x2cc>
  4040e8:	3508      	adds	r5, #8
  4040ea:	f10a 0210 	add.w	r2, sl, #16
  4040ee:	e063      	b.n	4041b8 <_realloc_r+0x258>
  4040f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4040f4:	eba9 0a03 	sub.w	sl, r9, r3
  4040f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4040fc:	f021 0103 	bic.w	r1, r1, #3
  404100:	1863      	adds	r3, r4, r1
  404102:	4293      	cmp	r3, r2
  404104:	f6ff af59 	blt.w	403fba <_realloc_r+0x5a>
  404108:	4656      	mov	r6, sl
  40410a:	e7d8      	b.n	4040be <_realloc_r+0x15e>
  40410c:	6841      	ldr	r1, [r0, #4]
  40410e:	f021 0b03 	bic.w	fp, r1, #3
  404112:	44a3      	add	fp, r4
  404114:	f107 0010 	add.w	r0, r7, #16
  404118:	4583      	cmp	fp, r0
  40411a:	da56      	bge.n	4041ca <_realloc_r+0x26a>
  40411c:	f01e 0f01 	tst.w	lr, #1
  404120:	f47f af4b 	bne.w	403fba <_realloc_r+0x5a>
  404124:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404128:	eba9 0a01 	sub.w	sl, r9, r1
  40412c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404130:	f021 0103 	bic.w	r1, r1, #3
  404134:	448b      	add	fp, r1
  404136:	4558      	cmp	r0, fp
  404138:	dce2      	bgt.n	404100 <_realloc_r+0x1a0>
  40413a:	4656      	mov	r6, sl
  40413c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404140:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404144:	1f22      	subs	r2, r4, #4
  404146:	2a24      	cmp	r2, #36	; 0x24
  404148:	60c1      	str	r1, [r0, #12]
  40414a:	6088      	str	r0, [r1, #8]
  40414c:	f200 808f 	bhi.w	40426e <_realloc_r+0x30e>
  404150:	2a13      	cmp	r2, #19
  404152:	f240 808a 	bls.w	40426a <_realloc_r+0x30a>
  404156:	6829      	ldr	r1, [r5, #0]
  404158:	f8ca 1008 	str.w	r1, [sl, #8]
  40415c:	6869      	ldr	r1, [r5, #4]
  40415e:	f8ca 100c 	str.w	r1, [sl, #12]
  404162:	2a1b      	cmp	r2, #27
  404164:	f200 808a 	bhi.w	40427c <_realloc_r+0x31c>
  404168:	3508      	adds	r5, #8
  40416a:	f10a 0210 	add.w	r2, sl, #16
  40416e:	6829      	ldr	r1, [r5, #0]
  404170:	6011      	str	r1, [r2, #0]
  404172:	6869      	ldr	r1, [r5, #4]
  404174:	6051      	str	r1, [r2, #4]
  404176:	68a9      	ldr	r1, [r5, #8]
  404178:	6091      	str	r1, [r2, #8]
  40417a:	eb0a 0107 	add.w	r1, sl, r7
  40417e:	ebab 0207 	sub.w	r2, fp, r7
  404182:	f042 0201 	orr.w	r2, r2, #1
  404186:	6099      	str	r1, [r3, #8]
  404188:	604a      	str	r2, [r1, #4]
  40418a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40418e:	f003 0301 	and.w	r3, r3, #1
  404192:	431f      	orrs	r7, r3
  404194:	4640      	mov	r0, r8
  404196:	f8ca 7004 	str.w	r7, [sl, #4]
  40419a:	f7ff fedb 	bl	403f54 <__malloc_unlock>
  40419e:	e751      	b.n	404044 <_realloc_r+0xe4>
  4041a0:	682b      	ldr	r3, [r5, #0]
  4041a2:	6003      	str	r3, [r0, #0]
  4041a4:	686b      	ldr	r3, [r5, #4]
  4041a6:	6043      	str	r3, [r0, #4]
  4041a8:	2a1b      	cmp	r2, #27
  4041aa:	d82d      	bhi.n	404208 <_realloc_r+0x2a8>
  4041ac:	f100 0308 	add.w	r3, r0, #8
  4041b0:	f105 0208 	add.w	r2, r5, #8
  4041b4:	e71b      	b.n	403fee <_realloc_r+0x8e>
  4041b6:	4632      	mov	r2, r6
  4041b8:	6829      	ldr	r1, [r5, #0]
  4041ba:	6011      	str	r1, [r2, #0]
  4041bc:	6869      	ldr	r1, [r5, #4]
  4041be:	6051      	str	r1, [r2, #4]
  4041c0:	68a9      	ldr	r1, [r5, #8]
  4041c2:	6091      	str	r1, [r2, #8]
  4041c4:	461c      	mov	r4, r3
  4041c6:	46d1      	mov	r9, sl
  4041c8:	e72a      	b.n	404020 <_realloc_r+0xc0>
  4041ca:	eb09 0107 	add.w	r1, r9, r7
  4041ce:	ebab 0b07 	sub.w	fp, fp, r7
  4041d2:	f04b 0201 	orr.w	r2, fp, #1
  4041d6:	6099      	str	r1, [r3, #8]
  4041d8:	604a      	str	r2, [r1, #4]
  4041da:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4041de:	f003 0301 	and.w	r3, r3, #1
  4041e2:	431f      	orrs	r7, r3
  4041e4:	4640      	mov	r0, r8
  4041e6:	f845 7c04 	str.w	r7, [r5, #-4]
  4041ea:	f7ff feb3 	bl	403f54 <__malloc_unlock>
  4041ee:	462e      	mov	r6, r5
  4041f0:	e728      	b.n	404044 <_realloc_r+0xe4>
  4041f2:	4629      	mov	r1, r5
  4041f4:	f7ff fe44 	bl	403e80 <memmove>
  4041f8:	e6ff      	b.n	403ffa <_realloc_r+0x9a>
  4041fa:	4629      	mov	r1, r5
  4041fc:	4630      	mov	r0, r6
  4041fe:	461c      	mov	r4, r3
  404200:	46d1      	mov	r9, sl
  404202:	f7ff fe3d 	bl	403e80 <memmove>
  404206:	e70b      	b.n	404020 <_realloc_r+0xc0>
  404208:	68ab      	ldr	r3, [r5, #8]
  40420a:	6083      	str	r3, [r0, #8]
  40420c:	68eb      	ldr	r3, [r5, #12]
  40420e:	60c3      	str	r3, [r0, #12]
  404210:	2a24      	cmp	r2, #36	; 0x24
  404212:	d017      	beq.n	404244 <_realloc_r+0x2e4>
  404214:	f100 0310 	add.w	r3, r0, #16
  404218:	f105 0210 	add.w	r2, r5, #16
  40421c:	e6e7      	b.n	403fee <_realloc_r+0x8e>
  40421e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404222:	f023 0303 	bic.w	r3, r3, #3
  404226:	441c      	add	r4, r3
  404228:	462e      	mov	r6, r5
  40422a:	e6f9      	b.n	404020 <_realloc_r+0xc0>
  40422c:	68a9      	ldr	r1, [r5, #8]
  40422e:	f8ca 1010 	str.w	r1, [sl, #16]
  404232:	68e9      	ldr	r1, [r5, #12]
  404234:	f8ca 1014 	str.w	r1, [sl, #20]
  404238:	2a24      	cmp	r2, #36	; 0x24
  40423a:	d00c      	beq.n	404256 <_realloc_r+0x2f6>
  40423c:	3510      	adds	r5, #16
  40423e:	f10a 0218 	add.w	r2, sl, #24
  404242:	e7b9      	b.n	4041b8 <_realloc_r+0x258>
  404244:	692b      	ldr	r3, [r5, #16]
  404246:	6103      	str	r3, [r0, #16]
  404248:	696b      	ldr	r3, [r5, #20]
  40424a:	6143      	str	r3, [r0, #20]
  40424c:	f105 0218 	add.w	r2, r5, #24
  404250:	f100 0318 	add.w	r3, r0, #24
  404254:	e6cb      	b.n	403fee <_realloc_r+0x8e>
  404256:	692a      	ldr	r2, [r5, #16]
  404258:	f8ca 2018 	str.w	r2, [sl, #24]
  40425c:	696a      	ldr	r2, [r5, #20]
  40425e:	f8ca 201c 	str.w	r2, [sl, #28]
  404262:	3518      	adds	r5, #24
  404264:	f10a 0220 	add.w	r2, sl, #32
  404268:	e7a6      	b.n	4041b8 <_realloc_r+0x258>
  40426a:	4632      	mov	r2, r6
  40426c:	e77f      	b.n	40416e <_realloc_r+0x20e>
  40426e:	4629      	mov	r1, r5
  404270:	4630      	mov	r0, r6
  404272:	9301      	str	r3, [sp, #4]
  404274:	f7ff fe04 	bl	403e80 <memmove>
  404278:	9b01      	ldr	r3, [sp, #4]
  40427a:	e77e      	b.n	40417a <_realloc_r+0x21a>
  40427c:	68a9      	ldr	r1, [r5, #8]
  40427e:	f8ca 1010 	str.w	r1, [sl, #16]
  404282:	68e9      	ldr	r1, [r5, #12]
  404284:	f8ca 1014 	str.w	r1, [sl, #20]
  404288:	2a24      	cmp	r2, #36	; 0x24
  40428a:	d003      	beq.n	404294 <_realloc_r+0x334>
  40428c:	3510      	adds	r5, #16
  40428e:	f10a 0218 	add.w	r2, sl, #24
  404292:	e76c      	b.n	40416e <_realloc_r+0x20e>
  404294:	692a      	ldr	r2, [r5, #16]
  404296:	f8ca 2018 	str.w	r2, [sl, #24]
  40429a:	696a      	ldr	r2, [r5, #20]
  40429c:	f8ca 201c 	str.w	r2, [sl, #28]
  4042a0:	3518      	adds	r5, #24
  4042a2:	f10a 0220 	add.w	r2, sl, #32
  4042a6:	e762      	b.n	40416e <_realloc_r+0x20e>
  4042a8:	204005b0 	.word	0x204005b0

004042ac <_sbrk_r>:
  4042ac:	b538      	push	{r3, r4, r5, lr}
  4042ae:	4c07      	ldr	r4, [pc, #28]	; (4042cc <_sbrk_r+0x20>)
  4042b0:	2300      	movs	r3, #0
  4042b2:	4605      	mov	r5, r0
  4042b4:	4608      	mov	r0, r1
  4042b6:	6023      	str	r3, [r4, #0]
  4042b8:	f7fc fc84 	bl	400bc4 <_sbrk>
  4042bc:	1c43      	adds	r3, r0, #1
  4042be:	d000      	beq.n	4042c2 <_sbrk_r+0x16>
  4042c0:	bd38      	pop	{r3, r4, r5, pc}
  4042c2:	6823      	ldr	r3, [r4, #0]
  4042c4:	2b00      	cmp	r3, #0
  4042c6:	d0fb      	beq.n	4042c0 <_sbrk_r+0x14>
  4042c8:	602b      	str	r3, [r5, #0]
  4042ca:	bd38      	pop	{r3, r4, r5, pc}
  4042cc:	20400ae4 	.word	0x20400ae4

004042d0 <__sread>:
  4042d0:	b510      	push	{r4, lr}
  4042d2:	460c      	mov	r4, r1
  4042d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042d8:	f000 f9f6 	bl	4046c8 <_read_r>
  4042dc:	2800      	cmp	r0, #0
  4042de:	db03      	blt.n	4042e8 <__sread+0x18>
  4042e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4042e2:	4403      	add	r3, r0
  4042e4:	6523      	str	r3, [r4, #80]	; 0x50
  4042e6:	bd10      	pop	{r4, pc}
  4042e8:	89a3      	ldrh	r3, [r4, #12]
  4042ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4042ee:	81a3      	strh	r3, [r4, #12]
  4042f0:	bd10      	pop	{r4, pc}
  4042f2:	bf00      	nop

004042f4 <__swrite>:
  4042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042f8:	4616      	mov	r6, r2
  4042fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4042fe:	461f      	mov	r7, r3
  404300:	05d3      	lsls	r3, r2, #23
  404302:	460c      	mov	r4, r1
  404304:	4605      	mov	r5, r0
  404306:	d507      	bpl.n	404318 <__swrite+0x24>
  404308:	2200      	movs	r2, #0
  40430a:	2302      	movs	r3, #2
  40430c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404310:	f000 f9c4 	bl	40469c <_lseek_r>
  404314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40431c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404320:	81a2      	strh	r2, [r4, #12]
  404322:	463b      	mov	r3, r7
  404324:	4632      	mov	r2, r6
  404326:	4628      	mov	r0, r5
  404328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40432c:	f000 b8a4 	b.w	404478 <_write_r>

00404330 <__sseek>:
  404330:	b510      	push	{r4, lr}
  404332:	460c      	mov	r4, r1
  404334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404338:	f000 f9b0 	bl	40469c <_lseek_r>
  40433c:	89a3      	ldrh	r3, [r4, #12]
  40433e:	1c42      	adds	r2, r0, #1
  404340:	bf0e      	itee	eq
  404342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40434a:	6520      	strne	r0, [r4, #80]	; 0x50
  40434c:	81a3      	strh	r3, [r4, #12]
  40434e:	bd10      	pop	{r4, pc}

00404350 <__sclose>:
  404350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404354:	f000 b908 	b.w	404568 <_close_r>

00404358 <__swbuf_r>:
  404358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40435a:	460d      	mov	r5, r1
  40435c:	4614      	mov	r4, r2
  40435e:	4606      	mov	r6, r0
  404360:	b110      	cbz	r0, 404368 <__swbuf_r+0x10>
  404362:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404364:	2b00      	cmp	r3, #0
  404366:	d04b      	beq.n	404400 <__swbuf_r+0xa8>
  404368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40436c:	69a3      	ldr	r3, [r4, #24]
  40436e:	60a3      	str	r3, [r4, #8]
  404370:	b291      	uxth	r1, r2
  404372:	0708      	lsls	r0, r1, #28
  404374:	d539      	bpl.n	4043ea <__swbuf_r+0x92>
  404376:	6923      	ldr	r3, [r4, #16]
  404378:	2b00      	cmp	r3, #0
  40437a:	d036      	beq.n	4043ea <__swbuf_r+0x92>
  40437c:	b2ed      	uxtb	r5, r5
  40437e:	0489      	lsls	r1, r1, #18
  404380:	462f      	mov	r7, r5
  404382:	d515      	bpl.n	4043b0 <__swbuf_r+0x58>
  404384:	6822      	ldr	r2, [r4, #0]
  404386:	6961      	ldr	r1, [r4, #20]
  404388:	1ad3      	subs	r3, r2, r3
  40438a:	428b      	cmp	r3, r1
  40438c:	da1c      	bge.n	4043c8 <__swbuf_r+0x70>
  40438e:	3301      	adds	r3, #1
  404390:	68a1      	ldr	r1, [r4, #8]
  404392:	1c50      	adds	r0, r2, #1
  404394:	3901      	subs	r1, #1
  404396:	60a1      	str	r1, [r4, #8]
  404398:	6020      	str	r0, [r4, #0]
  40439a:	7015      	strb	r5, [r2, #0]
  40439c:	6962      	ldr	r2, [r4, #20]
  40439e:	429a      	cmp	r2, r3
  4043a0:	d01a      	beq.n	4043d8 <__swbuf_r+0x80>
  4043a2:	89a3      	ldrh	r3, [r4, #12]
  4043a4:	07db      	lsls	r3, r3, #31
  4043a6:	d501      	bpl.n	4043ac <__swbuf_r+0x54>
  4043a8:	2d0a      	cmp	r5, #10
  4043aa:	d015      	beq.n	4043d8 <__swbuf_r+0x80>
  4043ac:	4638      	mov	r0, r7
  4043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4043b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4043b6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4043ba:	81a2      	strh	r2, [r4, #12]
  4043bc:	6822      	ldr	r2, [r4, #0]
  4043be:	6661      	str	r1, [r4, #100]	; 0x64
  4043c0:	6961      	ldr	r1, [r4, #20]
  4043c2:	1ad3      	subs	r3, r2, r3
  4043c4:	428b      	cmp	r3, r1
  4043c6:	dbe2      	blt.n	40438e <__swbuf_r+0x36>
  4043c8:	4621      	mov	r1, r4
  4043ca:	4630      	mov	r0, r6
  4043cc:	f7fe fda4 	bl	402f18 <_fflush_r>
  4043d0:	b940      	cbnz	r0, 4043e4 <__swbuf_r+0x8c>
  4043d2:	6822      	ldr	r2, [r4, #0]
  4043d4:	2301      	movs	r3, #1
  4043d6:	e7db      	b.n	404390 <__swbuf_r+0x38>
  4043d8:	4621      	mov	r1, r4
  4043da:	4630      	mov	r0, r6
  4043dc:	f7fe fd9c 	bl	402f18 <_fflush_r>
  4043e0:	2800      	cmp	r0, #0
  4043e2:	d0e3      	beq.n	4043ac <__swbuf_r+0x54>
  4043e4:	f04f 37ff 	mov.w	r7, #4294967295
  4043e8:	e7e0      	b.n	4043ac <__swbuf_r+0x54>
  4043ea:	4621      	mov	r1, r4
  4043ec:	4630      	mov	r0, r6
  4043ee:	f7fe fc7f 	bl	402cf0 <__swsetup_r>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	d1f6      	bne.n	4043e4 <__swbuf_r+0x8c>
  4043f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043fa:	6923      	ldr	r3, [r4, #16]
  4043fc:	b291      	uxth	r1, r2
  4043fe:	e7bd      	b.n	40437c <__swbuf_r+0x24>
  404400:	f7fe fde2 	bl	402fc8 <__sinit>
  404404:	e7b0      	b.n	404368 <__swbuf_r+0x10>
  404406:	bf00      	nop

00404408 <_wcrtomb_r>:
  404408:	b5f0      	push	{r4, r5, r6, r7, lr}
  40440a:	4606      	mov	r6, r0
  40440c:	b085      	sub	sp, #20
  40440e:	461f      	mov	r7, r3
  404410:	b189      	cbz	r1, 404436 <_wcrtomb_r+0x2e>
  404412:	4c10      	ldr	r4, [pc, #64]	; (404454 <_wcrtomb_r+0x4c>)
  404414:	4d10      	ldr	r5, [pc, #64]	; (404458 <_wcrtomb_r+0x50>)
  404416:	6824      	ldr	r4, [r4, #0]
  404418:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40441a:	2c00      	cmp	r4, #0
  40441c:	bf08      	it	eq
  40441e:	462c      	moveq	r4, r5
  404420:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404424:	47a0      	blx	r4
  404426:	1c43      	adds	r3, r0, #1
  404428:	d103      	bne.n	404432 <_wcrtomb_r+0x2a>
  40442a:	2200      	movs	r2, #0
  40442c:	238a      	movs	r3, #138	; 0x8a
  40442e:	603a      	str	r2, [r7, #0]
  404430:	6033      	str	r3, [r6, #0]
  404432:	b005      	add	sp, #20
  404434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404436:	460c      	mov	r4, r1
  404438:	4906      	ldr	r1, [pc, #24]	; (404454 <_wcrtomb_r+0x4c>)
  40443a:	4a07      	ldr	r2, [pc, #28]	; (404458 <_wcrtomb_r+0x50>)
  40443c:	6809      	ldr	r1, [r1, #0]
  40443e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404440:	2900      	cmp	r1, #0
  404442:	bf08      	it	eq
  404444:	4611      	moveq	r1, r2
  404446:	4622      	mov	r2, r4
  404448:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40444c:	a901      	add	r1, sp, #4
  40444e:	47a0      	blx	r4
  404450:	e7e9      	b.n	404426 <_wcrtomb_r+0x1e>
  404452:	bf00      	nop
  404454:	20400014 	.word	0x20400014
  404458:	20400444 	.word	0x20400444

0040445c <__ascii_wctomb>:
  40445c:	b121      	cbz	r1, 404468 <__ascii_wctomb+0xc>
  40445e:	2aff      	cmp	r2, #255	; 0xff
  404460:	d804      	bhi.n	40446c <__ascii_wctomb+0x10>
  404462:	700a      	strb	r2, [r1, #0]
  404464:	2001      	movs	r0, #1
  404466:	4770      	bx	lr
  404468:	4608      	mov	r0, r1
  40446a:	4770      	bx	lr
  40446c:	238a      	movs	r3, #138	; 0x8a
  40446e:	6003      	str	r3, [r0, #0]
  404470:	f04f 30ff 	mov.w	r0, #4294967295
  404474:	4770      	bx	lr
  404476:	bf00      	nop

00404478 <_write_r>:
  404478:	b570      	push	{r4, r5, r6, lr}
  40447a:	460d      	mov	r5, r1
  40447c:	4c08      	ldr	r4, [pc, #32]	; (4044a0 <_write_r+0x28>)
  40447e:	4611      	mov	r1, r2
  404480:	4606      	mov	r6, r0
  404482:	461a      	mov	r2, r3
  404484:	4628      	mov	r0, r5
  404486:	2300      	movs	r3, #0
  404488:	6023      	str	r3, [r4, #0]
  40448a:	f7fb ff4b 	bl	400324 <_write>
  40448e:	1c43      	adds	r3, r0, #1
  404490:	d000      	beq.n	404494 <_write_r+0x1c>
  404492:	bd70      	pop	{r4, r5, r6, pc}
  404494:	6823      	ldr	r3, [r4, #0]
  404496:	2b00      	cmp	r3, #0
  404498:	d0fb      	beq.n	404492 <_write_r+0x1a>
  40449a:	6033      	str	r3, [r6, #0]
  40449c:	bd70      	pop	{r4, r5, r6, pc}
  40449e:	bf00      	nop
  4044a0:	20400ae4 	.word	0x20400ae4

004044a4 <__register_exitproc>:
  4044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4044a8:	4d2c      	ldr	r5, [pc, #176]	; (40455c <__register_exitproc+0xb8>)
  4044aa:	4606      	mov	r6, r0
  4044ac:	6828      	ldr	r0, [r5, #0]
  4044ae:	4698      	mov	r8, r3
  4044b0:	460f      	mov	r7, r1
  4044b2:	4691      	mov	r9, r2
  4044b4:	f7ff f948 	bl	403748 <__retarget_lock_acquire_recursive>
  4044b8:	4b29      	ldr	r3, [pc, #164]	; (404560 <__register_exitproc+0xbc>)
  4044ba:	681c      	ldr	r4, [r3, #0]
  4044bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4044c0:	2b00      	cmp	r3, #0
  4044c2:	d03e      	beq.n	404542 <__register_exitproc+0x9e>
  4044c4:	685a      	ldr	r2, [r3, #4]
  4044c6:	2a1f      	cmp	r2, #31
  4044c8:	dc1c      	bgt.n	404504 <__register_exitproc+0x60>
  4044ca:	f102 0e01 	add.w	lr, r2, #1
  4044ce:	b176      	cbz	r6, 4044ee <__register_exitproc+0x4a>
  4044d0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4044d4:	2401      	movs	r4, #1
  4044d6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4044da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4044de:	4094      	lsls	r4, r2
  4044e0:	4320      	orrs	r0, r4
  4044e2:	2e02      	cmp	r6, #2
  4044e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4044e8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4044ec:	d023      	beq.n	404536 <__register_exitproc+0x92>
  4044ee:	3202      	adds	r2, #2
  4044f0:	f8c3 e004 	str.w	lr, [r3, #4]
  4044f4:	6828      	ldr	r0, [r5, #0]
  4044f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4044fa:	f7ff f927 	bl	40374c <__retarget_lock_release_recursive>
  4044fe:	2000      	movs	r0, #0
  404500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404504:	4b17      	ldr	r3, [pc, #92]	; (404564 <__register_exitproc+0xc0>)
  404506:	b30b      	cbz	r3, 40454c <__register_exitproc+0xa8>
  404508:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40450c:	f7ff f998 	bl	403840 <malloc>
  404510:	4603      	mov	r3, r0
  404512:	b1d8      	cbz	r0, 40454c <__register_exitproc+0xa8>
  404514:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404518:	6002      	str	r2, [r0, #0]
  40451a:	2100      	movs	r1, #0
  40451c:	6041      	str	r1, [r0, #4]
  40451e:	460a      	mov	r2, r1
  404520:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404524:	f04f 0e01 	mov.w	lr, #1
  404528:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40452c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404530:	2e00      	cmp	r6, #0
  404532:	d0dc      	beq.n	4044ee <__register_exitproc+0x4a>
  404534:	e7cc      	b.n	4044d0 <__register_exitproc+0x2c>
  404536:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40453a:	430c      	orrs	r4, r1
  40453c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404540:	e7d5      	b.n	4044ee <__register_exitproc+0x4a>
  404542:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404546:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40454a:	e7bb      	b.n	4044c4 <__register_exitproc+0x20>
  40454c:	6828      	ldr	r0, [r5, #0]
  40454e:	f7ff f8fd 	bl	40374c <__retarget_lock_release_recursive>
  404552:	f04f 30ff 	mov.w	r0, #4294967295
  404556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40455a:	bf00      	nop
  40455c:	20400440 	.word	0x20400440
  404560:	00404984 	.word	0x00404984
  404564:	00403841 	.word	0x00403841

00404568 <_close_r>:
  404568:	b538      	push	{r3, r4, r5, lr}
  40456a:	4c07      	ldr	r4, [pc, #28]	; (404588 <_close_r+0x20>)
  40456c:	2300      	movs	r3, #0
  40456e:	4605      	mov	r5, r0
  404570:	4608      	mov	r0, r1
  404572:	6023      	str	r3, [r4, #0]
  404574:	f7fc fb42 	bl	400bfc <_close>
  404578:	1c43      	adds	r3, r0, #1
  40457a:	d000      	beq.n	40457e <_close_r+0x16>
  40457c:	bd38      	pop	{r3, r4, r5, pc}
  40457e:	6823      	ldr	r3, [r4, #0]
  404580:	2b00      	cmp	r3, #0
  404582:	d0fb      	beq.n	40457c <_close_r+0x14>
  404584:	602b      	str	r3, [r5, #0]
  404586:	bd38      	pop	{r3, r4, r5, pc}
  404588:	20400ae4 	.word	0x20400ae4

0040458c <_fclose_r>:
  40458c:	b570      	push	{r4, r5, r6, lr}
  40458e:	b159      	cbz	r1, 4045a8 <_fclose_r+0x1c>
  404590:	4605      	mov	r5, r0
  404592:	460c      	mov	r4, r1
  404594:	b110      	cbz	r0, 40459c <_fclose_r+0x10>
  404596:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404598:	2b00      	cmp	r3, #0
  40459a:	d03c      	beq.n	404616 <_fclose_r+0x8a>
  40459c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40459e:	07d8      	lsls	r0, r3, #31
  4045a0:	d505      	bpl.n	4045ae <_fclose_r+0x22>
  4045a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045a6:	b92b      	cbnz	r3, 4045b4 <_fclose_r+0x28>
  4045a8:	2600      	movs	r6, #0
  4045aa:	4630      	mov	r0, r6
  4045ac:	bd70      	pop	{r4, r5, r6, pc}
  4045ae:	89a3      	ldrh	r3, [r4, #12]
  4045b0:	0599      	lsls	r1, r3, #22
  4045b2:	d53c      	bpl.n	40462e <_fclose_r+0xa2>
  4045b4:	4621      	mov	r1, r4
  4045b6:	4628      	mov	r0, r5
  4045b8:	f7fe fc0e 	bl	402dd8 <__sflush_r>
  4045bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4045be:	4606      	mov	r6, r0
  4045c0:	b133      	cbz	r3, 4045d0 <_fclose_r+0x44>
  4045c2:	69e1      	ldr	r1, [r4, #28]
  4045c4:	4628      	mov	r0, r5
  4045c6:	4798      	blx	r3
  4045c8:	2800      	cmp	r0, #0
  4045ca:	bfb8      	it	lt
  4045cc:	f04f 36ff 	movlt.w	r6, #4294967295
  4045d0:	89a3      	ldrh	r3, [r4, #12]
  4045d2:	061a      	lsls	r2, r3, #24
  4045d4:	d422      	bmi.n	40461c <_fclose_r+0x90>
  4045d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4045d8:	b141      	cbz	r1, 4045ec <_fclose_r+0x60>
  4045da:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4045de:	4299      	cmp	r1, r3
  4045e0:	d002      	beq.n	4045e8 <_fclose_r+0x5c>
  4045e2:	4628      	mov	r0, r5
  4045e4:	f7fe fe16 	bl	403214 <_free_r>
  4045e8:	2300      	movs	r3, #0
  4045ea:	6323      	str	r3, [r4, #48]	; 0x30
  4045ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4045ee:	b121      	cbz	r1, 4045fa <_fclose_r+0x6e>
  4045f0:	4628      	mov	r0, r5
  4045f2:	f7fe fe0f 	bl	403214 <_free_r>
  4045f6:	2300      	movs	r3, #0
  4045f8:	6463      	str	r3, [r4, #68]	; 0x44
  4045fa:	f7fe fd11 	bl	403020 <__sfp_lock_acquire>
  4045fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404600:	2200      	movs	r2, #0
  404602:	07db      	lsls	r3, r3, #31
  404604:	81a2      	strh	r2, [r4, #12]
  404606:	d50e      	bpl.n	404626 <_fclose_r+0x9a>
  404608:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40460a:	f7ff f89b 	bl	403744 <__retarget_lock_close_recursive>
  40460e:	f7fe fd0d 	bl	40302c <__sfp_lock_release>
  404612:	4630      	mov	r0, r6
  404614:	bd70      	pop	{r4, r5, r6, pc}
  404616:	f7fe fcd7 	bl	402fc8 <__sinit>
  40461a:	e7bf      	b.n	40459c <_fclose_r+0x10>
  40461c:	6921      	ldr	r1, [r4, #16]
  40461e:	4628      	mov	r0, r5
  404620:	f7fe fdf8 	bl	403214 <_free_r>
  404624:	e7d7      	b.n	4045d6 <_fclose_r+0x4a>
  404626:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404628:	f7ff f890 	bl	40374c <__retarget_lock_release_recursive>
  40462c:	e7ec      	b.n	404608 <_fclose_r+0x7c>
  40462e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404630:	f7ff f88a 	bl	403748 <__retarget_lock_acquire_recursive>
  404634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404638:	2b00      	cmp	r3, #0
  40463a:	d1bb      	bne.n	4045b4 <_fclose_r+0x28>
  40463c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40463e:	f016 0601 	ands.w	r6, r6, #1
  404642:	d1b1      	bne.n	4045a8 <_fclose_r+0x1c>
  404644:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404646:	f7ff f881 	bl	40374c <__retarget_lock_release_recursive>
  40464a:	4630      	mov	r0, r6
  40464c:	bd70      	pop	{r4, r5, r6, pc}
  40464e:	bf00      	nop

00404650 <_fstat_r>:
  404650:	b538      	push	{r3, r4, r5, lr}
  404652:	460b      	mov	r3, r1
  404654:	4c07      	ldr	r4, [pc, #28]	; (404674 <_fstat_r+0x24>)
  404656:	4605      	mov	r5, r0
  404658:	4611      	mov	r1, r2
  40465a:	4618      	mov	r0, r3
  40465c:	2300      	movs	r3, #0
  40465e:	6023      	str	r3, [r4, #0]
  404660:	f7fc facf 	bl	400c02 <_fstat>
  404664:	1c43      	adds	r3, r0, #1
  404666:	d000      	beq.n	40466a <_fstat_r+0x1a>
  404668:	bd38      	pop	{r3, r4, r5, pc}
  40466a:	6823      	ldr	r3, [r4, #0]
  40466c:	2b00      	cmp	r3, #0
  40466e:	d0fb      	beq.n	404668 <_fstat_r+0x18>
  404670:	602b      	str	r3, [r5, #0]
  404672:	bd38      	pop	{r3, r4, r5, pc}
  404674:	20400ae4 	.word	0x20400ae4

00404678 <_isatty_r>:
  404678:	b538      	push	{r3, r4, r5, lr}
  40467a:	4c07      	ldr	r4, [pc, #28]	; (404698 <_isatty_r+0x20>)
  40467c:	2300      	movs	r3, #0
  40467e:	4605      	mov	r5, r0
  404680:	4608      	mov	r0, r1
  404682:	6023      	str	r3, [r4, #0]
  404684:	f7fc fac2 	bl	400c0c <_isatty>
  404688:	1c43      	adds	r3, r0, #1
  40468a:	d000      	beq.n	40468e <_isatty_r+0x16>
  40468c:	bd38      	pop	{r3, r4, r5, pc}
  40468e:	6823      	ldr	r3, [r4, #0]
  404690:	2b00      	cmp	r3, #0
  404692:	d0fb      	beq.n	40468c <_isatty_r+0x14>
  404694:	602b      	str	r3, [r5, #0]
  404696:	bd38      	pop	{r3, r4, r5, pc}
  404698:	20400ae4 	.word	0x20400ae4

0040469c <_lseek_r>:
  40469c:	b570      	push	{r4, r5, r6, lr}
  40469e:	460d      	mov	r5, r1
  4046a0:	4c08      	ldr	r4, [pc, #32]	; (4046c4 <_lseek_r+0x28>)
  4046a2:	4611      	mov	r1, r2
  4046a4:	4606      	mov	r6, r0
  4046a6:	461a      	mov	r2, r3
  4046a8:	4628      	mov	r0, r5
  4046aa:	2300      	movs	r3, #0
  4046ac:	6023      	str	r3, [r4, #0]
  4046ae:	f7fc faaf 	bl	400c10 <_lseek>
  4046b2:	1c43      	adds	r3, r0, #1
  4046b4:	d000      	beq.n	4046b8 <_lseek_r+0x1c>
  4046b6:	bd70      	pop	{r4, r5, r6, pc}
  4046b8:	6823      	ldr	r3, [r4, #0]
  4046ba:	2b00      	cmp	r3, #0
  4046bc:	d0fb      	beq.n	4046b6 <_lseek_r+0x1a>
  4046be:	6033      	str	r3, [r6, #0]
  4046c0:	bd70      	pop	{r4, r5, r6, pc}
  4046c2:	bf00      	nop
  4046c4:	20400ae4 	.word	0x20400ae4

004046c8 <_read_r>:
  4046c8:	b570      	push	{r4, r5, r6, lr}
  4046ca:	460d      	mov	r5, r1
  4046cc:	4c08      	ldr	r4, [pc, #32]	; (4046f0 <_read_r+0x28>)
  4046ce:	4611      	mov	r1, r2
  4046d0:	4606      	mov	r6, r0
  4046d2:	461a      	mov	r2, r3
  4046d4:	4628      	mov	r0, r5
  4046d6:	2300      	movs	r3, #0
  4046d8:	6023      	str	r3, [r4, #0]
  4046da:	f7fb fd7b 	bl	4001d4 <_read>
  4046de:	1c43      	adds	r3, r0, #1
  4046e0:	d000      	beq.n	4046e4 <_read_r+0x1c>
  4046e2:	bd70      	pop	{r4, r5, r6, pc}
  4046e4:	6823      	ldr	r3, [r4, #0]
  4046e6:	2b00      	cmp	r3, #0
  4046e8:	d0fb      	beq.n	4046e2 <_read_r+0x1a>
  4046ea:	6033      	str	r3, [r6, #0]
  4046ec:	bd70      	pop	{r4, r5, r6, pc}
  4046ee:	bf00      	nop
  4046f0:	20400ae4 	.word	0x20400ae4
  4046f4:	00007350 	.word	0x00007350
  4046f8:	70532d2d 	.word	0x70532d2d
  4046fc:	526e2069 	.word	0x526e2069
  404700:	4c343246 	.word	0x4c343246
  404704:	54203130 	.word	0x54203130
  404708:	20747365 	.word	0x20747365
  40470c:	0a0d2d2d 	.word	0x0a0d2d2d
  404710:	53202d2d 	.word	0x53202d2d
  404714:	37454d41 	.word	0x37454d41
  404718:	50582d30 	.word	0x50582d30
  40471c:	2d20444c 	.word	0x2d20444c
  404720:	2d0a0d2d 	.word	0x2d0a0d2d
  404724:	6f43202d 	.word	0x6f43202d
  404728:	6c69706d 	.word	0x6c69706d
  40472c:	203a6465 	.word	0x203a6465
  404730:	20677541 	.word	0x20677541
  404734:	32203320 	.word	0x32203320
  404738:	20303230 	.word	0x20303230
  40473c:	343a3130 	.word	0x343a3130
  404740:	38353a30 	.word	0x38353a30
  404744:	0d2d2d20 	.word	0x0d2d2d20
  404748:	00000000 	.word	0x00000000
  40474c:	74746553 	.word	0x74746553
  404750:	20676e69 	.word	0x20676e69
  404754:	20495053 	.word	0x20495053
  404758:	636f6c63 	.word	0x636f6c63
  40475c:	2523206b 	.word	0x2523206b
  404760:	2e20756c 	.word	0x2e20756c
  404764:	0a202e2e 	.word	0x0a202e2e
  404768:	0000000d 	.word	0x0000000d
  40476c:	202d492d 	.word	0x202d492d
  404770:	74696e49 	.word	0x74696e49
  404774:	696c6169 	.word	0x696c6169
  404778:	5320657a 	.word	0x5320657a
  40477c:	61204950 	.word	0x61204950
  404780:	616d2073 	.word	0x616d2073
  404784:	72657473 	.word	0x72657473
  404788:	0000000d 	.word	0x0000000d
  40478c:	7c206425 	.word	0x7c206425
  404790:	3025207c 	.word	0x3025207c
  404794:	0d0a7832 	.word	0x0d0a7832
  404798:	00000000 	.word	0x00000000

0040479c <pipe_enable_s>:
  40479c:	03020100 00000504                       ........

004047a4 <pipe_s>:
  4047a4:	0d0c0b0a 00000f0e                       ........

004047ac <pipe_size_s>:
  4047ac:	14131211 00001615 20495053 65657053     ........SPI Spee
  4047bc:	3d200964 646c2520 7a484d20 00000a0d     d. = %ld MHz....
  4047cc:	415f5852 5f524444 312d3050 00000000     RX_ADDR_P0-1....
  4047dc:	415f5852 5f524444 352d3250 00000000     RX_ADDR_P2-5....
  4047ec:	415f5854 09524444 00000000 505f5852     TX_ADDR.....RX_P
  4047fc:	30505f57 0000352d 55544553 57415f50     W_P0-5..SETUP_AW
  40480c:	00000000 415f4e45 00000941 525f4e45     ....EN_AA...EN_R
  40481c:	44444158 00000052 435f4652 00000948     XADDR...RF_CH...
  40482c:	535f4652 50555445 00000000 464e4f43     RF_SETUP....CONF
  40483c:	00094749 504e5944 45462f44 52555441     IG..DYNPD/FEATUR
  40484c:	00000045 61746144 74615220 3d200965     E...Data Rate. =
  40485c:	0d732520 0000000a 65646f4d 2009096c      %s.....Model.. 
  40486c:	7325203d 00000a0d 20435243 676e654c     = %s....CRC Leng
  40487c:	20096874 7325203d 00000a0d 50204150     th. = %s....PA P
  40488c:	7265776f 203d2009 0a0d7325 00000000     ower. = %s......
  40489c:	00097325 00783020 78323025 00000000     %s.. 0x.%02x....
  4048ac:	25783020 00783230 54415453 09095355      0x%02x.STATUS..
  4048bc:	30203d20 32302578 58522078 3d52445f      = 0x%02x RX_DR=
  4048cc:	54207825 53445f58 2078253d 5f58414d     %x TX_DS=%x MAX_
  4048dc:	253d5452 58522078 4e5f505f 78253d4f     RT=%x RX_P_NO=%x
  4048ec:	5f585420 4c4c5546 0d78253d 0000000a      TX_FULL=%x.....

004048fc <rf24_crclength_e_str_0>:
  4048fc:	61736944 64656c62 00000000              Disabled....

00404908 <rf24_crclength_e_str_1>:
  404908:	69622038 00007374                       8 bits..

00404910 <rf24_crclength_e_str_2>:
  404910:	62203631 00737469                       16 bits.

00404918 <rf24_crclength_e_str_P>:
  404918:	004048fc 00404908 00404910              .H@..I@..I@.

00404924 <rf24_datarate_e_str_0>:
  404924:	50424d31 00000053                       1MBPS...

0040492c <rf24_datarate_e_str_1>:
  40492c:	50424d32 00000053                       2MBPS...

00404934 <rf24_datarate_e_str_2>:
  404934:	4b303532 00535042                       250KBPS.

0040493c <rf24_datarate_e_str_P>:
  40493c:	00404924 0040492c 00404934              $I@.,I@.4I@.

00404948 <rf24_model_e_str_1>:
  404948:	3246526e 31304c34 0000002b              nRF24L01+...

00404954 <rf24_pa_dbm_e_str_0>:
  404954:	4d5f4150 00004e49                       PA_MIN..

0040495c <rf24_pa_dbm_e_str_1>:
  40495c:	4c5f4150 0000574f                       PA_LOW..

00404964 <rf24_pa_dbm_e_str_2>:
  404964:	485f4150 00484749                       PA_HIGH.

0040496c <rf24_pa_dbm_e_str_3>:
  40496c:	4d5f4150 00005841                       PA_MAX..

00404974 <rf24_pa_dbm_e_str_P>:
  404974:	00404954 0040495c 00404964 0040496c     TI@.\I@.dI@.lI@.

00404984 <_global_impure_ptr>:
  404984:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  404994:	46454443 00000000 33323130 37363534     CDEF....01234567
  4049a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4049b4:	0000296c                                l)..

004049b8 <blanks.7217>:
  4049b8:	20202020 20202020 20202020 20202020                     

004049c8 <zeroes.7218>:
  4049c8:	30303030 30303030 30303030 30303030     0000000000000000
  4049d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004049e8 <_ctype_>:
  4049e8:	20202000 20202020 28282020 20282828     .         ((((( 
  4049f8:	20202020 20202020 20202020 20202020                     
  404a08:	10108820 10101010 10101010 10101010      ...............
  404a18:	04040410 04040404 10040404 10101010     ................
  404a28:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404a38:	01010101 01010101 01010101 10101010     ................
  404a48:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404a58:	02020202 02020202 02020202 10101010     ................
  404a68:	00000020 00000000 00000000 00000000      ...............
	...

00404aec <_init>:
  404aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404aee:	bf00      	nop
  404af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404af2:	bc08      	pop	{r3}
  404af4:	469e      	mov	lr, r3
  404af6:	4770      	bx	lr

00404af8 <__init_array_start>:
  404af8:	00402db9 	.word	0x00402db9

00404afc <__frame_dummy_init_array_entry>:
  404afc:	0040018d                                ..@.

00404b00 <_fini>:
  404b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b02:	bf00      	nop
  404b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404b06:	bc08      	pop	{r3}
  404b08:	469e      	mov	lr, r3
  404b0a:	4770      	bx	lr

00404b0c <__fini_array_start>:
  404b0c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <addr_width>:
20400010:	2005                                             .

20400011 <payload_size>:
20400011:	0020 1800                                         ..

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0ac0 2040                                   ..@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	445d 0040 3db1 0040 0000 0000 49e8 0040     ]D@..=@......I@.
20400534:	49e4 0040 47f4 0040 47f4 0040 47f4 0040     .I@..G@..G@..G@.
20400544:	47f4 0040 47f4 0040 47f4 0040 47f4 0040     .G@..G@..G@..G@.
20400554:	47f4 0040 47f4 0040 ffff ffff ffff ffff     .G@..G@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
