
nRF24L01_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d84  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404d84  00404d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  00404d8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000124  204009c8  00405754  000209c8  2**2
                  ALLOC
  4 .stack        00002004  20400aec  00405878  000209c8  2**0
                  ALLOC
  5 .heap         00000200  20402af0  0040787c  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018a76  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000035b0  00000000  00000000  000394c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000589e  00000000  00000000  0003ca75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ba0  00000000  00000000  00042313  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be8  00000000  00000000  00042eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002236e  00000000  00000000  00043a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dbfc  00000000  00000000  00065e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094d81  00000000  00000000  00073a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000026c8  00000000  00000000  00108788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 2a 40 20 8d 12 40 00 89 12 40 00 89 12 40 00     .*@ ..@...@...@.
  400010:	89 12 40 00 89 12 40 00 89 12 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	89 12 40 00 89 12 40 00 00 00 00 00 89 12 40 00     ..@...@.......@.
  40003c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40004c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40005c:	89 12 40 00 89 12 40 00 00 00 00 00 e5 10 40 00     ..@...@.......@.
  40006c:	f9 10 40 00 0d 11 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40007c:	89 12 40 00 21 11 40 00 35 11 40 00 89 12 40 00     ..@.!.@.5.@...@.
  40008c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40009c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000ac:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000bc:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000cc:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000dc:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000ec:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  4000fc:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40010c:	89 12 40 00 89 12 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 89 12 40 00 89 12 40 00 89 12 40 00     ......@...@...@.
  40012c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40013c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40014c:	89 12 40 00 89 12 40 00 89 12 40 00 89 12 40 00     ..@...@...@...@.
  40015c:	89 12 40 00 89 12 40 00 89 12 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c8 	.word	0x204009c8
  400184:	00000000 	.word	0x00000000
  400188:	00404d8c 	.word	0x00404d8c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404d8c 	.word	0x00404d8c
  4001c8:	204009cc 	.word	0x204009cc
  4001cc:	00404d8c 	.word	0x00404d8c
  4001d0:	00000000 	.word	0x00000000

004001d4 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
void spi_master_initialize(void)
{
  4001d4:	b538      	push	{r3, r4, r5, lr}
	puts("-I- Initialize SPI as master\r");
  4001d6:	481e      	ldr	r0, [pc, #120]	; (400250 <spi_master_initialize+0x7c>)
  4001d8:	4b1e      	ldr	r3, [pc, #120]	; (400254 <spi_master_initialize+0x80>)
  4001da:	4798      	blx	r3

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
  4001dc:	4c1e      	ldr	r4, [pc, #120]	; (400258 <spi_master_initialize+0x84>)
  4001de:	4620      	mov	r0, r4
  4001e0:	4b1e      	ldr	r3, [pc, #120]	; (40025c <spi_master_initialize+0x88>)
  4001e2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4001e4:	2302      	movs	r3, #2
  4001e6:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4001e8:	2380      	movs	r3, #128	; 0x80
  4001ea:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4001ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4001f0:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4001f2:	6863      	ldr	r3, [r4, #4]
  4001f4:	f043 0301 	orr.w	r3, r3, #1
  4001f8:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4001fa:	6863      	ldr	r3, [r4, #4]
  4001fc:	f043 0310 	orr.w	r3, r3, #16
  400200:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_PCS);
  400202:	210d      	movs	r1, #13
  400204:	4620      	mov	r0, r4
  400206:	4b16      	ldr	r3, [pc, #88]	; (400260 <spi_master_initialize+0x8c>)
  400208:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  40020a:	2200      	movs	r2, #0
  40020c:	2101      	movs	r1, #1
  40020e:	4620      	mov	r0, r4
  400210:	4b14      	ldr	r3, [pc, #80]	; (400264 <spi_master_initialize+0x90>)
  400212:	4798      	blx	r3
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400214:	2201      	movs	r2, #1
  400216:	4611      	mov	r1, r2
  400218:	4620      	mov	r0, r4
  40021a:	4b13      	ldr	r3, [pc, #76]	; (400268 <spi_master_initialize+0x94>)
  40021c:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL,
  40021e:	2200      	movs	r2, #0
  400220:	2101      	movs	r1, #1
  400222:	4620      	mov	r0, r4
  400224:	4b11      	ldr	r3, [pc, #68]	; (40026c <spi_master_initialize+0x98>)
  400226:	4798      	blx	r3
	SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
	(sysclk_get_peripheral_hz() / gs_ul_spi_clock));
  400228:	4b11      	ldr	r3, [pc, #68]	; (400270 <spi_master_initialize+0x9c>)
  40022a:	681b      	ldr	r3, [r3, #0]
  40022c:	4a11      	ldr	r2, [pc, #68]	; (400274 <spi_master_initialize+0xa0>)
  40022e:	fbb2 f2f3 	udiv	r2, r2, r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
  400232:	b2d2      	uxtb	r2, r2
  400234:	2101      	movs	r1, #1
  400236:	4620      	mov	r0, r4
  400238:	4b0f      	ldr	r3, [pc, #60]	; (400278 <spi_master_initialize+0xa4>)
  40023a:	4798      	blx	r3
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS,
  40023c:	2304      	movs	r3, #4
  40023e:	2210      	movs	r2, #16
  400240:	2101      	movs	r1, #1
  400242:	4620      	mov	r0, r4
  400244:	4d0d      	ldr	r5, [pc, #52]	; (40027c <spi_master_initialize+0xa8>)
  400246:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400248:	2301      	movs	r3, #1
  40024a:	6023      	str	r3, [r4, #0]
  40024c:	bd38      	pop	{r3, r4, r5, pc}
  40024e:	bf00      	nop
  400250:	00404934 	.word	0x00404934
  400254:	00401f09 	.word	0x00401f09
  400258:	40008000 	.word	0x40008000
  40025c:	00400c9d 	.word	0x00400c9d
  400260:	00400cc9 	.word	0x00400cc9
  400264:	00400d43 	.word	0x00400d43
  400268:	00400d61 	.word	0x00400d61
  40026c:	00400d7f 	.word	0x00400d7f
  400270:	2040000c 	.word	0x2040000c
  400274:	08f0d180 	.word	0x08f0d180
  400278:	00400d93 	.word	0x00400d93
  40027c:	00400dbb 	.word	0x00400dbb

00400280 <spi_set_clock_configuration>:
 * \brief Set the specified SPI clock configuration.
 *
 * \param configuration  Index of the configuration to set.
 */
void spi_set_clock_configuration(uint8_t configuration)
{
  400280:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400282:	4b0b      	ldr	r3, [pc, #44]	; (4002b0 <spi_set_clock_configuration+0x30>)
  400284:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400288:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40028c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400294:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400298:	2100      	movs	r1, #0
  40029a:	f883 1315 	strb.w	r1, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40029e:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(SPI_IRQn);
	NVIC_DisableIRQ(SPI_IRQn);
	NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);

	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  4002a0:	4b04      	ldr	r3, [pc, #16]	; (4002b4 <spi_set_clock_configuration+0x34>)
  4002a2:	6819      	ldr	r1, [r3, #0]
  4002a4:	4804      	ldr	r0, [pc, #16]	; (4002b8 <spi_set_clock_configuration+0x38>)
  4002a6:	4b05      	ldr	r3, [pc, #20]	; (4002bc <spi_set_clock_configuration+0x3c>)
  4002a8:	4798      	blx	r3
	spi_master_initialize();
  4002aa:	4b05      	ldr	r3, [pc, #20]	; (4002c0 <spi_set_clock_configuration+0x40>)
  4002ac:	4798      	blx	r3
  4002ae:	bd08      	pop	{r3, pc}
  4002b0:	e000e100 	.word	0xe000e100
  4002b4:	2040000c 	.word	0x2040000c
  4002b8:	00404954 	.word	0x00404954
  4002bc:	00401c75 	.word	0x00401c75
  4002c0:	004001d5 	.word	0x004001d5

004002c4 <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
  4002c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002c8:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  4002ca:	b1d9      	cbz	r1, 400304 <spi_master_transfer+0x40>
  4002cc:	4688      	mov	r8, r1
  4002ce:	4605      	mov	r5, r0
  4002d0:	4480      	add	r8, r0
		spi_write(SPI0, p_buffer[i], 0, 0);
  4002d2:	4c0f      	ldr	r4, [pc, #60]	; (400310 <spi_master_transfer+0x4c>)
  4002d4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 400320 <spi_master_transfer+0x5c>
		
		/* Wait transfer done. */
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
		spi_read(SPI0, &data, &uc_pcs);
  4002d8:	4e0e      	ldr	r6, [pc, #56]	; (400314 <spi_master_transfer+0x50>)
  4002da:	462f      	mov	r7, r5
		spi_write(SPI0, p_buffer[i], 0, 0);
  4002dc:	2300      	movs	r3, #0
  4002de:	461a      	mov	r2, r3
  4002e0:	7829      	ldrb	r1, [r5, #0]
  4002e2:	4620      	mov	r0, r4
  4002e4:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  4002e6:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
  4002e8:	f013 0f01 	tst.w	r3, #1
  4002ec:	d0fb      	beq.n	4002e6 <spi_master_transfer+0x22>
		spi_read(SPI0, &data, &uc_pcs);
  4002ee:	f10d 0207 	add.w	r2, sp, #7
  4002f2:	4631      	mov	r1, r6
  4002f4:	4620      	mov	r0, r4
  4002f6:	4b08      	ldr	r3, [pc, #32]	; (400318 <spi_master_transfer+0x54>)
  4002f8:	4798      	blx	r3
		p_buffer[i] = data;
  4002fa:	8833      	ldrh	r3, [r6, #0]
  4002fc:	703b      	strb	r3, [r7, #0]
  4002fe:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  400300:	4545      	cmp	r5, r8
  400302:	d1ea      	bne.n	4002da <spi_master_transfer+0x16>
	}
	delay_us(5);
  400304:	20fd      	movs	r0, #253	; 0xfd
  400306:	4b05      	ldr	r3, [pc, #20]	; (40031c <spi_master_transfer+0x58>)
  400308:	4798      	blx	r3
  40030a:	b003      	add	sp, #12
  40030c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400310:	40008000 	.word	0x40008000
  400314:	204009e4 	.word	0x204009e4
  400318:	00400cdf 	.word	0x00400cdf
  40031c:	20400001 	.word	0x20400001
  400320:	00400d0f 	.word	0x00400d0f

00400324 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400328:	b980      	cbnz	r0, 40034c <_read+0x28>
  40032a:	460c      	mov	r4, r1
  40032c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40032e:	2a00      	cmp	r2, #0
  400330:	dd0f      	ble.n	400352 <_read+0x2e>
  400332:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400334:	4e08      	ldr	r6, [pc, #32]	; (400358 <_read+0x34>)
  400336:	4d09      	ldr	r5, [pc, #36]	; (40035c <_read+0x38>)
  400338:	6830      	ldr	r0, [r6, #0]
  40033a:	4621      	mov	r1, r4
  40033c:	682b      	ldr	r3, [r5, #0]
  40033e:	4798      	blx	r3
		ptr++;
  400340:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400342:	42bc      	cmp	r4, r7
  400344:	d1f8      	bne.n	400338 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400346:	4640      	mov	r0, r8
  400348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40034c:	f04f 38ff 	mov.w	r8, #4294967295
  400350:	e7f9      	b.n	400346 <_read+0x22>
	for (; len > 0; --len) {
  400352:	4680      	mov	r8, r0
  400354:	e7f7      	b.n	400346 <_read+0x22>
  400356:	bf00      	nop
  400358:	20400ab0 	.word	0x20400ab0
  40035c:	20400a98 	.word	0x20400a98

00400360 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400360:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400362:	010b      	lsls	r3, r1, #4
  400364:	4293      	cmp	r3, r2
  400366:	d914      	bls.n	400392 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400368:	00c9      	lsls	r1, r1, #3
  40036a:	084b      	lsrs	r3, r1, #1
  40036c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400370:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400374:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400376:	1e5c      	subs	r4, r3, #1
  400378:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40037c:	428c      	cmp	r4, r1
  40037e:	d901      	bls.n	400384 <usart_set_async_baudrate+0x24>
		return 1;
  400380:	2001      	movs	r0, #1
  400382:	e017      	b.n	4003b4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400384:	6841      	ldr	r1, [r0, #4]
  400386:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40038a:	6041      	str	r1, [r0, #4]
  40038c:	e00c      	b.n	4003a8 <usart_set_async_baudrate+0x48>
		return 1;
  40038e:	2001      	movs	r0, #1
  400390:	e010      	b.n	4003b4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400392:	0859      	lsrs	r1, r3, #1
  400394:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400398:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40039c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40039e:	1e5c      	subs	r4, r3, #1
  4003a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4003a4:	428c      	cmp	r4, r1
  4003a6:	d8f2      	bhi.n	40038e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4003a8:	0412      	lsls	r2, r2, #16
  4003aa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4003ae:	431a      	orrs	r2, r3
  4003b0:	6202      	str	r2, [r0, #32]

	return 0;
  4003b2:	2000      	movs	r0, #0
}
  4003b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b8:	4770      	bx	lr
	...

004003bc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4003bc:	4b08      	ldr	r3, [pc, #32]	; (4003e0 <usart_reset+0x24>)
  4003be:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4003c2:	2300      	movs	r3, #0
  4003c4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4003c6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4003c8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4003ca:	2388      	movs	r3, #136	; 0x88
  4003cc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4003ce:	2324      	movs	r3, #36	; 0x24
  4003d0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4003d2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4003d6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4003d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4003dc:	6003      	str	r3, [r0, #0]
  4003de:	4770      	bx	lr
  4003e0:	55534100 	.word	0x55534100

004003e4 <usart_init_rs232>:
{
  4003e4:	b570      	push	{r4, r5, r6, lr}
  4003e6:	4605      	mov	r5, r0
  4003e8:	460c      	mov	r4, r1
  4003ea:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4003ec:	4b0f      	ldr	r3, [pc, #60]	; (40042c <usart_init_rs232+0x48>)
  4003ee:	4798      	blx	r3
	ul_reg_val = 0;
  4003f0:	2200      	movs	r2, #0
  4003f2:	4b0f      	ldr	r3, [pc, #60]	; (400430 <usart_init_rs232+0x4c>)
  4003f4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4003f6:	b1a4      	cbz	r4, 400422 <usart_init_rs232+0x3e>
  4003f8:	4632      	mov	r2, r6
  4003fa:	6821      	ldr	r1, [r4, #0]
  4003fc:	4628      	mov	r0, r5
  4003fe:	4b0d      	ldr	r3, [pc, #52]	; (400434 <usart_init_rs232+0x50>)
  400400:	4798      	blx	r3
  400402:	4602      	mov	r2, r0
  400404:	b978      	cbnz	r0, 400426 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400406:	6863      	ldr	r3, [r4, #4]
  400408:	68a1      	ldr	r1, [r4, #8]
  40040a:	430b      	orrs	r3, r1
  40040c:	6921      	ldr	r1, [r4, #16]
  40040e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400410:	68e1      	ldr	r1, [r4, #12]
  400412:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400414:	4906      	ldr	r1, [pc, #24]	; (400430 <usart_init_rs232+0x4c>)
  400416:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400418:	6869      	ldr	r1, [r5, #4]
  40041a:	430b      	orrs	r3, r1
  40041c:	606b      	str	r3, [r5, #4]
}
  40041e:	4610      	mov	r0, r2
  400420:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400422:	2201      	movs	r2, #1
  400424:	e7fb      	b.n	40041e <usart_init_rs232+0x3a>
  400426:	2201      	movs	r2, #1
  400428:	e7f9      	b.n	40041e <usart_init_rs232+0x3a>
  40042a:	bf00      	nop
  40042c:	004003bd 	.word	0x004003bd
  400430:	204009e8 	.word	0x204009e8
  400434:	00400361 	.word	0x00400361

00400438 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400438:	2340      	movs	r3, #64	; 0x40
  40043a:	6003      	str	r3, [r0, #0]
  40043c:	4770      	bx	lr

0040043e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40043e:	2310      	movs	r3, #16
  400440:	6003      	str	r3, [r0, #0]
  400442:	4770      	bx	lr

00400444 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400444:	6943      	ldr	r3, [r0, #20]
  400446:	f013 0f02 	tst.w	r3, #2
  40044a:	d004      	beq.n	400456 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40044c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400450:	61c1      	str	r1, [r0, #28]
	return 0;
  400452:	2000      	movs	r0, #0
  400454:	4770      	bx	lr
		return 1;
  400456:	2001      	movs	r0, #1
}
  400458:	4770      	bx	lr

0040045a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40045a:	6943      	ldr	r3, [r0, #20]
  40045c:	f013 0f01 	tst.w	r3, #1
  400460:	d005      	beq.n	40046e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400462:	6983      	ldr	r3, [r0, #24]
  400464:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400468:	600b      	str	r3, [r1, #0]
	return 0;
  40046a:	2000      	movs	r0, #0
  40046c:	4770      	bx	lr
		return 1;
  40046e:	2001      	movs	r0, #1
}
  400470:	4770      	bx	lr
	...

00400474 <print_address_register>:
{
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
}

static void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  400474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400478:	b083      	sub	sp, #12
  40047a:	af00      	add	r7, sp, #0
  40047c:	460e      	mov	r6, r1
  40047e:	4614      	mov	r4, r2
	printf("%s\t", name);
  400480:	4601      	mov	r1, r0
  400482:	4829      	ldr	r0, [pc, #164]	; (400528 <print_address_register+0xb4>)
  400484:	4b29      	ldr	r3, [pc, #164]	; (40052c <print_address_register+0xb8>)
  400486:	4798      	blx	r3
	while(qty--){
  400488:	2c00      	cmp	r4, #0
  40048a:	d045      	beq.n	400518 <print_address_register+0xa4>
  40048c:	4434      	add	r4, r6
  40048e:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  400492:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40053c <print_address_register+0xc8>
	while(qty--){
  400496:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  40049a:	f89b 4000 	ldrb.w	r4, [fp]
  40049e:	1de3      	adds	r3, r4, #7
  4004a0:	f023 0307 	bic.w	r3, r3, #7
  4004a4:	ebad 0d03 	sub.w	sp, sp, r3
  4004a8:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  4004aa:	f106 0901 	add.w	r9, r6, #1
  4004ae:	fa5f f989 	uxtb.w	r9, r9
{
  4004b2:	f8c7 d000 	str.w	sp, [r7]
	uint8_t status[len+1];
  4004b6:	f104 0308 	add.w	r3, r4, #8
  4004ba:	f023 0307 	bic.w	r3, r3, #7
  4004be:	ebad 0d03 	sub.w	sp, sp, r3
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  4004c2:	f006 061f 	and.w	r6, r6, #31
  4004c6:	f88d 6000 	strb.w	r6, [sp]
	spi_master_transfer(&status, sizeof(status));
  4004ca:	1c61      	adds	r1, r4, #1
  4004cc:	4668      	mov	r0, sp
  4004ce:	4b18      	ldr	r3, [pc, #96]	; (400530 <print_address_register+0xbc>)
  4004d0:	4798      	blx	r3
	for (uint8_t i = 0; i< len; i++)
  4004d2:	b15c      	cbz	r4, 4004ec <print_address_register+0x78>
  4004d4:	f10d 0801 	add.w	r8, sp, #1
  4004d8:	1e6b      	subs	r3, r5, #1
  4004da:	1e61      	subs	r1, r4, #1
  4004dc:	fa55 f181 	uxtab	r1, r5, r1
		buf[i] = status[i+1];
  4004e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4004e4:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  4004e8:	428b      	cmp	r3, r1
  4004ea:	d1f9      	bne.n	4004e0 <print_address_register+0x6c>
  4004ec:	f8d7 d000 	ldr.w	sp, [r7]
		
		printf(" 0x");
  4004f0:	4810      	ldr	r0, [pc, #64]	; (400534 <print_address_register+0xc0>)
  4004f2:	4b0e      	ldr	r3, [pc, #56]	; (40052c <print_address_register+0xb8>)
  4004f4:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  4004f6:	3c01      	subs	r4, #1
  4004f8:	192c      	adds	r4, r5, r4
  4004fa:	d208      	bcs.n	40050e <print_address_register+0x9a>
			printf("%02x", *bufptr);
  4004fc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 400540 <print_address_register+0xcc>
  400500:	4e0a      	ldr	r6, [pc, #40]	; (40052c <print_address_register+0xb8>)
  400502:	f814 1901 	ldrb.w	r1, [r4], #-1
  400506:	4640      	mov	r0, r8
  400508:	47b0      	blx	r6
		while(--bufptr >= buffer){
  40050a:	42a5      	cmp	r5, r4
  40050c:	d9f9      	bls.n	400502 <print_address_register+0x8e>
  40050e:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  400512:	464e      	mov	r6, r9
	while(qty--){
  400514:	45d1      	cmp	r9, sl
  400516:	d1be      	bne.n	400496 <print_address_register+0x22>
		}
	}
	printf("\r\n");
  400518:	4807      	ldr	r0, [pc, #28]	; (400538 <print_address_register+0xc4>)
  40051a:	4b04      	ldr	r3, [pc, #16]	; (40052c <print_address_register+0xb8>)
  40051c:	4798      	blx	r3
}
  40051e:	370c      	adds	r7, #12
  400520:	46bd      	mov	sp, r7
  400522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400526:	bf00      	nop
  400528:	00404ac0 	.word	0x00404ac0
  40052c:	00401c75 	.word	0x00401c75
  400530:	004002c5 	.word	0x004002c5
  400534:	00404ac4 	.word	0x00404ac4
  400538:	00404a94 	.word	0x00404a94
  40053c:	20400a9c 	.word	0x20400a9c
  400540:	00404ac8 	.word	0x00404ac8

00400544 <writeRegister>:
{
  400544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400546:	af00      	add	r7, sp, #0
	uint8_t p_buf[length+1];
  400548:	1c56      	adds	r6, r2, #1
  40054a:	f102 0308 	add.w	r3, r2, #8
  40054e:	f023 0307 	bic.w	r3, r3, #7
  400552:	ebad 0d03 	sub.w	sp, sp, r3
  400556:	466d      	mov	r5, sp
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400558:	f000 001f 	and.w	r0, r0, #31
  40055c:	f040 0020 	orr.w	r0, r0, #32
  400560:	f88d 0000 	strb.w	r0, [sp]
	for (uint8_t i = 0; i < length; i++)
  400564:	b152      	cbz	r2, 40057c <writeRegister+0x38>
  400566:	1e4b      	subs	r3, r1, #1
  400568:	1c68      	adds	r0, r5, #1
  40056a:	3a01      	subs	r2, #1
  40056c:	fa51 f482 	uxtab	r4, r1, r2
		p_buf[i+1] = (*buf++);
  400570:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400574:	f800 2b01 	strb.w	r2, [r0], #1
	for (uint8_t i = 0; i < length; i++)
  400578:	42a3      	cmp	r3, r4
  40057a:	d1f9      	bne.n	400570 <writeRegister+0x2c>
	spi_master_transfer(p_buf, sizeof(p_buf));
  40057c:	4631      	mov	r1, r6
  40057e:	4628      	mov	r0, r5
  400580:	4b02      	ldr	r3, [pc, #8]	; (40058c <writeRegister+0x48>)
  400582:	4798      	blx	r3
}
  400584:	7828      	ldrb	r0, [r5, #0]
  400586:	46bd      	mov	sp, r7
  400588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40058a:	bf00      	nop
  40058c:	004002c5 	.word	0x004002c5

00400590 <nRF24_readRegister>:
{
  400590:	b500      	push	{lr}
  400592:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  400594:	f000 001f 	and.w	r0, r0, #31
  400598:	f88d 0004 	strb.w	r0, [sp, #4]
  40059c:	23ff      	movs	r3, #255	; 0xff
  40059e:	f88d 3005 	strb.w	r3, [sp, #5]
	spi_master_transfer(&cmd, sizeof(cmd));
  4005a2:	2102      	movs	r1, #2
  4005a4:	a801      	add	r0, sp, #4
  4005a6:	4b03      	ldr	r3, [pc, #12]	; (4005b4 <nRF24_readRegister+0x24>)
  4005a8:	4798      	blx	r3
}
  4005aa:	f89d 0005 	ldrb.w	r0, [sp, #5]
  4005ae:	b003      	add	sp, #12
  4005b0:	f85d fb04 	ldr.w	pc, [sp], #4
  4005b4:	004002c5 	.word	0x004002c5

004005b8 <print_byte_register>:

static void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  4005b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005bc:	460d      	mov	r5, r1
  4005be:	4616      	mov	r6, r2
	printf("%s\t", name);
  4005c0:	4601      	mov	r1, r0
  4005c2:	480d      	ldr	r0, [pc, #52]	; (4005f8 <print_byte_register+0x40>)
  4005c4:	4b0d      	ldr	r3, [pc, #52]	; (4005fc <print_byte_register+0x44>)
  4005c6:	4798      	blx	r3
	while (qty--)
  4005c8:	b186      	cbz	r6, 4005ec <print_byte_register+0x34>
  4005ca:	442e      	add	r6, r5
  4005cc:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  4005ce:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400604 <print_byte_register+0x4c>
  4005d2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 400608 <print_byte_register+0x50>
  4005d6:	4f09      	ldr	r7, [pc, #36]	; (4005fc <print_byte_register+0x44>)
  4005d8:	1c6c      	adds	r4, r5, #1
  4005da:	b2e4      	uxtb	r4, r4
  4005dc:	4628      	mov	r0, r5
  4005de:	47c8      	blx	r9
  4005e0:	4601      	mov	r1, r0
  4005e2:	4640      	mov	r0, r8
  4005e4:	47b8      	blx	r7
  4005e6:	4625      	mov	r5, r4
	while (qty--)
  4005e8:	42a6      	cmp	r6, r4
  4005ea:	d1f5      	bne.n	4005d8 <print_byte_register+0x20>
	}
	printf("\r\n");
  4005ec:	4804      	ldr	r0, [pc, #16]	; (400600 <print_byte_register+0x48>)
  4005ee:	4b03      	ldr	r3, [pc, #12]	; (4005fc <print_byte_register+0x44>)
  4005f0:	4798      	blx	r3
  4005f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005f6:	bf00      	nop
  4005f8:	00404ac0 	.word	0x00404ac0
  4005fc:	00401c75 	.word	0x00401c75
  400600:	00404a94 	.word	0x00404a94
  400604:	00400591 	.word	0x00400591
  400608:	00404ad0 	.word	0x00404ad0

0040060c <nRF24_writeRegister>:
{
  40060c:	b500      	push	{lr}
  40060e:	b083      	sub	sp, #12
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400610:	f000 001f 	and.w	r0, r0, #31
  400614:	f040 0020 	orr.w	r0, r0, #32
  400618:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  40061c:	f88d 1005 	strb.w	r1, [sp, #5]
	spi_master_transfer(p_buf, sizeof(p_buf));
  400620:	2102      	movs	r1, #2
  400622:	a801      	add	r0, sp, #4
  400624:	4b03      	ldr	r3, [pc, #12]	; (400634 <nRF24_writeRegister+0x28>)
  400626:	4798      	blx	r3
}
  400628:	f89d 0004 	ldrb.w	r0, [sp, #4]
  40062c:	b003      	add	sp, #12
  40062e:	f85d fb04 	ldr.w	pc, [sp], #4
  400632:	bf00      	nop
  400634:	004002c5 	.word	0x004002c5

00400638 <nRF24_FlushRx>:
{
  400638:	b500      	push	{lr}
  40063a:	b083      	sub	sp, #12
	cmd = FLUSH_RX;
  40063c:	a802      	add	r0, sp, #8
  40063e:	23e2      	movs	r3, #226	; 0xe2
  400640:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400644:	2101      	movs	r1, #1
  400646:	4b03      	ldr	r3, [pc, #12]	; (400654 <nRF24_FlushRx+0x1c>)
  400648:	4798      	blx	r3
}
  40064a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40064e:	b003      	add	sp, #12
  400650:	f85d fb04 	ldr.w	pc, [sp], #4
  400654:	004002c5 	.word	0x004002c5

00400658 <nRF24_FlushTx>:
{
  400658:	b500      	push	{lr}
  40065a:	b083      	sub	sp, #12
	cmd = FLUSH_TX;
  40065c:	a802      	add	r0, sp, #8
  40065e:	23e1      	movs	r3, #225	; 0xe1
  400660:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400664:	2101      	movs	r1, #1
  400666:	4b03      	ldr	r3, [pc, #12]	; (400674 <nRF24_FlushTx+0x1c>)
  400668:	4798      	blx	r3
}
  40066a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40066e:	b003      	add	sp, #12
  400670:	f85d fb04 	ldr.w	pc, [sp], #4
  400674:	004002c5 	.word	0x004002c5

00400678 <nRF24_getStatus>:
{
  400678:	b500      	push	{lr}
  40067a:	b083      	sub	sp, #12
	cmd = RF24_NOP;
  40067c:	a802      	add	r0, sp, #8
  40067e:	23ff      	movs	r3, #255	; 0xff
  400680:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400684:	2101      	movs	r1, #1
  400686:	4b03      	ldr	r3, [pc, #12]	; (400694 <nRF24_getStatus+0x1c>)
  400688:	4798      	blx	r3
}
  40068a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40068e:	b003      	add	sp, #12
  400690:	f85d fb04 	ldr.w	pc, [sp], #4
  400694:	004002c5 	.word	0x004002c5

00400698 <nRF24_setDataRate>:
{
  400698:	b538      	push	{r3, r4, r5, lr}
  40069a:	4605      	mov	r5, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  40069c:	2006      	movs	r0, #6
  40069e:	4b0c      	ldr	r3, [pc, #48]	; (4006d0 <nRF24_setDataRate+0x38>)
  4006a0:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  4006a2:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	if (speed == RF24_2MBPS) {
  4006a6:	2d01      	cmp	r5, #1
  4006a8:	d00b      	beq.n	4006c2 <nRF24_setDataRate+0x2a>
	nRF24_writeRegister(RF_SETUP, setup);
  4006aa:	4621      	mov	r1, r4
  4006ac:	2006      	movs	r0, #6
  4006ae:	4b09      	ldr	r3, [pc, #36]	; (4006d4 <nRF24_setDataRate+0x3c>)
  4006b0:	4798      	blx	r3
	if(nRF24_readRegister(RF_SETUP) == setup)
  4006b2:	2006      	movs	r0, #6
  4006b4:	4b06      	ldr	r3, [pc, #24]	; (4006d0 <nRF24_setDataRate+0x38>)
  4006b6:	4798      	blx	r3
}
  4006b8:	4284      	cmp	r4, r0
  4006ba:	bf14      	ite	ne
  4006bc:	2000      	movne	r0, #0
  4006be:	2001      	moveq	r0, #1
  4006c0:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  4006c2:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  4006c6:	2241      	movs	r2, #65	; 0x41
  4006c8:	4b03      	ldr	r3, [pc, #12]	; (4006d8 <nRF24_setDataRate+0x40>)
  4006ca:	601a      	str	r2, [r3, #0]
  4006cc:	e7ed      	b.n	4006aa <nRF24_setDataRate+0x12>
  4006ce:	bf00      	nop
  4006d0:	00400591 	.word	0x00400591
  4006d4:	0040060d 	.word	0x0040060d
  4006d8:	20400aa8 	.word	0x20400aa8

004006dc <getDataRate>:
{
  4006dc:	b508      	push	{r3, lr}
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  4006de:	2006      	movs	r0, #6
  4006e0:	4b04      	ldr	r3, [pc, #16]	; (4006f4 <getDataRate+0x18>)
  4006e2:	4798      	blx	r3
	if (dr == (1<<RF_DR_HIGH)) {
  4006e4:	f000 0028 	and.w	r0, r0, #40	; 0x28
}
  4006e8:	2808      	cmp	r0, #8
  4006ea:	bf14      	ite	ne
  4006ec:	2000      	movne	r0, #0
  4006ee:	2001      	moveq	r0, #1
  4006f0:	bd08      	pop	{r3, pc}
  4006f2:	bf00      	nop
  4006f4:	00400591 	.word	0x00400591

004006f8 <nRF24_setCRCLength>:
{
  4006f8:	b510      	push	{r4, lr}
  4006fa:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  4006fc:	2000      	movs	r0, #0
  4006fe:	4b07      	ldr	r3, [pc, #28]	; (40071c <nRF24_setCRCLength+0x24>)
  400700:	4798      	blx	r3
  400702:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	if (length == RF24_CRC_DISABLED){
  400706:	b12c      	cbz	r4, 400714 <nRF24_setCRCLength+0x1c>
	else if (length == RF24_CRC_8){
  400708:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  40070a:	bf0c      	ite	eq
  40070c:	f041 0108 	orreq.w	r1, r1, #8
		config |= (1<<CRCO);
  400710:	f041 010c 	orrne.w	r1, r1, #12
	nRF24_writeRegister(NRF_CONFIG, config);
  400714:	2000      	movs	r0, #0
  400716:	4b02      	ldr	r3, [pc, #8]	; (400720 <nRF24_setCRCLength+0x28>)
  400718:	4798      	blx	r3
  40071a:	bd10      	pop	{r4, pc}
  40071c:	00400591 	.word	0x00400591
  400720:	0040060d 	.word	0x0040060d

00400724 <getCRCLength>:
{
  400724:	b538      	push	{r3, r4, r5, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  400726:	2000      	movs	r0, #0
  400728:	4d08      	ldr	r5, [pc, #32]	; (40074c <getCRCLength+0x28>)
  40072a:	47a8      	blx	r5
  40072c:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  40072e:	2001      	movs	r0, #1
  400730:	47a8      	blx	r5
    if (config & (1<<EN_CRC) || AA) {
  400732:	f014 0f08 	tst.w	r4, #8
  400736:	d102      	bne.n	40073e <getCRCLength+0x1a>
  400738:	b908      	cbnz	r0, 40073e <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  40073a:	2000      	movs	r0, #0
}
  40073c:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  40073e:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  400742:	2c00      	cmp	r4, #0
  400744:	bf14      	ite	ne
  400746:	2002      	movne	r0, #2
  400748:	2001      	moveq	r0, #1
  40074a:	bd38      	pop	{r3, r4, r5, pc}
  40074c:	00400591 	.word	0x00400591

00400750 <nRF24_setPALevel>:
{
  400750:	b510      	push	{r4, lr}
  400752:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  400754:	2006      	movs	r0, #6
  400756:	4b08      	ldr	r3, [pc, #32]	; (400778 <nRF24_setPALevel+0x28>)
  400758:	4798      	blx	r3
  40075a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	if (level > 3) {
  40075e:	2c03      	cmp	r4, #3
  400760:	d808      	bhi.n	400774 <nRF24_setPALevel+0x24>
		level = (level << 1) + 1;
  400762:	0064      	lsls	r4, r4, #1
  400764:	3401      	adds	r4, #1
  400766:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	nRF24_writeRegister(RF_SETUP, setup |= level);
  40076a:	4321      	orrs	r1, r4
  40076c:	2006      	movs	r0, #6
  40076e:	4b03      	ldr	r3, [pc, #12]	; (40077c <nRF24_setPALevel+0x2c>)
  400770:	4798      	blx	r3
  400772:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  400774:	2407      	movs	r4, #7
  400776:	e7f8      	b.n	40076a <nRF24_setPALevel+0x1a>
  400778:	00400591 	.word	0x00400591
  40077c:	0040060d 	.word	0x0040060d

00400780 <nRF24_getPALevel>:
{
  400780:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  400782:	2006      	movs	r0, #6
  400784:	4b02      	ldr	r3, [pc, #8]	; (400790 <nRF24_getPALevel+0x10>)
  400786:	4798      	blx	r3
}
  400788:	f3c0 0041 	ubfx	r0, r0, #1, #2
  40078c:	bd08      	pop	{r3, pc}
  40078e:	bf00      	nop
  400790:	00400591 	.word	0x00400591

00400794 <printDetails>:
}

void printDetails(void)
{
  400794:	b570      	push	{r4, r5, r6, lr}
  400796:	b084      	sub	sp, #16
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  400798:	4b31      	ldr	r3, [pc, #196]	; (400860 <printDetails+0xcc>)
  40079a:	6819      	ldr	r1, [r3, #0]
  40079c:	4b31      	ldr	r3, [pc, #196]	; (400864 <printDetails+0xd0>)
  40079e:	fba3 3101 	umull	r3, r1, r3, r1
  4007a2:	0c89      	lsrs	r1, r1, #18
  4007a4:	4830      	ldr	r0, [pc, #192]	; (400868 <printDetails+0xd4>)
  4007a6:	4d31      	ldr	r5, [pc, #196]	; (40086c <printDetails+0xd8>)
  4007a8:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  4007aa:	4b31      	ldr	r3, [pc, #196]	; (400870 <printDetails+0xdc>)
  4007ac:	4798      	blx	r3
  4007ae:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  4007b0:	f000 0301 	and.w	r3, r0, #1
  4007b4:	9302      	str	r3, [sp, #8]
  4007b6:	f3c0 0340 	ubfx	r3, r0, #1, #1
  4007ba:	9301      	str	r3, [sp, #4]
  4007bc:	f3c0 1300 	ubfx	r3, r0, #4, #1
  4007c0:	9300      	str	r3, [sp, #0]
  4007c2:	f3c0 1340 	ubfx	r3, r0, #5, #1
  4007c6:	f3c0 1280 	ubfx	r2, r0, #6, #1
  4007ca:	482a      	ldr	r0, [pc, #168]	; (400874 <printDetails+0xe0>)
  4007cc:	47a8      	blx	r5
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  4007ce:	2202      	movs	r2, #2
  4007d0:	210a      	movs	r1, #10
  4007d2:	4829      	ldr	r0, [pc, #164]	; (400878 <printDetails+0xe4>)
  4007d4:	4e29      	ldr	r6, [pc, #164]	; (40087c <printDetails+0xe8>)
  4007d6:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  4007d8:	2204      	movs	r2, #4
  4007da:	210c      	movs	r1, #12
  4007dc:	4828      	ldr	r0, [pc, #160]	; (400880 <printDetails+0xec>)
  4007de:	4c29      	ldr	r4, [pc, #164]	; (400884 <printDetails+0xf0>)
  4007e0:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  4007e2:	2201      	movs	r2, #1
  4007e4:	2110      	movs	r1, #16
  4007e6:	4828      	ldr	r0, [pc, #160]	; (400888 <printDetails+0xf4>)
  4007e8:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  4007ea:	2206      	movs	r2, #6
  4007ec:	2111      	movs	r1, #17
  4007ee:	4827      	ldr	r0, [pc, #156]	; (40088c <printDetails+0xf8>)
  4007f0:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  4007f2:	2201      	movs	r2, #1
  4007f4:	2103      	movs	r1, #3
  4007f6:	4826      	ldr	r0, [pc, #152]	; (400890 <printDetails+0xfc>)
  4007f8:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  4007fa:	2201      	movs	r2, #1
  4007fc:	4611      	mov	r1, r2
  4007fe:	4825      	ldr	r0, [pc, #148]	; (400894 <printDetails+0x100>)
  400800:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  400802:	2201      	movs	r2, #1
  400804:	2102      	movs	r1, #2
  400806:	4824      	ldr	r0, [pc, #144]	; (400898 <printDetails+0x104>)
  400808:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  40080a:	2201      	movs	r2, #1
  40080c:	2105      	movs	r1, #5
  40080e:	4823      	ldr	r0, [pc, #140]	; (40089c <printDetails+0x108>)
  400810:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  400812:	2201      	movs	r2, #1
  400814:	2106      	movs	r1, #6
  400816:	4822      	ldr	r0, [pc, #136]	; (4008a0 <printDetails+0x10c>)
  400818:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  40081a:	2201      	movs	r2, #1
  40081c:	2100      	movs	r1, #0
  40081e:	4821      	ldr	r0, [pc, #132]	; (4008a4 <printDetails+0x110>)
  400820:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  400822:	2202      	movs	r2, #2
  400824:	211c      	movs	r1, #28
  400826:	4820      	ldr	r0, [pc, #128]	; (4008a8 <printDetails+0x114>)
  400828:	47a0      	blx	r4
	
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  40082a:	4b20      	ldr	r3, [pc, #128]	; (4008ac <printDetails+0x118>)
  40082c:	4798      	blx	r3
  40082e:	4b20      	ldr	r3, [pc, #128]	; (4008b0 <printDetails+0x11c>)
  400830:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  400834:	481f      	ldr	r0, [pc, #124]	; (4008b4 <printDetails+0x120>)
  400836:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  400838:	491f      	ldr	r1, [pc, #124]	; (4008b8 <printDetails+0x124>)
  40083a:	4820      	ldr	r0, [pc, #128]	; (4008bc <printDetails+0x128>)
  40083c:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  40083e:	4b20      	ldr	r3, [pc, #128]	; (4008c0 <printDetails+0x12c>)
  400840:	4798      	blx	r3
  400842:	4b20      	ldr	r3, [pc, #128]	; (4008c4 <printDetails+0x130>)
  400844:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  400848:	481f      	ldr	r0, [pc, #124]	; (4008c8 <printDetails+0x134>)
  40084a:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  40084c:	4b1f      	ldr	r3, [pc, #124]	; (4008cc <printDetails+0x138>)
  40084e:	4798      	blx	r3
  400850:	4b1f      	ldr	r3, [pc, #124]	; (4008d0 <printDetails+0x13c>)
  400852:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  400856:	481f      	ldr	r0, [pc, #124]	; (4008d4 <printDetails+0x140>)
  400858:	47a8      	blx	r5
}
  40085a:	b004      	add	sp, #16
  40085c:	bd70      	pop	{r4, r5, r6, pc}
  40085e:	bf00      	nop
  400860:	2040000c 	.word	0x2040000c
  400864:	431bde83 	.word	0x431bde83
  400868:	00404990 	.word	0x00404990
  40086c:	00401c75 	.word	0x00401c75
  400870:	00400679 	.word	0x00400679
  400874:	004049a8 	.word	0x004049a8
  400878:	004049f0 	.word	0x004049f0
  40087c:	00400475 	.word	0x00400475
  400880:	00404a00 	.word	0x00404a00
  400884:	004005b9 	.word	0x004005b9
  400888:	00404a10 	.word	0x00404a10
  40088c:	00404a1c 	.word	0x00404a1c
  400890:	00404a28 	.word	0x00404a28
  400894:	00404a34 	.word	0x00404a34
  400898:	00404a3c 	.word	0x00404a3c
  40089c:	00404a48 	.word	0x00404a48
  4008a0:	00404a50 	.word	0x00404a50
  4008a4:	00404a5c 	.word	0x00404a5c
  4008a8:	00404a64 	.word	0x00404a64
  4008ac:	004006dd 	.word	0x004006dd
  4008b0:	00404b18 	.word	0x00404b18
  4008b4:	00404a74 	.word	0x00404a74
  4008b8:	00404b24 	.word	0x00404b24
  4008bc:	00404a88 	.word	0x00404a88
  4008c0:	00400725 	.word	0x00400725
  4008c4:	00404af4 	.word	0x00404af4
  4008c8:	00404a98 	.word	0x00404a98
  4008cc:	00400781 	.word	0x00400781
  4008d0:	00404b50 	.word	0x00404b50
  4008d4:	00404aac 	.word	0x00404aac

004008d8 <nRF24_setAddressWidth>:
 * 
 * \param width address width
 *
 */
void nRF24_setAddressWidth(uint8_t width)
{
  4008d8:	b510      	push	{r4, lr}
	if (width -= 2){
  4008da:	3802      	subs	r0, #2
  4008dc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  4008e0:	d107      	bne.n	4008f2 <nRF24_setAddressWidth+0x1a>
		nRF24_writeRegister(SETUP_AW, width % 4);
		addr_width = (width % 4) + 2;
		} else {
		nRF24_writeRegister(SETUP_AW, 0);
  4008e2:	2100      	movs	r1, #0
  4008e4:	2003      	movs	r0, #3
  4008e6:	4b08      	ldr	r3, [pc, #32]	; (400908 <nRF24_setAddressWidth+0x30>)
  4008e8:	4798      	blx	r3
		addr_width = 2;
  4008ea:	2202      	movs	r2, #2
  4008ec:	4b07      	ldr	r3, [pc, #28]	; (40090c <nRF24_setAddressWidth+0x34>)
  4008ee:	701a      	strb	r2, [r3, #0]
  4008f0:	bd10      	pop	{r4, pc}
		nRF24_writeRegister(SETUP_AW, width % 4);
  4008f2:	f000 0403 	and.w	r4, r0, #3
  4008f6:	4621      	mov	r1, r4
  4008f8:	2003      	movs	r0, #3
  4008fa:	4b03      	ldr	r3, [pc, #12]	; (400908 <nRF24_setAddressWidth+0x30>)
  4008fc:	4798      	blx	r3
		addr_width = (width % 4) + 2;
  4008fe:	1ca0      	adds	r0, r4, #2
  400900:	4b02      	ldr	r3, [pc, #8]	; (40090c <nRF24_setAddressWidth+0x34>)
  400902:	7018      	strb	r0, [r3, #0]
  400904:	bd10      	pop	{r4, pc}
  400906:	bf00      	nop
  400908:	0040060d 	.word	0x0040060d
  40090c:	20400a9c 	.word	0x20400a9c

00400910 <toggle_features>:
/**
 * \brief toggels ACK features
 *
 */
void toggle_features(void)
{
  400910:	b500      	push	{lr}
  400912:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  400914:	4b05      	ldr	r3, [pc, #20]	; (40092c <toggle_features+0x1c>)
  400916:	881b      	ldrh	r3, [r3, #0]
  400918:	a802      	add	r0, sp, #8
  40091a:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  40091e:	2102      	movs	r1, #2
  400920:	4b03      	ldr	r3, [pc, #12]	; (400930 <toggle_features+0x20>)
  400922:	4798      	blx	r3
}
  400924:	b003      	add	sp, #12
  400926:	f85d fb04 	ldr.w	pc, [sp], #4
  40092a:	bf00      	nop
  40092c:	00404974 	.word	0x00404974
  400930:	004002c5 	.word	0x004002c5

00400934 <nRF24_setChannel>:
 * 
 * \param channel ferquency channel used
 *
 */
void nRF24_setChannel(uint8_t channel)
{
  400934:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  400936:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  400938:	bf8c      	ite	hi
  40093a:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  40093c:	4601      	movls	r1, r0
  40093e:	2005      	movs	r0, #5
  400940:	4b01      	ldr	r3, [pc, #4]	; (400948 <nRF24_setChannel+0x14>)
  400942:	4798      	blx	r3
  400944:	bd08      	pop	{r3, pc}
  400946:	bf00      	nop
  400948:	0040060d 	.word	0x0040060d

0040094c <nRF24_powerUp>:
/**
 * \brief power up the internal logic of the nRF24 chip
 * 
 */
void nRF24_powerUp(void)
{
  40094c:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  40094e:	2000      	movs	r0, #0
  400950:	4b07      	ldr	r3, [pc, #28]	; (400970 <nRF24_powerUp+0x24>)
  400952:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  400954:	f010 0f02 	tst.w	r0, #2
  400958:	d000      	beq.n	40095c <nRF24_powerUp+0x10>
  40095a:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  40095c:	f040 0102 	orr.w	r1, r0, #2
  400960:	b2c9      	uxtb	r1, r1
  400962:	2000      	movs	r0, #0
  400964:	4b03      	ldr	r3, [pc, #12]	; (400974 <nRF24_powerUp+0x28>)
  400966:	4798      	blx	r3
		delay_ms(5);
  400968:	4803      	ldr	r0, [pc, #12]	; (400978 <nRF24_powerUp+0x2c>)
  40096a:	4b04      	ldr	r3, [pc, #16]	; (40097c <nRF24_powerUp+0x30>)
  40096c:	4798      	blx	r3
	}
}
  40096e:	e7f4      	b.n	40095a <nRF24_powerUp+0xe>
  400970:	00400591 	.word	0x00400591
  400974:	0040060d 	.word	0x0040060d
  400978:	0003dbc2 	.word	0x0003dbc2
  40097c:	20400001 	.word	0x20400001

00400980 <nRF24_stopListening>:
/**
 * \brief use the nRF24 module as transmitter
 *
 */
void nRF24_stopListening(void)
{
  400980:	b538      	push	{r3, r4, r5, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400982:	f44f 7200 	mov.w	r2, #512	; 0x200
  400986:	4b21      	ldr	r3, [pc, #132]	; (400a0c <nRF24_stopListening+0x8c>)
  400988:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	
	delay_us(txDelay);
  40098a:	4b21      	ldr	r3, [pc, #132]	; (400a10 <nRF24_stopListening+0x90>)
  40098c:	6819      	ldr	r1, [r3, #0]
  40098e:	2900      	cmp	r1, #0
  400990:	d034      	beq.n	4009fc <nRF24_stopListening+0x7c>
  400992:	4a20      	ldr	r2, [pc, #128]	; (400a14 <nRF24_stopListening+0x94>)
  400994:	2300      	movs	r3, #0
  400996:	4c20      	ldr	r4, [pc, #128]	; (400a18 <nRF24_stopListening+0x98>)
  400998:	2500      	movs	r5, #0
  40099a:	4820      	ldr	r0, [pc, #128]	; (400a1c <nRF24_stopListening+0x9c>)
  40099c:	fbe0 4501 	umlal	r4, r5, r0, r1
  4009a0:	4620      	mov	r0, r4
  4009a2:	4629      	mov	r1, r5
  4009a4:	4c1e      	ldr	r4, [pc, #120]	; (400a20 <nRF24_stopListening+0xa0>)
  4009a6:	47a0      	blx	r4
  4009a8:	4b1e      	ldr	r3, [pc, #120]	; (400a24 <nRF24_stopListening+0xa4>)
  4009aa:	4798      	blx	r3
	if (nRF24_readRegister(FEATURE) & 1<<(EN_ACK_PAY))
  4009ac:	201d      	movs	r0, #29
  4009ae:	4b1e      	ldr	r3, [pc, #120]	; (400a28 <nRF24_stopListening+0xa8>)
  4009b0:	4798      	blx	r3
  4009b2:	f010 0f02 	tst.w	r0, #2
  4009b6:	d011      	beq.n	4009dc <nRF24_stopListening+0x5c>
	{
		delay_us(txDelay);
  4009b8:	4b15      	ldr	r3, [pc, #84]	; (400a10 <nRF24_stopListening+0x90>)
  4009ba:	6819      	ldr	r1, [r3, #0]
  4009bc:	b311      	cbz	r1, 400a04 <nRF24_stopListening+0x84>
  4009be:	4a15      	ldr	r2, [pc, #84]	; (400a14 <nRF24_stopListening+0x94>)
  4009c0:	2300      	movs	r3, #0
  4009c2:	4c15      	ldr	r4, [pc, #84]	; (400a18 <nRF24_stopListening+0x98>)
  4009c4:	2500      	movs	r5, #0
  4009c6:	4815      	ldr	r0, [pc, #84]	; (400a1c <nRF24_stopListening+0x9c>)
  4009c8:	fbe0 4501 	umlal	r4, r5, r0, r1
  4009cc:	4620      	mov	r0, r4
  4009ce:	4629      	mov	r1, r5
  4009d0:	4c13      	ldr	r4, [pc, #76]	; (400a20 <nRF24_stopListening+0xa0>)
  4009d2:	47a0      	blx	r4
  4009d4:	4b13      	ldr	r3, [pc, #76]	; (400a24 <nRF24_stopListening+0xa4>)
  4009d6:	4798      	blx	r3
		nRF24_FlushTx();
  4009d8:	4b14      	ldr	r3, [pc, #80]	; (400a2c <nRF24_stopListening+0xac>)
  4009da:	4798      	blx	r3
	}
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4009dc:	2000      	movs	r0, #0
  4009de:	4d12      	ldr	r5, [pc, #72]	; (400a28 <nRF24_stopListening+0xa8>)
  4009e0:	47a8      	blx	r5
  4009e2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4009e6:	2000      	movs	r0, #0
  4009e8:	4c11      	ldr	r4, [pc, #68]	; (400a30 <nRF24_stopListening+0xb0>)
  4009ea:	47a0      	blx	r4
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
  4009ec:	2002      	movs	r0, #2
  4009ee:	47a8      	blx	r5
  4009f0:	f040 0101 	orr.w	r1, r0, #1
  4009f4:	b2c9      	uxtb	r1, r1
  4009f6:	2002      	movs	r0, #2
  4009f8:	47a0      	blx	r4
  4009fa:	bd38      	pop	{r3, r4, r5, pc}
	delay_us(txDelay);
  4009fc:	2033      	movs	r0, #51	; 0x33
  4009fe:	4b09      	ldr	r3, [pc, #36]	; (400a24 <nRF24_stopListening+0xa4>)
  400a00:	4798      	blx	r3
  400a02:	e7d3      	b.n	4009ac <nRF24_stopListening+0x2c>
		delay_us(txDelay);
  400a04:	2033      	movs	r0, #51	; 0x33
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <nRF24_stopListening+0xa4>)
  400a08:	4798      	blx	r3
  400a0a:	e7e5      	b.n	4009d8 <nRF24_stopListening+0x58>
  400a0c:	400e1200 	.word	0x400e1200
  400a10:	20400aa8 	.word	0x20400aa8
  400a14:	005a83e0 	.word	0x005a83e0
  400a18:	005a83df 	.word	0x005a83df
  400a1c:	11e1a300 	.word	0x11e1a300
  400a20:	00401915 	.word	0x00401915
  400a24:	20400001 	.word	0x20400001
  400a28:	00400591 	.word	0x00400591
  400a2c:	00400659 	.word	0x00400659
  400a30:	0040060d 	.word	0x0040060d

00400a34 <nRF24_begin>:
 * address width: 32 bit / 4 bytes
 * 
 * \return 1 if nRF24 module reacts to data
 */
bool nRF24_begin(void)
{
  400a34:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a36:	4b1a      	ldr	r3, [pc, #104]	; (400aa0 <nRF24_begin+0x6c>)
  400a38:	f44f 7200 	mov.w	r2, #512	; 0x200
  400a3c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a42:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  400a44:	210c      	movs	r1, #12
  400a46:	2000      	movs	r0, #0
  400a48:	4c16      	ldr	r4, [pc, #88]	; (400aa4 <nRF24_begin+0x70>)
  400a4a:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  400a4c:	215f      	movs	r1, #95	; 0x5f
  400a4e:	2004      	movs	r0, #4
  400a50:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  400a52:	2000      	movs	r0, #0
  400a54:	4b14      	ldr	r3, [pc, #80]	; (400aa8 <nRF24_begin+0x74>)
  400a56:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  400a58:	2002      	movs	r0, #2
  400a5a:	4b14      	ldr	r3, [pc, #80]	; (400aac <nRF24_begin+0x78>)
  400a5c:	4798      	blx	r3
	toggle_features();
  400a5e:	4b14      	ldr	r3, [pc, #80]	; (400ab0 <nRF24_begin+0x7c>)
  400a60:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  400a62:	2170      	movs	r1, #112	; 0x70
  400a64:	2007      	movs	r0, #7
  400a66:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  400a68:	204c      	movs	r0, #76	; 0x4c
  400a6a:	4b12      	ldr	r3, [pc, #72]	; (400ab4 <nRF24_begin+0x80>)
  400a6c:	4798      	blx	r3
	nRF24_setAddressWidth(ADDR_4bytes);
  400a6e:	2004      	movs	r0, #4
  400a70:	4b11      	ldr	r3, [pc, #68]	; (400ab8 <nRF24_begin+0x84>)
  400a72:	4798      	blx	r3
	
	nRF24_FlushRx();
  400a74:	4b11      	ldr	r3, [pc, #68]	; (400abc <nRF24_begin+0x88>)
  400a76:	4798      	blx	r3
	nRF24_FlushTx();
  400a78:	4b11      	ldr	r3, [pc, #68]	; (400ac0 <nRF24_begin+0x8c>)
  400a7a:	4798      	blx	r3
	
	nRF24_powerUp();
  400a7c:	4b11      	ldr	r3, [pc, #68]	; (400ac4 <nRF24_begin+0x90>)
  400a7e:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  400a80:	2000      	movs	r0, #0
  400a82:	4d11      	ldr	r5, [pc, #68]	; (400ac8 <nRF24_begin+0x94>)
  400a84:	47a8      	blx	r5
  400a86:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  400a8a:	2000      	movs	r0, #0
  400a8c:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  400a8e:	2006      	movs	r0, #6
  400a90:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  400a92:	3801      	subs	r0, #1
  400a94:	b2c0      	uxtb	r0, r0
}
  400a96:	28fd      	cmp	r0, #253	; 0xfd
  400a98:	bf8c      	ite	hi
  400a9a:	2000      	movhi	r0, #0
  400a9c:	2001      	movls	r0, #1
  400a9e:	bd38      	pop	{r3, r4, r5, pc}
  400aa0:	400e1200 	.word	0x400e1200
  400aa4:	0040060d 	.word	0x0040060d
  400aa8:	00400699 	.word	0x00400699
  400aac:	004006f9 	.word	0x004006f9
  400ab0:	00400911 	.word	0x00400911
  400ab4:	00400935 	.word	0x00400935
  400ab8:	004008d9 	.word	0x004008d9
  400abc:	00400639 	.word	0x00400639
  400ac0:	00400659 	.word	0x00400659
  400ac4:	0040094d 	.word	0x0040094d
  400ac8:	00400591 	.word	0x00400591

00400acc <nRF24_openWritingPipe>:
 * 
 * \param address address of the receiving module
 *
 */
void nRF24_openWritingPipe(uint64_t address)
{
  400acc:	b570      	push	{r4, r5, r6, lr}
  400ace:	b082      	sub	sp, #8
  400ad0:	ac02      	add	r4, sp, #8
  400ad2:	e964 0102 	strd	r0, r1, [r4, #-8]!
	writeRegister(RX_ADDR_P0, (uint8_t *)(&address), addr_width);
  400ad6:	4e08      	ldr	r6, [pc, #32]	; (400af8 <nRF24_openWritingPipe+0x2c>)
  400ad8:	7832      	ldrb	r2, [r6, #0]
  400ada:	4621      	mov	r1, r4
  400adc:	200a      	movs	r0, #10
  400ade:	4d07      	ldr	r5, [pc, #28]	; (400afc <nRF24_openWritingPipe+0x30>)
  400ae0:	47a8      	blx	r5
	writeRegister(TX_ADDR, (uint8_t *)(&address), addr_width);
  400ae2:	7832      	ldrb	r2, [r6, #0]
  400ae4:	4621      	mov	r1, r4
  400ae6:	2010      	movs	r0, #16
  400ae8:	47a8      	blx	r5
	
	nRF24_writeRegister(RX_PW_P0, payload_size);
  400aea:	4b05      	ldr	r3, [pc, #20]	; (400b00 <nRF24_openWritingPipe+0x34>)
  400aec:	7819      	ldrb	r1, [r3, #0]
  400aee:	2011      	movs	r0, #17
  400af0:	4b04      	ldr	r3, [pc, #16]	; (400b04 <nRF24_openWritingPipe+0x38>)
  400af2:	4798      	blx	r3
}
  400af4:	b002      	add	sp, #8
  400af6:	bd70      	pop	{r4, r5, r6, pc}
  400af8:	20400a9c 	.word	0x20400a9c
  400afc:	00400545 	.word	0x00400545
  400b00:	20400010 	.word	0x20400010
  400b04:	0040060d 	.word	0x0040060d

00400b08 <nRF24_openReadingPipe>:
 * 
 * \param address address of the transmitting module
 *
 */
void nRF24_openReadingPipe(uint8_t pipe, uint64_t address)
{	
  400b08:	b510      	push	{r4, lr}
  400b0a:	b082      	sub	sp, #8
  400b0c:	e9cd 2300 	strd	r2, r3, [sp]
	if (pipe == 0){
  400b10:	4604      	mov	r4, r0
  400b12:	b1e8      	cbz	r0, 400b50 <nRF24_openReadingPipe+0x48>
		memcpy(pipe0_reading_address, &address, addr_width);
	}
	if (pipe <= 5){
  400b14:	2805      	cmp	r0, #5
  400b16:	d80d      	bhi.n	400b34 <nRF24_openReadingPipe+0x2c>
		if (pipe < 2){
  400b18:	2801      	cmp	r0, #1
  400b1a:	d91f      	bls.n	400b5c <nRF24_openReadingPipe+0x54>
			writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
		} else {
			writeRegister(pipe_s[pipe], (const uint8_t *) (&address), 1);
  400b1c:	2201      	movs	r2, #1
  400b1e:	4669      	mov	r1, sp
  400b20:	4b12      	ldr	r3, [pc, #72]	; (400b6c <nRF24_openReadingPipe+0x64>)
  400b22:	5c18      	ldrb	r0, [r3, r0]
  400b24:	4b12      	ldr	r3, [pc, #72]	; (400b70 <nRF24_openReadingPipe+0x68>)
  400b26:	4798      	blx	r3
		}
		nRF24_writeRegister(pipe_size_s[pipe], payload_size);
  400b28:	4b12      	ldr	r3, [pc, #72]	; (400b74 <nRF24_openReadingPipe+0x6c>)
  400b2a:	7819      	ldrb	r1, [r3, #0]
  400b2c:	4b12      	ldr	r3, [pc, #72]	; (400b78 <nRF24_openReadingPipe+0x70>)
  400b2e:	5d18      	ldrb	r0, [r3, r4]
  400b30:	4b12      	ldr	r3, [pc, #72]	; (400b7c <nRF24_openReadingPipe+0x74>)
  400b32:	4798      	blx	r3
	}
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1 << pipe_enable_s[pipe]));
  400b34:	2002      	movs	r0, #2
  400b36:	4b12      	ldr	r3, [pc, #72]	; (400b80 <nRF24_openReadingPipe+0x78>)
  400b38:	4798      	blx	r3
  400b3a:	4b12      	ldr	r3, [pc, #72]	; (400b84 <nRF24_openReadingPipe+0x7c>)
  400b3c:	5d1b      	ldrb	r3, [r3, r4]
  400b3e:	2101      	movs	r1, #1
  400b40:	4099      	lsls	r1, r3
  400b42:	4301      	orrs	r1, r0
  400b44:	b2c9      	uxtb	r1, r1
  400b46:	2002      	movs	r0, #2
  400b48:	4b0c      	ldr	r3, [pc, #48]	; (400b7c <nRF24_openReadingPipe+0x74>)
  400b4a:	4798      	blx	r3
}
  400b4c:	b002      	add	sp, #8
  400b4e:	bd10      	pop	{r4, pc}
		memcpy(pipe0_reading_address, &address, addr_width);
  400b50:	4b0d      	ldr	r3, [pc, #52]	; (400b88 <nRF24_openReadingPipe+0x80>)
  400b52:	781a      	ldrb	r2, [r3, #0]
  400b54:	4669      	mov	r1, sp
  400b56:	480d      	ldr	r0, [pc, #52]	; (400b8c <nRF24_openReadingPipe+0x84>)
  400b58:	4b0d      	ldr	r3, [pc, #52]	; (400b90 <nRF24_openReadingPipe+0x88>)
  400b5a:	4798      	blx	r3
			writeRegister(pipe_s[pipe], (const uint8_t *) (&address), addr_width);
  400b5c:	4b0a      	ldr	r3, [pc, #40]	; (400b88 <nRF24_openReadingPipe+0x80>)
  400b5e:	781a      	ldrb	r2, [r3, #0]
  400b60:	4669      	mov	r1, sp
  400b62:	4b02      	ldr	r3, [pc, #8]	; (400b6c <nRF24_openReadingPipe+0x64>)
  400b64:	5d18      	ldrb	r0, [r3, r4]
  400b66:	4b02      	ldr	r3, [pc, #8]	; (400b70 <nRF24_openReadingPipe+0x68>)
  400b68:	4798      	blx	r3
  400b6a:	e7dd      	b.n	400b28 <nRF24_openReadingPipe+0x20>
  400b6c:	00404980 	.word	0x00404980
  400b70:	00400545 	.word	0x00400545
  400b74:	20400010 	.word	0x20400010
  400b78:	00404988 	.word	0x00404988
  400b7c:	0040060d 	.word	0x0040060d
  400b80:	00400591 	.word	0x00400591
  400b84:	00404978 	.word	0x00404978
  400b88:	20400a9c 	.word	0x20400a9c
  400b8c:	20400aa0 	.word	0x20400aa0
  400b90:	00401c9d 	.word	0x00401c9d

00400b94 <nRF24_write>:
 * \param buf: pointer to the data buffer
 * \param len: length of the payload to be written
 *
 */
bool nRF24_write(const void* buf, uint8_t len)
{
  400b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b96:	af00      	add	r7, sp, #0
{
  400b98:	466e      	mov	r6, sp
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  400b9a:	4b24      	ldr	r3, [pc, #144]	; (400c2c <nRF24_write+0x98>)
  400b9c:	781b      	ldrb	r3, [r3, #0]
  400b9e:	bb53      	cbnz	r3, 400bf6 <nRF24_write+0x62>
  400ba0:	4b23      	ldr	r3, [pc, #140]	; (400c30 <nRF24_write+0x9c>)
  400ba2:	781b      	ldrb	r3, [r3, #0]
  400ba4:	1a5b      	subs	r3, r3, r1
  400ba6:	b2db      	uxtb	r3, r3
	uint8_t size = data_len + blanklen + 1;
  400ba8:	3101      	adds	r1, #1
  400baa:	4419      	add	r1, r3
  400bac:	b2c9      	uxtb	r1, r1
	uint8_t s_buff[size];
  400bae:	1dcb      	adds	r3, r1, #7
  400bb0:	f023 0307 	bic.w	r3, r3, #7
  400bb4:	ebad 0d03 	sub.w	sp, sp, r3
  400bb8:	46ee      	mov	lr, sp
	s_buff[0] = writeType;
  400bba:	23a0      	movs	r3, #160	; 0xa0
  400bbc:	f88d 3000 	strb.w	r3, [sp]
	for (uint8_t i = 1; i< size; i++)
  400bc0:	2901      	cmp	r1, #1
  400bc2:	d90b      	bls.n	400bdc <nRF24_write+0x48>
  400bc4:	1e43      	subs	r3, r0, #1
  400bc6:	f10d 0201 	add.w	r2, sp, #1
  400bca:	1e8d      	subs	r5, r1, #2
  400bcc:	fa50 f585 	uxtab	r5, r0, r5
		s_buff[i] = current[i-1];
  400bd0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  400bd4:	f802 4b01 	strb.w	r4, [r2], #1
	for (uint8_t i = 1; i< size; i++)
  400bd8:	42ab      	cmp	r3, r5
  400bda:	d1f9      	bne.n	400bd0 <nRF24_write+0x3c>
	spi_master_transfer(s_buff, size);
  400bdc:	4670      	mov	r0, lr
  400bde:	4b15      	ldr	r3, [pc, #84]	; (400c34 <nRF24_write+0xa0>)
  400be0:	4798      	blx	r3
  400be2:	46b5      	mov	sp, r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400be4:	f44f 7200 	mov.w	r2, #512	; 0x200
  400be8:	4b13      	ldr	r3, [pc, #76]	; (400c38 <nRF24_write+0xa4>)
  400bea:	631a      	str	r2, [r3, #48]	; 0x30
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  400bec:	4c13      	ldr	r4, [pc, #76]	; (400c3c <nRF24_write+0xa8>)
		delay_us(100);
  400bee:	f241 36c2 	movw	r6, #5058	; 0x13c2
  400bf2:	4d13      	ldr	r5, [pc, #76]	; (400c40 <nRF24_write+0xac>)
  400bf4:	e003      	b.n	400bfe <nRF24_write+0x6a>
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  400bf6:	2300      	movs	r3, #0
  400bf8:	e7d6      	b.n	400ba8 <nRF24_write+0x14>
		delay_us(100);
  400bfa:	4630      	mov	r0, r6
  400bfc:	47a8      	blx	r5
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  400bfe:	47a0      	blx	r4
  400c00:	f010 0f30 	tst.w	r0, #48	; 0x30
  400c04:	d0f9      	beq.n	400bfa <nRF24_write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c06:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c0a:	4b0b      	ldr	r3, [pc, #44]	; (400c38 <nRF24_write+0xa4>)
  400c0c:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t status = nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  400c0e:	2170      	movs	r1, #112	; 0x70
  400c10:	2007      	movs	r0, #7
  400c12:	4b0c      	ldr	r3, [pc, #48]	; (400c44 <nRF24_write+0xb0>)
  400c14:	4798      	blx	r3
	if(status & (1<<MAX_RT)){
  400c16:	f010 0f10 	tst.w	r0, #16
  400c1a:	d102      	bne.n	400c22 <nRF24_write+0x8e>
	return 1;
  400c1c:	2001      	movs	r0, #1
	return nRFwrite(buf, len, 0);
  400c1e:	46bd      	mov	sp, r7
  400c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nRF24_FlushTx();
  400c22:	4b09      	ldr	r3, [pc, #36]	; (400c48 <nRF24_write+0xb4>)
  400c24:	4798      	blx	r3
		return 0;
  400c26:	2000      	movs	r0, #0
  400c28:	e7f9      	b.n	400c1e <nRF24_write+0x8a>
  400c2a:	bf00      	nop
  400c2c:	204009ec 	.word	0x204009ec
  400c30:	20400010 	.word	0x20400010
  400c34:	004002c5 	.word	0x004002c5
  400c38:	400e1200 	.word	0x400e1200
  400c3c:	00400679 	.word	0x00400679
  400c40:	20400001 	.word	0x20400001
  400c44:	0040060d 	.word	0x0040060d
  400c48:	00400659 	.word	0x00400659

00400c4c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400c4c:	3801      	subs	r0, #1
  400c4e:	2802      	cmp	r0, #2
  400c50:	d815      	bhi.n	400c7e <_write+0x32>
{
  400c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c56:	460e      	mov	r6, r1
  400c58:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400c5a:	b19a      	cbz	r2, 400c84 <_write+0x38>
  400c5c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400c5e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400c98 <_write+0x4c>
  400c62:	4f0c      	ldr	r7, [pc, #48]	; (400c94 <_write+0x48>)
  400c64:	f8d8 0000 	ldr.w	r0, [r8]
  400c68:	f815 1b01 	ldrb.w	r1, [r5], #1
  400c6c:	683b      	ldr	r3, [r7, #0]
  400c6e:	4798      	blx	r3
  400c70:	2800      	cmp	r0, #0
  400c72:	db0a      	blt.n	400c8a <_write+0x3e>
  400c74:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400c76:	3c01      	subs	r4, #1
  400c78:	d1f4      	bne.n	400c64 <_write+0x18>
  400c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c7e:	f04f 30ff 	mov.w	r0, #4294967295
  400c82:	4770      	bx	lr
	for (; len != 0; --len) {
  400c84:	4610      	mov	r0, r2
  400c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400c8a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c92:	bf00      	nop
  400c94:	20400aac 	.word	0x20400aac
  400c98:	20400ab0 	.word	0x20400ab0

00400c9c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400c9c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <spi_enable_clock+0x20>)
  400ca0:	4298      	cmp	r0, r3
  400ca2:	d003      	beq.n	400cac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400ca4:	4b06      	ldr	r3, [pc, #24]	; (400cc0 <spi_enable_clock+0x24>)
  400ca6:	4298      	cmp	r0, r3
  400ca8:	d004      	beq.n	400cb4 <spi_enable_clock+0x18>
  400caa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400cac:	2015      	movs	r0, #21
  400cae:	4b05      	ldr	r3, [pc, #20]	; (400cc4 <spi_enable_clock+0x28>)
  400cb0:	4798      	blx	r3
  400cb2:	bd08      	pop	{r3, pc}
  400cb4:	202a      	movs	r0, #42	; 0x2a
  400cb6:	4b03      	ldr	r3, [pc, #12]	; (400cc4 <spi_enable_clock+0x28>)
  400cb8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400cba:	e7f6      	b.n	400caa <spi_enable_clock+0xe>
  400cbc:	40008000 	.word	0x40008000
  400cc0:	40058000 	.word	0x40058000
  400cc4:	00401269 	.word	0x00401269

00400cc8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400cc8:	6843      	ldr	r3, [r0, #4]
  400cca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400cce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400cd0:	6843      	ldr	r3, [r0, #4]
  400cd2:	0409      	lsls	r1, r1, #16
  400cd4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400cd8:	4319      	orrs	r1, r3
  400cda:	6041      	str	r1, [r0, #4]
  400cdc:	4770      	bx	lr

00400cde <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  400cde:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  400ce0:	f643 2399 	movw	r3, #15001	; 0x3a99
  400ce4:	6904      	ldr	r4, [r0, #16]
  400ce6:	f014 0f01 	tst.w	r4, #1
  400cea:	d103      	bne.n	400cf4 <spi_read+0x16>
		if (!timeout--) {
  400cec:	3b01      	subs	r3, #1
  400cee:	d1f9      	bne.n	400ce4 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  400cf0:	2001      	movs	r0, #1
  400cf2:	e009      	b.n	400d08 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  400cf4:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400cf6:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  400cf8:	f010 0f02 	tst.w	r0, #2
  400cfc:	d002      	beq.n	400d04 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  400cfe:	f3c3 4003 	ubfx	r0, r3, #16, #4
  400d02:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400d04:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  400d06:	2000      	movs	r0, #0
}
  400d08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d0c:	4770      	bx	lr

00400d0e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400d0e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400d10:	f643 2499 	movw	r4, #15001	; 0x3a99
  400d14:	6905      	ldr	r5, [r0, #16]
  400d16:	f015 0f02 	tst.w	r5, #2
  400d1a:	d103      	bne.n	400d24 <spi_write+0x16>
		if (!timeout--) {
  400d1c:	3c01      	subs	r4, #1
  400d1e:	d1f9      	bne.n	400d14 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400d20:	2001      	movs	r0, #1
  400d22:	e00c      	b.n	400d3e <spi_write+0x30>
  400d24:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400d26:	f014 0f02 	tst.w	r4, #2
  400d2a:	d006      	beq.n	400d3a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400d2c:	0412      	lsls	r2, r2, #16
  400d2e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400d32:	4311      	orrs	r1, r2
		if (uc_last) {
  400d34:	b10b      	cbz	r3, 400d3a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400d36:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400d3a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400d3c:	2000      	movs	r0, #0
}
  400d3e:	bc30      	pop	{r4, r5}
  400d40:	4770      	bx	lr

00400d42 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400d42:	b932      	cbnz	r2, 400d52 <spi_set_clock_polarity+0x10>
  400d44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400d48:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400d4a:	f023 0301 	bic.w	r3, r3, #1
  400d4e:	6303      	str	r3, [r0, #48]	; 0x30
  400d50:	4770      	bx	lr
  400d52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400d56:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400d58:	f043 0301 	orr.w	r3, r3, #1
  400d5c:	6303      	str	r3, [r0, #48]	; 0x30
  400d5e:	4770      	bx	lr

00400d60 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400d60:	b932      	cbnz	r2, 400d70 <spi_set_clock_phase+0x10>
  400d62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400d66:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400d68:	f023 0302 	bic.w	r3, r3, #2
  400d6c:	6303      	str	r3, [r0, #48]	; 0x30
  400d6e:	4770      	bx	lr
  400d70:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400d74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400d76:	f043 0302 	orr.w	r3, r3, #2
  400d7a:	6303      	str	r3, [r0, #48]	; 0x30
  400d7c:	4770      	bx	lr

00400d7e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400d7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400d82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400d88:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400d8a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400d8c:	431a      	orrs	r2, r3
  400d8e:	630a      	str	r2, [r1, #48]	; 0x30
  400d90:	4770      	bx	lr

00400d92 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400d92:	b17a      	cbz	r2, 400db4 <spi_set_baudrate_div+0x22>
{
  400d94:	b410      	push	{r4}
  400d96:	4614      	mov	r4, r2
  400d98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400d9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400da2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400da4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400da6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400daa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400dac:	2000      	movs	r0, #0
}
  400dae:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db2:	4770      	bx	lr
        return -1;
  400db4:	f04f 30ff 	mov.w	r0, #4294967295
  400db8:	4770      	bx	lr

00400dba <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400dba:	b410      	push	{r4}
  400dbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400dc0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400dc2:	b280      	uxth	r0, r0
  400dc4:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400dc6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400dc8:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  400dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400dd0:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dd6:	4770      	bx	lr

00400dd8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400dd8:	6943      	ldr	r3, [r0, #20]
  400dda:	f013 0f02 	tst.w	r3, #2
  400dde:	d002      	beq.n	400de6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400de0:	61c1      	str	r1, [r0, #28]
	return 0;
  400de2:	2000      	movs	r0, #0
  400de4:	4770      	bx	lr
		return 1;
  400de6:	2001      	movs	r0, #1
}
  400de8:	4770      	bx	lr

00400dea <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400dea:	6943      	ldr	r3, [r0, #20]
  400dec:	f013 0f01 	tst.w	r3, #1
  400df0:	d003      	beq.n	400dfa <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400df2:	6983      	ldr	r3, [r0, #24]
  400df4:	700b      	strb	r3, [r1, #0]
	return 0;
  400df6:	2000      	movs	r0, #0
  400df8:	4770      	bx	lr
		return 1;
  400dfa:	2001      	movs	r0, #1
}
  400dfc:	4770      	bx	lr
	...

00400e00 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e00:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400e02:	4810      	ldr	r0, [pc, #64]	; (400e44 <sysclk_init+0x44>)
  400e04:	4b10      	ldr	r3, [pc, #64]	; (400e48 <sysclk_init+0x48>)
  400e06:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e08:	213e      	movs	r1, #62	; 0x3e
  400e0a:	2000      	movs	r0, #0
  400e0c:	4b0f      	ldr	r3, [pc, #60]	; (400e4c <sysclk_init+0x4c>)
  400e0e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e10:	4c0f      	ldr	r4, [pc, #60]	; (400e50 <sysclk_init+0x50>)
  400e12:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400e14:	2800      	cmp	r0, #0
  400e16:	d0fc      	beq.n	400e12 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e18:	4b0e      	ldr	r3, [pc, #56]	; (400e54 <sysclk_init+0x54>)
  400e1a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e1c:	4a0e      	ldr	r2, [pc, #56]	; (400e58 <sysclk_init+0x58>)
  400e1e:	4b0f      	ldr	r3, [pc, #60]	; (400e5c <sysclk_init+0x5c>)
  400e20:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400e22:	4c0f      	ldr	r4, [pc, #60]	; (400e60 <sysclk_init+0x60>)
  400e24:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e26:	2800      	cmp	r0, #0
  400e28:	d0fc      	beq.n	400e24 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400e2a:	2002      	movs	r0, #2
  400e2c:	4b0d      	ldr	r3, [pc, #52]	; (400e64 <sysclk_init+0x64>)
  400e2e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e30:	2000      	movs	r0, #0
  400e32:	4b0d      	ldr	r3, [pc, #52]	; (400e68 <sysclk_init+0x68>)
  400e34:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e36:	4b0d      	ldr	r3, [pc, #52]	; (400e6c <sysclk_init+0x6c>)
  400e38:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400e3a:	4802      	ldr	r0, [pc, #8]	; (400e44 <sysclk_init+0x44>)
  400e3c:	4b02      	ldr	r3, [pc, #8]	; (400e48 <sysclk_init+0x48>)
  400e3e:	4798      	blx	r3
  400e40:	bd10      	pop	{r4, pc}
  400e42:	bf00      	nop
  400e44:	08f0d180 	.word	0x08f0d180
  400e48:	00401461 	.word	0x00401461
  400e4c:	004011e5 	.word	0x004011e5
  400e50:	00401239 	.word	0x00401239
  400e54:	00401249 	.word	0x00401249
  400e58:	20183f01 	.word	0x20183f01
  400e5c:	400e0600 	.word	0x400e0600
  400e60:	00401259 	.word	0x00401259
  400e64:	00401149 	.word	0x00401149
  400e68:	00401181 	.word	0x00401181
  400e6c:	00401355 	.word	0x00401355

00400e70 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400e76:	4b7d      	ldr	r3, [pc, #500]	; (40106c <board_init+0x1fc>)
  400e78:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  400e7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e7e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400e82:	4b7b      	ldr	r3, [pc, #492]	; (401070 <board_init+0x200>)
  400e84:	2100      	movs	r1, #0
  400e86:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400e8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e8e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400e92:	695a      	ldr	r2, [r3, #20]
  400e94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400e98:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400e9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e9e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400ea2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400ea6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400eaa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400eae:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400eb2:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400eb6:	016e      	lsls	r6, r5, #5
  400eb8:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400ebc:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400ec0:	461c      	mov	r4, r3
  400ec2:	ea06 000e 	and.w	r0, r6, lr
  400ec6:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400ec8:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400eca:	ea40 0102 	orr.w	r1, r0, r2
  400ece:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400ed2:	3b01      	subs	r3, #1
  400ed4:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400edc:	d1f5      	bne.n	400eca <board_init+0x5a>
    } while(sets-- != 0U);
  400ede:	3d01      	subs	r5, #1
  400ee0:	3e20      	subs	r6, #32
  400ee2:	f1b5 3fff 	cmp.w	r5, #4294967295
  400ee6:	d1ec      	bne.n	400ec2 <board_init+0x52>
  400ee8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  400eec:	4b60      	ldr	r3, [pc, #384]	; (401070 <board_init+0x200>)
  400eee:	695a      	ldr	r2, [r3, #20]
  400ef0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400ef4:	615a      	str	r2, [r3, #20]
  400ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400efa:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400efe:	4a5d      	ldr	r2, [pc, #372]	; (401074 <board_init+0x204>)
  400f00:	495d      	ldr	r1, [pc, #372]	; (401078 <board_init+0x208>)
  400f02:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f04:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400f08:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  400f0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f0e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400f12:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400f16:	f022 0201 	bic.w	r2, r2, #1
  400f1a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400f1e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400f22:	f022 0201 	bic.w	r2, r2, #1
  400f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400f2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f2e:	f3bf 8f6f 	isb	sy
  400f32:	200a      	movs	r0, #10
  400f34:	4c51      	ldr	r4, [pc, #324]	; (40107c <board_init+0x20c>)
  400f36:	47a0      	blx	r4
  400f38:	200b      	movs	r0, #11
  400f3a:	47a0      	blx	r4
  400f3c:	200c      	movs	r0, #12
  400f3e:	47a0      	blx	r4
  400f40:	2010      	movs	r0, #16
  400f42:	47a0      	blx	r4
  400f44:	2011      	movs	r0, #17
  400f46:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f48:	4b4d      	ldr	r3, [pc, #308]	; (401080 <board_init+0x210>)
  400f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f4e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f54:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400f5e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400f64:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f6a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400f6c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400f72:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f74:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400f78:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f7a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f7c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400f80:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400f82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400f86:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400f8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400f8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f92:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f98:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f9a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400fa0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400fa2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400fa6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400fa8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400faa:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400fae:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400fb0:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400fb2:	4934      	ldr	r1, [pc, #208]	; (401084 <board_init+0x214>)
  400fb4:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400fb8:	f043 0310 	orr.w	r3, r3, #16
  400fbc:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400fc0:	4b31      	ldr	r3, [pc, #196]	; (401088 <board_init+0x218>)
  400fc2:	2110      	movs	r1, #16
  400fc4:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400fc6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400fca:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400fcc:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400fce:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400fd2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400fd4:	4308      	orrs	r0, r1
  400fd6:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400fd8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400fda:	4308      	orrs	r0, r1
  400fdc:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400fde:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400fe4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400fe8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400fea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400fee:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ff0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ff2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400ff6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400ff8:	4308      	orrs	r0, r1
  400ffa:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ffc:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400ffe:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  401002:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401004:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401006:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40100c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40100e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401014:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401016:	4311      	orrs	r1, r2
  401018:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40101a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40101c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401020:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401022:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401024:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401028:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40102a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40102e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401030:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401036:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401038:	4311      	orrs	r1, r2
  40103a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40103c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40103e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  401042:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401044:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40104a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40104c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401050:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401052:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401058:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40105a:	4311      	orrs	r1, r2
  40105c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40105e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401060:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  401064:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401066:	605a      	str	r2, [r3, #4]
  401068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40106a:	bf00      	nop
  40106c:	400e1850 	.word	0x400e1850
  401070:	e000ed00 	.word	0xe000ed00
  401074:	400e0c00 	.word	0x400e0c00
  401078:	5a00080c 	.word	0x5a00080c
  40107c:	00401269 	.word	0x00401269
  401080:	400e1200 	.word	0x400e1200
  401084:	40088000 	.word	0x40088000
  401088:	400e1000 	.word	0x400e1000

0040108c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40108c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40108e:	4770      	bx	lr

00401090 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401090:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401092:	4770      	bx	lr

00401094 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401098:	4604      	mov	r4, r0
  40109a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40109c:	4b0e      	ldr	r3, [pc, #56]	; (4010d8 <pio_handler_process+0x44>)
  40109e:	4798      	blx	r3
  4010a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4010a2:	4620      	mov	r0, r4
  4010a4:	4b0d      	ldr	r3, [pc, #52]	; (4010dc <pio_handler_process+0x48>)
  4010a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4010a8:	4005      	ands	r5, r0
  4010aa:	d013      	beq.n	4010d4 <pio_handler_process+0x40>
  4010ac:	4c0c      	ldr	r4, [pc, #48]	; (4010e0 <pio_handler_process+0x4c>)
  4010ae:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4010b2:	e003      	b.n	4010bc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010b4:	42b4      	cmp	r4, r6
  4010b6:	d00d      	beq.n	4010d4 <pio_handler_process+0x40>
  4010b8:	3410      	adds	r4, #16
		while (status != 0) {
  4010ba:	b15d      	cbz	r5, 4010d4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4010bc:	6820      	ldr	r0, [r4, #0]
  4010be:	4540      	cmp	r0, r8
  4010c0:	d1f8      	bne.n	4010b4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4010c2:	6861      	ldr	r1, [r4, #4]
  4010c4:	4229      	tst	r1, r5
  4010c6:	d0f5      	beq.n	4010b4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010c8:	68e3      	ldr	r3, [r4, #12]
  4010ca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010cc:	6863      	ldr	r3, [r4, #4]
  4010ce:	ea25 0503 	bic.w	r5, r5, r3
  4010d2:	e7ef      	b.n	4010b4 <pio_handler_process+0x20>
  4010d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010d8:	0040108d 	.word	0x0040108d
  4010dc:	00401091 	.word	0x00401091
  4010e0:	204009f0 	.word	0x204009f0

004010e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010e6:	210a      	movs	r1, #10
  4010e8:	4801      	ldr	r0, [pc, #4]	; (4010f0 <PIOA_Handler+0xc>)
  4010ea:	4b02      	ldr	r3, [pc, #8]	; (4010f4 <PIOA_Handler+0x10>)
  4010ec:	4798      	blx	r3
  4010ee:	bd08      	pop	{r3, pc}
  4010f0:	400e0e00 	.word	0x400e0e00
  4010f4:	00401095 	.word	0x00401095

004010f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010fa:	210b      	movs	r1, #11
  4010fc:	4801      	ldr	r0, [pc, #4]	; (401104 <PIOB_Handler+0xc>)
  4010fe:	4b02      	ldr	r3, [pc, #8]	; (401108 <PIOB_Handler+0x10>)
  401100:	4798      	blx	r3
  401102:	bd08      	pop	{r3, pc}
  401104:	400e1000 	.word	0x400e1000
  401108:	00401095 	.word	0x00401095

0040110c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40110c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40110e:	210c      	movs	r1, #12
  401110:	4801      	ldr	r0, [pc, #4]	; (401118 <PIOC_Handler+0xc>)
  401112:	4b02      	ldr	r3, [pc, #8]	; (40111c <PIOC_Handler+0x10>)
  401114:	4798      	blx	r3
  401116:	bd08      	pop	{r3, pc}
  401118:	400e1200 	.word	0x400e1200
  40111c:	00401095 	.word	0x00401095

00401120 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401120:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401122:	2110      	movs	r1, #16
  401124:	4801      	ldr	r0, [pc, #4]	; (40112c <PIOD_Handler+0xc>)
  401126:	4b02      	ldr	r3, [pc, #8]	; (401130 <PIOD_Handler+0x10>)
  401128:	4798      	blx	r3
  40112a:	bd08      	pop	{r3, pc}
  40112c:	400e1400 	.word	0x400e1400
  401130:	00401095 	.word	0x00401095

00401134 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401134:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401136:	2111      	movs	r1, #17
  401138:	4801      	ldr	r0, [pc, #4]	; (401140 <PIOE_Handler+0xc>)
  40113a:	4b02      	ldr	r3, [pc, #8]	; (401144 <PIOE_Handler+0x10>)
  40113c:	4798      	blx	r3
  40113e:	bd08      	pop	{r3, pc}
  401140:	400e1600 	.word	0x400e1600
  401144:	00401095 	.word	0x00401095

00401148 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401148:	2803      	cmp	r0, #3
  40114a:	d011      	beq.n	401170 <pmc_mck_set_division+0x28>
  40114c:	2804      	cmp	r0, #4
  40114e:	d012      	beq.n	401176 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401150:	2802      	cmp	r0, #2
  401152:	bf0c      	ite	eq
  401154:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401158:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40115a:	4a08      	ldr	r2, [pc, #32]	; (40117c <pmc_mck_set_division+0x34>)
  40115c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40115e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401162:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401164:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401166:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401168:	f013 0f08 	tst.w	r3, #8
  40116c:	d0fb      	beq.n	401166 <pmc_mck_set_division+0x1e>
}
  40116e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401170:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401174:	e7f1      	b.n	40115a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401176:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40117a:	e7ee      	b.n	40115a <pmc_mck_set_division+0x12>
  40117c:	400e0600 	.word	0x400e0600

00401180 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401180:	4a17      	ldr	r2, [pc, #92]	; (4011e0 <pmc_switch_mck_to_pllack+0x60>)
  401182:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401188:	4318      	orrs	r0, r3
  40118a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40118c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40118e:	f013 0f08 	tst.w	r3, #8
  401192:	d10a      	bne.n	4011aa <pmc_switch_mck_to_pllack+0x2a>
  401194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401198:	4911      	ldr	r1, [pc, #68]	; (4011e0 <pmc_switch_mck_to_pllack+0x60>)
  40119a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40119c:	f012 0f08 	tst.w	r2, #8
  4011a0:	d103      	bne.n	4011aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011a2:	3b01      	subs	r3, #1
  4011a4:	d1f9      	bne.n	40119a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011a6:	2001      	movs	r0, #1
  4011a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011aa:	4a0d      	ldr	r2, [pc, #52]	; (4011e0 <pmc_switch_mck_to_pllack+0x60>)
  4011ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011ae:	f023 0303 	bic.w	r3, r3, #3
  4011b2:	f043 0302 	orr.w	r3, r3, #2
  4011b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ba:	f013 0f08 	tst.w	r3, #8
  4011be:	d10a      	bne.n	4011d6 <pmc_switch_mck_to_pllack+0x56>
  4011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011c4:	4906      	ldr	r1, [pc, #24]	; (4011e0 <pmc_switch_mck_to_pllack+0x60>)
  4011c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011c8:	f012 0f08 	tst.w	r2, #8
  4011cc:	d105      	bne.n	4011da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011ce:	3b01      	subs	r3, #1
  4011d0:	d1f9      	bne.n	4011c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011d4:	4770      	bx	lr
	return 0;
  4011d6:	2000      	movs	r0, #0
  4011d8:	4770      	bx	lr
  4011da:	2000      	movs	r0, #0
  4011dc:	4770      	bx	lr
  4011de:	bf00      	nop
  4011e0:	400e0600 	.word	0x400e0600

004011e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011e4:	b9a0      	cbnz	r0, 401210 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011e6:	480e      	ldr	r0, [pc, #56]	; (401220 <pmc_switch_mainck_to_xtal+0x3c>)
  4011e8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011ea:	0209      	lsls	r1, r1, #8
  4011ec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011ee:	4a0d      	ldr	r2, [pc, #52]	; (401224 <pmc_switch_mainck_to_xtal+0x40>)
  4011f0:	401a      	ands	r2, r3
  4011f2:	4b0d      	ldr	r3, [pc, #52]	; (401228 <pmc_switch_mainck_to_xtal+0x44>)
  4011f4:	4313      	orrs	r3, r2
  4011f6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011f8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011fa:	4602      	mov	r2, r0
  4011fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011fe:	f013 0f01 	tst.w	r3, #1
  401202:	d0fb      	beq.n	4011fc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401204:	4a06      	ldr	r2, [pc, #24]	; (401220 <pmc_switch_mainck_to_xtal+0x3c>)
  401206:	6a11      	ldr	r1, [r2, #32]
  401208:	4b08      	ldr	r3, [pc, #32]	; (40122c <pmc_switch_mainck_to_xtal+0x48>)
  40120a:	430b      	orrs	r3, r1
  40120c:	6213      	str	r3, [r2, #32]
  40120e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401210:	4903      	ldr	r1, [pc, #12]	; (401220 <pmc_switch_mainck_to_xtal+0x3c>)
  401212:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401214:	4a06      	ldr	r2, [pc, #24]	; (401230 <pmc_switch_mainck_to_xtal+0x4c>)
  401216:	401a      	ands	r2, r3
  401218:	4b06      	ldr	r3, [pc, #24]	; (401234 <pmc_switch_mainck_to_xtal+0x50>)
  40121a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40121c:	620b      	str	r3, [r1, #32]
  40121e:	4770      	bx	lr
  401220:	400e0600 	.word	0x400e0600
  401224:	ffc8fffc 	.word	0xffc8fffc
  401228:	00370001 	.word	0x00370001
  40122c:	01370000 	.word	0x01370000
  401230:	fec8fffc 	.word	0xfec8fffc
  401234:	01370002 	.word	0x01370002

00401238 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401238:	4b02      	ldr	r3, [pc, #8]	; (401244 <pmc_osc_is_ready_mainck+0xc>)
  40123a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40123c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401240:	4770      	bx	lr
  401242:	bf00      	nop
  401244:	400e0600 	.word	0x400e0600

00401248 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40124c:	4b01      	ldr	r3, [pc, #4]	; (401254 <pmc_disable_pllack+0xc>)
  40124e:	629a      	str	r2, [r3, #40]	; 0x28
  401250:	4770      	bx	lr
  401252:	bf00      	nop
  401254:	400e0600 	.word	0x400e0600

00401258 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401258:	4b02      	ldr	r3, [pc, #8]	; (401264 <pmc_is_locked_pllack+0xc>)
  40125a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40125c:	f000 0002 	and.w	r0, r0, #2
  401260:	4770      	bx	lr
  401262:	bf00      	nop
  401264:	400e0600 	.word	0x400e0600

00401268 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401268:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40126c:	4b05      	ldr	r3, [pc, #20]	; (401284 <pmc_enable_periph_clk+0x1c>)
  40126e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401272:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401276:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40127a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40127e:	2000      	movs	r0, #0
  401280:	4770      	bx	lr
  401282:	bf00      	nop
  401284:	400e0600 	.word	0x400e0600

00401288 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401288:	e7fe      	b.n	401288 <Dummy_Handler>
	...

0040128c <Reset_Handler>:
{
  40128c:	b500      	push	{lr}
  40128e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401290:	4b25      	ldr	r3, [pc, #148]	; (401328 <Reset_Handler+0x9c>)
  401292:	4a26      	ldr	r2, [pc, #152]	; (40132c <Reset_Handler+0xa0>)
  401294:	429a      	cmp	r2, r3
  401296:	d010      	beq.n	4012ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401298:	4b25      	ldr	r3, [pc, #148]	; (401330 <Reset_Handler+0xa4>)
  40129a:	4a23      	ldr	r2, [pc, #140]	; (401328 <Reset_Handler+0x9c>)
  40129c:	429a      	cmp	r2, r3
  40129e:	d20c      	bcs.n	4012ba <Reset_Handler+0x2e>
  4012a0:	3b01      	subs	r3, #1
  4012a2:	1a9b      	subs	r3, r3, r2
  4012a4:	f023 0303 	bic.w	r3, r3, #3
  4012a8:	3304      	adds	r3, #4
  4012aa:	4413      	add	r3, r2
  4012ac:	491f      	ldr	r1, [pc, #124]	; (40132c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4012ae:	f851 0b04 	ldr.w	r0, [r1], #4
  4012b2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4012b6:	429a      	cmp	r2, r3
  4012b8:	d1f9      	bne.n	4012ae <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4012ba:	4b1e      	ldr	r3, [pc, #120]	; (401334 <Reset_Handler+0xa8>)
  4012bc:	4a1e      	ldr	r2, [pc, #120]	; (401338 <Reset_Handler+0xac>)
  4012be:	429a      	cmp	r2, r3
  4012c0:	d20a      	bcs.n	4012d8 <Reset_Handler+0x4c>
  4012c2:	3b01      	subs	r3, #1
  4012c4:	1a9b      	subs	r3, r3, r2
  4012c6:	f023 0303 	bic.w	r3, r3, #3
  4012ca:	3304      	adds	r3, #4
  4012cc:	4413      	add	r3, r2
                *pDest++ = 0;
  4012ce:	2100      	movs	r1, #0
  4012d0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4012d4:	4293      	cmp	r3, r2
  4012d6:	d1fb      	bne.n	4012d0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4012d8:	4a18      	ldr	r2, [pc, #96]	; (40133c <Reset_Handler+0xb0>)
  4012da:	4b19      	ldr	r3, [pc, #100]	; (401340 <Reset_Handler+0xb4>)
  4012dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4012e0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012e2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012e6:	fab3 f383 	clz	r3, r3
  4012ea:	095b      	lsrs	r3, r3, #5
  4012ec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4012ee:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4012f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4012f4:	2200      	movs	r2, #0
  4012f6:	4b13      	ldr	r3, [pc, #76]	; (401344 <Reset_Handler+0xb8>)
  4012f8:	701a      	strb	r2, [r3, #0]
	return flags;
  4012fa:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4012fc:	4a12      	ldr	r2, [pc, #72]	; (401348 <Reset_Handler+0xbc>)
  4012fe:	6813      	ldr	r3, [r2, #0]
  401300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401304:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40130a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40130e:	b129      	cbz	r1, 40131c <Reset_Handler+0x90>
		cpu_irq_enable();
  401310:	2201      	movs	r2, #1
  401312:	4b0c      	ldr	r3, [pc, #48]	; (401344 <Reset_Handler+0xb8>)
  401314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40131a:	b662      	cpsie	i
        __libc_init_array();
  40131c:	4b0b      	ldr	r3, [pc, #44]	; (40134c <Reset_Handler+0xc0>)
  40131e:	4798      	blx	r3
        main();
  401320:	4b0b      	ldr	r3, [pc, #44]	; (401350 <Reset_Handler+0xc4>)
  401322:	4798      	blx	r3
  401324:	e7fe      	b.n	401324 <Reset_Handler+0x98>
  401326:	bf00      	nop
  401328:	20400000 	.word	0x20400000
  40132c:	00404d8c 	.word	0x00404d8c
  401330:	204009c8 	.word	0x204009c8
  401334:	20400aec 	.word	0x20400aec
  401338:	204009c8 	.word	0x204009c8
  40133c:	e000ed00 	.word	0xe000ed00
  401340:	00400000 	.word	0x00400000
  401344:	20400011 	.word	0x20400011
  401348:	e000ed88 	.word	0xe000ed88
  40134c:	00401c25 	.word	0x00401c25
  401350:	004016f1 	.word	0x004016f1

00401354 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401354:	4b3b      	ldr	r3, [pc, #236]	; (401444 <SystemCoreClockUpdate+0xf0>)
  401356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401358:	f003 0303 	and.w	r3, r3, #3
  40135c:	2b01      	cmp	r3, #1
  40135e:	d01d      	beq.n	40139c <SystemCoreClockUpdate+0x48>
  401360:	b183      	cbz	r3, 401384 <SystemCoreClockUpdate+0x30>
  401362:	2b02      	cmp	r3, #2
  401364:	d036      	beq.n	4013d4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401366:	4b37      	ldr	r3, [pc, #220]	; (401444 <SystemCoreClockUpdate+0xf0>)
  401368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40136a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40136e:	2b70      	cmp	r3, #112	; 0x70
  401370:	d05f      	beq.n	401432 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401372:	4b34      	ldr	r3, [pc, #208]	; (401444 <SystemCoreClockUpdate+0xf0>)
  401374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401376:	4934      	ldr	r1, [pc, #208]	; (401448 <SystemCoreClockUpdate+0xf4>)
  401378:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40137c:	680b      	ldr	r3, [r1, #0]
  40137e:	40d3      	lsrs	r3, r2
  401380:	600b      	str	r3, [r1, #0]
  401382:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401384:	4b31      	ldr	r3, [pc, #196]	; (40144c <SystemCoreClockUpdate+0xf8>)
  401386:	695b      	ldr	r3, [r3, #20]
  401388:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40138c:	bf14      	ite	ne
  40138e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401392:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401396:	4b2c      	ldr	r3, [pc, #176]	; (401448 <SystemCoreClockUpdate+0xf4>)
  401398:	601a      	str	r2, [r3, #0]
  40139a:	e7e4      	b.n	401366 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40139c:	4b29      	ldr	r3, [pc, #164]	; (401444 <SystemCoreClockUpdate+0xf0>)
  40139e:	6a1b      	ldr	r3, [r3, #32]
  4013a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013a4:	d003      	beq.n	4013ae <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4013a6:	4a2a      	ldr	r2, [pc, #168]	; (401450 <SystemCoreClockUpdate+0xfc>)
  4013a8:	4b27      	ldr	r3, [pc, #156]	; (401448 <SystemCoreClockUpdate+0xf4>)
  4013aa:	601a      	str	r2, [r3, #0]
  4013ac:	e7db      	b.n	401366 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013ae:	4a29      	ldr	r2, [pc, #164]	; (401454 <SystemCoreClockUpdate+0x100>)
  4013b0:	4b25      	ldr	r3, [pc, #148]	; (401448 <SystemCoreClockUpdate+0xf4>)
  4013b2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4013b4:	4b23      	ldr	r3, [pc, #140]	; (401444 <SystemCoreClockUpdate+0xf0>)
  4013b6:	6a1b      	ldr	r3, [r3, #32]
  4013b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013bc:	2b10      	cmp	r3, #16
  4013be:	d005      	beq.n	4013cc <SystemCoreClockUpdate+0x78>
  4013c0:	2b20      	cmp	r3, #32
  4013c2:	d1d0      	bne.n	401366 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4013c4:	4a22      	ldr	r2, [pc, #136]	; (401450 <SystemCoreClockUpdate+0xfc>)
  4013c6:	4b20      	ldr	r3, [pc, #128]	; (401448 <SystemCoreClockUpdate+0xf4>)
  4013c8:	601a      	str	r2, [r3, #0]
          break;
  4013ca:	e7cc      	b.n	401366 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4013cc:	4a22      	ldr	r2, [pc, #136]	; (401458 <SystemCoreClockUpdate+0x104>)
  4013ce:	4b1e      	ldr	r3, [pc, #120]	; (401448 <SystemCoreClockUpdate+0xf4>)
  4013d0:	601a      	str	r2, [r3, #0]
          break;
  4013d2:	e7c8      	b.n	401366 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013d4:	4b1b      	ldr	r3, [pc, #108]	; (401444 <SystemCoreClockUpdate+0xf0>)
  4013d6:	6a1b      	ldr	r3, [r3, #32]
  4013d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013dc:	d016      	beq.n	40140c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4013de:	4a1c      	ldr	r2, [pc, #112]	; (401450 <SystemCoreClockUpdate+0xfc>)
  4013e0:	4b19      	ldr	r3, [pc, #100]	; (401448 <SystemCoreClockUpdate+0xf4>)
  4013e2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4013e4:	4b17      	ldr	r3, [pc, #92]	; (401444 <SystemCoreClockUpdate+0xf0>)
  4013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e8:	f003 0303 	and.w	r3, r3, #3
  4013ec:	2b02      	cmp	r3, #2
  4013ee:	d1ba      	bne.n	401366 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013f0:	4a14      	ldr	r2, [pc, #80]	; (401444 <SystemCoreClockUpdate+0xf0>)
  4013f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4013f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4013f6:	4814      	ldr	r0, [pc, #80]	; (401448 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013f8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4013fc:	6803      	ldr	r3, [r0, #0]
  4013fe:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401402:	b2d2      	uxtb	r2, r2
  401404:	fbb3 f3f2 	udiv	r3, r3, r2
  401408:	6003      	str	r3, [r0, #0]
  40140a:	e7ac      	b.n	401366 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40140c:	4a11      	ldr	r2, [pc, #68]	; (401454 <SystemCoreClockUpdate+0x100>)
  40140e:	4b0e      	ldr	r3, [pc, #56]	; (401448 <SystemCoreClockUpdate+0xf4>)
  401410:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401412:	4b0c      	ldr	r3, [pc, #48]	; (401444 <SystemCoreClockUpdate+0xf0>)
  401414:	6a1b      	ldr	r3, [r3, #32]
  401416:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40141a:	2b10      	cmp	r3, #16
  40141c:	d005      	beq.n	40142a <SystemCoreClockUpdate+0xd6>
  40141e:	2b20      	cmp	r3, #32
  401420:	d1e0      	bne.n	4013e4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401422:	4a0b      	ldr	r2, [pc, #44]	; (401450 <SystemCoreClockUpdate+0xfc>)
  401424:	4b08      	ldr	r3, [pc, #32]	; (401448 <SystemCoreClockUpdate+0xf4>)
  401426:	601a      	str	r2, [r3, #0]
          break;
  401428:	e7dc      	b.n	4013e4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40142a:	4a0b      	ldr	r2, [pc, #44]	; (401458 <SystemCoreClockUpdate+0x104>)
  40142c:	4b06      	ldr	r3, [pc, #24]	; (401448 <SystemCoreClockUpdate+0xf4>)
  40142e:	601a      	str	r2, [r3, #0]
          break;
  401430:	e7d8      	b.n	4013e4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401432:	4a05      	ldr	r2, [pc, #20]	; (401448 <SystemCoreClockUpdate+0xf4>)
  401434:	6813      	ldr	r3, [r2, #0]
  401436:	4909      	ldr	r1, [pc, #36]	; (40145c <SystemCoreClockUpdate+0x108>)
  401438:	fba1 1303 	umull	r1, r3, r1, r3
  40143c:	085b      	lsrs	r3, r3, #1
  40143e:	6013      	str	r3, [r2, #0]
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	400e0600 	.word	0x400e0600
  401448:	20400014 	.word	0x20400014
  40144c:	400e1810 	.word	0x400e1810
  401450:	00b71b00 	.word	0x00b71b00
  401454:	003d0900 	.word	0x003d0900
  401458:	007a1200 	.word	0x007a1200
  40145c:	aaaaaaab 	.word	0xaaaaaaab

00401460 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401460:	4b16      	ldr	r3, [pc, #88]	; (4014bc <system_init_flash+0x5c>)
  401462:	4298      	cmp	r0, r3
  401464:	d913      	bls.n	40148e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401466:	4b16      	ldr	r3, [pc, #88]	; (4014c0 <system_init_flash+0x60>)
  401468:	4298      	cmp	r0, r3
  40146a:	d915      	bls.n	401498 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40146c:	4b15      	ldr	r3, [pc, #84]	; (4014c4 <system_init_flash+0x64>)
  40146e:	4298      	cmp	r0, r3
  401470:	d916      	bls.n	4014a0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401472:	4b15      	ldr	r3, [pc, #84]	; (4014c8 <system_init_flash+0x68>)
  401474:	4298      	cmp	r0, r3
  401476:	d917      	bls.n	4014a8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401478:	4b14      	ldr	r3, [pc, #80]	; (4014cc <system_init_flash+0x6c>)
  40147a:	4298      	cmp	r0, r3
  40147c:	d918      	bls.n	4014b0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40147e:	4b14      	ldr	r3, [pc, #80]	; (4014d0 <system_init_flash+0x70>)
  401480:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401482:	bf94      	ite	ls
  401484:	4a13      	ldrls	r2, [pc, #76]	; (4014d4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401486:	4a14      	ldrhi	r2, [pc, #80]	; (4014d8 <system_init_flash+0x78>)
  401488:	4b14      	ldr	r3, [pc, #80]	; (4014dc <system_init_flash+0x7c>)
  40148a:	601a      	str	r2, [r3, #0]
  40148c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40148e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401492:	4b12      	ldr	r3, [pc, #72]	; (4014dc <system_init_flash+0x7c>)
  401494:	601a      	str	r2, [r3, #0]
  401496:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401498:	4a11      	ldr	r2, [pc, #68]	; (4014e0 <system_init_flash+0x80>)
  40149a:	4b10      	ldr	r3, [pc, #64]	; (4014dc <system_init_flash+0x7c>)
  40149c:	601a      	str	r2, [r3, #0]
  40149e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4014a0:	4a10      	ldr	r2, [pc, #64]	; (4014e4 <system_init_flash+0x84>)
  4014a2:	4b0e      	ldr	r3, [pc, #56]	; (4014dc <system_init_flash+0x7c>)
  4014a4:	601a      	str	r2, [r3, #0]
  4014a6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4014a8:	4a0f      	ldr	r2, [pc, #60]	; (4014e8 <system_init_flash+0x88>)
  4014aa:	4b0c      	ldr	r3, [pc, #48]	; (4014dc <system_init_flash+0x7c>)
  4014ac:	601a      	str	r2, [r3, #0]
  4014ae:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4014b0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4014b4:	4b09      	ldr	r3, [pc, #36]	; (4014dc <system_init_flash+0x7c>)
  4014b6:	601a      	str	r2, [r3, #0]
  4014b8:	4770      	bx	lr
  4014ba:	bf00      	nop
  4014bc:	015ef3bf 	.word	0x015ef3bf
  4014c0:	02bde77f 	.word	0x02bde77f
  4014c4:	041cdb3f 	.word	0x041cdb3f
  4014c8:	057bceff 	.word	0x057bceff
  4014cc:	06dac2bf 	.word	0x06dac2bf
  4014d0:	0839b67f 	.word	0x0839b67f
  4014d4:	04000500 	.word	0x04000500
  4014d8:	04000600 	.word	0x04000600
  4014dc:	400e0c00 	.word	0x400e0c00
  4014e0:	04000100 	.word	0x04000100
  4014e4:	04000200 	.word	0x04000200
  4014e8:	04000300 	.word	0x04000300

004014ec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4014ec:	4b0a      	ldr	r3, [pc, #40]	; (401518 <_sbrk+0x2c>)
  4014ee:	681b      	ldr	r3, [r3, #0]
  4014f0:	b153      	cbz	r3, 401508 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4014f2:	4b09      	ldr	r3, [pc, #36]	; (401518 <_sbrk+0x2c>)
  4014f4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4014f6:	181a      	adds	r2, r3, r0
  4014f8:	4908      	ldr	r1, [pc, #32]	; (40151c <_sbrk+0x30>)
  4014fa:	4291      	cmp	r1, r2
  4014fc:	db08      	blt.n	401510 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4014fe:	4610      	mov	r0, r2
  401500:	4a05      	ldr	r2, [pc, #20]	; (401518 <_sbrk+0x2c>)
  401502:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401504:	4618      	mov	r0, r3
  401506:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401508:	4a05      	ldr	r2, [pc, #20]	; (401520 <_sbrk+0x34>)
  40150a:	4b03      	ldr	r3, [pc, #12]	; (401518 <_sbrk+0x2c>)
  40150c:	601a      	str	r2, [r3, #0]
  40150e:	e7f0      	b.n	4014f2 <_sbrk+0x6>
		return (caddr_t) -1;	
  401510:	f04f 30ff 	mov.w	r0, #4294967295
}
  401514:	4770      	bx	lr
  401516:	bf00      	nop
  401518:	20400a60 	.word	0x20400a60
  40151c:	2045fffc 	.word	0x2045fffc
  401520:	20402cf0 	.word	0x20402cf0

00401524 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401524:	f04f 30ff 	mov.w	r0, #4294967295
  401528:	4770      	bx	lr

0040152a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40152a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40152e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401530:	2000      	movs	r0, #0
  401532:	4770      	bx	lr

00401534 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401534:	2001      	movs	r0, #1
  401536:	4770      	bx	lr

00401538 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401538:	2000      	movs	r0, #0
  40153a:	4770      	bx	lr

0040153c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40153c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40153e:	b083      	sub	sp, #12
  401540:	4605      	mov	r5, r0
  401542:	460c      	mov	r4, r1
	uint32_t val = 0;
  401544:	2300      	movs	r3, #0
  401546:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401548:	4b2a      	ldr	r3, [pc, #168]	; (4015f4 <usart_serial_getchar+0xb8>)
  40154a:	4298      	cmp	r0, r3
  40154c:	d013      	beq.n	401576 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40154e:	4b2a      	ldr	r3, [pc, #168]	; (4015f8 <usart_serial_getchar+0xbc>)
  401550:	4298      	cmp	r0, r3
  401552:	d018      	beq.n	401586 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401554:	4b29      	ldr	r3, [pc, #164]	; (4015fc <usart_serial_getchar+0xc0>)
  401556:	4298      	cmp	r0, r3
  401558:	d01d      	beq.n	401596 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40155a:	4b29      	ldr	r3, [pc, #164]	; (401600 <usart_serial_getchar+0xc4>)
  40155c:	429d      	cmp	r5, r3
  40155e:	d022      	beq.n	4015a6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401560:	4b28      	ldr	r3, [pc, #160]	; (401604 <usart_serial_getchar+0xc8>)
  401562:	429d      	cmp	r5, r3
  401564:	d027      	beq.n	4015b6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401566:	4b28      	ldr	r3, [pc, #160]	; (401608 <usart_serial_getchar+0xcc>)
  401568:	429d      	cmp	r5, r3
  40156a:	d02e      	beq.n	4015ca <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40156c:	4b27      	ldr	r3, [pc, #156]	; (40160c <usart_serial_getchar+0xd0>)
  40156e:	429d      	cmp	r5, r3
  401570:	d035      	beq.n	4015de <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401572:	b003      	add	sp, #12
  401574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401576:	461f      	mov	r7, r3
  401578:	4e25      	ldr	r6, [pc, #148]	; (401610 <usart_serial_getchar+0xd4>)
  40157a:	4621      	mov	r1, r4
  40157c:	4638      	mov	r0, r7
  40157e:	47b0      	blx	r6
  401580:	2800      	cmp	r0, #0
  401582:	d1fa      	bne.n	40157a <usart_serial_getchar+0x3e>
  401584:	e7e9      	b.n	40155a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  401586:	461f      	mov	r7, r3
  401588:	4e21      	ldr	r6, [pc, #132]	; (401610 <usart_serial_getchar+0xd4>)
  40158a:	4621      	mov	r1, r4
  40158c:	4638      	mov	r0, r7
  40158e:	47b0      	blx	r6
  401590:	2800      	cmp	r0, #0
  401592:	d1fa      	bne.n	40158a <usart_serial_getchar+0x4e>
  401594:	e7e4      	b.n	401560 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  401596:	461f      	mov	r7, r3
  401598:	4e1d      	ldr	r6, [pc, #116]	; (401610 <usart_serial_getchar+0xd4>)
  40159a:	4621      	mov	r1, r4
  40159c:	4638      	mov	r0, r7
  40159e:	47b0      	blx	r6
  4015a0:	2800      	cmp	r0, #0
  4015a2:	d1fa      	bne.n	40159a <usart_serial_getchar+0x5e>
  4015a4:	e7df      	b.n	401566 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4015a6:	461f      	mov	r7, r3
  4015a8:	4e19      	ldr	r6, [pc, #100]	; (401610 <usart_serial_getchar+0xd4>)
  4015aa:	4621      	mov	r1, r4
  4015ac:	4638      	mov	r0, r7
  4015ae:	47b0      	blx	r6
  4015b0:	2800      	cmp	r0, #0
  4015b2:	d1fa      	bne.n	4015aa <usart_serial_getchar+0x6e>
  4015b4:	e7da      	b.n	40156c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4015b6:	461e      	mov	r6, r3
  4015b8:	4d16      	ldr	r5, [pc, #88]	; (401614 <usart_serial_getchar+0xd8>)
  4015ba:	a901      	add	r1, sp, #4
  4015bc:	4630      	mov	r0, r6
  4015be:	47a8      	blx	r5
  4015c0:	2800      	cmp	r0, #0
  4015c2:	d1fa      	bne.n	4015ba <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4015c4:	9b01      	ldr	r3, [sp, #4]
  4015c6:	7023      	strb	r3, [r4, #0]
  4015c8:	e7d3      	b.n	401572 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4015ca:	461e      	mov	r6, r3
  4015cc:	4d11      	ldr	r5, [pc, #68]	; (401614 <usart_serial_getchar+0xd8>)
  4015ce:	a901      	add	r1, sp, #4
  4015d0:	4630      	mov	r0, r6
  4015d2:	47a8      	blx	r5
  4015d4:	2800      	cmp	r0, #0
  4015d6:	d1fa      	bne.n	4015ce <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4015d8:	9b01      	ldr	r3, [sp, #4]
  4015da:	7023      	strb	r3, [r4, #0]
  4015dc:	e7c9      	b.n	401572 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4015de:	461e      	mov	r6, r3
  4015e0:	4d0c      	ldr	r5, [pc, #48]	; (401614 <usart_serial_getchar+0xd8>)
  4015e2:	a901      	add	r1, sp, #4
  4015e4:	4630      	mov	r0, r6
  4015e6:	47a8      	blx	r5
  4015e8:	2800      	cmp	r0, #0
  4015ea:	d1fa      	bne.n	4015e2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4015ec:	9b01      	ldr	r3, [sp, #4]
  4015ee:	7023      	strb	r3, [r4, #0]
}
  4015f0:	e7bf      	b.n	401572 <usart_serial_getchar+0x36>
  4015f2:	bf00      	nop
  4015f4:	400e0800 	.word	0x400e0800
  4015f8:	400e0a00 	.word	0x400e0a00
  4015fc:	400e1a00 	.word	0x400e1a00
  401600:	400e1c00 	.word	0x400e1c00
  401604:	40024000 	.word	0x40024000
  401608:	40028000 	.word	0x40028000
  40160c:	4002c000 	.word	0x4002c000
  401610:	00400deb 	.word	0x00400deb
  401614:	0040045b 	.word	0x0040045b

00401618 <usart_serial_putchar>:
{
  401618:	b570      	push	{r4, r5, r6, lr}
  40161a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40161c:	4b2a      	ldr	r3, [pc, #168]	; (4016c8 <usart_serial_putchar+0xb0>)
  40161e:	4298      	cmp	r0, r3
  401620:	d013      	beq.n	40164a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401622:	4b2a      	ldr	r3, [pc, #168]	; (4016cc <usart_serial_putchar+0xb4>)
  401624:	4298      	cmp	r0, r3
  401626:	d019      	beq.n	40165c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401628:	4b29      	ldr	r3, [pc, #164]	; (4016d0 <usart_serial_putchar+0xb8>)
  40162a:	4298      	cmp	r0, r3
  40162c:	d01f      	beq.n	40166e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40162e:	4b29      	ldr	r3, [pc, #164]	; (4016d4 <usart_serial_putchar+0xbc>)
  401630:	4298      	cmp	r0, r3
  401632:	d025      	beq.n	401680 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401634:	4b28      	ldr	r3, [pc, #160]	; (4016d8 <usart_serial_putchar+0xc0>)
  401636:	4298      	cmp	r0, r3
  401638:	d02b      	beq.n	401692 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40163a:	4b28      	ldr	r3, [pc, #160]	; (4016dc <usart_serial_putchar+0xc4>)
  40163c:	4298      	cmp	r0, r3
  40163e:	d031      	beq.n	4016a4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401640:	4b27      	ldr	r3, [pc, #156]	; (4016e0 <usart_serial_putchar+0xc8>)
  401642:	4298      	cmp	r0, r3
  401644:	d037      	beq.n	4016b6 <usart_serial_putchar+0x9e>
	return 0;
  401646:	2000      	movs	r0, #0
}
  401648:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40164a:	461e      	mov	r6, r3
  40164c:	4d25      	ldr	r5, [pc, #148]	; (4016e4 <usart_serial_putchar+0xcc>)
  40164e:	4621      	mov	r1, r4
  401650:	4630      	mov	r0, r6
  401652:	47a8      	blx	r5
  401654:	2800      	cmp	r0, #0
  401656:	d1fa      	bne.n	40164e <usart_serial_putchar+0x36>
		return 1;
  401658:	2001      	movs	r0, #1
  40165a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40165c:	461e      	mov	r6, r3
  40165e:	4d21      	ldr	r5, [pc, #132]	; (4016e4 <usart_serial_putchar+0xcc>)
  401660:	4621      	mov	r1, r4
  401662:	4630      	mov	r0, r6
  401664:	47a8      	blx	r5
  401666:	2800      	cmp	r0, #0
  401668:	d1fa      	bne.n	401660 <usart_serial_putchar+0x48>
		return 1;
  40166a:	2001      	movs	r0, #1
  40166c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40166e:	461e      	mov	r6, r3
  401670:	4d1c      	ldr	r5, [pc, #112]	; (4016e4 <usart_serial_putchar+0xcc>)
  401672:	4621      	mov	r1, r4
  401674:	4630      	mov	r0, r6
  401676:	47a8      	blx	r5
  401678:	2800      	cmp	r0, #0
  40167a:	d1fa      	bne.n	401672 <usart_serial_putchar+0x5a>
		return 1;
  40167c:	2001      	movs	r0, #1
  40167e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401680:	461e      	mov	r6, r3
  401682:	4d18      	ldr	r5, [pc, #96]	; (4016e4 <usart_serial_putchar+0xcc>)
  401684:	4621      	mov	r1, r4
  401686:	4630      	mov	r0, r6
  401688:	47a8      	blx	r5
  40168a:	2800      	cmp	r0, #0
  40168c:	d1fa      	bne.n	401684 <usart_serial_putchar+0x6c>
		return 1;
  40168e:	2001      	movs	r0, #1
  401690:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401692:	461e      	mov	r6, r3
  401694:	4d14      	ldr	r5, [pc, #80]	; (4016e8 <usart_serial_putchar+0xd0>)
  401696:	4621      	mov	r1, r4
  401698:	4630      	mov	r0, r6
  40169a:	47a8      	blx	r5
  40169c:	2800      	cmp	r0, #0
  40169e:	d1fa      	bne.n	401696 <usart_serial_putchar+0x7e>
		return 1;
  4016a0:	2001      	movs	r0, #1
  4016a2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4016a4:	461e      	mov	r6, r3
  4016a6:	4d10      	ldr	r5, [pc, #64]	; (4016e8 <usart_serial_putchar+0xd0>)
  4016a8:	4621      	mov	r1, r4
  4016aa:	4630      	mov	r0, r6
  4016ac:	47a8      	blx	r5
  4016ae:	2800      	cmp	r0, #0
  4016b0:	d1fa      	bne.n	4016a8 <usart_serial_putchar+0x90>
		return 1;
  4016b2:	2001      	movs	r0, #1
  4016b4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4016b6:	461e      	mov	r6, r3
  4016b8:	4d0b      	ldr	r5, [pc, #44]	; (4016e8 <usart_serial_putchar+0xd0>)
  4016ba:	4621      	mov	r1, r4
  4016bc:	4630      	mov	r0, r6
  4016be:	47a8      	blx	r5
  4016c0:	2800      	cmp	r0, #0
  4016c2:	d1fa      	bne.n	4016ba <usart_serial_putchar+0xa2>
		return 1;
  4016c4:	2001      	movs	r0, #1
  4016c6:	bd70      	pop	{r4, r5, r6, pc}
  4016c8:	400e0800 	.word	0x400e0800
  4016cc:	400e0a00 	.word	0x400e0a00
  4016d0:	400e1a00 	.word	0x400e1a00
  4016d4:	400e1c00 	.word	0x400e1c00
  4016d8:	40024000 	.word	0x40024000
  4016dc:	40028000 	.word	0x40028000
  4016e0:	4002c000 	.word	0x4002c000
  4016e4:	00400dd9 	.word	0x00400dd9
  4016e8:	00400445 	.word	0x00400445
  4016ec:	00000000 	.word	0x00000000

004016f0 <main>:
	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main (void)
{
  4016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016f2:	b087      	sub	sp, #28
	/* Initialize the SAM system. */
	sysclk_init();
  4016f4:	4b62      	ldr	r3, [pc, #392]	; (401880 <main+0x190>)
  4016f6:	4798      	blx	r3
	board_init();
  4016f8:	4b62      	ldr	r3, [pc, #392]	; (401884 <main+0x194>)
  4016fa:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4016fc:	4d62      	ldr	r5, [pc, #392]	; (401888 <main+0x198>)
  4016fe:	4b63      	ldr	r3, [pc, #396]	; (40188c <main+0x19c>)
  401700:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401702:	4a63      	ldr	r2, [pc, #396]	; (401890 <main+0x1a0>)
  401704:	4b63      	ldr	r3, [pc, #396]	; (401894 <main+0x1a4>)
  401706:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401708:	4a63      	ldr	r2, [pc, #396]	; (401898 <main+0x1a8>)
  40170a:	4b64      	ldr	r3, [pc, #400]	; (40189c <main+0x1ac>)
  40170c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40170e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401712:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  401714:	23c0      	movs	r3, #192	; 0xc0
  401716:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  401718:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40171c:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40171e:	2400      	movs	r4, #0
  401720:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401722:	9404      	str	r4, [sp, #16]
  401724:	200e      	movs	r0, #14
  401726:	4b5e      	ldr	r3, [pc, #376]	; (4018a0 <main+0x1b0>)
  401728:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40172a:	4a5e      	ldr	r2, [pc, #376]	; (4018a4 <main+0x1b4>)
  40172c:	4669      	mov	r1, sp
  40172e:	4628      	mov	r0, r5
  401730:	4b5d      	ldr	r3, [pc, #372]	; (4018a8 <main+0x1b8>)
  401732:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401734:	4628      	mov	r0, r5
  401736:	4b5d      	ldr	r3, [pc, #372]	; (4018ac <main+0x1bc>)
  401738:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40173a:	4628      	mov	r0, r5
  40173c:	4b5c      	ldr	r3, [pc, #368]	; (4018b0 <main+0x1c0>)
  40173e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401740:	4e5c      	ldr	r6, [pc, #368]	; (4018b4 <main+0x1c4>)
  401742:	6833      	ldr	r3, [r6, #0]
  401744:	4621      	mov	r1, r4
  401746:	6898      	ldr	r0, [r3, #8]
  401748:	4d5b      	ldr	r5, [pc, #364]	; (4018b8 <main+0x1c8>)
  40174a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40174c:	6833      	ldr	r3, [r6, #0]
  40174e:	4621      	mov	r1, r4
  401750:	6858      	ldr	r0, [r3, #4]
  401752:	47a8      	blx	r5

	/* Initialize the console UART. */
	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  401754:	4859      	ldr	r0, [pc, #356]	; (4018bc <main+0x1cc>)
  401756:	4b5a      	ldr	r3, [pc, #360]	; (4018c0 <main+0x1d0>)
  401758:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	
	spi_set_clock_configuration(gs_ul_spi_clock);
  40175a:	4b5a      	ldr	r3, [pc, #360]	; (4018c4 <main+0x1d4>)
  40175c:	7818      	ldrb	r0, [r3, #0]
  40175e:	4b5a      	ldr	r3, [pc, #360]	; (4018c8 <main+0x1d8>)
  401760:	4798      	blx	r3
		
	nRF24_begin();
  401762:	4b5a      	ldr	r3, [pc, #360]	; (4018cc <main+0x1dc>)
  401764:	4798      	blx	r3
	nRF24_openReadingPipe(1, listeningPipes[1]);
  401766:	a742      	add	r7, pc, #264	; (adr r7, 401870 <main+0x180>)
  401768:	e9d7 6700 	ldrd	r6, r7, [r7]
  40176c:	4632      	mov	r2, r6
  40176e:	463b      	mov	r3, r7
  401770:	2001      	movs	r0, #1
  401772:	4d57      	ldr	r5, [pc, #348]	; (4018d0 <main+0x1e0>)
  401774:	47a8      	blx	r5
	nRF24_openReadingPipe(2, listeningPipes[2]);
  401776:	a340      	add	r3, pc, #256	; (adr r3, 401878 <main+0x188>)
  401778:	e9d3 2300 	ldrd	r2, r3, [r3]
  40177c:	2002      	movs	r0, #2
  40177e:	47a8      	blx	r5

	nRF24_setPALevel(RF_PA_MIN);
  401780:	4620      	mov	r0, r4
  401782:	4b54      	ldr	r3, [pc, #336]	; (4018d4 <main+0x1e4>)
  401784:	4798      	blx	r3
	nRF24_stopListening();
  401786:	4b54      	ldr	r3, [pc, #336]	; (4018d8 <main+0x1e8>)
  401788:	4798      	blx	r3

#ifdef _DEBUG	
	printDetails();
  40178a:	4b54      	ldr	r3, [pc, #336]	; (4018dc <main+0x1ec>)
  40178c:	4798      	blx	r3
#endif
	
//	while(1)
//	{

		nRF24_openWritingPipe(listeningPipes[1]);
  40178e:	4630      	mov	r0, r6
  401790:	4639      	mov	r1, r7
  401792:	4b53      	ldr	r3, [pc, #332]	; (4018e0 <main+0x1f0>)
  401794:	4798      	blx	r3

		dataOut.command = 1;
  401796:	2101      	movs	r1, #1
  401798:	4b52      	ldr	r3, [pc, #328]	; (4018e4 <main+0x1f4>)
  40179a:	7199      	strb	r1, [r3, #6]
		
#ifdef _DEBUG
		printf("commando %d send to %ld\r\n", dataOut.command, listeningPipes[1]);
  40179c:	4a52      	ldr	r2, [pc, #328]	; (4018e8 <main+0x1f8>)
  40179e:	4853      	ldr	r0, [pc, #332]	; (4018ec <main+0x1fc>)
  4017a0:	4b53      	ldr	r3, [pc, #332]	; (4018f0 <main+0x200>)
  4017a2:	4798      	blx	r3
  4017a4:	240a      	movs	r4, #10
#endif
		
		for (int i = 0; i < 10; i++)
		{
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4017a6:	4d4f      	ldr	r5, [pc, #316]	; (4018e4 <main+0x1f4>)
  4017a8:	4f52      	ldr	r7, [pc, #328]	; (4018f4 <main+0x204>)
			{
				printf("transmission failed \n\r");
  4017aa:	4e51      	ldr	r6, [pc, #324]	; (4018f0 <main+0x200>)
  4017ac:	e007      	b.n	4017be <main+0xce>
			}
#ifdef _DEBUG
			printf("commando %d\r\n", dataOut.command);
  4017ae:	79a9      	ldrb	r1, [r5, #6]
  4017b0:	4851      	ldr	r0, [pc, #324]	; (4018f8 <main+0x208>)
  4017b2:	47b0      	blx	r6
#endif
			delay_ms(10);
  4017b4:	4851      	ldr	r0, [pc, #324]	; (4018fc <main+0x20c>)
  4017b6:	4b52      	ldr	r3, [pc, #328]	; (401900 <main+0x210>)
  4017b8:	4798      	blx	r3
		for (int i = 0; i < 10; i++)
  4017ba:	3c01      	subs	r4, #1
  4017bc:	d007      	beq.n	4017ce <main+0xde>
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4017be:	2108      	movs	r1, #8
  4017c0:	4628      	mov	r0, r5
  4017c2:	47b8      	blx	r7
  4017c4:	2800      	cmp	r0, #0
  4017c6:	d1f2      	bne.n	4017ae <main+0xbe>
				printf("transmission failed \n\r");
  4017c8:	484e      	ldr	r0, [pc, #312]	; (401904 <main+0x214>)
  4017ca:	47b0      	blx	r6
  4017cc:	e7ef      	b.n	4017ae <main+0xbe>
		}

		delay_ms(500);
  4017ce:	484e      	ldr	r0, [pc, #312]	; (401908 <main+0x218>)
  4017d0:	4b4b      	ldr	r3, [pc, #300]	; (401900 <main+0x210>)
  4017d2:	4798      	blx	r3

		nRF24_openWritingPipe(listeningPipes[2]);
  4017d4:	a128      	add	r1, pc, #160	; (adr r1, 401878 <main+0x188>)
  4017d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017da:	4b41      	ldr	r3, [pc, #260]	; (4018e0 <main+0x1f0>)
  4017dc:	4798      	blx	r3
		
		dataOut.command = 1;
  4017de:	2101      	movs	r1, #1
  4017e0:	4b40      	ldr	r3, [pc, #256]	; (4018e4 <main+0x1f4>)
  4017e2:	7199      	strb	r1, [r3, #6]
		
#ifdef _DEBUG
		printf("commando %d send to %ld\r\n", dataOut.command, listeningPipes[2]);
  4017e4:	4a49      	ldr	r2, [pc, #292]	; (40190c <main+0x21c>)
  4017e6:	4841      	ldr	r0, [pc, #260]	; (4018ec <main+0x1fc>)
  4017e8:	4b41      	ldr	r3, [pc, #260]	; (4018f0 <main+0x200>)
  4017ea:	4798      	blx	r3
  4017ec:	240a      	movs	r4, #10
#endif

		for (int i = 0; i < 10; i++)
		{
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4017ee:	4d3d      	ldr	r5, [pc, #244]	; (4018e4 <main+0x1f4>)
  4017f0:	4f40      	ldr	r7, [pc, #256]	; (4018f4 <main+0x204>)
			{
				printf("transmission failed \n\r");
  4017f2:	4e3f      	ldr	r6, [pc, #252]	; (4018f0 <main+0x200>)
  4017f4:	e007      	b.n	401806 <main+0x116>
			}
#ifdef _DEBUG
			printf("commando %d\r\n", dataOut.command);
  4017f6:	79a9      	ldrb	r1, [r5, #6]
  4017f8:	483f      	ldr	r0, [pc, #252]	; (4018f8 <main+0x208>)
  4017fa:	47b0      	blx	r6
#endif
			delay_ms(10);
  4017fc:	483f      	ldr	r0, [pc, #252]	; (4018fc <main+0x20c>)
  4017fe:	4b40      	ldr	r3, [pc, #256]	; (401900 <main+0x210>)
  401800:	4798      	blx	r3
		for (int i = 0; i < 10; i++)
  401802:	3c01      	subs	r4, #1
  401804:	d007      	beq.n	401816 <main+0x126>
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  401806:	2108      	movs	r1, #8
  401808:	4628      	mov	r0, r5
  40180a:	47b8      	blx	r7
  40180c:	2800      	cmp	r0, #0
  40180e:	d1f2      	bne.n	4017f6 <main+0x106>
				printf("transmission failed \n\r");
  401810:	483c      	ldr	r0, [pc, #240]	; (401904 <main+0x214>)
  401812:	47b0      	blx	r6
  401814:	e7ef      	b.n	4017f6 <main+0x106>
		}
		
		delay_s(1);
  401816:	483e      	ldr	r0, [pc, #248]	; (401910 <main+0x220>)
  401818:	4b39      	ldr	r3, [pc, #228]	; (401900 <main+0x210>)
  40181a:	4798      	blx	r3
		
		nRF24_openWritingPipe(listeningPipes[1]);
  40181c:	a114      	add	r1, pc, #80	; (adr r1, 401870 <main+0x180>)
  40181e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401822:	4b2f      	ldr	r3, [pc, #188]	; (4018e0 <main+0x1f0>)
  401824:	4798      	blx	r3
		//data packet zender
		dataOut.command = 2;
  401826:	4b2f      	ldr	r3, [pc, #188]	; (4018e4 <main+0x1f4>)
  401828:	2102      	movs	r1, #2
  40182a:	7199      	strb	r1, [r3, #6]
		dataOut.destAddr = listeningPipes[2];
  40182c:	4a37      	ldr	r2, [pc, #220]	; (40190c <main+0x21c>)
  40182e:	601a      	str	r2, [r3, #0]
		dataOut.datavalue = 0;
  401830:	2200      	movs	r2, #0
  401832:	809a      	strh	r2, [r3, #4]
		
#ifdef _DEBUG
		printf("commando %d send to %ld\r\n", dataOut.command, listeningPipes[1]);
  401834:	4a2c      	ldr	r2, [pc, #176]	; (4018e8 <main+0x1f8>)
  401836:	482d      	ldr	r0, [pc, #180]	; (4018ec <main+0x1fc>)
  401838:	4b2d      	ldr	r3, [pc, #180]	; (4018f0 <main+0x200>)
  40183a:	4798      	blx	r3
  40183c:	240a      	movs	r4, #10
#endif		

		for (int i = 0; i< 10; i++)
		{
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  40183e:	4d29      	ldr	r5, [pc, #164]	; (4018e4 <main+0x1f4>)
  401840:	4f2c      	ldr	r7, [pc, #176]	; (4018f4 <main+0x204>)
			{
				printf("transmission failed \n\r");
  401842:	4e2b      	ldr	r6, [pc, #172]	; (4018f0 <main+0x200>)
  401844:	e007      	b.n	401856 <main+0x166>
			}
			#ifdef _DEBUG
			printf("commando %d\r\n", dataOut.command);
  401846:	79a9      	ldrb	r1, [r5, #6]
  401848:	482b      	ldr	r0, [pc, #172]	; (4018f8 <main+0x208>)
  40184a:	47b0      	blx	r6
			#endif
			delay_ms(10);
  40184c:	482b      	ldr	r0, [pc, #172]	; (4018fc <main+0x20c>)
  40184e:	4b2c      	ldr	r3, [pc, #176]	; (401900 <main+0x210>)
  401850:	4798      	blx	r3
		for (int i = 0; i< 10; i++)
  401852:	3c01      	subs	r4, #1
  401854:	d007      	beq.n	401866 <main+0x176>
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  401856:	2108      	movs	r1, #8
  401858:	4628      	mov	r0, r5
  40185a:	47b8      	blx	r7
  40185c:	2800      	cmp	r0, #0
  40185e:	d1f2      	bne.n	401846 <main+0x156>
				printf("transmission failed \n\r");
  401860:	4828      	ldr	r0, [pc, #160]	; (401904 <main+0x214>)
  401862:	47b0      	blx	r6
  401864:	e7ef      	b.n	401846 <main+0x156>
		}
		
//		delay_s(5);
//	}

}
  401866:	2000      	movs	r0, #0
  401868:	b007      	add	sp, #28
  40186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40186c:	f3af 8000 	nop.w
  401870:	3a3a3ac3 	.word	0x3a3a3ac3
  401874:	00000000 	.word	0x00000000
  401878:	3a3a3ab4 	.word	0x3a3a3ab4
  40187c:	00000000 	.word	0x00000000
  401880:	00400e01 	.word	0x00400e01
  401884:	00400e71 	.word	0x00400e71
  401888:	40028000 	.word	0x40028000
  40188c:	20400ab0 	.word	0x20400ab0
  401890:	00401619 	.word	0x00401619
  401894:	20400aac 	.word	0x20400aac
  401898:	0040153d 	.word	0x0040153d
  40189c:	20400a98 	.word	0x20400a98
  4018a0:	00401269 	.word	0x00401269
  4018a4:	08f0d180 	.word	0x08f0d180
  4018a8:	004003e5 	.word	0x004003e5
  4018ac:	00400439 	.word	0x00400439
  4018b0:	0040043f 	.word	0x0040043f
  4018b4:	20400018 	.word	0x20400018
  4018b8:	00401f19 	.word	0x00401f19
  4018bc:	00404b60 	.word	0x00404b60
  4018c0:	00401f09 	.word	0x00401f09
  4018c4:	2040000c 	.word	0x2040000c
  4018c8:	00400281 	.word	0x00400281
  4018cc:	00400a35 	.word	0x00400a35
  4018d0:	00400b09 	.word	0x00400b09
  4018d4:	00400751 	.word	0x00400751
  4018d8:	00400981 	.word	0x00400981
  4018dc:	00400795 	.word	0x00400795
  4018e0:	00400acd 	.word	0x00400acd
  4018e4:	20400abc 	.word	0x20400abc
  4018e8:	3a3a3ac3 	.word	0x3a3a3ac3
  4018ec:	00404bb4 	.word	0x00404bb4
  4018f0:	00401c75 	.word	0x00401c75
  4018f4:	00400b95 	.word	0x00400b95
  4018f8:	00404be8 	.word	0x00404be8
  4018fc:	0007b784 	.word	0x0007b784
  401900:	20400001 	.word	0x20400001
  401904:	00404bd0 	.word	0x00404bd0
  401908:	0181d7b6 	.word	0x0181d7b6
  40190c:	3a3a3ab4 	.word	0x3a3a3ab4
  401910:	0303af6b 	.word	0x0303af6b

00401914 <__aeabi_uldivmod>:
  401914:	b953      	cbnz	r3, 40192c <__aeabi_uldivmod+0x18>
  401916:	b94a      	cbnz	r2, 40192c <__aeabi_uldivmod+0x18>
  401918:	2900      	cmp	r1, #0
  40191a:	bf08      	it	eq
  40191c:	2800      	cmpeq	r0, #0
  40191e:	bf1c      	itt	ne
  401920:	f04f 31ff 	movne.w	r1, #4294967295
  401924:	f04f 30ff 	movne.w	r0, #4294967295
  401928:	f000 b97a 	b.w	401c20 <__aeabi_idiv0>
  40192c:	f1ad 0c08 	sub.w	ip, sp, #8
  401930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401934:	f000 f806 	bl	401944 <__udivmoddi4>
  401938:	f8dd e004 	ldr.w	lr, [sp, #4]
  40193c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401940:	b004      	add	sp, #16
  401942:	4770      	bx	lr

00401944 <__udivmoddi4>:
  401944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401948:	468c      	mov	ip, r1
  40194a:	460d      	mov	r5, r1
  40194c:	4604      	mov	r4, r0
  40194e:	9e08      	ldr	r6, [sp, #32]
  401950:	2b00      	cmp	r3, #0
  401952:	d151      	bne.n	4019f8 <__udivmoddi4+0xb4>
  401954:	428a      	cmp	r2, r1
  401956:	4617      	mov	r7, r2
  401958:	d96d      	bls.n	401a36 <__udivmoddi4+0xf2>
  40195a:	fab2 fe82 	clz	lr, r2
  40195e:	f1be 0f00 	cmp.w	lr, #0
  401962:	d00b      	beq.n	40197c <__udivmoddi4+0x38>
  401964:	f1ce 0c20 	rsb	ip, lr, #32
  401968:	fa01 f50e 	lsl.w	r5, r1, lr
  40196c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401970:	fa02 f70e 	lsl.w	r7, r2, lr
  401974:	ea4c 0c05 	orr.w	ip, ip, r5
  401978:	fa00 f40e 	lsl.w	r4, r0, lr
  40197c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401980:	0c25      	lsrs	r5, r4, #16
  401982:	fbbc f8fa 	udiv	r8, ip, sl
  401986:	fa1f f987 	uxth.w	r9, r7
  40198a:	fb0a cc18 	mls	ip, sl, r8, ip
  40198e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401992:	fb08 f309 	mul.w	r3, r8, r9
  401996:	42ab      	cmp	r3, r5
  401998:	d90a      	bls.n	4019b0 <__udivmoddi4+0x6c>
  40199a:	19ed      	adds	r5, r5, r7
  40199c:	f108 32ff 	add.w	r2, r8, #4294967295
  4019a0:	f080 8123 	bcs.w	401bea <__udivmoddi4+0x2a6>
  4019a4:	42ab      	cmp	r3, r5
  4019a6:	f240 8120 	bls.w	401bea <__udivmoddi4+0x2a6>
  4019aa:	f1a8 0802 	sub.w	r8, r8, #2
  4019ae:	443d      	add	r5, r7
  4019b0:	1aed      	subs	r5, r5, r3
  4019b2:	b2a4      	uxth	r4, r4
  4019b4:	fbb5 f0fa 	udiv	r0, r5, sl
  4019b8:	fb0a 5510 	mls	r5, sl, r0, r5
  4019bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4019c0:	fb00 f909 	mul.w	r9, r0, r9
  4019c4:	45a1      	cmp	r9, r4
  4019c6:	d909      	bls.n	4019dc <__udivmoddi4+0x98>
  4019c8:	19e4      	adds	r4, r4, r7
  4019ca:	f100 33ff 	add.w	r3, r0, #4294967295
  4019ce:	f080 810a 	bcs.w	401be6 <__udivmoddi4+0x2a2>
  4019d2:	45a1      	cmp	r9, r4
  4019d4:	f240 8107 	bls.w	401be6 <__udivmoddi4+0x2a2>
  4019d8:	3802      	subs	r0, #2
  4019da:	443c      	add	r4, r7
  4019dc:	eba4 0409 	sub.w	r4, r4, r9
  4019e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4019e4:	2100      	movs	r1, #0
  4019e6:	2e00      	cmp	r6, #0
  4019e8:	d061      	beq.n	401aae <__udivmoddi4+0x16a>
  4019ea:	fa24 f40e 	lsr.w	r4, r4, lr
  4019ee:	2300      	movs	r3, #0
  4019f0:	6034      	str	r4, [r6, #0]
  4019f2:	6073      	str	r3, [r6, #4]
  4019f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019f8:	428b      	cmp	r3, r1
  4019fa:	d907      	bls.n	401a0c <__udivmoddi4+0xc8>
  4019fc:	2e00      	cmp	r6, #0
  4019fe:	d054      	beq.n	401aaa <__udivmoddi4+0x166>
  401a00:	2100      	movs	r1, #0
  401a02:	e886 0021 	stmia.w	r6, {r0, r5}
  401a06:	4608      	mov	r0, r1
  401a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a0c:	fab3 f183 	clz	r1, r3
  401a10:	2900      	cmp	r1, #0
  401a12:	f040 808e 	bne.w	401b32 <__udivmoddi4+0x1ee>
  401a16:	42ab      	cmp	r3, r5
  401a18:	d302      	bcc.n	401a20 <__udivmoddi4+0xdc>
  401a1a:	4282      	cmp	r2, r0
  401a1c:	f200 80fa 	bhi.w	401c14 <__udivmoddi4+0x2d0>
  401a20:	1a84      	subs	r4, r0, r2
  401a22:	eb65 0503 	sbc.w	r5, r5, r3
  401a26:	2001      	movs	r0, #1
  401a28:	46ac      	mov	ip, r5
  401a2a:	2e00      	cmp	r6, #0
  401a2c:	d03f      	beq.n	401aae <__udivmoddi4+0x16a>
  401a2e:	e886 1010 	stmia.w	r6, {r4, ip}
  401a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a36:	b912      	cbnz	r2, 401a3e <__udivmoddi4+0xfa>
  401a38:	2701      	movs	r7, #1
  401a3a:	fbb7 f7f2 	udiv	r7, r7, r2
  401a3e:	fab7 fe87 	clz	lr, r7
  401a42:	f1be 0f00 	cmp.w	lr, #0
  401a46:	d134      	bne.n	401ab2 <__udivmoddi4+0x16e>
  401a48:	1beb      	subs	r3, r5, r7
  401a4a:	0c3a      	lsrs	r2, r7, #16
  401a4c:	fa1f fc87 	uxth.w	ip, r7
  401a50:	2101      	movs	r1, #1
  401a52:	fbb3 f8f2 	udiv	r8, r3, r2
  401a56:	0c25      	lsrs	r5, r4, #16
  401a58:	fb02 3318 	mls	r3, r2, r8, r3
  401a5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401a60:	fb0c f308 	mul.w	r3, ip, r8
  401a64:	42ab      	cmp	r3, r5
  401a66:	d907      	bls.n	401a78 <__udivmoddi4+0x134>
  401a68:	19ed      	adds	r5, r5, r7
  401a6a:	f108 30ff 	add.w	r0, r8, #4294967295
  401a6e:	d202      	bcs.n	401a76 <__udivmoddi4+0x132>
  401a70:	42ab      	cmp	r3, r5
  401a72:	f200 80d1 	bhi.w	401c18 <__udivmoddi4+0x2d4>
  401a76:	4680      	mov	r8, r0
  401a78:	1aed      	subs	r5, r5, r3
  401a7a:	b2a3      	uxth	r3, r4
  401a7c:	fbb5 f0f2 	udiv	r0, r5, r2
  401a80:	fb02 5510 	mls	r5, r2, r0, r5
  401a84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401a88:	fb0c fc00 	mul.w	ip, ip, r0
  401a8c:	45a4      	cmp	ip, r4
  401a8e:	d907      	bls.n	401aa0 <__udivmoddi4+0x15c>
  401a90:	19e4      	adds	r4, r4, r7
  401a92:	f100 33ff 	add.w	r3, r0, #4294967295
  401a96:	d202      	bcs.n	401a9e <__udivmoddi4+0x15a>
  401a98:	45a4      	cmp	ip, r4
  401a9a:	f200 80b8 	bhi.w	401c0e <__udivmoddi4+0x2ca>
  401a9e:	4618      	mov	r0, r3
  401aa0:	eba4 040c 	sub.w	r4, r4, ip
  401aa4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401aa8:	e79d      	b.n	4019e6 <__udivmoddi4+0xa2>
  401aaa:	4631      	mov	r1, r6
  401aac:	4630      	mov	r0, r6
  401aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ab2:	f1ce 0420 	rsb	r4, lr, #32
  401ab6:	fa05 f30e 	lsl.w	r3, r5, lr
  401aba:	fa07 f70e 	lsl.w	r7, r7, lr
  401abe:	fa20 f804 	lsr.w	r8, r0, r4
  401ac2:	0c3a      	lsrs	r2, r7, #16
  401ac4:	fa25 f404 	lsr.w	r4, r5, r4
  401ac8:	ea48 0803 	orr.w	r8, r8, r3
  401acc:	fbb4 f1f2 	udiv	r1, r4, r2
  401ad0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401ad4:	fb02 4411 	mls	r4, r2, r1, r4
  401ad8:	fa1f fc87 	uxth.w	ip, r7
  401adc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401ae0:	fb01 f30c 	mul.w	r3, r1, ip
  401ae4:	42ab      	cmp	r3, r5
  401ae6:	fa00 f40e 	lsl.w	r4, r0, lr
  401aea:	d909      	bls.n	401b00 <__udivmoddi4+0x1bc>
  401aec:	19ed      	adds	r5, r5, r7
  401aee:	f101 30ff 	add.w	r0, r1, #4294967295
  401af2:	f080 808a 	bcs.w	401c0a <__udivmoddi4+0x2c6>
  401af6:	42ab      	cmp	r3, r5
  401af8:	f240 8087 	bls.w	401c0a <__udivmoddi4+0x2c6>
  401afc:	3902      	subs	r1, #2
  401afe:	443d      	add	r5, r7
  401b00:	1aeb      	subs	r3, r5, r3
  401b02:	fa1f f588 	uxth.w	r5, r8
  401b06:	fbb3 f0f2 	udiv	r0, r3, r2
  401b0a:	fb02 3310 	mls	r3, r2, r0, r3
  401b0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401b12:	fb00 f30c 	mul.w	r3, r0, ip
  401b16:	42ab      	cmp	r3, r5
  401b18:	d907      	bls.n	401b2a <__udivmoddi4+0x1e6>
  401b1a:	19ed      	adds	r5, r5, r7
  401b1c:	f100 38ff 	add.w	r8, r0, #4294967295
  401b20:	d26f      	bcs.n	401c02 <__udivmoddi4+0x2be>
  401b22:	42ab      	cmp	r3, r5
  401b24:	d96d      	bls.n	401c02 <__udivmoddi4+0x2be>
  401b26:	3802      	subs	r0, #2
  401b28:	443d      	add	r5, r7
  401b2a:	1aeb      	subs	r3, r5, r3
  401b2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401b30:	e78f      	b.n	401a52 <__udivmoddi4+0x10e>
  401b32:	f1c1 0720 	rsb	r7, r1, #32
  401b36:	fa22 f807 	lsr.w	r8, r2, r7
  401b3a:	408b      	lsls	r3, r1
  401b3c:	fa05 f401 	lsl.w	r4, r5, r1
  401b40:	ea48 0303 	orr.w	r3, r8, r3
  401b44:	fa20 fe07 	lsr.w	lr, r0, r7
  401b48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401b4c:	40fd      	lsrs	r5, r7
  401b4e:	ea4e 0e04 	orr.w	lr, lr, r4
  401b52:	fbb5 f9fc 	udiv	r9, r5, ip
  401b56:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401b5a:	fb0c 5519 	mls	r5, ip, r9, r5
  401b5e:	fa1f f883 	uxth.w	r8, r3
  401b62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401b66:	fb09 f408 	mul.w	r4, r9, r8
  401b6a:	42ac      	cmp	r4, r5
  401b6c:	fa02 f201 	lsl.w	r2, r2, r1
  401b70:	fa00 fa01 	lsl.w	sl, r0, r1
  401b74:	d908      	bls.n	401b88 <__udivmoddi4+0x244>
  401b76:	18ed      	adds	r5, r5, r3
  401b78:	f109 30ff 	add.w	r0, r9, #4294967295
  401b7c:	d243      	bcs.n	401c06 <__udivmoddi4+0x2c2>
  401b7e:	42ac      	cmp	r4, r5
  401b80:	d941      	bls.n	401c06 <__udivmoddi4+0x2c2>
  401b82:	f1a9 0902 	sub.w	r9, r9, #2
  401b86:	441d      	add	r5, r3
  401b88:	1b2d      	subs	r5, r5, r4
  401b8a:	fa1f fe8e 	uxth.w	lr, lr
  401b8e:	fbb5 f0fc 	udiv	r0, r5, ip
  401b92:	fb0c 5510 	mls	r5, ip, r0, r5
  401b96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401b9a:	fb00 f808 	mul.w	r8, r0, r8
  401b9e:	45a0      	cmp	r8, r4
  401ba0:	d907      	bls.n	401bb2 <__udivmoddi4+0x26e>
  401ba2:	18e4      	adds	r4, r4, r3
  401ba4:	f100 35ff 	add.w	r5, r0, #4294967295
  401ba8:	d229      	bcs.n	401bfe <__udivmoddi4+0x2ba>
  401baa:	45a0      	cmp	r8, r4
  401bac:	d927      	bls.n	401bfe <__udivmoddi4+0x2ba>
  401bae:	3802      	subs	r0, #2
  401bb0:	441c      	add	r4, r3
  401bb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401bb6:	eba4 0408 	sub.w	r4, r4, r8
  401bba:	fba0 8902 	umull	r8, r9, r0, r2
  401bbe:	454c      	cmp	r4, r9
  401bc0:	46c6      	mov	lr, r8
  401bc2:	464d      	mov	r5, r9
  401bc4:	d315      	bcc.n	401bf2 <__udivmoddi4+0x2ae>
  401bc6:	d012      	beq.n	401bee <__udivmoddi4+0x2aa>
  401bc8:	b156      	cbz	r6, 401be0 <__udivmoddi4+0x29c>
  401bca:	ebba 030e 	subs.w	r3, sl, lr
  401bce:	eb64 0405 	sbc.w	r4, r4, r5
  401bd2:	fa04 f707 	lsl.w	r7, r4, r7
  401bd6:	40cb      	lsrs	r3, r1
  401bd8:	431f      	orrs	r7, r3
  401bda:	40cc      	lsrs	r4, r1
  401bdc:	6037      	str	r7, [r6, #0]
  401bde:	6074      	str	r4, [r6, #4]
  401be0:	2100      	movs	r1, #0
  401be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401be6:	4618      	mov	r0, r3
  401be8:	e6f8      	b.n	4019dc <__udivmoddi4+0x98>
  401bea:	4690      	mov	r8, r2
  401bec:	e6e0      	b.n	4019b0 <__udivmoddi4+0x6c>
  401bee:	45c2      	cmp	sl, r8
  401bf0:	d2ea      	bcs.n	401bc8 <__udivmoddi4+0x284>
  401bf2:	ebb8 0e02 	subs.w	lr, r8, r2
  401bf6:	eb69 0503 	sbc.w	r5, r9, r3
  401bfa:	3801      	subs	r0, #1
  401bfc:	e7e4      	b.n	401bc8 <__udivmoddi4+0x284>
  401bfe:	4628      	mov	r0, r5
  401c00:	e7d7      	b.n	401bb2 <__udivmoddi4+0x26e>
  401c02:	4640      	mov	r0, r8
  401c04:	e791      	b.n	401b2a <__udivmoddi4+0x1e6>
  401c06:	4681      	mov	r9, r0
  401c08:	e7be      	b.n	401b88 <__udivmoddi4+0x244>
  401c0a:	4601      	mov	r1, r0
  401c0c:	e778      	b.n	401b00 <__udivmoddi4+0x1bc>
  401c0e:	3802      	subs	r0, #2
  401c10:	443c      	add	r4, r7
  401c12:	e745      	b.n	401aa0 <__udivmoddi4+0x15c>
  401c14:	4608      	mov	r0, r1
  401c16:	e708      	b.n	401a2a <__udivmoddi4+0xe6>
  401c18:	f1a8 0802 	sub.w	r8, r8, #2
  401c1c:	443d      	add	r5, r7
  401c1e:	e72b      	b.n	401a78 <__udivmoddi4+0x134>

00401c20 <__aeabi_idiv0>:
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop

00401c24 <__libc_init_array>:
  401c24:	b570      	push	{r4, r5, r6, lr}
  401c26:	4e0f      	ldr	r6, [pc, #60]	; (401c64 <__libc_init_array+0x40>)
  401c28:	4d0f      	ldr	r5, [pc, #60]	; (401c68 <__libc_init_array+0x44>)
  401c2a:	1b76      	subs	r6, r6, r5
  401c2c:	10b6      	asrs	r6, r6, #2
  401c2e:	bf18      	it	ne
  401c30:	2400      	movne	r4, #0
  401c32:	d005      	beq.n	401c40 <__libc_init_array+0x1c>
  401c34:	3401      	adds	r4, #1
  401c36:	f855 3b04 	ldr.w	r3, [r5], #4
  401c3a:	4798      	blx	r3
  401c3c:	42a6      	cmp	r6, r4
  401c3e:	d1f9      	bne.n	401c34 <__libc_init_array+0x10>
  401c40:	4e0a      	ldr	r6, [pc, #40]	; (401c6c <__libc_init_array+0x48>)
  401c42:	4d0b      	ldr	r5, [pc, #44]	; (401c70 <__libc_init_array+0x4c>)
  401c44:	1b76      	subs	r6, r6, r5
  401c46:	f003 f88b 	bl	404d60 <_init>
  401c4a:	10b6      	asrs	r6, r6, #2
  401c4c:	bf18      	it	ne
  401c4e:	2400      	movne	r4, #0
  401c50:	d006      	beq.n	401c60 <__libc_init_array+0x3c>
  401c52:	3401      	adds	r4, #1
  401c54:	f855 3b04 	ldr.w	r3, [r5], #4
  401c58:	4798      	blx	r3
  401c5a:	42a6      	cmp	r6, r4
  401c5c:	d1f9      	bne.n	401c52 <__libc_init_array+0x2e>
  401c5e:	bd70      	pop	{r4, r5, r6, pc}
  401c60:	bd70      	pop	{r4, r5, r6, pc}
  401c62:	bf00      	nop
  401c64:	00404d6c 	.word	0x00404d6c
  401c68:	00404d6c 	.word	0x00404d6c
  401c6c:	00404d74 	.word	0x00404d74
  401c70:	00404d6c 	.word	0x00404d6c

00401c74 <iprintf>:
  401c74:	b40f      	push	{r0, r1, r2, r3}
  401c76:	b500      	push	{lr}
  401c78:	4907      	ldr	r1, [pc, #28]	; (401c98 <iprintf+0x24>)
  401c7a:	b083      	sub	sp, #12
  401c7c:	ab04      	add	r3, sp, #16
  401c7e:	6808      	ldr	r0, [r1, #0]
  401c80:	f853 2b04 	ldr.w	r2, [r3], #4
  401c84:	6881      	ldr	r1, [r0, #8]
  401c86:	9301      	str	r3, [sp, #4]
  401c88:	f000 fac8 	bl	40221c <_vfiprintf_r>
  401c8c:	b003      	add	sp, #12
  401c8e:	f85d eb04 	ldr.w	lr, [sp], #4
  401c92:	b004      	add	sp, #16
  401c94:	4770      	bx	lr
  401c96:	bf00      	nop
  401c98:	20400018 	.word	0x20400018

00401c9c <memcpy>:
  401c9c:	4684      	mov	ip, r0
  401c9e:	ea41 0300 	orr.w	r3, r1, r0
  401ca2:	f013 0303 	ands.w	r3, r3, #3
  401ca6:	d16d      	bne.n	401d84 <memcpy+0xe8>
  401ca8:	3a40      	subs	r2, #64	; 0x40
  401caa:	d341      	bcc.n	401d30 <memcpy+0x94>
  401cac:	f851 3b04 	ldr.w	r3, [r1], #4
  401cb0:	f840 3b04 	str.w	r3, [r0], #4
  401cb4:	f851 3b04 	ldr.w	r3, [r1], #4
  401cb8:	f840 3b04 	str.w	r3, [r0], #4
  401cbc:	f851 3b04 	ldr.w	r3, [r1], #4
  401cc0:	f840 3b04 	str.w	r3, [r0], #4
  401cc4:	f851 3b04 	ldr.w	r3, [r1], #4
  401cc8:	f840 3b04 	str.w	r3, [r0], #4
  401ccc:	f851 3b04 	ldr.w	r3, [r1], #4
  401cd0:	f840 3b04 	str.w	r3, [r0], #4
  401cd4:	f851 3b04 	ldr.w	r3, [r1], #4
  401cd8:	f840 3b04 	str.w	r3, [r0], #4
  401cdc:	f851 3b04 	ldr.w	r3, [r1], #4
  401ce0:	f840 3b04 	str.w	r3, [r0], #4
  401ce4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ce8:	f840 3b04 	str.w	r3, [r0], #4
  401cec:	f851 3b04 	ldr.w	r3, [r1], #4
  401cf0:	f840 3b04 	str.w	r3, [r0], #4
  401cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  401cf8:	f840 3b04 	str.w	r3, [r0], #4
  401cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  401d00:	f840 3b04 	str.w	r3, [r0], #4
  401d04:	f851 3b04 	ldr.w	r3, [r1], #4
  401d08:	f840 3b04 	str.w	r3, [r0], #4
  401d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  401d10:	f840 3b04 	str.w	r3, [r0], #4
  401d14:	f851 3b04 	ldr.w	r3, [r1], #4
  401d18:	f840 3b04 	str.w	r3, [r0], #4
  401d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  401d20:	f840 3b04 	str.w	r3, [r0], #4
  401d24:	f851 3b04 	ldr.w	r3, [r1], #4
  401d28:	f840 3b04 	str.w	r3, [r0], #4
  401d2c:	3a40      	subs	r2, #64	; 0x40
  401d2e:	d2bd      	bcs.n	401cac <memcpy+0x10>
  401d30:	3230      	adds	r2, #48	; 0x30
  401d32:	d311      	bcc.n	401d58 <memcpy+0xbc>
  401d34:	f851 3b04 	ldr.w	r3, [r1], #4
  401d38:	f840 3b04 	str.w	r3, [r0], #4
  401d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  401d40:	f840 3b04 	str.w	r3, [r0], #4
  401d44:	f851 3b04 	ldr.w	r3, [r1], #4
  401d48:	f840 3b04 	str.w	r3, [r0], #4
  401d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  401d50:	f840 3b04 	str.w	r3, [r0], #4
  401d54:	3a10      	subs	r2, #16
  401d56:	d2ed      	bcs.n	401d34 <memcpy+0x98>
  401d58:	320c      	adds	r2, #12
  401d5a:	d305      	bcc.n	401d68 <memcpy+0xcc>
  401d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  401d60:	f840 3b04 	str.w	r3, [r0], #4
  401d64:	3a04      	subs	r2, #4
  401d66:	d2f9      	bcs.n	401d5c <memcpy+0xc0>
  401d68:	3204      	adds	r2, #4
  401d6a:	d008      	beq.n	401d7e <memcpy+0xe2>
  401d6c:	07d2      	lsls	r2, r2, #31
  401d6e:	bf1c      	itt	ne
  401d70:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401d74:	f800 3b01 	strbne.w	r3, [r0], #1
  401d78:	d301      	bcc.n	401d7e <memcpy+0xe2>
  401d7a:	880b      	ldrh	r3, [r1, #0]
  401d7c:	8003      	strh	r3, [r0, #0]
  401d7e:	4660      	mov	r0, ip
  401d80:	4770      	bx	lr
  401d82:	bf00      	nop
  401d84:	2a08      	cmp	r2, #8
  401d86:	d313      	bcc.n	401db0 <memcpy+0x114>
  401d88:	078b      	lsls	r3, r1, #30
  401d8a:	d08d      	beq.n	401ca8 <memcpy+0xc>
  401d8c:	f010 0303 	ands.w	r3, r0, #3
  401d90:	d08a      	beq.n	401ca8 <memcpy+0xc>
  401d92:	f1c3 0304 	rsb	r3, r3, #4
  401d96:	1ad2      	subs	r2, r2, r3
  401d98:	07db      	lsls	r3, r3, #31
  401d9a:	bf1c      	itt	ne
  401d9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401da0:	f800 3b01 	strbne.w	r3, [r0], #1
  401da4:	d380      	bcc.n	401ca8 <memcpy+0xc>
  401da6:	f831 3b02 	ldrh.w	r3, [r1], #2
  401daa:	f820 3b02 	strh.w	r3, [r0], #2
  401dae:	e77b      	b.n	401ca8 <memcpy+0xc>
  401db0:	3a04      	subs	r2, #4
  401db2:	d3d9      	bcc.n	401d68 <memcpy+0xcc>
  401db4:	3a01      	subs	r2, #1
  401db6:	f811 3b01 	ldrb.w	r3, [r1], #1
  401dba:	f800 3b01 	strb.w	r3, [r0], #1
  401dbe:	d2f9      	bcs.n	401db4 <memcpy+0x118>
  401dc0:	780b      	ldrb	r3, [r1, #0]
  401dc2:	7003      	strb	r3, [r0, #0]
  401dc4:	784b      	ldrb	r3, [r1, #1]
  401dc6:	7043      	strb	r3, [r0, #1]
  401dc8:	788b      	ldrb	r3, [r1, #2]
  401dca:	7083      	strb	r3, [r0, #2]
  401dcc:	4660      	mov	r0, ip
  401dce:	4770      	bx	lr

00401dd0 <memset>:
  401dd0:	b470      	push	{r4, r5, r6}
  401dd2:	0786      	lsls	r6, r0, #30
  401dd4:	d046      	beq.n	401e64 <memset+0x94>
  401dd6:	1e54      	subs	r4, r2, #1
  401dd8:	2a00      	cmp	r2, #0
  401dda:	d041      	beq.n	401e60 <memset+0x90>
  401ddc:	b2ca      	uxtb	r2, r1
  401dde:	4603      	mov	r3, r0
  401de0:	e002      	b.n	401de8 <memset+0x18>
  401de2:	f114 34ff 	adds.w	r4, r4, #4294967295
  401de6:	d33b      	bcc.n	401e60 <memset+0x90>
  401de8:	f803 2b01 	strb.w	r2, [r3], #1
  401dec:	079d      	lsls	r5, r3, #30
  401dee:	d1f8      	bne.n	401de2 <memset+0x12>
  401df0:	2c03      	cmp	r4, #3
  401df2:	d92e      	bls.n	401e52 <memset+0x82>
  401df4:	b2cd      	uxtb	r5, r1
  401df6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401dfa:	2c0f      	cmp	r4, #15
  401dfc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401e00:	d919      	bls.n	401e36 <memset+0x66>
  401e02:	f103 0210 	add.w	r2, r3, #16
  401e06:	4626      	mov	r6, r4
  401e08:	3e10      	subs	r6, #16
  401e0a:	2e0f      	cmp	r6, #15
  401e0c:	f842 5c10 	str.w	r5, [r2, #-16]
  401e10:	f842 5c0c 	str.w	r5, [r2, #-12]
  401e14:	f842 5c08 	str.w	r5, [r2, #-8]
  401e18:	f842 5c04 	str.w	r5, [r2, #-4]
  401e1c:	f102 0210 	add.w	r2, r2, #16
  401e20:	d8f2      	bhi.n	401e08 <memset+0x38>
  401e22:	f1a4 0210 	sub.w	r2, r4, #16
  401e26:	f022 020f 	bic.w	r2, r2, #15
  401e2a:	f004 040f 	and.w	r4, r4, #15
  401e2e:	3210      	adds	r2, #16
  401e30:	2c03      	cmp	r4, #3
  401e32:	4413      	add	r3, r2
  401e34:	d90d      	bls.n	401e52 <memset+0x82>
  401e36:	461e      	mov	r6, r3
  401e38:	4622      	mov	r2, r4
  401e3a:	3a04      	subs	r2, #4
  401e3c:	2a03      	cmp	r2, #3
  401e3e:	f846 5b04 	str.w	r5, [r6], #4
  401e42:	d8fa      	bhi.n	401e3a <memset+0x6a>
  401e44:	1f22      	subs	r2, r4, #4
  401e46:	f022 0203 	bic.w	r2, r2, #3
  401e4a:	3204      	adds	r2, #4
  401e4c:	4413      	add	r3, r2
  401e4e:	f004 0403 	and.w	r4, r4, #3
  401e52:	b12c      	cbz	r4, 401e60 <memset+0x90>
  401e54:	b2c9      	uxtb	r1, r1
  401e56:	441c      	add	r4, r3
  401e58:	f803 1b01 	strb.w	r1, [r3], #1
  401e5c:	429c      	cmp	r4, r3
  401e5e:	d1fb      	bne.n	401e58 <memset+0x88>
  401e60:	bc70      	pop	{r4, r5, r6}
  401e62:	4770      	bx	lr
  401e64:	4614      	mov	r4, r2
  401e66:	4603      	mov	r3, r0
  401e68:	e7c2      	b.n	401df0 <memset+0x20>
  401e6a:	bf00      	nop

00401e6c <_puts_r>:
  401e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e6e:	4605      	mov	r5, r0
  401e70:	b089      	sub	sp, #36	; 0x24
  401e72:	4608      	mov	r0, r1
  401e74:	460c      	mov	r4, r1
  401e76:	f000 f923 	bl	4020c0 <strlen>
  401e7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401e7c:	4f21      	ldr	r7, [pc, #132]	; (401f04 <_puts_r+0x98>)
  401e7e:	9404      	str	r4, [sp, #16]
  401e80:	2601      	movs	r6, #1
  401e82:	1c44      	adds	r4, r0, #1
  401e84:	a904      	add	r1, sp, #16
  401e86:	2202      	movs	r2, #2
  401e88:	9403      	str	r4, [sp, #12]
  401e8a:	9005      	str	r0, [sp, #20]
  401e8c:	68ac      	ldr	r4, [r5, #8]
  401e8e:	9706      	str	r7, [sp, #24]
  401e90:	9607      	str	r6, [sp, #28]
  401e92:	9101      	str	r1, [sp, #4]
  401e94:	9202      	str	r2, [sp, #8]
  401e96:	b353      	cbz	r3, 401eee <_puts_r+0x82>
  401e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401e9a:	f013 0f01 	tst.w	r3, #1
  401e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ea2:	b29a      	uxth	r2, r3
  401ea4:	d101      	bne.n	401eaa <_puts_r+0x3e>
  401ea6:	0590      	lsls	r0, r2, #22
  401ea8:	d525      	bpl.n	401ef6 <_puts_r+0x8a>
  401eaa:	0491      	lsls	r1, r2, #18
  401eac:	d406      	bmi.n	401ebc <_puts_r+0x50>
  401eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401eb8:	81a3      	strh	r3, [r4, #12]
  401eba:	6662      	str	r2, [r4, #100]	; 0x64
  401ebc:	4628      	mov	r0, r5
  401ebe:	aa01      	add	r2, sp, #4
  401ec0:	4621      	mov	r1, r4
  401ec2:	f001 fbad 	bl	403620 <__sfvwrite_r>
  401ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401ec8:	2800      	cmp	r0, #0
  401eca:	bf0c      	ite	eq
  401ecc:	250a      	moveq	r5, #10
  401ece:	f04f 35ff 	movne.w	r5, #4294967295
  401ed2:	07da      	lsls	r2, r3, #31
  401ed4:	d402      	bmi.n	401edc <_puts_r+0x70>
  401ed6:	89a3      	ldrh	r3, [r4, #12]
  401ed8:	059b      	lsls	r3, r3, #22
  401eda:	d502      	bpl.n	401ee2 <_puts_r+0x76>
  401edc:	4628      	mov	r0, r5
  401ede:	b009      	add	sp, #36	; 0x24
  401ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401ee2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401ee4:	f001 fd52 	bl	40398c <__retarget_lock_release_recursive>
  401ee8:	4628      	mov	r0, r5
  401eea:	b009      	add	sp, #36	; 0x24
  401eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401eee:	4628      	mov	r0, r5
  401ef0:	f001 f98a 	bl	403208 <__sinit>
  401ef4:	e7d0      	b.n	401e98 <_puts_r+0x2c>
  401ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401ef8:	f001 fd46 	bl	403988 <__retarget_lock_acquire_recursive>
  401efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f00:	b29a      	uxth	r2, r3
  401f02:	e7d2      	b.n	401eaa <_puts_r+0x3e>
  401f04:	00404bf4 	.word	0x00404bf4

00401f08 <puts>:
  401f08:	4b02      	ldr	r3, [pc, #8]	; (401f14 <puts+0xc>)
  401f0a:	4601      	mov	r1, r0
  401f0c:	6818      	ldr	r0, [r3, #0]
  401f0e:	f7ff bfad 	b.w	401e6c <_puts_r>
  401f12:	bf00      	nop
  401f14:	20400018 	.word	0x20400018

00401f18 <setbuf>:
  401f18:	2900      	cmp	r1, #0
  401f1a:	bf0c      	ite	eq
  401f1c:	2202      	moveq	r2, #2
  401f1e:	2200      	movne	r2, #0
  401f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401f24:	f000 b800 	b.w	401f28 <setvbuf>

00401f28 <setvbuf>:
  401f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f2c:	4c61      	ldr	r4, [pc, #388]	; (4020b4 <setvbuf+0x18c>)
  401f2e:	6825      	ldr	r5, [r4, #0]
  401f30:	b083      	sub	sp, #12
  401f32:	4604      	mov	r4, r0
  401f34:	460f      	mov	r7, r1
  401f36:	4690      	mov	r8, r2
  401f38:	461e      	mov	r6, r3
  401f3a:	b115      	cbz	r5, 401f42 <setvbuf+0x1a>
  401f3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d064      	beq.n	40200c <setvbuf+0xe4>
  401f42:	f1b8 0f02 	cmp.w	r8, #2
  401f46:	d006      	beq.n	401f56 <setvbuf+0x2e>
  401f48:	f1b8 0f01 	cmp.w	r8, #1
  401f4c:	f200 809f 	bhi.w	40208e <setvbuf+0x166>
  401f50:	2e00      	cmp	r6, #0
  401f52:	f2c0 809c 	blt.w	40208e <setvbuf+0x166>
  401f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401f58:	07d8      	lsls	r0, r3, #31
  401f5a:	d534      	bpl.n	401fc6 <setvbuf+0x9e>
  401f5c:	4621      	mov	r1, r4
  401f5e:	4628      	mov	r0, r5
  401f60:	f001 f8fa 	bl	403158 <_fflush_r>
  401f64:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401f66:	b141      	cbz	r1, 401f7a <setvbuf+0x52>
  401f68:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401f6c:	4299      	cmp	r1, r3
  401f6e:	d002      	beq.n	401f76 <setvbuf+0x4e>
  401f70:	4628      	mov	r0, r5
  401f72:	f001 fa6f 	bl	403454 <_free_r>
  401f76:	2300      	movs	r3, #0
  401f78:	6323      	str	r3, [r4, #48]	; 0x30
  401f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f7e:	2200      	movs	r2, #0
  401f80:	61a2      	str	r2, [r4, #24]
  401f82:	6062      	str	r2, [r4, #4]
  401f84:	061a      	lsls	r2, r3, #24
  401f86:	d43a      	bmi.n	401ffe <setvbuf+0xd6>
  401f88:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401f8c:	f023 0303 	bic.w	r3, r3, #3
  401f90:	f1b8 0f02 	cmp.w	r8, #2
  401f94:	81a3      	strh	r3, [r4, #12]
  401f96:	d01d      	beq.n	401fd4 <setvbuf+0xac>
  401f98:	ab01      	add	r3, sp, #4
  401f9a:	466a      	mov	r2, sp
  401f9c:	4621      	mov	r1, r4
  401f9e:	4628      	mov	r0, r5
  401fa0:	f001 fcf6 	bl	403990 <__swhatbuf_r>
  401fa4:	89a3      	ldrh	r3, [r4, #12]
  401fa6:	4318      	orrs	r0, r3
  401fa8:	81a0      	strh	r0, [r4, #12]
  401faa:	2e00      	cmp	r6, #0
  401fac:	d132      	bne.n	402014 <setvbuf+0xec>
  401fae:	9e00      	ldr	r6, [sp, #0]
  401fb0:	4630      	mov	r0, r6
  401fb2:	f001 fd65 	bl	403a80 <malloc>
  401fb6:	4607      	mov	r7, r0
  401fb8:	2800      	cmp	r0, #0
  401fba:	d06b      	beq.n	402094 <setvbuf+0x16c>
  401fbc:	89a3      	ldrh	r3, [r4, #12]
  401fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fc2:	81a3      	strh	r3, [r4, #12]
  401fc4:	e028      	b.n	402018 <setvbuf+0xf0>
  401fc6:	89a3      	ldrh	r3, [r4, #12]
  401fc8:	0599      	lsls	r1, r3, #22
  401fca:	d4c7      	bmi.n	401f5c <setvbuf+0x34>
  401fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401fce:	f001 fcdb 	bl	403988 <__retarget_lock_acquire_recursive>
  401fd2:	e7c3      	b.n	401f5c <setvbuf+0x34>
  401fd4:	2500      	movs	r5, #0
  401fd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401fd8:	2600      	movs	r6, #0
  401fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401fde:	f043 0302 	orr.w	r3, r3, #2
  401fe2:	2001      	movs	r0, #1
  401fe4:	60a6      	str	r6, [r4, #8]
  401fe6:	07ce      	lsls	r6, r1, #31
  401fe8:	81a3      	strh	r3, [r4, #12]
  401fea:	6022      	str	r2, [r4, #0]
  401fec:	6122      	str	r2, [r4, #16]
  401fee:	6160      	str	r0, [r4, #20]
  401ff0:	d401      	bmi.n	401ff6 <setvbuf+0xce>
  401ff2:	0598      	lsls	r0, r3, #22
  401ff4:	d53e      	bpl.n	402074 <setvbuf+0x14c>
  401ff6:	4628      	mov	r0, r5
  401ff8:	b003      	add	sp, #12
  401ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ffe:	6921      	ldr	r1, [r4, #16]
  402000:	4628      	mov	r0, r5
  402002:	f001 fa27 	bl	403454 <_free_r>
  402006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40200a:	e7bd      	b.n	401f88 <setvbuf+0x60>
  40200c:	4628      	mov	r0, r5
  40200e:	f001 f8fb 	bl	403208 <__sinit>
  402012:	e796      	b.n	401f42 <setvbuf+0x1a>
  402014:	2f00      	cmp	r7, #0
  402016:	d0cb      	beq.n	401fb0 <setvbuf+0x88>
  402018:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40201a:	2b00      	cmp	r3, #0
  40201c:	d033      	beq.n	402086 <setvbuf+0x15e>
  40201e:	9b00      	ldr	r3, [sp, #0]
  402020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402024:	6027      	str	r7, [r4, #0]
  402026:	429e      	cmp	r6, r3
  402028:	bf1c      	itt	ne
  40202a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40202e:	81a2      	strhne	r2, [r4, #12]
  402030:	f1b8 0f01 	cmp.w	r8, #1
  402034:	bf04      	itt	eq
  402036:	f042 0201 	orreq.w	r2, r2, #1
  40203a:	81a2      	strheq	r2, [r4, #12]
  40203c:	b292      	uxth	r2, r2
  40203e:	f012 0308 	ands.w	r3, r2, #8
  402042:	6127      	str	r7, [r4, #16]
  402044:	6166      	str	r6, [r4, #20]
  402046:	d00e      	beq.n	402066 <setvbuf+0x13e>
  402048:	07d1      	lsls	r1, r2, #31
  40204a:	d51a      	bpl.n	402082 <setvbuf+0x15a>
  40204c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40204e:	4276      	negs	r6, r6
  402050:	2300      	movs	r3, #0
  402052:	f015 0501 	ands.w	r5, r5, #1
  402056:	61a6      	str	r6, [r4, #24]
  402058:	60a3      	str	r3, [r4, #8]
  40205a:	d009      	beq.n	402070 <setvbuf+0x148>
  40205c:	2500      	movs	r5, #0
  40205e:	4628      	mov	r0, r5
  402060:	b003      	add	sp, #12
  402062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402066:	60a3      	str	r3, [r4, #8]
  402068:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40206a:	f015 0501 	ands.w	r5, r5, #1
  40206e:	d1f5      	bne.n	40205c <setvbuf+0x134>
  402070:	0593      	lsls	r3, r2, #22
  402072:	d4c0      	bmi.n	401ff6 <setvbuf+0xce>
  402074:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402076:	f001 fc89 	bl	40398c <__retarget_lock_release_recursive>
  40207a:	4628      	mov	r0, r5
  40207c:	b003      	add	sp, #12
  40207e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402082:	60a6      	str	r6, [r4, #8]
  402084:	e7f0      	b.n	402068 <setvbuf+0x140>
  402086:	4628      	mov	r0, r5
  402088:	f001 f8be 	bl	403208 <__sinit>
  40208c:	e7c7      	b.n	40201e <setvbuf+0xf6>
  40208e:	f04f 35ff 	mov.w	r5, #4294967295
  402092:	e7b0      	b.n	401ff6 <setvbuf+0xce>
  402094:	f8dd 9000 	ldr.w	r9, [sp]
  402098:	45b1      	cmp	r9, r6
  40209a:	d004      	beq.n	4020a6 <setvbuf+0x17e>
  40209c:	4648      	mov	r0, r9
  40209e:	f001 fcef 	bl	403a80 <malloc>
  4020a2:	4607      	mov	r7, r0
  4020a4:	b920      	cbnz	r0, 4020b0 <setvbuf+0x188>
  4020a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4020aa:	f04f 35ff 	mov.w	r5, #4294967295
  4020ae:	e792      	b.n	401fd6 <setvbuf+0xae>
  4020b0:	464e      	mov	r6, r9
  4020b2:	e783      	b.n	401fbc <setvbuf+0x94>
  4020b4:	20400018 	.word	0x20400018
	...

004020c0 <strlen>:
  4020c0:	f890 f000 	pld	[r0]
  4020c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4020c8:	f020 0107 	bic.w	r1, r0, #7
  4020cc:	f06f 0c00 	mvn.w	ip, #0
  4020d0:	f010 0407 	ands.w	r4, r0, #7
  4020d4:	f891 f020 	pld	[r1, #32]
  4020d8:	f040 8049 	bne.w	40216e <strlen+0xae>
  4020dc:	f04f 0400 	mov.w	r4, #0
  4020e0:	f06f 0007 	mvn.w	r0, #7
  4020e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4020e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4020ec:	f100 0008 	add.w	r0, r0, #8
  4020f0:	fa82 f24c 	uadd8	r2, r2, ip
  4020f4:	faa4 f28c 	sel	r2, r4, ip
  4020f8:	fa83 f34c 	uadd8	r3, r3, ip
  4020fc:	faa2 f38c 	sel	r3, r2, ip
  402100:	bb4b      	cbnz	r3, 402156 <strlen+0x96>
  402102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402106:	fa82 f24c 	uadd8	r2, r2, ip
  40210a:	f100 0008 	add.w	r0, r0, #8
  40210e:	faa4 f28c 	sel	r2, r4, ip
  402112:	fa83 f34c 	uadd8	r3, r3, ip
  402116:	faa2 f38c 	sel	r3, r2, ip
  40211a:	b9e3      	cbnz	r3, 402156 <strlen+0x96>
  40211c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402120:	fa82 f24c 	uadd8	r2, r2, ip
  402124:	f100 0008 	add.w	r0, r0, #8
  402128:	faa4 f28c 	sel	r2, r4, ip
  40212c:	fa83 f34c 	uadd8	r3, r3, ip
  402130:	faa2 f38c 	sel	r3, r2, ip
  402134:	b97b      	cbnz	r3, 402156 <strlen+0x96>
  402136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40213a:	f101 0120 	add.w	r1, r1, #32
  40213e:	fa82 f24c 	uadd8	r2, r2, ip
  402142:	f100 0008 	add.w	r0, r0, #8
  402146:	faa4 f28c 	sel	r2, r4, ip
  40214a:	fa83 f34c 	uadd8	r3, r3, ip
  40214e:	faa2 f38c 	sel	r3, r2, ip
  402152:	2b00      	cmp	r3, #0
  402154:	d0c6      	beq.n	4020e4 <strlen+0x24>
  402156:	2a00      	cmp	r2, #0
  402158:	bf04      	itt	eq
  40215a:	3004      	addeq	r0, #4
  40215c:	461a      	moveq	r2, r3
  40215e:	ba12      	rev	r2, r2
  402160:	fab2 f282 	clz	r2, r2
  402164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40216c:	4770      	bx	lr
  40216e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402172:	f004 0503 	and.w	r5, r4, #3
  402176:	f1c4 0000 	rsb	r0, r4, #0
  40217a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40217e:	f014 0f04 	tst.w	r4, #4
  402182:	f891 f040 	pld	[r1, #64]	; 0x40
  402186:	fa0c f505 	lsl.w	r5, ip, r5
  40218a:	ea62 0205 	orn	r2, r2, r5
  40218e:	bf1c      	itt	ne
  402190:	ea63 0305 	ornne	r3, r3, r5
  402194:	4662      	movne	r2, ip
  402196:	f04f 0400 	mov.w	r4, #0
  40219a:	e7a9      	b.n	4020f0 <strlen+0x30>

0040219c <__sprint_r.part.0>:
  40219c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4021a2:	049c      	lsls	r4, r3, #18
  4021a4:	4693      	mov	fp, r2
  4021a6:	d52f      	bpl.n	402208 <__sprint_r.part.0+0x6c>
  4021a8:	6893      	ldr	r3, [r2, #8]
  4021aa:	6812      	ldr	r2, [r2, #0]
  4021ac:	b353      	cbz	r3, 402204 <__sprint_r.part.0+0x68>
  4021ae:	460e      	mov	r6, r1
  4021b0:	4607      	mov	r7, r0
  4021b2:	f102 0908 	add.w	r9, r2, #8
  4021b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4021ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4021be:	d017      	beq.n	4021f0 <__sprint_r.part.0+0x54>
  4021c0:	3d04      	subs	r5, #4
  4021c2:	2400      	movs	r4, #0
  4021c4:	e001      	b.n	4021ca <__sprint_r.part.0+0x2e>
  4021c6:	45a0      	cmp	r8, r4
  4021c8:	d010      	beq.n	4021ec <__sprint_r.part.0+0x50>
  4021ca:	4632      	mov	r2, r6
  4021cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4021d0:	4638      	mov	r0, r7
  4021d2:	f001 f8bb 	bl	40334c <_fputwc_r>
  4021d6:	1c43      	adds	r3, r0, #1
  4021d8:	f104 0401 	add.w	r4, r4, #1
  4021dc:	d1f3      	bne.n	4021c6 <__sprint_r.part.0+0x2a>
  4021de:	2300      	movs	r3, #0
  4021e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4021e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4021e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4021f0:	f02a 0a03 	bic.w	sl, sl, #3
  4021f4:	eba3 030a 	sub.w	r3, r3, sl
  4021f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4021fc:	f109 0908 	add.w	r9, r9, #8
  402200:	2b00      	cmp	r3, #0
  402202:	d1d8      	bne.n	4021b6 <__sprint_r.part.0+0x1a>
  402204:	2000      	movs	r0, #0
  402206:	e7ea      	b.n	4021de <__sprint_r.part.0+0x42>
  402208:	f001 fa0a 	bl	403620 <__sfvwrite_r>
  40220c:	2300      	movs	r3, #0
  40220e:	f8cb 3008 	str.w	r3, [fp, #8]
  402212:	f8cb 3004 	str.w	r3, [fp, #4]
  402216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40221a:	bf00      	nop

0040221c <_vfiprintf_r>:
  40221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402220:	b0ad      	sub	sp, #180	; 0xb4
  402222:	461d      	mov	r5, r3
  402224:	468b      	mov	fp, r1
  402226:	4690      	mov	r8, r2
  402228:	9307      	str	r3, [sp, #28]
  40222a:	9006      	str	r0, [sp, #24]
  40222c:	b118      	cbz	r0, 402236 <_vfiprintf_r+0x1a>
  40222e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402230:	2b00      	cmp	r3, #0
  402232:	f000 80f3 	beq.w	40241c <_vfiprintf_r+0x200>
  402236:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40223a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40223e:	07df      	lsls	r7, r3, #31
  402240:	b281      	uxth	r1, r0
  402242:	d402      	bmi.n	40224a <_vfiprintf_r+0x2e>
  402244:	058e      	lsls	r6, r1, #22
  402246:	f140 80fc 	bpl.w	402442 <_vfiprintf_r+0x226>
  40224a:	048c      	lsls	r4, r1, #18
  40224c:	d40a      	bmi.n	402264 <_vfiprintf_r+0x48>
  40224e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402252:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40225a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40225e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402262:	b289      	uxth	r1, r1
  402264:	0708      	lsls	r0, r1, #28
  402266:	f140 80b3 	bpl.w	4023d0 <_vfiprintf_r+0x1b4>
  40226a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40226e:	2b00      	cmp	r3, #0
  402270:	f000 80ae 	beq.w	4023d0 <_vfiprintf_r+0x1b4>
  402274:	f001 031a 	and.w	r3, r1, #26
  402278:	2b0a      	cmp	r3, #10
  40227a:	f000 80b5 	beq.w	4023e8 <_vfiprintf_r+0x1cc>
  40227e:	2300      	movs	r3, #0
  402280:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402284:	930b      	str	r3, [sp, #44]	; 0x2c
  402286:	9311      	str	r3, [sp, #68]	; 0x44
  402288:	9310      	str	r3, [sp, #64]	; 0x40
  40228a:	9303      	str	r3, [sp, #12]
  40228c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402290:	46ca      	mov	sl, r9
  402292:	f8cd b010 	str.w	fp, [sp, #16]
  402296:	f898 3000 	ldrb.w	r3, [r8]
  40229a:	4644      	mov	r4, r8
  40229c:	b1fb      	cbz	r3, 4022de <_vfiprintf_r+0xc2>
  40229e:	2b25      	cmp	r3, #37	; 0x25
  4022a0:	d102      	bne.n	4022a8 <_vfiprintf_r+0x8c>
  4022a2:	e01c      	b.n	4022de <_vfiprintf_r+0xc2>
  4022a4:	2b25      	cmp	r3, #37	; 0x25
  4022a6:	d003      	beq.n	4022b0 <_vfiprintf_r+0x94>
  4022a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	d1f9      	bne.n	4022a4 <_vfiprintf_r+0x88>
  4022b0:	eba4 0508 	sub.w	r5, r4, r8
  4022b4:	b19d      	cbz	r5, 4022de <_vfiprintf_r+0xc2>
  4022b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4022b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022ba:	f8ca 8000 	str.w	r8, [sl]
  4022be:	3301      	adds	r3, #1
  4022c0:	442a      	add	r2, r5
  4022c2:	2b07      	cmp	r3, #7
  4022c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4022c8:	9211      	str	r2, [sp, #68]	; 0x44
  4022ca:	9310      	str	r3, [sp, #64]	; 0x40
  4022cc:	dd7a      	ble.n	4023c4 <_vfiprintf_r+0x1a8>
  4022ce:	2a00      	cmp	r2, #0
  4022d0:	f040 84b0 	bne.w	402c34 <_vfiprintf_r+0xa18>
  4022d4:	9b03      	ldr	r3, [sp, #12]
  4022d6:	9210      	str	r2, [sp, #64]	; 0x40
  4022d8:	442b      	add	r3, r5
  4022da:	46ca      	mov	sl, r9
  4022dc:	9303      	str	r3, [sp, #12]
  4022de:	7823      	ldrb	r3, [r4, #0]
  4022e0:	2b00      	cmp	r3, #0
  4022e2:	f000 83e0 	beq.w	402aa6 <_vfiprintf_r+0x88a>
  4022e6:	2000      	movs	r0, #0
  4022e8:	f04f 0300 	mov.w	r3, #0
  4022ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4022f0:	f104 0801 	add.w	r8, r4, #1
  4022f4:	7862      	ldrb	r2, [r4, #1]
  4022f6:	4605      	mov	r5, r0
  4022f8:	4606      	mov	r6, r0
  4022fa:	4603      	mov	r3, r0
  4022fc:	f04f 34ff 	mov.w	r4, #4294967295
  402300:	f108 0801 	add.w	r8, r8, #1
  402304:	f1a2 0120 	sub.w	r1, r2, #32
  402308:	2958      	cmp	r1, #88	; 0x58
  40230a:	f200 82de 	bhi.w	4028ca <_vfiprintf_r+0x6ae>
  40230e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402312:	0221      	.short	0x0221
  402314:	02dc02dc 	.word	0x02dc02dc
  402318:	02dc0229 	.word	0x02dc0229
  40231c:	02dc02dc 	.word	0x02dc02dc
  402320:	02dc02dc 	.word	0x02dc02dc
  402324:	028902dc 	.word	0x028902dc
  402328:	02dc0295 	.word	0x02dc0295
  40232c:	02bd00a2 	.word	0x02bd00a2
  402330:	019f02dc 	.word	0x019f02dc
  402334:	01a401a4 	.word	0x01a401a4
  402338:	01a401a4 	.word	0x01a401a4
  40233c:	01a401a4 	.word	0x01a401a4
  402340:	01a401a4 	.word	0x01a401a4
  402344:	02dc01a4 	.word	0x02dc01a4
  402348:	02dc02dc 	.word	0x02dc02dc
  40234c:	02dc02dc 	.word	0x02dc02dc
  402350:	02dc02dc 	.word	0x02dc02dc
  402354:	02dc02dc 	.word	0x02dc02dc
  402358:	01b202dc 	.word	0x01b202dc
  40235c:	02dc02dc 	.word	0x02dc02dc
  402360:	02dc02dc 	.word	0x02dc02dc
  402364:	02dc02dc 	.word	0x02dc02dc
  402368:	02dc02dc 	.word	0x02dc02dc
  40236c:	02dc02dc 	.word	0x02dc02dc
  402370:	02dc0197 	.word	0x02dc0197
  402374:	02dc02dc 	.word	0x02dc02dc
  402378:	02dc02dc 	.word	0x02dc02dc
  40237c:	02dc019b 	.word	0x02dc019b
  402380:	025302dc 	.word	0x025302dc
  402384:	02dc02dc 	.word	0x02dc02dc
  402388:	02dc02dc 	.word	0x02dc02dc
  40238c:	02dc02dc 	.word	0x02dc02dc
  402390:	02dc02dc 	.word	0x02dc02dc
  402394:	02dc02dc 	.word	0x02dc02dc
  402398:	021b025a 	.word	0x021b025a
  40239c:	02dc02dc 	.word	0x02dc02dc
  4023a0:	026e02dc 	.word	0x026e02dc
  4023a4:	02dc021b 	.word	0x02dc021b
  4023a8:	027302dc 	.word	0x027302dc
  4023ac:	01f502dc 	.word	0x01f502dc
  4023b0:	02090182 	.word	0x02090182
  4023b4:	02dc02d7 	.word	0x02dc02d7
  4023b8:	02dc029a 	.word	0x02dc029a
  4023bc:	02dc00a7 	.word	0x02dc00a7
  4023c0:	022e02dc 	.word	0x022e02dc
  4023c4:	f10a 0a08 	add.w	sl, sl, #8
  4023c8:	9b03      	ldr	r3, [sp, #12]
  4023ca:	442b      	add	r3, r5
  4023cc:	9303      	str	r3, [sp, #12]
  4023ce:	e786      	b.n	4022de <_vfiprintf_r+0xc2>
  4023d0:	4659      	mov	r1, fp
  4023d2:	9806      	ldr	r0, [sp, #24]
  4023d4:	f000 fdac 	bl	402f30 <__swsetup_r>
  4023d8:	bb18      	cbnz	r0, 402422 <_vfiprintf_r+0x206>
  4023da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4023de:	f001 031a 	and.w	r3, r1, #26
  4023e2:	2b0a      	cmp	r3, #10
  4023e4:	f47f af4b 	bne.w	40227e <_vfiprintf_r+0x62>
  4023e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4023ec:	2b00      	cmp	r3, #0
  4023ee:	f6ff af46 	blt.w	40227e <_vfiprintf_r+0x62>
  4023f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4023f6:	07db      	lsls	r3, r3, #31
  4023f8:	d405      	bmi.n	402406 <_vfiprintf_r+0x1ea>
  4023fa:	058f      	lsls	r7, r1, #22
  4023fc:	d403      	bmi.n	402406 <_vfiprintf_r+0x1ea>
  4023fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402402:	f001 fac3 	bl	40398c <__retarget_lock_release_recursive>
  402406:	462b      	mov	r3, r5
  402408:	4642      	mov	r2, r8
  40240a:	4659      	mov	r1, fp
  40240c:	9806      	ldr	r0, [sp, #24]
  40240e:	f000 fd4d 	bl	402eac <__sbprintf>
  402412:	9003      	str	r0, [sp, #12]
  402414:	9803      	ldr	r0, [sp, #12]
  402416:	b02d      	add	sp, #180	; 0xb4
  402418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40241c:	f000 fef4 	bl	403208 <__sinit>
  402420:	e709      	b.n	402236 <_vfiprintf_r+0x1a>
  402422:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402426:	07d9      	lsls	r1, r3, #31
  402428:	d404      	bmi.n	402434 <_vfiprintf_r+0x218>
  40242a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40242e:	059a      	lsls	r2, r3, #22
  402430:	f140 84aa 	bpl.w	402d88 <_vfiprintf_r+0xb6c>
  402434:	f04f 33ff 	mov.w	r3, #4294967295
  402438:	9303      	str	r3, [sp, #12]
  40243a:	9803      	ldr	r0, [sp, #12]
  40243c:	b02d      	add	sp, #180	; 0xb4
  40243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402442:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402446:	f001 fa9f 	bl	403988 <__retarget_lock_acquire_recursive>
  40244a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40244e:	b281      	uxth	r1, r0
  402450:	e6fb      	b.n	40224a <_vfiprintf_r+0x2e>
  402452:	4276      	negs	r6, r6
  402454:	9207      	str	r2, [sp, #28]
  402456:	f043 0304 	orr.w	r3, r3, #4
  40245a:	f898 2000 	ldrb.w	r2, [r8]
  40245e:	e74f      	b.n	402300 <_vfiprintf_r+0xe4>
  402460:	9608      	str	r6, [sp, #32]
  402462:	069e      	lsls	r6, r3, #26
  402464:	f100 8450 	bmi.w	402d08 <_vfiprintf_r+0xaec>
  402468:	9907      	ldr	r1, [sp, #28]
  40246a:	06dd      	lsls	r5, r3, #27
  40246c:	460a      	mov	r2, r1
  40246e:	f100 83ef 	bmi.w	402c50 <_vfiprintf_r+0xa34>
  402472:	0658      	lsls	r0, r3, #25
  402474:	f140 83ec 	bpl.w	402c50 <_vfiprintf_r+0xa34>
  402478:	880e      	ldrh	r6, [r1, #0]
  40247a:	3104      	adds	r1, #4
  40247c:	2700      	movs	r7, #0
  40247e:	2201      	movs	r2, #1
  402480:	9107      	str	r1, [sp, #28]
  402482:	f04f 0100 	mov.w	r1, #0
  402486:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40248a:	2500      	movs	r5, #0
  40248c:	1c61      	adds	r1, r4, #1
  40248e:	f000 8116 	beq.w	4026be <_vfiprintf_r+0x4a2>
  402492:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402496:	9102      	str	r1, [sp, #8]
  402498:	ea56 0107 	orrs.w	r1, r6, r7
  40249c:	f040 8114 	bne.w	4026c8 <_vfiprintf_r+0x4ac>
  4024a0:	2c00      	cmp	r4, #0
  4024a2:	f040 835c 	bne.w	402b5e <_vfiprintf_r+0x942>
  4024a6:	2a00      	cmp	r2, #0
  4024a8:	f040 83b7 	bne.w	402c1a <_vfiprintf_r+0x9fe>
  4024ac:	f013 0301 	ands.w	r3, r3, #1
  4024b0:	9305      	str	r3, [sp, #20]
  4024b2:	f000 8457 	beq.w	402d64 <_vfiprintf_r+0xb48>
  4024b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4024ba:	2330      	movs	r3, #48	; 0x30
  4024bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4024c0:	9b05      	ldr	r3, [sp, #20]
  4024c2:	42a3      	cmp	r3, r4
  4024c4:	bfb8      	it	lt
  4024c6:	4623      	movlt	r3, r4
  4024c8:	9301      	str	r3, [sp, #4]
  4024ca:	b10d      	cbz	r5, 4024d0 <_vfiprintf_r+0x2b4>
  4024cc:	3301      	adds	r3, #1
  4024ce:	9301      	str	r3, [sp, #4]
  4024d0:	9b02      	ldr	r3, [sp, #8]
  4024d2:	f013 0302 	ands.w	r3, r3, #2
  4024d6:	9309      	str	r3, [sp, #36]	; 0x24
  4024d8:	d002      	beq.n	4024e0 <_vfiprintf_r+0x2c4>
  4024da:	9b01      	ldr	r3, [sp, #4]
  4024dc:	3302      	adds	r3, #2
  4024de:	9301      	str	r3, [sp, #4]
  4024e0:	9b02      	ldr	r3, [sp, #8]
  4024e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4024e6:	930a      	str	r3, [sp, #40]	; 0x28
  4024e8:	f040 8217 	bne.w	40291a <_vfiprintf_r+0x6fe>
  4024ec:	9b08      	ldr	r3, [sp, #32]
  4024ee:	9a01      	ldr	r2, [sp, #4]
  4024f0:	1a9d      	subs	r5, r3, r2
  4024f2:	2d00      	cmp	r5, #0
  4024f4:	f340 8211 	ble.w	40291a <_vfiprintf_r+0x6fe>
  4024f8:	2d10      	cmp	r5, #16
  4024fa:	f340 8490 	ble.w	402e1e <_vfiprintf_r+0xc02>
  4024fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402502:	4ec4      	ldr	r6, [pc, #784]	; (402814 <_vfiprintf_r+0x5f8>)
  402504:	46d6      	mov	lr, sl
  402506:	2710      	movs	r7, #16
  402508:	46a2      	mov	sl, r4
  40250a:	4619      	mov	r1, r3
  40250c:	9c06      	ldr	r4, [sp, #24]
  40250e:	e007      	b.n	402520 <_vfiprintf_r+0x304>
  402510:	f101 0c02 	add.w	ip, r1, #2
  402514:	f10e 0e08 	add.w	lr, lr, #8
  402518:	4601      	mov	r1, r0
  40251a:	3d10      	subs	r5, #16
  40251c:	2d10      	cmp	r5, #16
  40251e:	dd11      	ble.n	402544 <_vfiprintf_r+0x328>
  402520:	1c48      	adds	r0, r1, #1
  402522:	3210      	adds	r2, #16
  402524:	2807      	cmp	r0, #7
  402526:	9211      	str	r2, [sp, #68]	; 0x44
  402528:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40252c:	9010      	str	r0, [sp, #64]	; 0x40
  40252e:	ddef      	ble.n	402510 <_vfiprintf_r+0x2f4>
  402530:	2a00      	cmp	r2, #0
  402532:	f040 81e4 	bne.w	4028fe <_vfiprintf_r+0x6e2>
  402536:	3d10      	subs	r5, #16
  402538:	2d10      	cmp	r5, #16
  40253a:	4611      	mov	r1, r2
  40253c:	f04f 0c01 	mov.w	ip, #1
  402540:	46ce      	mov	lr, r9
  402542:	dced      	bgt.n	402520 <_vfiprintf_r+0x304>
  402544:	4654      	mov	r4, sl
  402546:	4661      	mov	r1, ip
  402548:	46f2      	mov	sl, lr
  40254a:	442a      	add	r2, r5
  40254c:	2907      	cmp	r1, #7
  40254e:	9211      	str	r2, [sp, #68]	; 0x44
  402550:	f8ca 6000 	str.w	r6, [sl]
  402554:	f8ca 5004 	str.w	r5, [sl, #4]
  402558:	9110      	str	r1, [sp, #64]	; 0x40
  40255a:	f300 82ec 	bgt.w	402b36 <_vfiprintf_r+0x91a>
  40255e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402562:	f10a 0a08 	add.w	sl, sl, #8
  402566:	1c48      	adds	r0, r1, #1
  402568:	2d00      	cmp	r5, #0
  40256a:	f040 81de 	bne.w	40292a <_vfiprintf_r+0x70e>
  40256e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402570:	2b00      	cmp	r3, #0
  402572:	f000 81f8 	beq.w	402966 <_vfiprintf_r+0x74a>
  402576:	3202      	adds	r2, #2
  402578:	a90e      	add	r1, sp, #56	; 0x38
  40257a:	2302      	movs	r3, #2
  40257c:	2807      	cmp	r0, #7
  40257e:	9211      	str	r2, [sp, #68]	; 0x44
  402580:	9010      	str	r0, [sp, #64]	; 0x40
  402582:	e88a 000a 	stmia.w	sl, {r1, r3}
  402586:	f340 81ea 	ble.w	40295e <_vfiprintf_r+0x742>
  40258a:	2a00      	cmp	r2, #0
  40258c:	f040 838c 	bne.w	402ca8 <_vfiprintf_r+0xa8c>
  402590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402592:	2b80      	cmp	r3, #128	; 0x80
  402594:	f04f 0001 	mov.w	r0, #1
  402598:	4611      	mov	r1, r2
  40259a:	46ca      	mov	sl, r9
  40259c:	f040 81e7 	bne.w	40296e <_vfiprintf_r+0x752>
  4025a0:	9b08      	ldr	r3, [sp, #32]
  4025a2:	9d01      	ldr	r5, [sp, #4]
  4025a4:	1b5e      	subs	r6, r3, r5
  4025a6:	2e00      	cmp	r6, #0
  4025a8:	f340 81e1 	ble.w	40296e <_vfiprintf_r+0x752>
  4025ac:	2e10      	cmp	r6, #16
  4025ae:	4d9a      	ldr	r5, [pc, #616]	; (402818 <_vfiprintf_r+0x5fc>)
  4025b0:	f340 8450 	ble.w	402e54 <_vfiprintf_r+0xc38>
  4025b4:	46d4      	mov	ip, sl
  4025b6:	2710      	movs	r7, #16
  4025b8:	46a2      	mov	sl, r4
  4025ba:	9c06      	ldr	r4, [sp, #24]
  4025bc:	e007      	b.n	4025ce <_vfiprintf_r+0x3b2>
  4025be:	f101 0e02 	add.w	lr, r1, #2
  4025c2:	f10c 0c08 	add.w	ip, ip, #8
  4025c6:	4601      	mov	r1, r0
  4025c8:	3e10      	subs	r6, #16
  4025ca:	2e10      	cmp	r6, #16
  4025cc:	dd11      	ble.n	4025f2 <_vfiprintf_r+0x3d6>
  4025ce:	1c48      	adds	r0, r1, #1
  4025d0:	3210      	adds	r2, #16
  4025d2:	2807      	cmp	r0, #7
  4025d4:	9211      	str	r2, [sp, #68]	; 0x44
  4025d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4025da:	9010      	str	r0, [sp, #64]	; 0x40
  4025dc:	ddef      	ble.n	4025be <_vfiprintf_r+0x3a2>
  4025de:	2a00      	cmp	r2, #0
  4025e0:	f040 829d 	bne.w	402b1e <_vfiprintf_r+0x902>
  4025e4:	3e10      	subs	r6, #16
  4025e6:	2e10      	cmp	r6, #16
  4025e8:	f04f 0e01 	mov.w	lr, #1
  4025ec:	4611      	mov	r1, r2
  4025ee:	46cc      	mov	ip, r9
  4025f0:	dced      	bgt.n	4025ce <_vfiprintf_r+0x3b2>
  4025f2:	4654      	mov	r4, sl
  4025f4:	46e2      	mov	sl, ip
  4025f6:	4432      	add	r2, r6
  4025f8:	f1be 0f07 	cmp.w	lr, #7
  4025fc:	9211      	str	r2, [sp, #68]	; 0x44
  4025fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  402602:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402606:	f300 8369 	bgt.w	402cdc <_vfiprintf_r+0xac0>
  40260a:	f10a 0a08 	add.w	sl, sl, #8
  40260e:	f10e 0001 	add.w	r0, lr, #1
  402612:	4671      	mov	r1, lr
  402614:	e1ab      	b.n	40296e <_vfiprintf_r+0x752>
  402616:	9608      	str	r6, [sp, #32]
  402618:	f013 0220 	ands.w	r2, r3, #32
  40261c:	f040 838c 	bne.w	402d38 <_vfiprintf_r+0xb1c>
  402620:	f013 0110 	ands.w	r1, r3, #16
  402624:	f040 831a 	bne.w	402c5c <_vfiprintf_r+0xa40>
  402628:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40262c:	f000 8316 	beq.w	402c5c <_vfiprintf_r+0xa40>
  402630:	9807      	ldr	r0, [sp, #28]
  402632:	460a      	mov	r2, r1
  402634:	4601      	mov	r1, r0
  402636:	3104      	adds	r1, #4
  402638:	8806      	ldrh	r6, [r0, #0]
  40263a:	9107      	str	r1, [sp, #28]
  40263c:	2700      	movs	r7, #0
  40263e:	e720      	b.n	402482 <_vfiprintf_r+0x266>
  402640:	9608      	str	r6, [sp, #32]
  402642:	f043 0310 	orr.w	r3, r3, #16
  402646:	e7e7      	b.n	402618 <_vfiprintf_r+0x3fc>
  402648:	9608      	str	r6, [sp, #32]
  40264a:	f043 0310 	orr.w	r3, r3, #16
  40264e:	e708      	b.n	402462 <_vfiprintf_r+0x246>
  402650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402654:	f898 2000 	ldrb.w	r2, [r8]
  402658:	e652      	b.n	402300 <_vfiprintf_r+0xe4>
  40265a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40265e:	2600      	movs	r6, #0
  402660:	f818 2b01 	ldrb.w	r2, [r8], #1
  402664:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402668:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40266c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402670:	2909      	cmp	r1, #9
  402672:	d9f5      	bls.n	402660 <_vfiprintf_r+0x444>
  402674:	e646      	b.n	402304 <_vfiprintf_r+0xe8>
  402676:	9608      	str	r6, [sp, #32]
  402678:	2800      	cmp	r0, #0
  40267a:	f040 8408 	bne.w	402e8e <_vfiprintf_r+0xc72>
  40267e:	f043 0310 	orr.w	r3, r3, #16
  402682:	069e      	lsls	r6, r3, #26
  402684:	f100 834c 	bmi.w	402d20 <_vfiprintf_r+0xb04>
  402688:	06dd      	lsls	r5, r3, #27
  40268a:	f100 82f3 	bmi.w	402c74 <_vfiprintf_r+0xa58>
  40268e:	0658      	lsls	r0, r3, #25
  402690:	f140 82f0 	bpl.w	402c74 <_vfiprintf_r+0xa58>
  402694:	9d07      	ldr	r5, [sp, #28]
  402696:	f9b5 6000 	ldrsh.w	r6, [r5]
  40269a:	462a      	mov	r2, r5
  40269c:	17f7      	asrs	r7, r6, #31
  40269e:	3204      	adds	r2, #4
  4026a0:	4630      	mov	r0, r6
  4026a2:	4639      	mov	r1, r7
  4026a4:	9207      	str	r2, [sp, #28]
  4026a6:	2800      	cmp	r0, #0
  4026a8:	f171 0200 	sbcs.w	r2, r1, #0
  4026ac:	f2c0 835d 	blt.w	402d6a <_vfiprintf_r+0xb4e>
  4026b0:	1c61      	adds	r1, r4, #1
  4026b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4026b6:	f04f 0201 	mov.w	r2, #1
  4026ba:	f47f aeea 	bne.w	402492 <_vfiprintf_r+0x276>
  4026be:	ea56 0107 	orrs.w	r1, r6, r7
  4026c2:	f000 824d 	beq.w	402b60 <_vfiprintf_r+0x944>
  4026c6:	9302      	str	r3, [sp, #8]
  4026c8:	2a01      	cmp	r2, #1
  4026ca:	f000 828c 	beq.w	402be6 <_vfiprintf_r+0x9ca>
  4026ce:	2a02      	cmp	r2, #2
  4026d0:	f040 825c 	bne.w	402b8c <_vfiprintf_r+0x970>
  4026d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4026d6:	46cb      	mov	fp, r9
  4026d8:	0933      	lsrs	r3, r6, #4
  4026da:	f006 010f 	and.w	r1, r6, #15
  4026de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4026e2:	093a      	lsrs	r2, r7, #4
  4026e4:	461e      	mov	r6, r3
  4026e6:	4617      	mov	r7, r2
  4026e8:	5c43      	ldrb	r3, [r0, r1]
  4026ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4026ee:	ea56 0307 	orrs.w	r3, r6, r7
  4026f2:	d1f1      	bne.n	4026d8 <_vfiprintf_r+0x4bc>
  4026f4:	eba9 030b 	sub.w	r3, r9, fp
  4026f8:	9305      	str	r3, [sp, #20]
  4026fa:	e6e1      	b.n	4024c0 <_vfiprintf_r+0x2a4>
  4026fc:	2800      	cmp	r0, #0
  4026fe:	f040 83c0 	bne.w	402e82 <_vfiprintf_r+0xc66>
  402702:	0699      	lsls	r1, r3, #26
  402704:	f100 8367 	bmi.w	402dd6 <_vfiprintf_r+0xbba>
  402708:	06da      	lsls	r2, r3, #27
  40270a:	f100 80f1 	bmi.w	4028f0 <_vfiprintf_r+0x6d4>
  40270e:	065b      	lsls	r3, r3, #25
  402710:	f140 80ee 	bpl.w	4028f0 <_vfiprintf_r+0x6d4>
  402714:	9a07      	ldr	r2, [sp, #28]
  402716:	6813      	ldr	r3, [r2, #0]
  402718:	3204      	adds	r2, #4
  40271a:	9207      	str	r2, [sp, #28]
  40271c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402720:	801a      	strh	r2, [r3, #0]
  402722:	e5b8      	b.n	402296 <_vfiprintf_r+0x7a>
  402724:	9807      	ldr	r0, [sp, #28]
  402726:	4a3d      	ldr	r2, [pc, #244]	; (40281c <_vfiprintf_r+0x600>)
  402728:	9608      	str	r6, [sp, #32]
  40272a:	920b      	str	r2, [sp, #44]	; 0x2c
  40272c:	6806      	ldr	r6, [r0, #0]
  40272e:	2278      	movs	r2, #120	; 0x78
  402730:	2130      	movs	r1, #48	; 0x30
  402732:	3004      	adds	r0, #4
  402734:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402738:	f043 0302 	orr.w	r3, r3, #2
  40273c:	9007      	str	r0, [sp, #28]
  40273e:	2700      	movs	r7, #0
  402740:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402744:	2202      	movs	r2, #2
  402746:	e69c      	b.n	402482 <_vfiprintf_r+0x266>
  402748:	9608      	str	r6, [sp, #32]
  40274a:	2800      	cmp	r0, #0
  40274c:	d099      	beq.n	402682 <_vfiprintf_r+0x466>
  40274e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402752:	e796      	b.n	402682 <_vfiprintf_r+0x466>
  402754:	f898 2000 	ldrb.w	r2, [r8]
  402758:	2d00      	cmp	r5, #0
  40275a:	f47f add1 	bne.w	402300 <_vfiprintf_r+0xe4>
  40275e:	2001      	movs	r0, #1
  402760:	2520      	movs	r5, #32
  402762:	e5cd      	b.n	402300 <_vfiprintf_r+0xe4>
  402764:	f043 0301 	orr.w	r3, r3, #1
  402768:	f898 2000 	ldrb.w	r2, [r8]
  40276c:	e5c8      	b.n	402300 <_vfiprintf_r+0xe4>
  40276e:	9608      	str	r6, [sp, #32]
  402770:	2800      	cmp	r0, #0
  402772:	f040 8393 	bne.w	402e9c <_vfiprintf_r+0xc80>
  402776:	4929      	ldr	r1, [pc, #164]	; (40281c <_vfiprintf_r+0x600>)
  402778:	910b      	str	r1, [sp, #44]	; 0x2c
  40277a:	069f      	lsls	r7, r3, #26
  40277c:	f100 82e8 	bmi.w	402d50 <_vfiprintf_r+0xb34>
  402780:	9807      	ldr	r0, [sp, #28]
  402782:	06de      	lsls	r6, r3, #27
  402784:	4601      	mov	r1, r0
  402786:	f100 8270 	bmi.w	402c6a <_vfiprintf_r+0xa4e>
  40278a:	065d      	lsls	r5, r3, #25
  40278c:	f140 826d 	bpl.w	402c6a <_vfiprintf_r+0xa4e>
  402790:	3104      	adds	r1, #4
  402792:	8806      	ldrh	r6, [r0, #0]
  402794:	9107      	str	r1, [sp, #28]
  402796:	2700      	movs	r7, #0
  402798:	07d8      	lsls	r0, r3, #31
  40279a:	f140 8222 	bpl.w	402be2 <_vfiprintf_r+0x9c6>
  40279e:	ea56 0107 	orrs.w	r1, r6, r7
  4027a2:	f000 821e 	beq.w	402be2 <_vfiprintf_r+0x9c6>
  4027a6:	2130      	movs	r1, #48	; 0x30
  4027a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4027ac:	f043 0302 	orr.w	r3, r3, #2
  4027b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4027b4:	2202      	movs	r2, #2
  4027b6:	e664      	b.n	402482 <_vfiprintf_r+0x266>
  4027b8:	9608      	str	r6, [sp, #32]
  4027ba:	2800      	cmp	r0, #0
  4027bc:	f040 836b 	bne.w	402e96 <_vfiprintf_r+0xc7a>
  4027c0:	4917      	ldr	r1, [pc, #92]	; (402820 <_vfiprintf_r+0x604>)
  4027c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4027c4:	e7d9      	b.n	40277a <_vfiprintf_r+0x55e>
  4027c6:	9907      	ldr	r1, [sp, #28]
  4027c8:	9608      	str	r6, [sp, #32]
  4027ca:	680a      	ldr	r2, [r1, #0]
  4027cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4027d0:	f04f 0000 	mov.w	r0, #0
  4027d4:	460a      	mov	r2, r1
  4027d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4027da:	3204      	adds	r2, #4
  4027dc:	2001      	movs	r0, #1
  4027de:	9001      	str	r0, [sp, #4]
  4027e0:	9207      	str	r2, [sp, #28]
  4027e2:	9005      	str	r0, [sp, #20]
  4027e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4027e8:	9302      	str	r3, [sp, #8]
  4027ea:	2400      	movs	r4, #0
  4027ec:	e670      	b.n	4024d0 <_vfiprintf_r+0x2b4>
  4027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027f2:	f898 2000 	ldrb.w	r2, [r8]
  4027f6:	e583      	b.n	402300 <_vfiprintf_r+0xe4>
  4027f8:	f898 2000 	ldrb.w	r2, [r8]
  4027fc:	2a6c      	cmp	r2, #108	; 0x6c
  4027fe:	bf03      	ittte	eq
  402800:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402804:	f043 0320 	orreq.w	r3, r3, #32
  402808:	f108 0801 	addeq.w	r8, r8, #1
  40280c:	f043 0310 	orrne.w	r3, r3, #16
  402810:	e576      	b.n	402300 <_vfiprintf_r+0xe4>
  402812:	bf00      	nop
  402814:	00404c2c 	.word	0x00404c2c
  402818:	00404c3c 	.word	0x00404c3c
  40281c:	00404c10 	.word	0x00404c10
  402820:	00404bfc 	.word	0x00404bfc
  402824:	9907      	ldr	r1, [sp, #28]
  402826:	680e      	ldr	r6, [r1, #0]
  402828:	460a      	mov	r2, r1
  40282a:	2e00      	cmp	r6, #0
  40282c:	f102 0204 	add.w	r2, r2, #4
  402830:	f6ff ae0f 	blt.w	402452 <_vfiprintf_r+0x236>
  402834:	9207      	str	r2, [sp, #28]
  402836:	f898 2000 	ldrb.w	r2, [r8]
  40283a:	e561      	b.n	402300 <_vfiprintf_r+0xe4>
  40283c:	f898 2000 	ldrb.w	r2, [r8]
  402840:	2001      	movs	r0, #1
  402842:	252b      	movs	r5, #43	; 0x2b
  402844:	e55c      	b.n	402300 <_vfiprintf_r+0xe4>
  402846:	9907      	ldr	r1, [sp, #28]
  402848:	9608      	str	r6, [sp, #32]
  40284a:	f8d1 b000 	ldr.w	fp, [r1]
  40284e:	f04f 0200 	mov.w	r2, #0
  402852:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402856:	1d0e      	adds	r6, r1, #4
  402858:	f1bb 0f00 	cmp.w	fp, #0
  40285c:	f000 82e5 	beq.w	402e2a <_vfiprintf_r+0xc0e>
  402860:	1c67      	adds	r7, r4, #1
  402862:	f000 82c4 	beq.w	402dee <_vfiprintf_r+0xbd2>
  402866:	4622      	mov	r2, r4
  402868:	2100      	movs	r1, #0
  40286a:	4658      	mov	r0, fp
  40286c:	9301      	str	r3, [sp, #4]
  40286e:	f001 fbd7 	bl	404020 <memchr>
  402872:	9b01      	ldr	r3, [sp, #4]
  402874:	2800      	cmp	r0, #0
  402876:	f000 82e5 	beq.w	402e44 <_vfiprintf_r+0xc28>
  40287a:	eba0 020b 	sub.w	r2, r0, fp
  40287e:	9205      	str	r2, [sp, #20]
  402880:	9607      	str	r6, [sp, #28]
  402882:	9302      	str	r3, [sp, #8]
  402884:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402888:	2400      	movs	r4, #0
  40288a:	e619      	b.n	4024c0 <_vfiprintf_r+0x2a4>
  40288c:	f898 2000 	ldrb.w	r2, [r8]
  402890:	2a2a      	cmp	r2, #42	; 0x2a
  402892:	f108 0701 	add.w	r7, r8, #1
  402896:	f000 82e9 	beq.w	402e6c <_vfiprintf_r+0xc50>
  40289a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40289e:	2909      	cmp	r1, #9
  4028a0:	46b8      	mov	r8, r7
  4028a2:	f04f 0400 	mov.w	r4, #0
  4028a6:	f63f ad2d 	bhi.w	402304 <_vfiprintf_r+0xe8>
  4028aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4028ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4028b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4028b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4028ba:	2909      	cmp	r1, #9
  4028bc:	d9f5      	bls.n	4028aa <_vfiprintf_r+0x68e>
  4028be:	e521      	b.n	402304 <_vfiprintf_r+0xe8>
  4028c0:	f043 0320 	orr.w	r3, r3, #32
  4028c4:	f898 2000 	ldrb.w	r2, [r8]
  4028c8:	e51a      	b.n	402300 <_vfiprintf_r+0xe4>
  4028ca:	9608      	str	r6, [sp, #32]
  4028cc:	2800      	cmp	r0, #0
  4028ce:	f040 82db 	bne.w	402e88 <_vfiprintf_r+0xc6c>
  4028d2:	2a00      	cmp	r2, #0
  4028d4:	f000 80e7 	beq.w	402aa6 <_vfiprintf_r+0x88a>
  4028d8:	2101      	movs	r1, #1
  4028da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4028de:	f04f 0200 	mov.w	r2, #0
  4028e2:	9101      	str	r1, [sp, #4]
  4028e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4028e8:	9105      	str	r1, [sp, #20]
  4028ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4028ee:	e77b      	b.n	4027e8 <_vfiprintf_r+0x5cc>
  4028f0:	9a07      	ldr	r2, [sp, #28]
  4028f2:	6813      	ldr	r3, [r2, #0]
  4028f4:	3204      	adds	r2, #4
  4028f6:	9207      	str	r2, [sp, #28]
  4028f8:	9a03      	ldr	r2, [sp, #12]
  4028fa:	601a      	str	r2, [r3, #0]
  4028fc:	e4cb      	b.n	402296 <_vfiprintf_r+0x7a>
  4028fe:	aa0f      	add	r2, sp, #60	; 0x3c
  402900:	9904      	ldr	r1, [sp, #16]
  402902:	4620      	mov	r0, r4
  402904:	f7ff fc4a 	bl	40219c <__sprint_r.part.0>
  402908:	2800      	cmp	r0, #0
  40290a:	f040 8139 	bne.w	402b80 <_vfiprintf_r+0x964>
  40290e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402910:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402912:	f101 0c01 	add.w	ip, r1, #1
  402916:	46ce      	mov	lr, r9
  402918:	e5ff      	b.n	40251a <_vfiprintf_r+0x2fe>
  40291a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40291c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40291e:	1c48      	adds	r0, r1, #1
  402920:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402924:	2d00      	cmp	r5, #0
  402926:	f43f ae22 	beq.w	40256e <_vfiprintf_r+0x352>
  40292a:	3201      	adds	r2, #1
  40292c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402930:	2101      	movs	r1, #1
  402932:	2807      	cmp	r0, #7
  402934:	9211      	str	r2, [sp, #68]	; 0x44
  402936:	9010      	str	r0, [sp, #64]	; 0x40
  402938:	f8ca 5000 	str.w	r5, [sl]
  40293c:	f8ca 1004 	str.w	r1, [sl, #4]
  402940:	f340 8108 	ble.w	402b54 <_vfiprintf_r+0x938>
  402944:	2a00      	cmp	r2, #0
  402946:	f040 81bc 	bne.w	402cc2 <_vfiprintf_r+0xaa6>
  40294a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40294c:	2b00      	cmp	r3, #0
  40294e:	f43f ae1f 	beq.w	402590 <_vfiprintf_r+0x374>
  402952:	ab0e      	add	r3, sp, #56	; 0x38
  402954:	2202      	movs	r2, #2
  402956:	4608      	mov	r0, r1
  402958:	931c      	str	r3, [sp, #112]	; 0x70
  40295a:	921d      	str	r2, [sp, #116]	; 0x74
  40295c:	46ca      	mov	sl, r9
  40295e:	4601      	mov	r1, r0
  402960:	f10a 0a08 	add.w	sl, sl, #8
  402964:	3001      	adds	r0, #1
  402966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402968:	2b80      	cmp	r3, #128	; 0x80
  40296a:	f43f ae19 	beq.w	4025a0 <_vfiprintf_r+0x384>
  40296e:	9b05      	ldr	r3, [sp, #20]
  402970:	1ae4      	subs	r4, r4, r3
  402972:	2c00      	cmp	r4, #0
  402974:	dd2e      	ble.n	4029d4 <_vfiprintf_r+0x7b8>
  402976:	2c10      	cmp	r4, #16
  402978:	4db3      	ldr	r5, [pc, #716]	; (402c48 <_vfiprintf_r+0xa2c>)
  40297a:	dd1e      	ble.n	4029ba <_vfiprintf_r+0x79e>
  40297c:	46d6      	mov	lr, sl
  40297e:	2610      	movs	r6, #16
  402980:	9f06      	ldr	r7, [sp, #24]
  402982:	f8dd a010 	ldr.w	sl, [sp, #16]
  402986:	e006      	b.n	402996 <_vfiprintf_r+0x77a>
  402988:	1c88      	adds	r0, r1, #2
  40298a:	f10e 0e08 	add.w	lr, lr, #8
  40298e:	4619      	mov	r1, r3
  402990:	3c10      	subs	r4, #16
  402992:	2c10      	cmp	r4, #16
  402994:	dd10      	ble.n	4029b8 <_vfiprintf_r+0x79c>
  402996:	1c4b      	adds	r3, r1, #1
  402998:	3210      	adds	r2, #16
  40299a:	2b07      	cmp	r3, #7
  40299c:	9211      	str	r2, [sp, #68]	; 0x44
  40299e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4029a2:	9310      	str	r3, [sp, #64]	; 0x40
  4029a4:	ddf0      	ble.n	402988 <_vfiprintf_r+0x76c>
  4029a6:	2a00      	cmp	r2, #0
  4029a8:	d165      	bne.n	402a76 <_vfiprintf_r+0x85a>
  4029aa:	3c10      	subs	r4, #16
  4029ac:	2c10      	cmp	r4, #16
  4029ae:	f04f 0001 	mov.w	r0, #1
  4029b2:	4611      	mov	r1, r2
  4029b4:	46ce      	mov	lr, r9
  4029b6:	dcee      	bgt.n	402996 <_vfiprintf_r+0x77a>
  4029b8:	46f2      	mov	sl, lr
  4029ba:	4422      	add	r2, r4
  4029bc:	2807      	cmp	r0, #7
  4029be:	9211      	str	r2, [sp, #68]	; 0x44
  4029c0:	f8ca 5000 	str.w	r5, [sl]
  4029c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4029c8:	9010      	str	r0, [sp, #64]	; 0x40
  4029ca:	f300 8085 	bgt.w	402ad8 <_vfiprintf_r+0x8bc>
  4029ce:	f10a 0a08 	add.w	sl, sl, #8
  4029d2:	3001      	adds	r0, #1
  4029d4:	9905      	ldr	r1, [sp, #20]
  4029d6:	f8ca b000 	str.w	fp, [sl]
  4029da:	440a      	add	r2, r1
  4029dc:	2807      	cmp	r0, #7
  4029de:	9211      	str	r2, [sp, #68]	; 0x44
  4029e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4029e4:	9010      	str	r0, [sp, #64]	; 0x40
  4029e6:	f340 8082 	ble.w	402aee <_vfiprintf_r+0x8d2>
  4029ea:	2a00      	cmp	r2, #0
  4029ec:	f040 8118 	bne.w	402c20 <_vfiprintf_r+0xa04>
  4029f0:	9b02      	ldr	r3, [sp, #8]
  4029f2:	9210      	str	r2, [sp, #64]	; 0x40
  4029f4:	0758      	lsls	r0, r3, #29
  4029f6:	d535      	bpl.n	402a64 <_vfiprintf_r+0x848>
  4029f8:	9b08      	ldr	r3, [sp, #32]
  4029fa:	9901      	ldr	r1, [sp, #4]
  4029fc:	1a5c      	subs	r4, r3, r1
  4029fe:	2c00      	cmp	r4, #0
  402a00:	f340 80e7 	ble.w	402bd2 <_vfiprintf_r+0x9b6>
  402a04:	46ca      	mov	sl, r9
  402a06:	2c10      	cmp	r4, #16
  402a08:	f340 8218 	ble.w	402e3c <_vfiprintf_r+0xc20>
  402a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a0e:	4e8f      	ldr	r6, [pc, #572]	; (402c4c <_vfiprintf_r+0xa30>)
  402a10:	9f06      	ldr	r7, [sp, #24]
  402a12:	f8dd b010 	ldr.w	fp, [sp, #16]
  402a16:	2510      	movs	r5, #16
  402a18:	e006      	b.n	402a28 <_vfiprintf_r+0x80c>
  402a1a:	1c88      	adds	r0, r1, #2
  402a1c:	f10a 0a08 	add.w	sl, sl, #8
  402a20:	4619      	mov	r1, r3
  402a22:	3c10      	subs	r4, #16
  402a24:	2c10      	cmp	r4, #16
  402a26:	dd11      	ble.n	402a4c <_vfiprintf_r+0x830>
  402a28:	1c4b      	adds	r3, r1, #1
  402a2a:	3210      	adds	r2, #16
  402a2c:	2b07      	cmp	r3, #7
  402a2e:	9211      	str	r2, [sp, #68]	; 0x44
  402a30:	f8ca 6000 	str.w	r6, [sl]
  402a34:	f8ca 5004 	str.w	r5, [sl, #4]
  402a38:	9310      	str	r3, [sp, #64]	; 0x40
  402a3a:	ddee      	ble.n	402a1a <_vfiprintf_r+0x7fe>
  402a3c:	bb42      	cbnz	r2, 402a90 <_vfiprintf_r+0x874>
  402a3e:	3c10      	subs	r4, #16
  402a40:	2c10      	cmp	r4, #16
  402a42:	f04f 0001 	mov.w	r0, #1
  402a46:	4611      	mov	r1, r2
  402a48:	46ca      	mov	sl, r9
  402a4a:	dced      	bgt.n	402a28 <_vfiprintf_r+0x80c>
  402a4c:	4422      	add	r2, r4
  402a4e:	2807      	cmp	r0, #7
  402a50:	9211      	str	r2, [sp, #68]	; 0x44
  402a52:	f8ca 6000 	str.w	r6, [sl]
  402a56:	f8ca 4004 	str.w	r4, [sl, #4]
  402a5a:	9010      	str	r0, [sp, #64]	; 0x40
  402a5c:	dd51      	ble.n	402b02 <_vfiprintf_r+0x8e6>
  402a5e:	2a00      	cmp	r2, #0
  402a60:	f040 819b 	bne.w	402d9a <_vfiprintf_r+0xb7e>
  402a64:	9b03      	ldr	r3, [sp, #12]
  402a66:	9a08      	ldr	r2, [sp, #32]
  402a68:	9901      	ldr	r1, [sp, #4]
  402a6a:	428a      	cmp	r2, r1
  402a6c:	bfac      	ite	ge
  402a6e:	189b      	addge	r3, r3, r2
  402a70:	185b      	addlt	r3, r3, r1
  402a72:	9303      	str	r3, [sp, #12]
  402a74:	e04e      	b.n	402b14 <_vfiprintf_r+0x8f8>
  402a76:	aa0f      	add	r2, sp, #60	; 0x3c
  402a78:	4651      	mov	r1, sl
  402a7a:	4638      	mov	r0, r7
  402a7c:	f7ff fb8e 	bl	40219c <__sprint_r.part.0>
  402a80:	2800      	cmp	r0, #0
  402a82:	f040 813f 	bne.w	402d04 <_vfiprintf_r+0xae8>
  402a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a8a:	1c48      	adds	r0, r1, #1
  402a8c:	46ce      	mov	lr, r9
  402a8e:	e77f      	b.n	402990 <_vfiprintf_r+0x774>
  402a90:	aa0f      	add	r2, sp, #60	; 0x3c
  402a92:	4659      	mov	r1, fp
  402a94:	4638      	mov	r0, r7
  402a96:	f7ff fb81 	bl	40219c <__sprint_r.part.0>
  402a9a:	b960      	cbnz	r0, 402ab6 <_vfiprintf_r+0x89a>
  402a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aa0:	1c48      	adds	r0, r1, #1
  402aa2:	46ca      	mov	sl, r9
  402aa4:	e7bd      	b.n	402a22 <_vfiprintf_r+0x806>
  402aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402aa8:	f8dd b010 	ldr.w	fp, [sp, #16]
  402aac:	2b00      	cmp	r3, #0
  402aae:	f040 81d4 	bne.w	402e5a <_vfiprintf_r+0xc3e>
  402ab2:	2300      	movs	r3, #0
  402ab4:	9310      	str	r3, [sp, #64]	; 0x40
  402ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402aba:	f013 0f01 	tst.w	r3, #1
  402abe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402ac2:	d102      	bne.n	402aca <_vfiprintf_r+0x8ae>
  402ac4:	059a      	lsls	r2, r3, #22
  402ac6:	f140 80de 	bpl.w	402c86 <_vfiprintf_r+0xa6a>
  402aca:	065b      	lsls	r3, r3, #25
  402acc:	f53f acb2 	bmi.w	402434 <_vfiprintf_r+0x218>
  402ad0:	9803      	ldr	r0, [sp, #12]
  402ad2:	b02d      	add	sp, #180	; 0xb4
  402ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ad8:	2a00      	cmp	r2, #0
  402ada:	f040 8106 	bne.w	402cea <_vfiprintf_r+0xace>
  402ade:	9a05      	ldr	r2, [sp, #20]
  402ae0:	921d      	str	r2, [sp, #116]	; 0x74
  402ae2:	2301      	movs	r3, #1
  402ae4:	9211      	str	r2, [sp, #68]	; 0x44
  402ae6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402aea:	9310      	str	r3, [sp, #64]	; 0x40
  402aec:	46ca      	mov	sl, r9
  402aee:	f10a 0a08 	add.w	sl, sl, #8
  402af2:	9b02      	ldr	r3, [sp, #8]
  402af4:	0759      	lsls	r1, r3, #29
  402af6:	d504      	bpl.n	402b02 <_vfiprintf_r+0x8e6>
  402af8:	9b08      	ldr	r3, [sp, #32]
  402afa:	9901      	ldr	r1, [sp, #4]
  402afc:	1a5c      	subs	r4, r3, r1
  402afe:	2c00      	cmp	r4, #0
  402b00:	dc81      	bgt.n	402a06 <_vfiprintf_r+0x7ea>
  402b02:	9b03      	ldr	r3, [sp, #12]
  402b04:	9908      	ldr	r1, [sp, #32]
  402b06:	9801      	ldr	r0, [sp, #4]
  402b08:	4281      	cmp	r1, r0
  402b0a:	bfac      	ite	ge
  402b0c:	185b      	addge	r3, r3, r1
  402b0e:	181b      	addlt	r3, r3, r0
  402b10:	9303      	str	r3, [sp, #12]
  402b12:	bb72      	cbnz	r2, 402b72 <_vfiprintf_r+0x956>
  402b14:	2300      	movs	r3, #0
  402b16:	9310      	str	r3, [sp, #64]	; 0x40
  402b18:	46ca      	mov	sl, r9
  402b1a:	f7ff bbbc 	b.w	402296 <_vfiprintf_r+0x7a>
  402b1e:	aa0f      	add	r2, sp, #60	; 0x3c
  402b20:	9904      	ldr	r1, [sp, #16]
  402b22:	4620      	mov	r0, r4
  402b24:	f7ff fb3a 	bl	40219c <__sprint_r.part.0>
  402b28:	bb50      	cbnz	r0, 402b80 <_vfiprintf_r+0x964>
  402b2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b2e:	f101 0e01 	add.w	lr, r1, #1
  402b32:	46cc      	mov	ip, r9
  402b34:	e548      	b.n	4025c8 <_vfiprintf_r+0x3ac>
  402b36:	2a00      	cmp	r2, #0
  402b38:	f040 8140 	bne.w	402dbc <_vfiprintf_r+0xba0>
  402b3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402b40:	2900      	cmp	r1, #0
  402b42:	f000 811b 	beq.w	402d7c <_vfiprintf_r+0xb60>
  402b46:	2201      	movs	r2, #1
  402b48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402b4c:	4610      	mov	r0, r2
  402b4e:	921d      	str	r2, [sp, #116]	; 0x74
  402b50:	911c      	str	r1, [sp, #112]	; 0x70
  402b52:	46ca      	mov	sl, r9
  402b54:	4601      	mov	r1, r0
  402b56:	f10a 0a08 	add.w	sl, sl, #8
  402b5a:	3001      	adds	r0, #1
  402b5c:	e507      	b.n	40256e <_vfiprintf_r+0x352>
  402b5e:	9b02      	ldr	r3, [sp, #8]
  402b60:	2a01      	cmp	r2, #1
  402b62:	f000 8098 	beq.w	402c96 <_vfiprintf_r+0xa7a>
  402b66:	2a02      	cmp	r2, #2
  402b68:	d10d      	bne.n	402b86 <_vfiprintf_r+0x96a>
  402b6a:	9302      	str	r3, [sp, #8]
  402b6c:	2600      	movs	r6, #0
  402b6e:	2700      	movs	r7, #0
  402b70:	e5b0      	b.n	4026d4 <_vfiprintf_r+0x4b8>
  402b72:	aa0f      	add	r2, sp, #60	; 0x3c
  402b74:	9904      	ldr	r1, [sp, #16]
  402b76:	9806      	ldr	r0, [sp, #24]
  402b78:	f7ff fb10 	bl	40219c <__sprint_r.part.0>
  402b7c:	2800      	cmp	r0, #0
  402b7e:	d0c9      	beq.n	402b14 <_vfiprintf_r+0x8f8>
  402b80:	f8dd b010 	ldr.w	fp, [sp, #16]
  402b84:	e797      	b.n	402ab6 <_vfiprintf_r+0x89a>
  402b86:	9302      	str	r3, [sp, #8]
  402b88:	2600      	movs	r6, #0
  402b8a:	2700      	movs	r7, #0
  402b8c:	4649      	mov	r1, r9
  402b8e:	e000      	b.n	402b92 <_vfiprintf_r+0x976>
  402b90:	4659      	mov	r1, fp
  402b92:	08f2      	lsrs	r2, r6, #3
  402b94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402b98:	08f8      	lsrs	r0, r7, #3
  402b9a:	f006 0307 	and.w	r3, r6, #7
  402b9e:	4607      	mov	r7, r0
  402ba0:	4616      	mov	r6, r2
  402ba2:	3330      	adds	r3, #48	; 0x30
  402ba4:	ea56 0207 	orrs.w	r2, r6, r7
  402ba8:	f801 3c01 	strb.w	r3, [r1, #-1]
  402bac:	f101 3bff 	add.w	fp, r1, #4294967295
  402bb0:	d1ee      	bne.n	402b90 <_vfiprintf_r+0x974>
  402bb2:	9a02      	ldr	r2, [sp, #8]
  402bb4:	07d6      	lsls	r6, r2, #31
  402bb6:	f57f ad9d 	bpl.w	4026f4 <_vfiprintf_r+0x4d8>
  402bba:	2b30      	cmp	r3, #48	; 0x30
  402bbc:	f43f ad9a 	beq.w	4026f4 <_vfiprintf_r+0x4d8>
  402bc0:	3902      	subs	r1, #2
  402bc2:	2330      	movs	r3, #48	; 0x30
  402bc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402bc8:	eba9 0301 	sub.w	r3, r9, r1
  402bcc:	9305      	str	r3, [sp, #20]
  402bce:	468b      	mov	fp, r1
  402bd0:	e476      	b.n	4024c0 <_vfiprintf_r+0x2a4>
  402bd2:	9b03      	ldr	r3, [sp, #12]
  402bd4:	9a08      	ldr	r2, [sp, #32]
  402bd6:	428a      	cmp	r2, r1
  402bd8:	bfac      	ite	ge
  402bda:	189b      	addge	r3, r3, r2
  402bdc:	185b      	addlt	r3, r3, r1
  402bde:	9303      	str	r3, [sp, #12]
  402be0:	e798      	b.n	402b14 <_vfiprintf_r+0x8f8>
  402be2:	2202      	movs	r2, #2
  402be4:	e44d      	b.n	402482 <_vfiprintf_r+0x266>
  402be6:	2f00      	cmp	r7, #0
  402be8:	bf08      	it	eq
  402bea:	2e0a      	cmpeq	r6, #10
  402bec:	d352      	bcc.n	402c94 <_vfiprintf_r+0xa78>
  402bee:	46cb      	mov	fp, r9
  402bf0:	4630      	mov	r0, r6
  402bf2:	4639      	mov	r1, r7
  402bf4:	220a      	movs	r2, #10
  402bf6:	2300      	movs	r3, #0
  402bf8:	f7fe fe8c 	bl	401914 <__aeabi_uldivmod>
  402bfc:	3230      	adds	r2, #48	; 0x30
  402bfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402c02:	4630      	mov	r0, r6
  402c04:	4639      	mov	r1, r7
  402c06:	2300      	movs	r3, #0
  402c08:	220a      	movs	r2, #10
  402c0a:	f7fe fe83 	bl	401914 <__aeabi_uldivmod>
  402c0e:	4606      	mov	r6, r0
  402c10:	460f      	mov	r7, r1
  402c12:	ea56 0307 	orrs.w	r3, r6, r7
  402c16:	d1eb      	bne.n	402bf0 <_vfiprintf_r+0x9d4>
  402c18:	e56c      	b.n	4026f4 <_vfiprintf_r+0x4d8>
  402c1a:	9405      	str	r4, [sp, #20]
  402c1c:	46cb      	mov	fp, r9
  402c1e:	e44f      	b.n	4024c0 <_vfiprintf_r+0x2a4>
  402c20:	aa0f      	add	r2, sp, #60	; 0x3c
  402c22:	9904      	ldr	r1, [sp, #16]
  402c24:	9806      	ldr	r0, [sp, #24]
  402c26:	f7ff fab9 	bl	40219c <__sprint_r.part.0>
  402c2a:	2800      	cmp	r0, #0
  402c2c:	d1a8      	bne.n	402b80 <_vfiprintf_r+0x964>
  402c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c30:	46ca      	mov	sl, r9
  402c32:	e75e      	b.n	402af2 <_vfiprintf_r+0x8d6>
  402c34:	aa0f      	add	r2, sp, #60	; 0x3c
  402c36:	9904      	ldr	r1, [sp, #16]
  402c38:	9806      	ldr	r0, [sp, #24]
  402c3a:	f7ff faaf 	bl	40219c <__sprint_r.part.0>
  402c3e:	2800      	cmp	r0, #0
  402c40:	d19e      	bne.n	402b80 <_vfiprintf_r+0x964>
  402c42:	46ca      	mov	sl, r9
  402c44:	f7ff bbc0 	b.w	4023c8 <_vfiprintf_r+0x1ac>
  402c48:	00404c3c 	.word	0x00404c3c
  402c4c:	00404c2c 	.word	0x00404c2c
  402c50:	3104      	adds	r1, #4
  402c52:	6816      	ldr	r6, [r2, #0]
  402c54:	9107      	str	r1, [sp, #28]
  402c56:	2201      	movs	r2, #1
  402c58:	2700      	movs	r7, #0
  402c5a:	e412      	b.n	402482 <_vfiprintf_r+0x266>
  402c5c:	9807      	ldr	r0, [sp, #28]
  402c5e:	4601      	mov	r1, r0
  402c60:	3104      	adds	r1, #4
  402c62:	6806      	ldr	r6, [r0, #0]
  402c64:	9107      	str	r1, [sp, #28]
  402c66:	2700      	movs	r7, #0
  402c68:	e40b      	b.n	402482 <_vfiprintf_r+0x266>
  402c6a:	680e      	ldr	r6, [r1, #0]
  402c6c:	3104      	adds	r1, #4
  402c6e:	9107      	str	r1, [sp, #28]
  402c70:	2700      	movs	r7, #0
  402c72:	e591      	b.n	402798 <_vfiprintf_r+0x57c>
  402c74:	9907      	ldr	r1, [sp, #28]
  402c76:	680e      	ldr	r6, [r1, #0]
  402c78:	460a      	mov	r2, r1
  402c7a:	17f7      	asrs	r7, r6, #31
  402c7c:	3204      	adds	r2, #4
  402c7e:	9207      	str	r2, [sp, #28]
  402c80:	4630      	mov	r0, r6
  402c82:	4639      	mov	r1, r7
  402c84:	e50f      	b.n	4026a6 <_vfiprintf_r+0x48a>
  402c86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c8a:	f000 fe7f 	bl	40398c <__retarget_lock_release_recursive>
  402c8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402c92:	e71a      	b.n	402aca <_vfiprintf_r+0x8ae>
  402c94:	9b02      	ldr	r3, [sp, #8]
  402c96:	9302      	str	r3, [sp, #8]
  402c98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402c9c:	3630      	adds	r6, #48	; 0x30
  402c9e:	2301      	movs	r3, #1
  402ca0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402ca4:	9305      	str	r3, [sp, #20]
  402ca6:	e40b      	b.n	4024c0 <_vfiprintf_r+0x2a4>
  402ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  402caa:	9904      	ldr	r1, [sp, #16]
  402cac:	9806      	ldr	r0, [sp, #24]
  402cae:	f7ff fa75 	bl	40219c <__sprint_r.part.0>
  402cb2:	2800      	cmp	r0, #0
  402cb4:	f47f af64 	bne.w	402b80 <_vfiprintf_r+0x964>
  402cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  402cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402cbc:	1c48      	adds	r0, r1, #1
  402cbe:	46ca      	mov	sl, r9
  402cc0:	e651      	b.n	402966 <_vfiprintf_r+0x74a>
  402cc2:	aa0f      	add	r2, sp, #60	; 0x3c
  402cc4:	9904      	ldr	r1, [sp, #16]
  402cc6:	9806      	ldr	r0, [sp, #24]
  402cc8:	f7ff fa68 	bl	40219c <__sprint_r.part.0>
  402ccc:	2800      	cmp	r0, #0
  402cce:	f47f af57 	bne.w	402b80 <_vfiprintf_r+0x964>
  402cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402cd6:	1c48      	adds	r0, r1, #1
  402cd8:	46ca      	mov	sl, r9
  402cda:	e448      	b.n	40256e <_vfiprintf_r+0x352>
  402cdc:	2a00      	cmp	r2, #0
  402cde:	f040 8091 	bne.w	402e04 <_vfiprintf_r+0xbe8>
  402ce2:	2001      	movs	r0, #1
  402ce4:	4611      	mov	r1, r2
  402ce6:	46ca      	mov	sl, r9
  402ce8:	e641      	b.n	40296e <_vfiprintf_r+0x752>
  402cea:	aa0f      	add	r2, sp, #60	; 0x3c
  402cec:	9904      	ldr	r1, [sp, #16]
  402cee:	9806      	ldr	r0, [sp, #24]
  402cf0:	f7ff fa54 	bl	40219c <__sprint_r.part.0>
  402cf4:	2800      	cmp	r0, #0
  402cf6:	f47f af43 	bne.w	402b80 <_vfiprintf_r+0x964>
  402cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  402cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402cfe:	3001      	adds	r0, #1
  402d00:	46ca      	mov	sl, r9
  402d02:	e667      	b.n	4029d4 <_vfiprintf_r+0x7b8>
  402d04:	46d3      	mov	fp, sl
  402d06:	e6d6      	b.n	402ab6 <_vfiprintf_r+0x89a>
  402d08:	9e07      	ldr	r6, [sp, #28]
  402d0a:	3607      	adds	r6, #7
  402d0c:	f026 0207 	bic.w	r2, r6, #7
  402d10:	f102 0108 	add.w	r1, r2, #8
  402d14:	e9d2 6700 	ldrd	r6, r7, [r2]
  402d18:	9107      	str	r1, [sp, #28]
  402d1a:	2201      	movs	r2, #1
  402d1c:	f7ff bbb1 	b.w	402482 <_vfiprintf_r+0x266>
  402d20:	9e07      	ldr	r6, [sp, #28]
  402d22:	3607      	adds	r6, #7
  402d24:	f026 0607 	bic.w	r6, r6, #7
  402d28:	e9d6 0100 	ldrd	r0, r1, [r6]
  402d2c:	f106 0208 	add.w	r2, r6, #8
  402d30:	9207      	str	r2, [sp, #28]
  402d32:	4606      	mov	r6, r0
  402d34:	460f      	mov	r7, r1
  402d36:	e4b6      	b.n	4026a6 <_vfiprintf_r+0x48a>
  402d38:	9e07      	ldr	r6, [sp, #28]
  402d3a:	3607      	adds	r6, #7
  402d3c:	f026 0207 	bic.w	r2, r6, #7
  402d40:	f102 0108 	add.w	r1, r2, #8
  402d44:	e9d2 6700 	ldrd	r6, r7, [r2]
  402d48:	9107      	str	r1, [sp, #28]
  402d4a:	2200      	movs	r2, #0
  402d4c:	f7ff bb99 	b.w	402482 <_vfiprintf_r+0x266>
  402d50:	9e07      	ldr	r6, [sp, #28]
  402d52:	3607      	adds	r6, #7
  402d54:	f026 0107 	bic.w	r1, r6, #7
  402d58:	f101 0008 	add.w	r0, r1, #8
  402d5c:	9007      	str	r0, [sp, #28]
  402d5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402d62:	e519      	b.n	402798 <_vfiprintf_r+0x57c>
  402d64:	46cb      	mov	fp, r9
  402d66:	f7ff bbab 	b.w	4024c0 <_vfiprintf_r+0x2a4>
  402d6a:	252d      	movs	r5, #45	; 0x2d
  402d6c:	4276      	negs	r6, r6
  402d6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402d72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402d76:	2201      	movs	r2, #1
  402d78:	f7ff bb88 	b.w	40248c <_vfiprintf_r+0x270>
  402d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402d7e:	b9b3      	cbnz	r3, 402dae <_vfiprintf_r+0xb92>
  402d80:	4611      	mov	r1, r2
  402d82:	2001      	movs	r0, #1
  402d84:	46ca      	mov	sl, r9
  402d86:	e5f2      	b.n	40296e <_vfiprintf_r+0x752>
  402d88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402d8c:	f000 fdfe 	bl	40398c <__retarget_lock_release_recursive>
  402d90:	f04f 33ff 	mov.w	r3, #4294967295
  402d94:	9303      	str	r3, [sp, #12]
  402d96:	f7ff bb50 	b.w	40243a <_vfiprintf_r+0x21e>
  402d9a:	aa0f      	add	r2, sp, #60	; 0x3c
  402d9c:	9904      	ldr	r1, [sp, #16]
  402d9e:	9806      	ldr	r0, [sp, #24]
  402da0:	f7ff f9fc 	bl	40219c <__sprint_r.part.0>
  402da4:	2800      	cmp	r0, #0
  402da6:	f47f aeeb 	bne.w	402b80 <_vfiprintf_r+0x964>
  402daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dac:	e6a9      	b.n	402b02 <_vfiprintf_r+0x8e6>
  402dae:	ab0e      	add	r3, sp, #56	; 0x38
  402db0:	2202      	movs	r2, #2
  402db2:	931c      	str	r3, [sp, #112]	; 0x70
  402db4:	921d      	str	r2, [sp, #116]	; 0x74
  402db6:	2001      	movs	r0, #1
  402db8:	46ca      	mov	sl, r9
  402dba:	e5d0      	b.n	40295e <_vfiprintf_r+0x742>
  402dbc:	aa0f      	add	r2, sp, #60	; 0x3c
  402dbe:	9904      	ldr	r1, [sp, #16]
  402dc0:	9806      	ldr	r0, [sp, #24]
  402dc2:	f7ff f9eb 	bl	40219c <__sprint_r.part.0>
  402dc6:	2800      	cmp	r0, #0
  402dc8:	f47f aeda 	bne.w	402b80 <_vfiprintf_r+0x964>
  402dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  402dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dd0:	1c48      	adds	r0, r1, #1
  402dd2:	46ca      	mov	sl, r9
  402dd4:	e5a4      	b.n	402920 <_vfiprintf_r+0x704>
  402dd6:	9a07      	ldr	r2, [sp, #28]
  402dd8:	9903      	ldr	r1, [sp, #12]
  402dda:	6813      	ldr	r3, [r2, #0]
  402ddc:	17cd      	asrs	r5, r1, #31
  402dde:	4608      	mov	r0, r1
  402de0:	3204      	adds	r2, #4
  402de2:	4629      	mov	r1, r5
  402de4:	9207      	str	r2, [sp, #28]
  402de6:	e9c3 0100 	strd	r0, r1, [r3]
  402dea:	f7ff ba54 	b.w	402296 <_vfiprintf_r+0x7a>
  402dee:	4658      	mov	r0, fp
  402df0:	9607      	str	r6, [sp, #28]
  402df2:	9302      	str	r3, [sp, #8]
  402df4:	f7ff f964 	bl	4020c0 <strlen>
  402df8:	2400      	movs	r4, #0
  402dfa:	9005      	str	r0, [sp, #20]
  402dfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402e00:	f7ff bb5e 	b.w	4024c0 <_vfiprintf_r+0x2a4>
  402e04:	aa0f      	add	r2, sp, #60	; 0x3c
  402e06:	9904      	ldr	r1, [sp, #16]
  402e08:	9806      	ldr	r0, [sp, #24]
  402e0a:	f7ff f9c7 	bl	40219c <__sprint_r.part.0>
  402e0e:	2800      	cmp	r0, #0
  402e10:	f47f aeb6 	bne.w	402b80 <_vfiprintf_r+0x964>
  402e14:	9910      	ldr	r1, [sp, #64]	; 0x40
  402e16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e18:	1c48      	adds	r0, r1, #1
  402e1a:	46ca      	mov	sl, r9
  402e1c:	e5a7      	b.n	40296e <_vfiprintf_r+0x752>
  402e1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e22:	4e20      	ldr	r6, [pc, #128]	; (402ea4 <_vfiprintf_r+0xc88>)
  402e24:	3101      	adds	r1, #1
  402e26:	f7ff bb90 	b.w	40254a <_vfiprintf_r+0x32e>
  402e2a:	2c06      	cmp	r4, #6
  402e2c:	bf28      	it	cs
  402e2e:	2406      	movcs	r4, #6
  402e30:	9405      	str	r4, [sp, #20]
  402e32:	9607      	str	r6, [sp, #28]
  402e34:	9401      	str	r4, [sp, #4]
  402e36:	f8df b070 	ldr.w	fp, [pc, #112]	; 402ea8 <_vfiprintf_r+0xc8c>
  402e3a:	e4d5      	b.n	4027e8 <_vfiprintf_r+0x5cc>
  402e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  402e3e:	4e19      	ldr	r6, [pc, #100]	; (402ea4 <_vfiprintf_r+0xc88>)
  402e40:	3001      	adds	r0, #1
  402e42:	e603      	b.n	402a4c <_vfiprintf_r+0x830>
  402e44:	9405      	str	r4, [sp, #20]
  402e46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402e4a:	9607      	str	r6, [sp, #28]
  402e4c:	9302      	str	r3, [sp, #8]
  402e4e:	4604      	mov	r4, r0
  402e50:	f7ff bb36 	b.w	4024c0 <_vfiprintf_r+0x2a4>
  402e54:	4686      	mov	lr, r0
  402e56:	f7ff bbce 	b.w	4025f6 <_vfiprintf_r+0x3da>
  402e5a:	9806      	ldr	r0, [sp, #24]
  402e5c:	aa0f      	add	r2, sp, #60	; 0x3c
  402e5e:	4659      	mov	r1, fp
  402e60:	f7ff f99c 	bl	40219c <__sprint_r.part.0>
  402e64:	2800      	cmp	r0, #0
  402e66:	f43f ae24 	beq.w	402ab2 <_vfiprintf_r+0x896>
  402e6a:	e624      	b.n	402ab6 <_vfiprintf_r+0x89a>
  402e6c:	9907      	ldr	r1, [sp, #28]
  402e6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402e72:	680c      	ldr	r4, [r1, #0]
  402e74:	3104      	adds	r1, #4
  402e76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402e7a:	46b8      	mov	r8, r7
  402e7c:	9107      	str	r1, [sp, #28]
  402e7e:	f7ff ba3f 	b.w	402300 <_vfiprintf_r+0xe4>
  402e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e86:	e43c      	b.n	402702 <_vfiprintf_r+0x4e6>
  402e88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e8c:	e521      	b.n	4028d2 <_vfiprintf_r+0x6b6>
  402e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e92:	f7ff bbf4 	b.w	40267e <_vfiprintf_r+0x462>
  402e96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e9a:	e491      	b.n	4027c0 <_vfiprintf_r+0x5a4>
  402e9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402ea0:	e469      	b.n	402776 <_vfiprintf_r+0x55a>
  402ea2:	bf00      	nop
  402ea4:	00404c2c 	.word	0x00404c2c
  402ea8:	00404c24 	.word	0x00404c24

00402eac <__sbprintf>:
  402eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402eb0:	460c      	mov	r4, r1
  402eb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402eb6:	8989      	ldrh	r1, [r1, #12]
  402eb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402eba:	89e5      	ldrh	r5, [r4, #14]
  402ebc:	9619      	str	r6, [sp, #100]	; 0x64
  402ebe:	f021 0102 	bic.w	r1, r1, #2
  402ec2:	4606      	mov	r6, r0
  402ec4:	69e0      	ldr	r0, [r4, #28]
  402ec6:	f8ad 100c 	strh.w	r1, [sp, #12]
  402eca:	4617      	mov	r7, r2
  402ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402ed2:	f8ad 500e 	strh.w	r5, [sp, #14]
  402ed6:	4698      	mov	r8, r3
  402ed8:	ad1a      	add	r5, sp, #104	; 0x68
  402eda:	2300      	movs	r3, #0
  402edc:	9007      	str	r0, [sp, #28]
  402ede:	a816      	add	r0, sp, #88	; 0x58
  402ee0:	9209      	str	r2, [sp, #36]	; 0x24
  402ee2:	9306      	str	r3, [sp, #24]
  402ee4:	9500      	str	r5, [sp, #0]
  402ee6:	9504      	str	r5, [sp, #16]
  402ee8:	9102      	str	r1, [sp, #8]
  402eea:	9105      	str	r1, [sp, #20]
  402eec:	f000 fd48 	bl	403980 <__retarget_lock_init_recursive>
  402ef0:	4643      	mov	r3, r8
  402ef2:	463a      	mov	r2, r7
  402ef4:	4669      	mov	r1, sp
  402ef6:	4630      	mov	r0, r6
  402ef8:	f7ff f990 	bl	40221c <_vfiprintf_r>
  402efc:	1e05      	subs	r5, r0, #0
  402efe:	db07      	blt.n	402f10 <__sbprintf+0x64>
  402f00:	4630      	mov	r0, r6
  402f02:	4669      	mov	r1, sp
  402f04:	f000 f928 	bl	403158 <_fflush_r>
  402f08:	2800      	cmp	r0, #0
  402f0a:	bf18      	it	ne
  402f0c:	f04f 35ff 	movne.w	r5, #4294967295
  402f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402f14:	065b      	lsls	r3, r3, #25
  402f16:	d503      	bpl.n	402f20 <__sbprintf+0x74>
  402f18:	89a3      	ldrh	r3, [r4, #12]
  402f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f1e:	81a3      	strh	r3, [r4, #12]
  402f20:	9816      	ldr	r0, [sp, #88]	; 0x58
  402f22:	f000 fd2f 	bl	403984 <__retarget_lock_close_recursive>
  402f26:	4628      	mov	r0, r5
  402f28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402f30 <__swsetup_r>:
  402f30:	b538      	push	{r3, r4, r5, lr}
  402f32:	4b30      	ldr	r3, [pc, #192]	; (402ff4 <__swsetup_r+0xc4>)
  402f34:	681b      	ldr	r3, [r3, #0]
  402f36:	4605      	mov	r5, r0
  402f38:	460c      	mov	r4, r1
  402f3a:	b113      	cbz	r3, 402f42 <__swsetup_r+0x12>
  402f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402f3e:	2a00      	cmp	r2, #0
  402f40:	d038      	beq.n	402fb4 <__swsetup_r+0x84>
  402f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402f46:	b293      	uxth	r3, r2
  402f48:	0718      	lsls	r0, r3, #28
  402f4a:	d50c      	bpl.n	402f66 <__swsetup_r+0x36>
  402f4c:	6920      	ldr	r0, [r4, #16]
  402f4e:	b1a8      	cbz	r0, 402f7c <__swsetup_r+0x4c>
  402f50:	f013 0201 	ands.w	r2, r3, #1
  402f54:	d01e      	beq.n	402f94 <__swsetup_r+0x64>
  402f56:	6963      	ldr	r3, [r4, #20]
  402f58:	2200      	movs	r2, #0
  402f5a:	425b      	negs	r3, r3
  402f5c:	61a3      	str	r3, [r4, #24]
  402f5e:	60a2      	str	r2, [r4, #8]
  402f60:	b1f0      	cbz	r0, 402fa0 <__swsetup_r+0x70>
  402f62:	2000      	movs	r0, #0
  402f64:	bd38      	pop	{r3, r4, r5, pc}
  402f66:	06d9      	lsls	r1, r3, #27
  402f68:	d53c      	bpl.n	402fe4 <__swsetup_r+0xb4>
  402f6a:	0758      	lsls	r0, r3, #29
  402f6c:	d426      	bmi.n	402fbc <__swsetup_r+0x8c>
  402f6e:	6920      	ldr	r0, [r4, #16]
  402f70:	f042 0308 	orr.w	r3, r2, #8
  402f74:	81a3      	strh	r3, [r4, #12]
  402f76:	b29b      	uxth	r3, r3
  402f78:	2800      	cmp	r0, #0
  402f7a:	d1e9      	bne.n	402f50 <__swsetup_r+0x20>
  402f7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402f80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402f84:	d0e4      	beq.n	402f50 <__swsetup_r+0x20>
  402f86:	4628      	mov	r0, r5
  402f88:	4621      	mov	r1, r4
  402f8a:	f000 fd2f 	bl	4039ec <__smakebuf_r>
  402f8e:	89a3      	ldrh	r3, [r4, #12]
  402f90:	6920      	ldr	r0, [r4, #16]
  402f92:	e7dd      	b.n	402f50 <__swsetup_r+0x20>
  402f94:	0799      	lsls	r1, r3, #30
  402f96:	bf58      	it	pl
  402f98:	6962      	ldrpl	r2, [r4, #20]
  402f9a:	60a2      	str	r2, [r4, #8]
  402f9c:	2800      	cmp	r0, #0
  402f9e:	d1e0      	bne.n	402f62 <__swsetup_r+0x32>
  402fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fa4:	061a      	lsls	r2, r3, #24
  402fa6:	d5dd      	bpl.n	402f64 <__swsetup_r+0x34>
  402fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402fac:	81a3      	strh	r3, [r4, #12]
  402fae:	f04f 30ff 	mov.w	r0, #4294967295
  402fb2:	bd38      	pop	{r3, r4, r5, pc}
  402fb4:	4618      	mov	r0, r3
  402fb6:	f000 f927 	bl	403208 <__sinit>
  402fba:	e7c2      	b.n	402f42 <__swsetup_r+0x12>
  402fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402fbe:	b151      	cbz	r1, 402fd6 <__swsetup_r+0xa6>
  402fc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402fc4:	4299      	cmp	r1, r3
  402fc6:	d004      	beq.n	402fd2 <__swsetup_r+0xa2>
  402fc8:	4628      	mov	r0, r5
  402fca:	f000 fa43 	bl	403454 <_free_r>
  402fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402fd2:	2300      	movs	r3, #0
  402fd4:	6323      	str	r3, [r4, #48]	; 0x30
  402fd6:	2300      	movs	r3, #0
  402fd8:	6920      	ldr	r0, [r4, #16]
  402fda:	6063      	str	r3, [r4, #4]
  402fdc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402fe0:	6020      	str	r0, [r4, #0]
  402fe2:	e7c5      	b.n	402f70 <__swsetup_r+0x40>
  402fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402fe8:	2309      	movs	r3, #9
  402fea:	602b      	str	r3, [r5, #0]
  402fec:	f04f 30ff 	mov.w	r0, #4294967295
  402ff0:	81a2      	strh	r2, [r4, #12]
  402ff2:	bd38      	pop	{r3, r4, r5, pc}
  402ff4:	20400018 	.word	0x20400018

00402ff8 <register_fini>:
  402ff8:	4b02      	ldr	r3, [pc, #8]	; (403004 <register_fini+0xc>)
  402ffa:	b113      	cbz	r3, 403002 <register_fini+0xa>
  402ffc:	4802      	ldr	r0, [pc, #8]	; (403008 <register_fini+0x10>)
  402ffe:	f000 b805 	b.w	40300c <atexit>
  403002:	4770      	bx	lr
  403004:	00000000 	.word	0x00000000
  403008:	00403279 	.word	0x00403279

0040300c <atexit>:
  40300c:	2300      	movs	r3, #0
  40300e:	4601      	mov	r1, r0
  403010:	461a      	mov	r2, r3
  403012:	4618      	mov	r0, r3
  403014:	f001 bb66 	b.w	4046e4 <__register_exitproc>

00403018 <__sflush_r>:
  403018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40301c:	b29a      	uxth	r2, r3
  40301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403022:	460d      	mov	r5, r1
  403024:	0711      	lsls	r1, r2, #28
  403026:	4680      	mov	r8, r0
  403028:	d43a      	bmi.n	4030a0 <__sflush_r+0x88>
  40302a:	686a      	ldr	r2, [r5, #4]
  40302c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403030:	2a00      	cmp	r2, #0
  403032:	81ab      	strh	r3, [r5, #12]
  403034:	dd6f      	ble.n	403116 <__sflush_r+0xfe>
  403036:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403038:	2c00      	cmp	r4, #0
  40303a:	d049      	beq.n	4030d0 <__sflush_r+0xb8>
  40303c:	2200      	movs	r2, #0
  40303e:	b29b      	uxth	r3, r3
  403040:	f8d8 6000 	ldr.w	r6, [r8]
  403044:	f8c8 2000 	str.w	r2, [r8]
  403048:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40304c:	d067      	beq.n	40311e <__sflush_r+0x106>
  40304e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403050:	075f      	lsls	r7, r3, #29
  403052:	d505      	bpl.n	403060 <__sflush_r+0x48>
  403054:	6869      	ldr	r1, [r5, #4]
  403056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403058:	1a52      	subs	r2, r2, r1
  40305a:	b10b      	cbz	r3, 403060 <__sflush_r+0x48>
  40305c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40305e:	1ad2      	subs	r2, r2, r3
  403060:	2300      	movs	r3, #0
  403062:	69e9      	ldr	r1, [r5, #28]
  403064:	4640      	mov	r0, r8
  403066:	47a0      	blx	r4
  403068:	1c44      	adds	r4, r0, #1
  40306a:	d03c      	beq.n	4030e6 <__sflush_r+0xce>
  40306c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403070:	692a      	ldr	r2, [r5, #16]
  403072:	602a      	str	r2, [r5, #0]
  403074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403078:	2200      	movs	r2, #0
  40307a:	81ab      	strh	r3, [r5, #12]
  40307c:	04db      	lsls	r3, r3, #19
  40307e:	606a      	str	r2, [r5, #4]
  403080:	d447      	bmi.n	403112 <__sflush_r+0xfa>
  403082:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403084:	f8c8 6000 	str.w	r6, [r8]
  403088:	b311      	cbz	r1, 4030d0 <__sflush_r+0xb8>
  40308a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40308e:	4299      	cmp	r1, r3
  403090:	d002      	beq.n	403098 <__sflush_r+0x80>
  403092:	4640      	mov	r0, r8
  403094:	f000 f9de 	bl	403454 <_free_r>
  403098:	2000      	movs	r0, #0
  40309a:	6328      	str	r0, [r5, #48]	; 0x30
  40309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030a0:	692e      	ldr	r6, [r5, #16]
  4030a2:	b1ae      	cbz	r6, 4030d0 <__sflush_r+0xb8>
  4030a4:	682c      	ldr	r4, [r5, #0]
  4030a6:	602e      	str	r6, [r5, #0]
  4030a8:	0791      	lsls	r1, r2, #30
  4030aa:	bf0c      	ite	eq
  4030ac:	696b      	ldreq	r3, [r5, #20]
  4030ae:	2300      	movne	r3, #0
  4030b0:	1ba4      	subs	r4, r4, r6
  4030b2:	60ab      	str	r3, [r5, #8]
  4030b4:	e00a      	b.n	4030cc <__sflush_r+0xb4>
  4030b6:	4623      	mov	r3, r4
  4030b8:	4632      	mov	r2, r6
  4030ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4030bc:	69e9      	ldr	r1, [r5, #28]
  4030be:	4640      	mov	r0, r8
  4030c0:	47b8      	blx	r7
  4030c2:	2800      	cmp	r0, #0
  4030c4:	eba4 0400 	sub.w	r4, r4, r0
  4030c8:	4406      	add	r6, r0
  4030ca:	dd04      	ble.n	4030d6 <__sflush_r+0xbe>
  4030cc:	2c00      	cmp	r4, #0
  4030ce:	dcf2      	bgt.n	4030b6 <__sflush_r+0x9e>
  4030d0:	2000      	movs	r0, #0
  4030d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030d6:	89ab      	ldrh	r3, [r5, #12]
  4030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030dc:	81ab      	strh	r3, [r5, #12]
  4030de:	f04f 30ff 	mov.w	r0, #4294967295
  4030e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030e6:	f8d8 4000 	ldr.w	r4, [r8]
  4030ea:	2c1d      	cmp	r4, #29
  4030ec:	d8f3      	bhi.n	4030d6 <__sflush_r+0xbe>
  4030ee:	4b19      	ldr	r3, [pc, #100]	; (403154 <__sflush_r+0x13c>)
  4030f0:	40e3      	lsrs	r3, r4
  4030f2:	43db      	mvns	r3, r3
  4030f4:	f013 0301 	ands.w	r3, r3, #1
  4030f8:	d1ed      	bne.n	4030d6 <__sflush_r+0xbe>
  4030fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4030fe:	606b      	str	r3, [r5, #4]
  403100:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403104:	6929      	ldr	r1, [r5, #16]
  403106:	81ab      	strh	r3, [r5, #12]
  403108:	04da      	lsls	r2, r3, #19
  40310a:	6029      	str	r1, [r5, #0]
  40310c:	d5b9      	bpl.n	403082 <__sflush_r+0x6a>
  40310e:	2c00      	cmp	r4, #0
  403110:	d1b7      	bne.n	403082 <__sflush_r+0x6a>
  403112:	6528      	str	r0, [r5, #80]	; 0x50
  403114:	e7b5      	b.n	403082 <__sflush_r+0x6a>
  403116:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403118:	2a00      	cmp	r2, #0
  40311a:	dc8c      	bgt.n	403036 <__sflush_r+0x1e>
  40311c:	e7d8      	b.n	4030d0 <__sflush_r+0xb8>
  40311e:	2301      	movs	r3, #1
  403120:	69e9      	ldr	r1, [r5, #28]
  403122:	4640      	mov	r0, r8
  403124:	47a0      	blx	r4
  403126:	1c43      	adds	r3, r0, #1
  403128:	4602      	mov	r2, r0
  40312a:	d002      	beq.n	403132 <__sflush_r+0x11a>
  40312c:	89ab      	ldrh	r3, [r5, #12]
  40312e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403130:	e78e      	b.n	403050 <__sflush_r+0x38>
  403132:	f8d8 3000 	ldr.w	r3, [r8]
  403136:	2b00      	cmp	r3, #0
  403138:	d0f8      	beq.n	40312c <__sflush_r+0x114>
  40313a:	2b1d      	cmp	r3, #29
  40313c:	d001      	beq.n	403142 <__sflush_r+0x12a>
  40313e:	2b16      	cmp	r3, #22
  403140:	d102      	bne.n	403148 <__sflush_r+0x130>
  403142:	f8c8 6000 	str.w	r6, [r8]
  403146:	e7c3      	b.n	4030d0 <__sflush_r+0xb8>
  403148:	89ab      	ldrh	r3, [r5, #12]
  40314a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40314e:	81ab      	strh	r3, [r5, #12]
  403150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403154:	20400001 	.word	0x20400001

00403158 <_fflush_r>:
  403158:	b538      	push	{r3, r4, r5, lr}
  40315a:	460d      	mov	r5, r1
  40315c:	4604      	mov	r4, r0
  40315e:	b108      	cbz	r0, 403164 <_fflush_r+0xc>
  403160:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403162:	b1bb      	cbz	r3, 403194 <_fflush_r+0x3c>
  403164:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403168:	b188      	cbz	r0, 40318e <_fflush_r+0x36>
  40316a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40316c:	07db      	lsls	r3, r3, #31
  40316e:	d401      	bmi.n	403174 <_fflush_r+0x1c>
  403170:	0581      	lsls	r1, r0, #22
  403172:	d517      	bpl.n	4031a4 <_fflush_r+0x4c>
  403174:	4620      	mov	r0, r4
  403176:	4629      	mov	r1, r5
  403178:	f7ff ff4e 	bl	403018 <__sflush_r>
  40317c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40317e:	07da      	lsls	r2, r3, #31
  403180:	4604      	mov	r4, r0
  403182:	d402      	bmi.n	40318a <_fflush_r+0x32>
  403184:	89ab      	ldrh	r3, [r5, #12]
  403186:	059b      	lsls	r3, r3, #22
  403188:	d507      	bpl.n	40319a <_fflush_r+0x42>
  40318a:	4620      	mov	r0, r4
  40318c:	bd38      	pop	{r3, r4, r5, pc}
  40318e:	4604      	mov	r4, r0
  403190:	4620      	mov	r0, r4
  403192:	bd38      	pop	{r3, r4, r5, pc}
  403194:	f000 f838 	bl	403208 <__sinit>
  403198:	e7e4      	b.n	403164 <_fflush_r+0xc>
  40319a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40319c:	f000 fbf6 	bl	40398c <__retarget_lock_release_recursive>
  4031a0:	4620      	mov	r0, r4
  4031a2:	bd38      	pop	{r3, r4, r5, pc}
  4031a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4031a6:	f000 fbef 	bl	403988 <__retarget_lock_acquire_recursive>
  4031aa:	e7e3      	b.n	403174 <_fflush_r+0x1c>

004031ac <_cleanup_r>:
  4031ac:	4901      	ldr	r1, [pc, #4]	; (4031b4 <_cleanup_r+0x8>)
  4031ae:	f000 bbaf 	b.w	403910 <_fwalk_reent>
  4031b2:	bf00      	nop
  4031b4:	004047cd 	.word	0x004047cd

004031b8 <std.isra.0>:
  4031b8:	b510      	push	{r4, lr}
  4031ba:	2300      	movs	r3, #0
  4031bc:	4604      	mov	r4, r0
  4031be:	8181      	strh	r1, [r0, #12]
  4031c0:	81c2      	strh	r2, [r0, #14]
  4031c2:	6003      	str	r3, [r0, #0]
  4031c4:	6043      	str	r3, [r0, #4]
  4031c6:	6083      	str	r3, [r0, #8]
  4031c8:	6643      	str	r3, [r0, #100]	; 0x64
  4031ca:	6103      	str	r3, [r0, #16]
  4031cc:	6143      	str	r3, [r0, #20]
  4031ce:	6183      	str	r3, [r0, #24]
  4031d0:	4619      	mov	r1, r3
  4031d2:	2208      	movs	r2, #8
  4031d4:	305c      	adds	r0, #92	; 0x5c
  4031d6:	f7fe fdfb 	bl	401dd0 <memset>
  4031da:	4807      	ldr	r0, [pc, #28]	; (4031f8 <std.isra.0+0x40>)
  4031dc:	4907      	ldr	r1, [pc, #28]	; (4031fc <std.isra.0+0x44>)
  4031de:	4a08      	ldr	r2, [pc, #32]	; (403200 <std.isra.0+0x48>)
  4031e0:	4b08      	ldr	r3, [pc, #32]	; (403204 <std.isra.0+0x4c>)
  4031e2:	6220      	str	r0, [r4, #32]
  4031e4:	61e4      	str	r4, [r4, #28]
  4031e6:	6261      	str	r1, [r4, #36]	; 0x24
  4031e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4031ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4031ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4031f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4031f4:	f000 bbc4 	b.w	403980 <__retarget_lock_init_recursive>
  4031f8:	00404511 	.word	0x00404511
  4031fc:	00404535 	.word	0x00404535
  403200:	00404571 	.word	0x00404571
  403204:	00404591 	.word	0x00404591

00403208 <__sinit>:
  403208:	b510      	push	{r4, lr}
  40320a:	4604      	mov	r4, r0
  40320c:	4812      	ldr	r0, [pc, #72]	; (403258 <__sinit+0x50>)
  40320e:	f000 fbbb 	bl	403988 <__retarget_lock_acquire_recursive>
  403212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403214:	b9d2      	cbnz	r2, 40324c <__sinit+0x44>
  403216:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40321a:	4810      	ldr	r0, [pc, #64]	; (40325c <__sinit+0x54>)
  40321c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403220:	2103      	movs	r1, #3
  403222:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403226:	63e0      	str	r0, [r4, #60]	; 0x3c
  403228:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40322c:	6860      	ldr	r0, [r4, #4]
  40322e:	2104      	movs	r1, #4
  403230:	f7ff ffc2 	bl	4031b8 <std.isra.0>
  403234:	2201      	movs	r2, #1
  403236:	2109      	movs	r1, #9
  403238:	68a0      	ldr	r0, [r4, #8]
  40323a:	f7ff ffbd 	bl	4031b8 <std.isra.0>
  40323e:	2202      	movs	r2, #2
  403240:	2112      	movs	r1, #18
  403242:	68e0      	ldr	r0, [r4, #12]
  403244:	f7ff ffb8 	bl	4031b8 <std.isra.0>
  403248:	2301      	movs	r3, #1
  40324a:	63a3      	str	r3, [r4, #56]	; 0x38
  40324c:	4802      	ldr	r0, [pc, #8]	; (403258 <__sinit+0x50>)
  40324e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403252:	f000 bb9b 	b.w	40398c <__retarget_lock_release_recursive>
  403256:	bf00      	nop
  403258:	20400ad0 	.word	0x20400ad0
  40325c:	004031ad 	.word	0x004031ad

00403260 <__sfp_lock_acquire>:
  403260:	4801      	ldr	r0, [pc, #4]	; (403268 <__sfp_lock_acquire+0x8>)
  403262:	f000 bb91 	b.w	403988 <__retarget_lock_acquire_recursive>
  403266:	bf00      	nop
  403268:	20400ae4 	.word	0x20400ae4

0040326c <__sfp_lock_release>:
  40326c:	4801      	ldr	r0, [pc, #4]	; (403274 <__sfp_lock_release+0x8>)
  40326e:	f000 bb8d 	b.w	40398c <__retarget_lock_release_recursive>
  403272:	bf00      	nop
  403274:	20400ae4 	.word	0x20400ae4

00403278 <__libc_fini_array>:
  403278:	b538      	push	{r3, r4, r5, lr}
  40327a:	4c0a      	ldr	r4, [pc, #40]	; (4032a4 <__libc_fini_array+0x2c>)
  40327c:	4d0a      	ldr	r5, [pc, #40]	; (4032a8 <__libc_fini_array+0x30>)
  40327e:	1b64      	subs	r4, r4, r5
  403280:	10a4      	asrs	r4, r4, #2
  403282:	d00a      	beq.n	40329a <__libc_fini_array+0x22>
  403284:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403288:	3b01      	subs	r3, #1
  40328a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40328e:	3c01      	subs	r4, #1
  403290:	f855 3904 	ldr.w	r3, [r5], #-4
  403294:	4798      	blx	r3
  403296:	2c00      	cmp	r4, #0
  403298:	d1f9      	bne.n	40328e <__libc_fini_array+0x16>
  40329a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40329e:	f001 bd69 	b.w	404d74 <_fini>
  4032a2:	bf00      	nop
  4032a4:	00404d84 	.word	0x00404d84
  4032a8:	00404d80 	.word	0x00404d80

004032ac <__fputwc>:
  4032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032b0:	b082      	sub	sp, #8
  4032b2:	4680      	mov	r8, r0
  4032b4:	4689      	mov	r9, r1
  4032b6:	4614      	mov	r4, r2
  4032b8:	f000 fb54 	bl	403964 <__locale_mb_cur_max>
  4032bc:	2801      	cmp	r0, #1
  4032be:	d036      	beq.n	40332e <__fputwc+0x82>
  4032c0:	464a      	mov	r2, r9
  4032c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4032c6:	a901      	add	r1, sp, #4
  4032c8:	4640      	mov	r0, r8
  4032ca:	f001 f9bd 	bl	404648 <_wcrtomb_r>
  4032ce:	1c42      	adds	r2, r0, #1
  4032d0:	4606      	mov	r6, r0
  4032d2:	d025      	beq.n	403320 <__fputwc+0x74>
  4032d4:	b3a8      	cbz	r0, 403342 <__fputwc+0x96>
  4032d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4032da:	2500      	movs	r5, #0
  4032dc:	f10d 0a04 	add.w	sl, sp, #4
  4032e0:	e009      	b.n	4032f6 <__fputwc+0x4a>
  4032e2:	6823      	ldr	r3, [r4, #0]
  4032e4:	1c5a      	adds	r2, r3, #1
  4032e6:	6022      	str	r2, [r4, #0]
  4032e8:	f883 e000 	strb.w	lr, [r3]
  4032ec:	3501      	adds	r5, #1
  4032ee:	42b5      	cmp	r5, r6
  4032f0:	d227      	bcs.n	403342 <__fputwc+0x96>
  4032f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4032f6:	68a3      	ldr	r3, [r4, #8]
  4032f8:	3b01      	subs	r3, #1
  4032fa:	2b00      	cmp	r3, #0
  4032fc:	60a3      	str	r3, [r4, #8]
  4032fe:	daf0      	bge.n	4032e2 <__fputwc+0x36>
  403300:	69a7      	ldr	r7, [r4, #24]
  403302:	42bb      	cmp	r3, r7
  403304:	4671      	mov	r1, lr
  403306:	4622      	mov	r2, r4
  403308:	4640      	mov	r0, r8
  40330a:	db02      	blt.n	403312 <__fputwc+0x66>
  40330c:	f1be 0f0a 	cmp.w	lr, #10
  403310:	d1e7      	bne.n	4032e2 <__fputwc+0x36>
  403312:	f001 f941 	bl	404598 <__swbuf_r>
  403316:	1c43      	adds	r3, r0, #1
  403318:	d1e8      	bne.n	4032ec <__fputwc+0x40>
  40331a:	b002      	add	sp, #8
  40331c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403320:	89a3      	ldrh	r3, [r4, #12]
  403322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403326:	81a3      	strh	r3, [r4, #12]
  403328:	b002      	add	sp, #8
  40332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40332e:	f109 33ff 	add.w	r3, r9, #4294967295
  403332:	2bfe      	cmp	r3, #254	; 0xfe
  403334:	d8c4      	bhi.n	4032c0 <__fputwc+0x14>
  403336:	fa5f fe89 	uxtb.w	lr, r9
  40333a:	4606      	mov	r6, r0
  40333c:	f88d e004 	strb.w	lr, [sp, #4]
  403340:	e7cb      	b.n	4032da <__fputwc+0x2e>
  403342:	4648      	mov	r0, r9
  403344:	b002      	add	sp, #8
  403346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40334a:	bf00      	nop

0040334c <_fputwc_r>:
  40334c:	b530      	push	{r4, r5, lr}
  40334e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403350:	f013 0f01 	tst.w	r3, #1
  403354:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403358:	4614      	mov	r4, r2
  40335a:	b083      	sub	sp, #12
  40335c:	4605      	mov	r5, r0
  40335e:	b29a      	uxth	r2, r3
  403360:	d101      	bne.n	403366 <_fputwc_r+0x1a>
  403362:	0590      	lsls	r0, r2, #22
  403364:	d51c      	bpl.n	4033a0 <_fputwc_r+0x54>
  403366:	0490      	lsls	r0, r2, #18
  403368:	d406      	bmi.n	403378 <_fputwc_r+0x2c>
  40336a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40336c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403374:	81a3      	strh	r3, [r4, #12]
  403376:	6662      	str	r2, [r4, #100]	; 0x64
  403378:	4628      	mov	r0, r5
  40337a:	4622      	mov	r2, r4
  40337c:	f7ff ff96 	bl	4032ac <__fputwc>
  403380:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403382:	07da      	lsls	r2, r3, #31
  403384:	4605      	mov	r5, r0
  403386:	d402      	bmi.n	40338e <_fputwc_r+0x42>
  403388:	89a3      	ldrh	r3, [r4, #12]
  40338a:	059b      	lsls	r3, r3, #22
  40338c:	d502      	bpl.n	403394 <_fputwc_r+0x48>
  40338e:	4628      	mov	r0, r5
  403390:	b003      	add	sp, #12
  403392:	bd30      	pop	{r4, r5, pc}
  403394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403396:	f000 faf9 	bl	40398c <__retarget_lock_release_recursive>
  40339a:	4628      	mov	r0, r5
  40339c:	b003      	add	sp, #12
  40339e:	bd30      	pop	{r4, r5, pc}
  4033a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4033a2:	9101      	str	r1, [sp, #4]
  4033a4:	f000 faf0 	bl	403988 <__retarget_lock_acquire_recursive>
  4033a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033ac:	9901      	ldr	r1, [sp, #4]
  4033ae:	b29a      	uxth	r2, r3
  4033b0:	e7d9      	b.n	403366 <_fputwc_r+0x1a>
  4033b2:	bf00      	nop

004033b4 <_malloc_trim_r>:
  4033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4033b6:	4f24      	ldr	r7, [pc, #144]	; (403448 <_malloc_trim_r+0x94>)
  4033b8:	460c      	mov	r4, r1
  4033ba:	4606      	mov	r6, r0
  4033bc:	f000 fee4 	bl	404188 <__malloc_lock>
  4033c0:	68bb      	ldr	r3, [r7, #8]
  4033c2:	685d      	ldr	r5, [r3, #4]
  4033c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4033c8:	310f      	adds	r1, #15
  4033ca:	f025 0503 	bic.w	r5, r5, #3
  4033ce:	4429      	add	r1, r5
  4033d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4033d4:	f021 010f 	bic.w	r1, r1, #15
  4033d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4033dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4033e0:	db07      	blt.n	4033f2 <_malloc_trim_r+0x3e>
  4033e2:	2100      	movs	r1, #0
  4033e4:	4630      	mov	r0, r6
  4033e6:	f001 f881 	bl	4044ec <_sbrk_r>
  4033ea:	68bb      	ldr	r3, [r7, #8]
  4033ec:	442b      	add	r3, r5
  4033ee:	4298      	cmp	r0, r3
  4033f0:	d004      	beq.n	4033fc <_malloc_trim_r+0x48>
  4033f2:	4630      	mov	r0, r6
  4033f4:	f000 fece 	bl	404194 <__malloc_unlock>
  4033f8:	2000      	movs	r0, #0
  4033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033fc:	4261      	negs	r1, r4
  4033fe:	4630      	mov	r0, r6
  403400:	f001 f874 	bl	4044ec <_sbrk_r>
  403404:	3001      	adds	r0, #1
  403406:	d00d      	beq.n	403424 <_malloc_trim_r+0x70>
  403408:	4b10      	ldr	r3, [pc, #64]	; (40344c <_malloc_trim_r+0x98>)
  40340a:	68ba      	ldr	r2, [r7, #8]
  40340c:	6819      	ldr	r1, [r3, #0]
  40340e:	1b2d      	subs	r5, r5, r4
  403410:	f045 0501 	orr.w	r5, r5, #1
  403414:	4630      	mov	r0, r6
  403416:	1b09      	subs	r1, r1, r4
  403418:	6055      	str	r5, [r2, #4]
  40341a:	6019      	str	r1, [r3, #0]
  40341c:	f000 feba 	bl	404194 <__malloc_unlock>
  403420:	2001      	movs	r0, #1
  403422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403424:	2100      	movs	r1, #0
  403426:	4630      	mov	r0, r6
  403428:	f001 f860 	bl	4044ec <_sbrk_r>
  40342c:	68ba      	ldr	r2, [r7, #8]
  40342e:	1a83      	subs	r3, r0, r2
  403430:	2b0f      	cmp	r3, #15
  403432:	ddde      	ble.n	4033f2 <_malloc_trim_r+0x3e>
  403434:	4c06      	ldr	r4, [pc, #24]	; (403450 <_malloc_trim_r+0x9c>)
  403436:	4905      	ldr	r1, [pc, #20]	; (40344c <_malloc_trim_r+0x98>)
  403438:	6824      	ldr	r4, [r4, #0]
  40343a:	f043 0301 	orr.w	r3, r3, #1
  40343e:	1b00      	subs	r0, r0, r4
  403440:	6053      	str	r3, [r2, #4]
  403442:	6008      	str	r0, [r1, #0]
  403444:	e7d5      	b.n	4033f2 <_malloc_trim_r+0x3e>
  403446:	bf00      	nop
  403448:	204005b8 	.word	0x204005b8
  40344c:	20400a64 	.word	0x20400a64
  403450:	204009c0 	.word	0x204009c0

00403454 <_free_r>:
  403454:	2900      	cmp	r1, #0
  403456:	d044      	beq.n	4034e2 <_free_r+0x8e>
  403458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40345c:	460d      	mov	r5, r1
  40345e:	4680      	mov	r8, r0
  403460:	f000 fe92 	bl	404188 <__malloc_lock>
  403464:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403468:	4969      	ldr	r1, [pc, #420]	; (403610 <_free_r+0x1bc>)
  40346a:	f027 0301 	bic.w	r3, r7, #1
  40346e:	f1a5 0408 	sub.w	r4, r5, #8
  403472:	18e2      	adds	r2, r4, r3
  403474:	688e      	ldr	r6, [r1, #8]
  403476:	6850      	ldr	r0, [r2, #4]
  403478:	42b2      	cmp	r2, r6
  40347a:	f020 0003 	bic.w	r0, r0, #3
  40347e:	d05e      	beq.n	40353e <_free_r+0xea>
  403480:	07fe      	lsls	r6, r7, #31
  403482:	6050      	str	r0, [r2, #4]
  403484:	d40b      	bmi.n	40349e <_free_r+0x4a>
  403486:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40348a:	1be4      	subs	r4, r4, r7
  40348c:	f101 0e08 	add.w	lr, r1, #8
  403490:	68a5      	ldr	r5, [r4, #8]
  403492:	4575      	cmp	r5, lr
  403494:	443b      	add	r3, r7
  403496:	d06d      	beq.n	403574 <_free_r+0x120>
  403498:	68e7      	ldr	r7, [r4, #12]
  40349a:	60ef      	str	r7, [r5, #12]
  40349c:	60bd      	str	r5, [r7, #8]
  40349e:	1815      	adds	r5, r2, r0
  4034a0:	686d      	ldr	r5, [r5, #4]
  4034a2:	07ed      	lsls	r5, r5, #31
  4034a4:	d53e      	bpl.n	403524 <_free_r+0xd0>
  4034a6:	f043 0201 	orr.w	r2, r3, #1
  4034aa:	6062      	str	r2, [r4, #4]
  4034ac:	50e3      	str	r3, [r4, r3]
  4034ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034b2:	d217      	bcs.n	4034e4 <_free_r+0x90>
  4034b4:	08db      	lsrs	r3, r3, #3
  4034b6:	1c58      	adds	r0, r3, #1
  4034b8:	109a      	asrs	r2, r3, #2
  4034ba:	684d      	ldr	r5, [r1, #4]
  4034bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4034c0:	60a7      	str	r7, [r4, #8]
  4034c2:	2301      	movs	r3, #1
  4034c4:	4093      	lsls	r3, r2
  4034c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4034ca:	432b      	orrs	r3, r5
  4034cc:	3a08      	subs	r2, #8
  4034ce:	60e2      	str	r2, [r4, #12]
  4034d0:	604b      	str	r3, [r1, #4]
  4034d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4034d6:	60fc      	str	r4, [r7, #12]
  4034d8:	4640      	mov	r0, r8
  4034da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4034de:	f000 be59 	b.w	404194 <__malloc_unlock>
  4034e2:	4770      	bx	lr
  4034e4:	0a5a      	lsrs	r2, r3, #9
  4034e6:	2a04      	cmp	r2, #4
  4034e8:	d852      	bhi.n	403590 <_free_r+0x13c>
  4034ea:	099a      	lsrs	r2, r3, #6
  4034ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4034f0:	00ff      	lsls	r7, r7, #3
  4034f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4034f6:	19c8      	adds	r0, r1, r7
  4034f8:	59ca      	ldr	r2, [r1, r7]
  4034fa:	3808      	subs	r0, #8
  4034fc:	4290      	cmp	r0, r2
  4034fe:	d04f      	beq.n	4035a0 <_free_r+0x14c>
  403500:	6851      	ldr	r1, [r2, #4]
  403502:	f021 0103 	bic.w	r1, r1, #3
  403506:	428b      	cmp	r3, r1
  403508:	d232      	bcs.n	403570 <_free_r+0x11c>
  40350a:	6892      	ldr	r2, [r2, #8]
  40350c:	4290      	cmp	r0, r2
  40350e:	d1f7      	bne.n	403500 <_free_r+0xac>
  403510:	68c3      	ldr	r3, [r0, #12]
  403512:	60a0      	str	r0, [r4, #8]
  403514:	60e3      	str	r3, [r4, #12]
  403516:	609c      	str	r4, [r3, #8]
  403518:	60c4      	str	r4, [r0, #12]
  40351a:	4640      	mov	r0, r8
  40351c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403520:	f000 be38 	b.w	404194 <__malloc_unlock>
  403524:	6895      	ldr	r5, [r2, #8]
  403526:	4f3b      	ldr	r7, [pc, #236]	; (403614 <_free_r+0x1c0>)
  403528:	42bd      	cmp	r5, r7
  40352a:	4403      	add	r3, r0
  40352c:	d040      	beq.n	4035b0 <_free_r+0x15c>
  40352e:	68d0      	ldr	r0, [r2, #12]
  403530:	60e8      	str	r0, [r5, #12]
  403532:	f043 0201 	orr.w	r2, r3, #1
  403536:	6085      	str	r5, [r0, #8]
  403538:	6062      	str	r2, [r4, #4]
  40353a:	50e3      	str	r3, [r4, r3]
  40353c:	e7b7      	b.n	4034ae <_free_r+0x5a>
  40353e:	07ff      	lsls	r7, r7, #31
  403540:	4403      	add	r3, r0
  403542:	d407      	bmi.n	403554 <_free_r+0x100>
  403544:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403548:	1aa4      	subs	r4, r4, r2
  40354a:	4413      	add	r3, r2
  40354c:	68a0      	ldr	r0, [r4, #8]
  40354e:	68e2      	ldr	r2, [r4, #12]
  403550:	60c2      	str	r2, [r0, #12]
  403552:	6090      	str	r0, [r2, #8]
  403554:	4a30      	ldr	r2, [pc, #192]	; (403618 <_free_r+0x1c4>)
  403556:	6812      	ldr	r2, [r2, #0]
  403558:	f043 0001 	orr.w	r0, r3, #1
  40355c:	4293      	cmp	r3, r2
  40355e:	6060      	str	r0, [r4, #4]
  403560:	608c      	str	r4, [r1, #8]
  403562:	d3b9      	bcc.n	4034d8 <_free_r+0x84>
  403564:	4b2d      	ldr	r3, [pc, #180]	; (40361c <_free_r+0x1c8>)
  403566:	4640      	mov	r0, r8
  403568:	6819      	ldr	r1, [r3, #0]
  40356a:	f7ff ff23 	bl	4033b4 <_malloc_trim_r>
  40356e:	e7b3      	b.n	4034d8 <_free_r+0x84>
  403570:	4610      	mov	r0, r2
  403572:	e7cd      	b.n	403510 <_free_r+0xbc>
  403574:	1811      	adds	r1, r2, r0
  403576:	6849      	ldr	r1, [r1, #4]
  403578:	07c9      	lsls	r1, r1, #31
  40357a:	d444      	bmi.n	403606 <_free_r+0x1b2>
  40357c:	6891      	ldr	r1, [r2, #8]
  40357e:	68d2      	ldr	r2, [r2, #12]
  403580:	60ca      	str	r2, [r1, #12]
  403582:	4403      	add	r3, r0
  403584:	f043 0001 	orr.w	r0, r3, #1
  403588:	6091      	str	r1, [r2, #8]
  40358a:	6060      	str	r0, [r4, #4]
  40358c:	50e3      	str	r3, [r4, r3]
  40358e:	e7a3      	b.n	4034d8 <_free_r+0x84>
  403590:	2a14      	cmp	r2, #20
  403592:	d816      	bhi.n	4035c2 <_free_r+0x16e>
  403594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403598:	00ff      	lsls	r7, r7, #3
  40359a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40359e:	e7aa      	b.n	4034f6 <_free_r+0xa2>
  4035a0:	10aa      	asrs	r2, r5, #2
  4035a2:	2301      	movs	r3, #1
  4035a4:	684d      	ldr	r5, [r1, #4]
  4035a6:	4093      	lsls	r3, r2
  4035a8:	432b      	orrs	r3, r5
  4035aa:	604b      	str	r3, [r1, #4]
  4035ac:	4603      	mov	r3, r0
  4035ae:	e7b0      	b.n	403512 <_free_r+0xbe>
  4035b0:	f043 0201 	orr.w	r2, r3, #1
  4035b4:	614c      	str	r4, [r1, #20]
  4035b6:	610c      	str	r4, [r1, #16]
  4035b8:	60e5      	str	r5, [r4, #12]
  4035ba:	60a5      	str	r5, [r4, #8]
  4035bc:	6062      	str	r2, [r4, #4]
  4035be:	50e3      	str	r3, [r4, r3]
  4035c0:	e78a      	b.n	4034d8 <_free_r+0x84>
  4035c2:	2a54      	cmp	r2, #84	; 0x54
  4035c4:	d806      	bhi.n	4035d4 <_free_r+0x180>
  4035c6:	0b1a      	lsrs	r2, r3, #12
  4035c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4035cc:	00ff      	lsls	r7, r7, #3
  4035ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4035d2:	e790      	b.n	4034f6 <_free_r+0xa2>
  4035d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4035d8:	d806      	bhi.n	4035e8 <_free_r+0x194>
  4035da:	0bda      	lsrs	r2, r3, #15
  4035dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4035e0:	00ff      	lsls	r7, r7, #3
  4035e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4035e6:	e786      	b.n	4034f6 <_free_r+0xa2>
  4035e8:	f240 5054 	movw	r0, #1364	; 0x554
  4035ec:	4282      	cmp	r2, r0
  4035ee:	d806      	bhi.n	4035fe <_free_r+0x1aa>
  4035f0:	0c9a      	lsrs	r2, r3, #18
  4035f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4035f6:	00ff      	lsls	r7, r7, #3
  4035f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4035fc:	e77b      	b.n	4034f6 <_free_r+0xa2>
  4035fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403602:	257e      	movs	r5, #126	; 0x7e
  403604:	e777      	b.n	4034f6 <_free_r+0xa2>
  403606:	f043 0101 	orr.w	r1, r3, #1
  40360a:	6061      	str	r1, [r4, #4]
  40360c:	6013      	str	r3, [r2, #0]
  40360e:	e763      	b.n	4034d8 <_free_r+0x84>
  403610:	204005b8 	.word	0x204005b8
  403614:	204005c0 	.word	0x204005c0
  403618:	204009c4 	.word	0x204009c4
  40361c:	20400a94 	.word	0x20400a94

00403620 <__sfvwrite_r>:
  403620:	6893      	ldr	r3, [r2, #8]
  403622:	2b00      	cmp	r3, #0
  403624:	d073      	beq.n	40370e <__sfvwrite_r+0xee>
  403626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40362a:	898b      	ldrh	r3, [r1, #12]
  40362c:	b083      	sub	sp, #12
  40362e:	460c      	mov	r4, r1
  403630:	0719      	lsls	r1, r3, #28
  403632:	9000      	str	r0, [sp, #0]
  403634:	4616      	mov	r6, r2
  403636:	d526      	bpl.n	403686 <__sfvwrite_r+0x66>
  403638:	6922      	ldr	r2, [r4, #16]
  40363a:	b322      	cbz	r2, 403686 <__sfvwrite_r+0x66>
  40363c:	f013 0002 	ands.w	r0, r3, #2
  403640:	6835      	ldr	r5, [r6, #0]
  403642:	d02c      	beq.n	40369e <__sfvwrite_r+0x7e>
  403644:	f04f 0900 	mov.w	r9, #0
  403648:	4fb0      	ldr	r7, [pc, #704]	; (40390c <__sfvwrite_r+0x2ec>)
  40364a:	46c8      	mov	r8, r9
  40364c:	46b2      	mov	sl, r6
  40364e:	45b8      	cmp	r8, r7
  403650:	4643      	mov	r3, r8
  403652:	464a      	mov	r2, r9
  403654:	bf28      	it	cs
  403656:	463b      	movcs	r3, r7
  403658:	9800      	ldr	r0, [sp, #0]
  40365a:	f1b8 0f00 	cmp.w	r8, #0
  40365e:	d050      	beq.n	403702 <__sfvwrite_r+0xe2>
  403660:	69e1      	ldr	r1, [r4, #28]
  403662:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403664:	47b0      	blx	r6
  403666:	2800      	cmp	r0, #0
  403668:	dd58      	ble.n	40371c <__sfvwrite_r+0xfc>
  40366a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40366e:	1a1b      	subs	r3, r3, r0
  403670:	4481      	add	r9, r0
  403672:	eba8 0800 	sub.w	r8, r8, r0
  403676:	f8ca 3008 	str.w	r3, [sl, #8]
  40367a:	2b00      	cmp	r3, #0
  40367c:	d1e7      	bne.n	40364e <__sfvwrite_r+0x2e>
  40367e:	2000      	movs	r0, #0
  403680:	b003      	add	sp, #12
  403682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403686:	4621      	mov	r1, r4
  403688:	9800      	ldr	r0, [sp, #0]
  40368a:	f7ff fc51 	bl	402f30 <__swsetup_r>
  40368e:	2800      	cmp	r0, #0
  403690:	f040 8133 	bne.w	4038fa <__sfvwrite_r+0x2da>
  403694:	89a3      	ldrh	r3, [r4, #12]
  403696:	6835      	ldr	r5, [r6, #0]
  403698:	f013 0002 	ands.w	r0, r3, #2
  40369c:	d1d2      	bne.n	403644 <__sfvwrite_r+0x24>
  40369e:	f013 0901 	ands.w	r9, r3, #1
  4036a2:	d145      	bne.n	403730 <__sfvwrite_r+0x110>
  4036a4:	464f      	mov	r7, r9
  4036a6:	9601      	str	r6, [sp, #4]
  4036a8:	b337      	cbz	r7, 4036f8 <__sfvwrite_r+0xd8>
  4036aa:	059a      	lsls	r2, r3, #22
  4036ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4036b0:	f140 8083 	bpl.w	4037ba <__sfvwrite_r+0x19a>
  4036b4:	4547      	cmp	r7, r8
  4036b6:	46c3      	mov	fp, r8
  4036b8:	f0c0 80ab 	bcc.w	403812 <__sfvwrite_r+0x1f2>
  4036bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4036c0:	f040 80ac 	bne.w	40381c <__sfvwrite_r+0x1fc>
  4036c4:	6820      	ldr	r0, [r4, #0]
  4036c6:	46ba      	mov	sl, r7
  4036c8:	465a      	mov	r2, fp
  4036ca:	4649      	mov	r1, r9
  4036cc:	f000 fcf8 	bl	4040c0 <memmove>
  4036d0:	68a2      	ldr	r2, [r4, #8]
  4036d2:	6823      	ldr	r3, [r4, #0]
  4036d4:	eba2 0208 	sub.w	r2, r2, r8
  4036d8:	445b      	add	r3, fp
  4036da:	60a2      	str	r2, [r4, #8]
  4036dc:	6023      	str	r3, [r4, #0]
  4036de:	9a01      	ldr	r2, [sp, #4]
  4036e0:	6893      	ldr	r3, [r2, #8]
  4036e2:	eba3 030a 	sub.w	r3, r3, sl
  4036e6:	44d1      	add	r9, sl
  4036e8:	eba7 070a 	sub.w	r7, r7, sl
  4036ec:	6093      	str	r3, [r2, #8]
  4036ee:	2b00      	cmp	r3, #0
  4036f0:	d0c5      	beq.n	40367e <__sfvwrite_r+0x5e>
  4036f2:	89a3      	ldrh	r3, [r4, #12]
  4036f4:	2f00      	cmp	r7, #0
  4036f6:	d1d8      	bne.n	4036aa <__sfvwrite_r+0x8a>
  4036f8:	f8d5 9000 	ldr.w	r9, [r5]
  4036fc:	686f      	ldr	r7, [r5, #4]
  4036fe:	3508      	adds	r5, #8
  403700:	e7d2      	b.n	4036a8 <__sfvwrite_r+0x88>
  403702:	f8d5 9000 	ldr.w	r9, [r5]
  403706:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40370a:	3508      	adds	r5, #8
  40370c:	e79f      	b.n	40364e <__sfvwrite_r+0x2e>
  40370e:	2000      	movs	r0, #0
  403710:	4770      	bx	lr
  403712:	4621      	mov	r1, r4
  403714:	9800      	ldr	r0, [sp, #0]
  403716:	f7ff fd1f 	bl	403158 <_fflush_r>
  40371a:	b370      	cbz	r0, 40377a <__sfvwrite_r+0x15a>
  40371c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403724:	f04f 30ff 	mov.w	r0, #4294967295
  403728:	81a3      	strh	r3, [r4, #12]
  40372a:	b003      	add	sp, #12
  40372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403730:	4681      	mov	r9, r0
  403732:	4633      	mov	r3, r6
  403734:	464e      	mov	r6, r9
  403736:	46a8      	mov	r8, r5
  403738:	469a      	mov	sl, r3
  40373a:	464d      	mov	r5, r9
  40373c:	b34e      	cbz	r6, 403792 <__sfvwrite_r+0x172>
  40373e:	b380      	cbz	r0, 4037a2 <__sfvwrite_r+0x182>
  403740:	6820      	ldr	r0, [r4, #0]
  403742:	6923      	ldr	r3, [r4, #16]
  403744:	6962      	ldr	r2, [r4, #20]
  403746:	45b1      	cmp	r9, r6
  403748:	46cb      	mov	fp, r9
  40374a:	bf28      	it	cs
  40374c:	46b3      	movcs	fp, r6
  40374e:	4298      	cmp	r0, r3
  403750:	465f      	mov	r7, fp
  403752:	d904      	bls.n	40375e <__sfvwrite_r+0x13e>
  403754:	68a3      	ldr	r3, [r4, #8]
  403756:	4413      	add	r3, r2
  403758:	459b      	cmp	fp, r3
  40375a:	f300 80a6 	bgt.w	4038aa <__sfvwrite_r+0x28a>
  40375e:	4593      	cmp	fp, r2
  403760:	db4b      	blt.n	4037fa <__sfvwrite_r+0x1da>
  403762:	4613      	mov	r3, r2
  403764:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403766:	69e1      	ldr	r1, [r4, #28]
  403768:	9800      	ldr	r0, [sp, #0]
  40376a:	462a      	mov	r2, r5
  40376c:	47b8      	blx	r7
  40376e:	1e07      	subs	r7, r0, #0
  403770:	ddd4      	ble.n	40371c <__sfvwrite_r+0xfc>
  403772:	ebb9 0907 	subs.w	r9, r9, r7
  403776:	d0cc      	beq.n	403712 <__sfvwrite_r+0xf2>
  403778:	2001      	movs	r0, #1
  40377a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40377e:	1bdb      	subs	r3, r3, r7
  403780:	443d      	add	r5, r7
  403782:	1bf6      	subs	r6, r6, r7
  403784:	f8ca 3008 	str.w	r3, [sl, #8]
  403788:	2b00      	cmp	r3, #0
  40378a:	f43f af78 	beq.w	40367e <__sfvwrite_r+0x5e>
  40378e:	2e00      	cmp	r6, #0
  403790:	d1d5      	bne.n	40373e <__sfvwrite_r+0x11e>
  403792:	f108 0308 	add.w	r3, r8, #8
  403796:	e913 0060 	ldmdb	r3, {r5, r6}
  40379a:	4698      	mov	r8, r3
  40379c:	3308      	adds	r3, #8
  40379e:	2e00      	cmp	r6, #0
  4037a0:	d0f9      	beq.n	403796 <__sfvwrite_r+0x176>
  4037a2:	4632      	mov	r2, r6
  4037a4:	210a      	movs	r1, #10
  4037a6:	4628      	mov	r0, r5
  4037a8:	f000 fc3a 	bl	404020 <memchr>
  4037ac:	2800      	cmp	r0, #0
  4037ae:	f000 80a1 	beq.w	4038f4 <__sfvwrite_r+0x2d4>
  4037b2:	3001      	adds	r0, #1
  4037b4:	eba0 0905 	sub.w	r9, r0, r5
  4037b8:	e7c2      	b.n	403740 <__sfvwrite_r+0x120>
  4037ba:	6820      	ldr	r0, [r4, #0]
  4037bc:	6923      	ldr	r3, [r4, #16]
  4037be:	4298      	cmp	r0, r3
  4037c0:	d802      	bhi.n	4037c8 <__sfvwrite_r+0x1a8>
  4037c2:	6963      	ldr	r3, [r4, #20]
  4037c4:	429f      	cmp	r7, r3
  4037c6:	d25d      	bcs.n	403884 <__sfvwrite_r+0x264>
  4037c8:	45b8      	cmp	r8, r7
  4037ca:	bf28      	it	cs
  4037cc:	46b8      	movcs	r8, r7
  4037ce:	4642      	mov	r2, r8
  4037d0:	4649      	mov	r1, r9
  4037d2:	f000 fc75 	bl	4040c0 <memmove>
  4037d6:	68a3      	ldr	r3, [r4, #8]
  4037d8:	6822      	ldr	r2, [r4, #0]
  4037da:	eba3 0308 	sub.w	r3, r3, r8
  4037de:	4442      	add	r2, r8
  4037e0:	60a3      	str	r3, [r4, #8]
  4037e2:	6022      	str	r2, [r4, #0]
  4037e4:	b10b      	cbz	r3, 4037ea <__sfvwrite_r+0x1ca>
  4037e6:	46c2      	mov	sl, r8
  4037e8:	e779      	b.n	4036de <__sfvwrite_r+0xbe>
  4037ea:	4621      	mov	r1, r4
  4037ec:	9800      	ldr	r0, [sp, #0]
  4037ee:	f7ff fcb3 	bl	403158 <_fflush_r>
  4037f2:	2800      	cmp	r0, #0
  4037f4:	d192      	bne.n	40371c <__sfvwrite_r+0xfc>
  4037f6:	46c2      	mov	sl, r8
  4037f8:	e771      	b.n	4036de <__sfvwrite_r+0xbe>
  4037fa:	465a      	mov	r2, fp
  4037fc:	4629      	mov	r1, r5
  4037fe:	f000 fc5f 	bl	4040c0 <memmove>
  403802:	68a2      	ldr	r2, [r4, #8]
  403804:	6823      	ldr	r3, [r4, #0]
  403806:	eba2 020b 	sub.w	r2, r2, fp
  40380a:	445b      	add	r3, fp
  40380c:	60a2      	str	r2, [r4, #8]
  40380e:	6023      	str	r3, [r4, #0]
  403810:	e7af      	b.n	403772 <__sfvwrite_r+0x152>
  403812:	6820      	ldr	r0, [r4, #0]
  403814:	46b8      	mov	r8, r7
  403816:	46ba      	mov	sl, r7
  403818:	46bb      	mov	fp, r7
  40381a:	e755      	b.n	4036c8 <__sfvwrite_r+0xa8>
  40381c:	6962      	ldr	r2, [r4, #20]
  40381e:	6820      	ldr	r0, [r4, #0]
  403820:	6921      	ldr	r1, [r4, #16]
  403822:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403826:	eba0 0a01 	sub.w	sl, r0, r1
  40382a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40382e:	f10a 0001 	add.w	r0, sl, #1
  403832:	ea4f 0868 	mov.w	r8, r8, asr #1
  403836:	4438      	add	r0, r7
  403838:	4540      	cmp	r0, r8
  40383a:	4642      	mov	r2, r8
  40383c:	bf84      	itt	hi
  40383e:	4680      	movhi	r8, r0
  403840:	4642      	movhi	r2, r8
  403842:	055b      	lsls	r3, r3, #21
  403844:	d544      	bpl.n	4038d0 <__sfvwrite_r+0x2b0>
  403846:	4611      	mov	r1, r2
  403848:	9800      	ldr	r0, [sp, #0]
  40384a:	f000 f921 	bl	403a90 <_malloc_r>
  40384e:	4683      	mov	fp, r0
  403850:	2800      	cmp	r0, #0
  403852:	d055      	beq.n	403900 <__sfvwrite_r+0x2e0>
  403854:	4652      	mov	r2, sl
  403856:	6921      	ldr	r1, [r4, #16]
  403858:	f7fe fa20 	bl	401c9c <memcpy>
  40385c:	89a3      	ldrh	r3, [r4, #12]
  40385e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403866:	81a3      	strh	r3, [r4, #12]
  403868:	eb0b 000a 	add.w	r0, fp, sl
  40386c:	eba8 030a 	sub.w	r3, r8, sl
  403870:	f8c4 b010 	str.w	fp, [r4, #16]
  403874:	f8c4 8014 	str.w	r8, [r4, #20]
  403878:	6020      	str	r0, [r4, #0]
  40387a:	60a3      	str	r3, [r4, #8]
  40387c:	46b8      	mov	r8, r7
  40387e:	46ba      	mov	sl, r7
  403880:	46bb      	mov	fp, r7
  403882:	e721      	b.n	4036c8 <__sfvwrite_r+0xa8>
  403884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403888:	42b9      	cmp	r1, r7
  40388a:	bf28      	it	cs
  40388c:	4639      	movcs	r1, r7
  40388e:	464a      	mov	r2, r9
  403890:	fb91 f1f3 	sdiv	r1, r1, r3
  403894:	9800      	ldr	r0, [sp, #0]
  403896:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403898:	fb03 f301 	mul.w	r3, r3, r1
  40389c:	69e1      	ldr	r1, [r4, #28]
  40389e:	47b0      	blx	r6
  4038a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4038a4:	f73f af1b 	bgt.w	4036de <__sfvwrite_r+0xbe>
  4038a8:	e738      	b.n	40371c <__sfvwrite_r+0xfc>
  4038aa:	461a      	mov	r2, r3
  4038ac:	4629      	mov	r1, r5
  4038ae:	9301      	str	r3, [sp, #4]
  4038b0:	f000 fc06 	bl	4040c0 <memmove>
  4038b4:	6822      	ldr	r2, [r4, #0]
  4038b6:	9b01      	ldr	r3, [sp, #4]
  4038b8:	9800      	ldr	r0, [sp, #0]
  4038ba:	441a      	add	r2, r3
  4038bc:	6022      	str	r2, [r4, #0]
  4038be:	4621      	mov	r1, r4
  4038c0:	f7ff fc4a 	bl	403158 <_fflush_r>
  4038c4:	9b01      	ldr	r3, [sp, #4]
  4038c6:	2800      	cmp	r0, #0
  4038c8:	f47f af28 	bne.w	40371c <__sfvwrite_r+0xfc>
  4038cc:	461f      	mov	r7, r3
  4038ce:	e750      	b.n	403772 <__sfvwrite_r+0x152>
  4038d0:	9800      	ldr	r0, [sp, #0]
  4038d2:	f000 fc65 	bl	4041a0 <_realloc_r>
  4038d6:	4683      	mov	fp, r0
  4038d8:	2800      	cmp	r0, #0
  4038da:	d1c5      	bne.n	403868 <__sfvwrite_r+0x248>
  4038dc:	9d00      	ldr	r5, [sp, #0]
  4038de:	6921      	ldr	r1, [r4, #16]
  4038e0:	4628      	mov	r0, r5
  4038e2:	f7ff fdb7 	bl	403454 <_free_r>
  4038e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038ea:	220c      	movs	r2, #12
  4038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4038f0:	602a      	str	r2, [r5, #0]
  4038f2:	e715      	b.n	403720 <__sfvwrite_r+0x100>
  4038f4:	f106 0901 	add.w	r9, r6, #1
  4038f8:	e722      	b.n	403740 <__sfvwrite_r+0x120>
  4038fa:	f04f 30ff 	mov.w	r0, #4294967295
  4038fe:	e6bf      	b.n	403680 <__sfvwrite_r+0x60>
  403900:	9a00      	ldr	r2, [sp, #0]
  403902:	230c      	movs	r3, #12
  403904:	6013      	str	r3, [r2, #0]
  403906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40390a:	e709      	b.n	403720 <__sfvwrite_r+0x100>
  40390c:	7ffffc00 	.word	0x7ffffc00

00403910 <_fwalk_reent>:
  403910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403914:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403918:	d01f      	beq.n	40395a <_fwalk_reent+0x4a>
  40391a:	4688      	mov	r8, r1
  40391c:	4606      	mov	r6, r0
  40391e:	f04f 0900 	mov.w	r9, #0
  403922:	687d      	ldr	r5, [r7, #4]
  403924:	68bc      	ldr	r4, [r7, #8]
  403926:	3d01      	subs	r5, #1
  403928:	d411      	bmi.n	40394e <_fwalk_reent+0x3e>
  40392a:	89a3      	ldrh	r3, [r4, #12]
  40392c:	2b01      	cmp	r3, #1
  40392e:	f105 35ff 	add.w	r5, r5, #4294967295
  403932:	d908      	bls.n	403946 <_fwalk_reent+0x36>
  403934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403938:	3301      	adds	r3, #1
  40393a:	4621      	mov	r1, r4
  40393c:	4630      	mov	r0, r6
  40393e:	d002      	beq.n	403946 <_fwalk_reent+0x36>
  403940:	47c0      	blx	r8
  403942:	ea49 0900 	orr.w	r9, r9, r0
  403946:	1c6b      	adds	r3, r5, #1
  403948:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40394c:	d1ed      	bne.n	40392a <_fwalk_reent+0x1a>
  40394e:	683f      	ldr	r7, [r7, #0]
  403950:	2f00      	cmp	r7, #0
  403952:	d1e6      	bne.n	403922 <_fwalk_reent+0x12>
  403954:	4648      	mov	r0, r9
  403956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40395a:	46b9      	mov	r9, r7
  40395c:	4648      	mov	r0, r9
  40395e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403962:	bf00      	nop

00403964 <__locale_mb_cur_max>:
  403964:	4b04      	ldr	r3, [pc, #16]	; (403978 <__locale_mb_cur_max+0x14>)
  403966:	4a05      	ldr	r2, [pc, #20]	; (40397c <__locale_mb_cur_max+0x18>)
  403968:	681b      	ldr	r3, [r3, #0]
  40396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40396c:	2b00      	cmp	r3, #0
  40396e:	bf08      	it	eq
  403970:	4613      	moveq	r3, r2
  403972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403976:	4770      	bx	lr
  403978:	20400018 	.word	0x20400018
  40397c:	2040044c 	.word	0x2040044c

00403980 <__retarget_lock_init_recursive>:
  403980:	4770      	bx	lr
  403982:	bf00      	nop

00403984 <__retarget_lock_close_recursive>:
  403984:	4770      	bx	lr
  403986:	bf00      	nop

00403988 <__retarget_lock_acquire_recursive>:
  403988:	4770      	bx	lr
  40398a:	bf00      	nop

0040398c <__retarget_lock_release_recursive>:
  40398c:	4770      	bx	lr
  40398e:	bf00      	nop

00403990 <__swhatbuf_r>:
  403990:	b570      	push	{r4, r5, r6, lr}
  403992:	460c      	mov	r4, r1
  403994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403998:	2900      	cmp	r1, #0
  40399a:	b090      	sub	sp, #64	; 0x40
  40399c:	4615      	mov	r5, r2
  40399e:	461e      	mov	r6, r3
  4039a0:	db14      	blt.n	4039cc <__swhatbuf_r+0x3c>
  4039a2:	aa01      	add	r2, sp, #4
  4039a4:	f000 ff74 	bl	404890 <_fstat_r>
  4039a8:	2800      	cmp	r0, #0
  4039aa:	db0f      	blt.n	4039cc <__swhatbuf_r+0x3c>
  4039ac:	9a02      	ldr	r2, [sp, #8]
  4039ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4039b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4039b6:	fab2 f282 	clz	r2, r2
  4039ba:	0952      	lsrs	r2, r2, #5
  4039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4039c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4039c4:	6032      	str	r2, [r6, #0]
  4039c6:	602b      	str	r3, [r5, #0]
  4039c8:	b010      	add	sp, #64	; 0x40
  4039ca:	bd70      	pop	{r4, r5, r6, pc}
  4039cc:	89a2      	ldrh	r2, [r4, #12]
  4039ce:	2300      	movs	r3, #0
  4039d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4039d4:	6033      	str	r3, [r6, #0]
  4039d6:	d004      	beq.n	4039e2 <__swhatbuf_r+0x52>
  4039d8:	2240      	movs	r2, #64	; 0x40
  4039da:	4618      	mov	r0, r3
  4039dc:	602a      	str	r2, [r5, #0]
  4039de:	b010      	add	sp, #64	; 0x40
  4039e0:	bd70      	pop	{r4, r5, r6, pc}
  4039e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4039e6:	602b      	str	r3, [r5, #0]
  4039e8:	b010      	add	sp, #64	; 0x40
  4039ea:	bd70      	pop	{r4, r5, r6, pc}

004039ec <__smakebuf_r>:
  4039ec:	898a      	ldrh	r2, [r1, #12]
  4039ee:	0792      	lsls	r2, r2, #30
  4039f0:	460b      	mov	r3, r1
  4039f2:	d506      	bpl.n	403a02 <__smakebuf_r+0x16>
  4039f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4039f8:	2101      	movs	r1, #1
  4039fa:	601a      	str	r2, [r3, #0]
  4039fc:	611a      	str	r2, [r3, #16]
  4039fe:	6159      	str	r1, [r3, #20]
  403a00:	4770      	bx	lr
  403a02:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a04:	b083      	sub	sp, #12
  403a06:	ab01      	add	r3, sp, #4
  403a08:	466a      	mov	r2, sp
  403a0a:	460c      	mov	r4, r1
  403a0c:	4606      	mov	r6, r0
  403a0e:	f7ff ffbf 	bl	403990 <__swhatbuf_r>
  403a12:	9900      	ldr	r1, [sp, #0]
  403a14:	4605      	mov	r5, r0
  403a16:	4630      	mov	r0, r6
  403a18:	f000 f83a 	bl	403a90 <_malloc_r>
  403a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a20:	b1d8      	cbz	r0, 403a5a <__smakebuf_r+0x6e>
  403a22:	9a01      	ldr	r2, [sp, #4]
  403a24:	4f15      	ldr	r7, [pc, #84]	; (403a7c <__smakebuf_r+0x90>)
  403a26:	9900      	ldr	r1, [sp, #0]
  403a28:	63f7      	str	r7, [r6, #60]	; 0x3c
  403a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a2e:	81a3      	strh	r3, [r4, #12]
  403a30:	6020      	str	r0, [r4, #0]
  403a32:	6120      	str	r0, [r4, #16]
  403a34:	6161      	str	r1, [r4, #20]
  403a36:	b91a      	cbnz	r2, 403a40 <__smakebuf_r+0x54>
  403a38:	432b      	orrs	r3, r5
  403a3a:	81a3      	strh	r3, [r4, #12]
  403a3c:	b003      	add	sp, #12
  403a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a40:	4630      	mov	r0, r6
  403a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a46:	f000 ff37 	bl	4048b8 <_isatty_r>
  403a4a:	b1a0      	cbz	r0, 403a76 <__smakebuf_r+0x8a>
  403a4c:	89a3      	ldrh	r3, [r4, #12]
  403a4e:	f023 0303 	bic.w	r3, r3, #3
  403a52:	f043 0301 	orr.w	r3, r3, #1
  403a56:	b21b      	sxth	r3, r3
  403a58:	e7ee      	b.n	403a38 <__smakebuf_r+0x4c>
  403a5a:	059a      	lsls	r2, r3, #22
  403a5c:	d4ee      	bmi.n	403a3c <__smakebuf_r+0x50>
  403a5e:	f023 0303 	bic.w	r3, r3, #3
  403a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403a66:	f043 0302 	orr.w	r3, r3, #2
  403a6a:	2101      	movs	r1, #1
  403a6c:	81a3      	strh	r3, [r4, #12]
  403a6e:	6022      	str	r2, [r4, #0]
  403a70:	6122      	str	r2, [r4, #16]
  403a72:	6161      	str	r1, [r4, #20]
  403a74:	e7e2      	b.n	403a3c <__smakebuf_r+0x50>
  403a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a7a:	e7dd      	b.n	403a38 <__smakebuf_r+0x4c>
  403a7c:	004031ad 	.word	0x004031ad

00403a80 <malloc>:
  403a80:	4b02      	ldr	r3, [pc, #8]	; (403a8c <malloc+0xc>)
  403a82:	4601      	mov	r1, r0
  403a84:	6818      	ldr	r0, [r3, #0]
  403a86:	f000 b803 	b.w	403a90 <_malloc_r>
  403a8a:	bf00      	nop
  403a8c:	20400018 	.word	0x20400018

00403a90 <_malloc_r>:
  403a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a94:	f101 060b 	add.w	r6, r1, #11
  403a98:	2e16      	cmp	r6, #22
  403a9a:	b083      	sub	sp, #12
  403a9c:	4605      	mov	r5, r0
  403a9e:	f240 809e 	bls.w	403bde <_malloc_r+0x14e>
  403aa2:	f036 0607 	bics.w	r6, r6, #7
  403aa6:	f100 80bd 	bmi.w	403c24 <_malloc_r+0x194>
  403aaa:	42b1      	cmp	r1, r6
  403aac:	f200 80ba 	bhi.w	403c24 <_malloc_r+0x194>
  403ab0:	f000 fb6a 	bl	404188 <__malloc_lock>
  403ab4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403ab8:	f0c0 8293 	bcc.w	403fe2 <_malloc_r+0x552>
  403abc:	0a73      	lsrs	r3, r6, #9
  403abe:	f000 80b8 	beq.w	403c32 <_malloc_r+0x1a2>
  403ac2:	2b04      	cmp	r3, #4
  403ac4:	f200 8179 	bhi.w	403dba <_malloc_r+0x32a>
  403ac8:	09b3      	lsrs	r3, r6, #6
  403aca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403ace:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403ad2:	00c3      	lsls	r3, r0, #3
  403ad4:	4fbf      	ldr	r7, [pc, #764]	; (403dd4 <_malloc_r+0x344>)
  403ad6:	443b      	add	r3, r7
  403ad8:	f1a3 0108 	sub.w	r1, r3, #8
  403adc:	685c      	ldr	r4, [r3, #4]
  403ade:	42a1      	cmp	r1, r4
  403ae0:	d106      	bne.n	403af0 <_malloc_r+0x60>
  403ae2:	e00c      	b.n	403afe <_malloc_r+0x6e>
  403ae4:	2a00      	cmp	r2, #0
  403ae6:	f280 80aa 	bge.w	403c3e <_malloc_r+0x1ae>
  403aea:	68e4      	ldr	r4, [r4, #12]
  403aec:	42a1      	cmp	r1, r4
  403aee:	d006      	beq.n	403afe <_malloc_r+0x6e>
  403af0:	6863      	ldr	r3, [r4, #4]
  403af2:	f023 0303 	bic.w	r3, r3, #3
  403af6:	1b9a      	subs	r2, r3, r6
  403af8:	2a0f      	cmp	r2, #15
  403afa:	ddf3      	ble.n	403ae4 <_malloc_r+0x54>
  403afc:	4670      	mov	r0, lr
  403afe:	693c      	ldr	r4, [r7, #16]
  403b00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403de8 <_malloc_r+0x358>
  403b04:	4574      	cmp	r4, lr
  403b06:	f000 81ab 	beq.w	403e60 <_malloc_r+0x3d0>
  403b0a:	6863      	ldr	r3, [r4, #4]
  403b0c:	f023 0303 	bic.w	r3, r3, #3
  403b10:	1b9a      	subs	r2, r3, r6
  403b12:	2a0f      	cmp	r2, #15
  403b14:	f300 8190 	bgt.w	403e38 <_malloc_r+0x3a8>
  403b18:	2a00      	cmp	r2, #0
  403b1a:	f8c7 e014 	str.w	lr, [r7, #20]
  403b1e:	f8c7 e010 	str.w	lr, [r7, #16]
  403b22:	f280 809d 	bge.w	403c60 <_malloc_r+0x1d0>
  403b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b2a:	f080 8161 	bcs.w	403df0 <_malloc_r+0x360>
  403b2e:	08db      	lsrs	r3, r3, #3
  403b30:	f103 0c01 	add.w	ip, r3, #1
  403b34:	1099      	asrs	r1, r3, #2
  403b36:	687a      	ldr	r2, [r7, #4]
  403b38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403b3c:	f8c4 8008 	str.w	r8, [r4, #8]
  403b40:	2301      	movs	r3, #1
  403b42:	408b      	lsls	r3, r1
  403b44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403b48:	4313      	orrs	r3, r2
  403b4a:	3908      	subs	r1, #8
  403b4c:	60e1      	str	r1, [r4, #12]
  403b4e:	607b      	str	r3, [r7, #4]
  403b50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403b54:	f8c8 400c 	str.w	r4, [r8, #12]
  403b58:	1082      	asrs	r2, r0, #2
  403b5a:	2401      	movs	r4, #1
  403b5c:	4094      	lsls	r4, r2
  403b5e:	429c      	cmp	r4, r3
  403b60:	f200 808b 	bhi.w	403c7a <_malloc_r+0x1ea>
  403b64:	421c      	tst	r4, r3
  403b66:	d106      	bne.n	403b76 <_malloc_r+0xe6>
  403b68:	f020 0003 	bic.w	r0, r0, #3
  403b6c:	0064      	lsls	r4, r4, #1
  403b6e:	421c      	tst	r4, r3
  403b70:	f100 0004 	add.w	r0, r0, #4
  403b74:	d0fa      	beq.n	403b6c <_malloc_r+0xdc>
  403b76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b7a:	46cc      	mov	ip, r9
  403b7c:	4680      	mov	r8, r0
  403b7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b82:	459c      	cmp	ip, r3
  403b84:	d107      	bne.n	403b96 <_malloc_r+0x106>
  403b86:	e16d      	b.n	403e64 <_malloc_r+0x3d4>
  403b88:	2a00      	cmp	r2, #0
  403b8a:	f280 817b 	bge.w	403e84 <_malloc_r+0x3f4>
  403b8e:	68db      	ldr	r3, [r3, #12]
  403b90:	459c      	cmp	ip, r3
  403b92:	f000 8167 	beq.w	403e64 <_malloc_r+0x3d4>
  403b96:	6859      	ldr	r1, [r3, #4]
  403b98:	f021 0103 	bic.w	r1, r1, #3
  403b9c:	1b8a      	subs	r2, r1, r6
  403b9e:	2a0f      	cmp	r2, #15
  403ba0:	ddf2      	ble.n	403b88 <_malloc_r+0xf8>
  403ba2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403ba6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403baa:	9300      	str	r3, [sp, #0]
  403bac:	199c      	adds	r4, r3, r6
  403bae:	4628      	mov	r0, r5
  403bb0:	f046 0601 	orr.w	r6, r6, #1
  403bb4:	f042 0501 	orr.w	r5, r2, #1
  403bb8:	605e      	str	r6, [r3, #4]
  403bba:	f8c8 c00c 	str.w	ip, [r8, #12]
  403bbe:	f8cc 8008 	str.w	r8, [ip, #8]
  403bc2:	617c      	str	r4, [r7, #20]
  403bc4:	613c      	str	r4, [r7, #16]
  403bc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  403bca:	f8c4 e008 	str.w	lr, [r4, #8]
  403bce:	6065      	str	r5, [r4, #4]
  403bd0:	505a      	str	r2, [r3, r1]
  403bd2:	f000 fadf 	bl	404194 <__malloc_unlock>
  403bd6:	9b00      	ldr	r3, [sp, #0]
  403bd8:	f103 0408 	add.w	r4, r3, #8
  403bdc:	e01e      	b.n	403c1c <_malloc_r+0x18c>
  403bde:	2910      	cmp	r1, #16
  403be0:	d820      	bhi.n	403c24 <_malloc_r+0x194>
  403be2:	f000 fad1 	bl	404188 <__malloc_lock>
  403be6:	2610      	movs	r6, #16
  403be8:	2318      	movs	r3, #24
  403bea:	2002      	movs	r0, #2
  403bec:	4f79      	ldr	r7, [pc, #484]	; (403dd4 <_malloc_r+0x344>)
  403bee:	443b      	add	r3, r7
  403bf0:	f1a3 0208 	sub.w	r2, r3, #8
  403bf4:	685c      	ldr	r4, [r3, #4]
  403bf6:	4294      	cmp	r4, r2
  403bf8:	f000 813d 	beq.w	403e76 <_malloc_r+0x3e6>
  403bfc:	6863      	ldr	r3, [r4, #4]
  403bfe:	68e1      	ldr	r1, [r4, #12]
  403c00:	68a6      	ldr	r6, [r4, #8]
  403c02:	f023 0303 	bic.w	r3, r3, #3
  403c06:	4423      	add	r3, r4
  403c08:	4628      	mov	r0, r5
  403c0a:	685a      	ldr	r2, [r3, #4]
  403c0c:	60f1      	str	r1, [r6, #12]
  403c0e:	f042 0201 	orr.w	r2, r2, #1
  403c12:	608e      	str	r6, [r1, #8]
  403c14:	605a      	str	r2, [r3, #4]
  403c16:	f000 fabd 	bl	404194 <__malloc_unlock>
  403c1a:	3408      	adds	r4, #8
  403c1c:	4620      	mov	r0, r4
  403c1e:	b003      	add	sp, #12
  403c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c24:	2400      	movs	r4, #0
  403c26:	230c      	movs	r3, #12
  403c28:	4620      	mov	r0, r4
  403c2a:	602b      	str	r3, [r5, #0]
  403c2c:	b003      	add	sp, #12
  403c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c32:	2040      	movs	r0, #64	; 0x40
  403c34:	f44f 7300 	mov.w	r3, #512	; 0x200
  403c38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403c3c:	e74a      	b.n	403ad4 <_malloc_r+0x44>
  403c3e:	4423      	add	r3, r4
  403c40:	68e1      	ldr	r1, [r4, #12]
  403c42:	685a      	ldr	r2, [r3, #4]
  403c44:	68a6      	ldr	r6, [r4, #8]
  403c46:	f042 0201 	orr.w	r2, r2, #1
  403c4a:	60f1      	str	r1, [r6, #12]
  403c4c:	4628      	mov	r0, r5
  403c4e:	608e      	str	r6, [r1, #8]
  403c50:	605a      	str	r2, [r3, #4]
  403c52:	f000 fa9f 	bl	404194 <__malloc_unlock>
  403c56:	3408      	adds	r4, #8
  403c58:	4620      	mov	r0, r4
  403c5a:	b003      	add	sp, #12
  403c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c60:	4423      	add	r3, r4
  403c62:	4628      	mov	r0, r5
  403c64:	685a      	ldr	r2, [r3, #4]
  403c66:	f042 0201 	orr.w	r2, r2, #1
  403c6a:	605a      	str	r2, [r3, #4]
  403c6c:	f000 fa92 	bl	404194 <__malloc_unlock>
  403c70:	3408      	adds	r4, #8
  403c72:	4620      	mov	r0, r4
  403c74:	b003      	add	sp, #12
  403c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c7a:	68bc      	ldr	r4, [r7, #8]
  403c7c:	6863      	ldr	r3, [r4, #4]
  403c7e:	f023 0803 	bic.w	r8, r3, #3
  403c82:	45b0      	cmp	r8, r6
  403c84:	d304      	bcc.n	403c90 <_malloc_r+0x200>
  403c86:	eba8 0306 	sub.w	r3, r8, r6
  403c8a:	2b0f      	cmp	r3, #15
  403c8c:	f300 8085 	bgt.w	403d9a <_malloc_r+0x30a>
  403c90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403dec <_malloc_r+0x35c>
  403c94:	4b50      	ldr	r3, [pc, #320]	; (403dd8 <_malloc_r+0x348>)
  403c96:	f8d9 2000 	ldr.w	r2, [r9]
  403c9a:	681b      	ldr	r3, [r3, #0]
  403c9c:	3201      	adds	r2, #1
  403c9e:	4433      	add	r3, r6
  403ca0:	eb04 0a08 	add.w	sl, r4, r8
  403ca4:	f000 8155 	beq.w	403f52 <_malloc_r+0x4c2>
  403ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403cac:	330f      	adds	r3, #15
  403cae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403cb2:	f02b 0b0f 	bic.w	fp, fp, #15
  403cb6:	4659      	mov	r1, fp
  403cb8:	4628      	mov	r0, r5
  403cba:	f000 fc17 	bl	4044ec <_sbrk_r>
  403cbe:	1c41      	adds	r1, r0, #1
  403cc0:	4602      	mov	r2, r0
  403cc2:	f000 80fc 	beq.w	403ebe <_malloc_r+0x42e>
  403cc6:	4582      	cmp	sl, r0
  403cc8:	f200 80f7 	bhi.w	403eba <_malloc_r+0x42a>
  403ccc:	4b43      	ldr	r3, [pc, #268]	; (403ddc <_malloc_r+0x34c>)
  403cce:	6819      	ldr	r1, [r3, #0]
  403cd0:	4459      	add	r1, fp
  403cd2:	6019      	str	r1, [r3, #0]
  403cd4:	f000 814d 	beq.w	403f72 <_malloc_r+0x4e2>
  403cd8:	f8d9 0000 	ldr.w	r0, [r9]
  403cdc:	3001      	adds	r0, #1
  403cde:	bf1b      	ittet	ne
  403ce0:	eba2 0a0a 	subne.w	sl, r2, sl
  403ce4:	4451      	addne	r1, sl
  403ce6:	f8c9 2000 	streq.w	r2, [r9]
  403cea:	6019      	strne	r1, [r3, #0]
  403cec:	f012 0107 	ands.w	r1, r2, #7
  403cf0:	f000 8115 	beq.w	403f1e <_malloc_r+0x48e>
  403cf4:	f1c1 0008 	rsb	r0, r1, #8
  403cf8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403cfc:	4402      	add	r2, r0
  403cfe:	3108      	adds	r1, #8
  403d00:	eb02 090b 	add.w	r9, r2, fp
  403d04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403d08:	eba1 0909 	sub.w	r9, r1, r9
  403d0c:	4649      	mov	r1, r9
  403d0e:	4628      	mov	r0, r5
  403d10:	9301      	str	r3, [sp, #4]
  403d12:	9200      	str	r2, [sp, #0]
  403d14:	f000 fbea 	bl	4044ec <_sbrk_r>
  403d18:	1c43      	adds	r3, r0, #1
  403d1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403d1e:	f000 8143 	beq.w	403fa8 <_malloc_r+0x518>
  403d22:	1a80      	subs	r0, r0, r2
  403d24:	4448      	add	r0, r9
  403d26:	f040 0001 	orr.w	r0, r0, #1
  403d2a:	6819      	ldr	r1, [r3, #0]
  403d2c:	60ba      	str	r2, [r7, #8]
  403d2e:	4449      	add	r1, r9
  403d30:	42bc      	cmp	r4, r7
  403d32:	6050      	str	r0, [r2, #4]
  403d34:	6019      	str	r1, [r3, #0]
  403d36:	d017      	beq.n	403d68 <_malloc_r+0x2d8>
  403d38:	f1b8 0f0f 	cmp.w	r8, #15
  403d3c:	f240 80fb 	bls.w	403f36 <_malloc_r+0x4a6>
  403d40:	6860      	ldr	r0, [r4, #4]
  403d42:	f1a8 020c 	sub.w	r2, r8, #12
  403d46:	f022 0207 	bic.w	r2, r2, #7
  403d4a:	eb04 0e02 	add.w	lr, r4, r2
  403d4e:	f000 0001 	and.w	r0, r0, #1
  403d52:	f04f 0c05 	mov.w	ip, #5
  403d56:	4310      	orrs	r0, r2
  403d58:	2a0f      	cmp	r2, #15
  403d5a:	6060      	str	r0, [r4, #4]
  403d5c:	f8ce c004 	str.w	ip, [lr, #4]
  403d60:	f8ce c008 	str.w	ip, [lr, #8]
  403d64:	f200 8117 	bhi.w	403f96 <_malloc_r+0x506>
  403d68:	4b1d      	ldr	r3, [pc, #116]	; (403de0 <_malloc_r+0x350>)
  403d6a:	68bc      	ldr	r4, [r7, #8]
  403d6c:	681a      	ldr	r2, [r3, #0]
  403d6e:	4291      	cmp	r1, r2
  403d70:	bf88      	it	hi
  403d72:	6019      	strhi	r1, [r3, #0]
  403d74:	4b1b      	ldr	r3, [pc, #108]	; (403de4 <_malloc_r+0x354>)
  403d76:	681a      	ldr	r2, [r3, #0]
  403d78:	4291      	cmp	r1, r2
  403d7a:	6862      	ldr	r2, [r4, #4]
  403d7c:	bf88      	it	hi
  403d7e:	6019      	strhi	r1, [r3, #0]
  403d80:	f022 0203 	bic.w	r2, r2, #3
  403d84:	4296      	cmp	r6, r2
  403d86:	eba2 0306 	sub.w	r3, r2, r6
  403d8a:	d801      	bhi.n	403d90 <_malloc_r+0x300>
  403d8c:	2b0f      	cmp	r3, #15
  403d8e:	dc04      	bgt.n	403d9a <_malloc_r+0x30a>
  403d90:	4628      	mov	r0, r5
  403d92:	f000 f9ff 	bl	404194 <__malloc_unlock>
  403d96:	2400      	movs	r4, #0
  403d98:	e740      	b.n	403c1c <_malloc_r+0x18c>
  403d9a:	19a2      	adds	r2, r4, r6
  403d9c:	f043 0301 	orr.w	r3, r3, #1
  403da0:	f046 0601 	orr.w	r6, r6, #1
  403da4:	6066      	str	r6, [r4, #4]
  403da6:	4628      	mov	r0, r5
  403da8:	60ba      	str	r2, [r7, #8]
  403daa:	6053      	str	r3, [r2, #4]
  403dac:	f000 f9f2 	bl	404194 <__malloc_unlock>
  403db0:	3408      	adds	r4, #8
  403db2:	4620      	mov	r0, r4
  403db4:	b003      	add	sp, #12
  403db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dba:	2b14      	cmp	r3, #20
  403dbc:	d971      	bls.n	403ea2 <_malloc_r+0x412>
  403dbe:	2b54      	cmp	r3, #84	; 0x54
  403dc0:	f200 80a3 	bhi.w	403f0a <_malloc_r+0x47a>
  403dc4:	0b33      	lsrs	r3, r6, #12
  403dc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403dca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403dce:	00c3      	lsls	r3, r0, #3
  403dd0:	e680      	b.n	403ad4 <_malloc_r+0x44>
  403dd2:	bf00      	nop
  403dd4:	204005b8 	.word	0x204005b8
  403dd8:	20400a94 	.word	0x20400a94
  403ddc:	20400a64 	.word	0x20400a64
  403de0:	20400a8c 	.word	0x20400a8c
  403de4:	20400a90 	.word	0x20400a90
  403de8:	204005c0 	.word	0x204005c0
  403dec:	204009c0 	.word	0x204009c0
  403df0:	0a5a      	lsrs	r2, r3, #9
  403df2:	2a04      	cmp	r2, #4
  403df4:	d95b      	bls.n	403eae <_malloc_r+0x41e>
  403df6:	2a14      	cmp	r2, #20
  403df8:	f200 80ae 	bhi.w	403f58 <_malloc_r+0x4c8>
  403dfc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403e00:	00c9      	lsls	r1, r1, #3
  403e02:	325b      	adds	r2, #91	; 0x5b
  403e04:	eb07 0c01 	add.w	ip, r7, r1
  403e08:	5879      	ldr	r1, [r7, r1]
  403e0a:	f1ac 0c08 	sub.w	ip, ip, #8
  403e0e:	458c      	cmp	ip, r1
  403e10:	f000 8088 	beq.w	403f24 <_malloc_r+0x494>
  403e14:	684a      	ldr	r2, [r1, #4]
  403e16:	f022 0203 	bic.w	r2, r2, #3
  403e1a:	4293      	cmp	r3, r2
  403e1c:	d273      	bcs.n	403f06 <_malloc_r+0x476>
  403e1e:	6889      	ldr	r1, [r1, #8]
  403e20:	458c      	cmp	ip, r1
  403e22:	d1f7      	bne.n	403e14 <_malloc_r+0x384>
  403e24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403e28:	687b      	ldr	r3, [r7, #4]
  403e2a:	60e2      	str	r2, [r4, #12]
  403e2c:	f8c4 c008 	str.w	ip, [r4, #8]
  403e30:	6094      	str	r4, [r2, #8]
  403e32:	f8cc 400c 	str.w	r4, [ip, #12]
  403e36:	e68f      	b.n	403b58 <_malloc_r+0xc8>
  403e38:	19a1      	adds	r1, r4, r6
  403e3a:	f046 0c01 	orr.w	ip, r6, #1
  403e3e:	f042 0601 	orr.w	r6, r2, #1
  403e42:	f8c4 c004 	str.w	ip, [r4, #4]
  403e46:	4628      	mov	r0, r5
  403e48:	6179      	str	r1, [r7, #20]
  403e4a:	6139      	str	r1, [r7, #16]
  403e4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403e50:	f8c1 e008 	str.w	lr, [r1, #8]
  403e54:	604e      	str	r6, [r1, #4]
  403e56:	50e2      	str	r2, [r4, r3]
  403e58:	f000 f99c 	bl	404194 <__malloc_unlock>
  403e5c:	3408      	adds	r4, #8
  403e5e:	e6dd      	b.n	403c1c <_malloc_r+0x18c>
  403e60:	687b      	ldr	r3, [r7, #4]
  403e62:	e679      	b.n	403b58 <_malloc_r+0xc8>
  403e64:	f108 0801 	add.w	r8, r8, #1
  403e68:	f018 0f03 	tst.w	r8, #3
  403e6c:	f10c 0c08 	add.w	ip, ip, #8
  403e70:	f47f ae85 	bne.w	403b7e <_malloc_r+0xee>
  403e74:	e02d      	b.n	403ed2 <_malloc_r+0x442>
  403e76:	68dc      	ldr	r4, [r3, #12]
  403e78:	42a3      	cmp	r3, r4
  403e7a:	bf08      	it	eq
  403e7c:	3002      	addeq	r0, #2
  403e7e:	f43f ae3e 	beq.w	403afe <_malloc_r+0x6e>
  403e82:	e6bb      	b.n	403bfc <_malloc_r+0x16c>
  403e84:	4419      	add	r1, r3
  403e86:	461c      	mov	r4, r3
  403e88:	684a      	ldr	r2, [r1, #4]
  403e8a:	68db      	ldr	r3, [r3, #12]
  403e8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e90:	f042 0201 	orr.w	r2, r2, #1
  403e94:	604a      	str	r2, [r1, #4]
  403e96:	4628      	mov	r0, r5
  403e98:	60f3      	str	r3, [r6, #12]
  403e9a:	609e      	str	r6, [r3, #8]
  403e9c:	f000 f97a 	bl	404194 <__malloc_unlock>
  403ea0:	e6bc      	b.n	403c1c <_malloc_r+0x18c>
  403ea2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403ea6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403eaa:	00c3      	lsls	r3, r0, #3
  403eac:	e612      	b.n	403ad4 <_malloc_r+0x44>
  403eae:	099a      	lsrs	r2, r3, #6
  403eb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403eb4:	00c9      	lsls	r1, r1, #3
  403eb6:	3238      	adds	r2, #56	; 0x38
  403eb8:	e7a4      	b.n	403e04 <_malloc_r+0x374>
  403eba:	42bc      	cmp	r4, r7
  403ebc:	d054      	beq.n	403f68 <_malloc_r+0x4d8>
  403ebe:	68bc      	ldr	r4, [r7, #8]
  403ec0:	6862      	ldr	r2, [r4, #4]
  403ec2:	f022 0203 	bic.w	r2, r2, #3
  403ec6:	e75d      	b.n	403d84 <_malloc_r+0x2f4>
  403ec8:	f859 3908 	ldr.w	r3, [r9], #-8
  403ecc:	4599      	cmp	r9, r3
  403ece:	f040 8086 	bne.w	403fde <_malloc_r+0x54e>
  403ed2:	f010 0f03 	tst.w	r0, #3
  403ed6:	f100 30ff 	add.w	r0, r0, #4294967295
  403eda:	d1f5      	bne.n	403ec8 <_malloc_r+0x438>
  403edc:	687b      	ldr	r3, [r7, #4]
  403ede:	ea23 0304 	bic.w	r3, r3, r4
  403ee2:	607b      	str	r3, [r7, #4]
  403ee4:	0064      	lsls	r4, r4, #1
  403ee6:	429c      	cmp	r4, r3
  403ee8:	f63f aec7 	bhi.w	403c7a <_malloc_r+0x1ea>
  403eec:	2c00      	cmp	r4, #0
  403eee:	f43f aec4 	beq.w	403c7a <_malloc_r+0x1ea>
  403ef2:	421c      	tst	r4, r3
  403ef4:	4640      	mov	r0, r8
  403ef6:	f47f ae3e 	bne.w	403b76 <_malloc_r+0xe6>
  403efa:	0064      	lsls	r4, r4, #1
  403efc:	421c      	tst	r4, r3
  403efe:	f100 0004 	add.w	r0, r0, #4
  403f02:	d0fa      	beq.n	403efa <_malloc_r+0x46a>
  403f04:	e637      	b.n	403b76 <_malloc_r+0xe6>
  403f06:	468c      	mov	ip, r1
  403f08:	e78c      	b.n	403e24 <_malloc_r+0x394>
  403f0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403f0e:	d815      	bhi.n	403f3c <_malloc_r+0x4ac>
  403f10:	0bf3      	lsrs	r3, r6, #15
  403f12:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403f16:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403f1a:	00c3      	lsls	r3, r0, #3
  403f1c:	e5da      	b.n	403ad4 <_malloc_r+0x44>
  403f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403f22:	e6ed      	b.n	403d00 <_malloc_r+0x270>
  403f24:	687b      	ldr	r3, [r7, #4]
  403f26:	1092      	asrs	r2, r2, #2
  403f28:	2101      	movs	r1, #1
  403f2a:	fa01 f202 	lsl.w	r2, r1, r2
  403f2e:	4313      	orrs	r3, r2
  403f30:	607b      	str	r3, [r7, #4]
  403f32:	4662      	mov	r2, ip
  403f34:	e779      	b.n	403e2a <_malloc_r+0x39a>
  403f36:	2301      	movs	r3, #1
  403f38:	6053      	str	r3, [r2, #4]
  403f3a:	e729      	b.n	403d90 <_malloc_r+0x300>
  403f3c:	f240 5254 	movw	r2, #1364	; 0x554
  403f40:	4293      	cmp	r3, r2
  403f42:	d822      	bhi.n	403f8a <_malloc_r+0x4fa>
  403f44:	0cb3      	lsrs	r3, r6, #18
  403f46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403f4a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403f4e:	00c3      	lsls	r3, r0, #3
  403f50:	e5c0      	b.n	403ad4 <_malloc_r+0x44>
  403f52:	f103 0b10 	add.w	fp, r3, #16
  403f56:	e6ae      	b.n	403cb6 <_malloc_r+0x226>
  403f58:	2a54      	cmp	r2, #84	; 0x54
  403f5a:	d829      	bhi.n	403fb0 <_malloc_r+0x520>
  403f5c:	0b1a      	lsrs	r2, r3, #12
  403f5e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f62:	00c9      	lsls	r1, r1, #3
  403f64:	326e      	adds	r2, #110	; 0x6e
  403f66:	e74d      	b.n	403e04 <_malloc_r+0x374>
  403f68:	4b20      	ldr	r3, [pc, #128]	; (403fec <_malloc_r+0x55c>)
  403f6a:	6819      	ldr	r1, [r3, #0]
  403f6c:	4459      	add	r1, fp
  403f6e:	6019      	str	r1, [r3, #0]
  403f70:	e6b2      	b.n	403cd8 <_malloc_r+0x248>
  403f72:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f76:	2800      	cmp	r0, #0
  403f78:	f47f aeae 	bne.w	403cd8 <_malloc_r+0x248>
  403f7c:	eb08 030b 	add.w	r3, r8, fp
  403f80:	68ba      	ldr	r2, [r7, #8]
  403f82:	f043 0301 	orr.w	r3, r3, #1
  403f86:	6053      	str	r3, [r2, #4]
  403f88:	e6ee      	b.n	403d68 <_malloc_r+0x2d8>
  403f8a:	207f      	movs	r0, #127	; 0x7f
  403f8c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f90:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f94:	e59e      	b.n	403ad4 <_malloc_r+0x44>
  403f96:	f104 0108 	add.w	r1, r4, #8
  403f9a:	4628      	mov	r0, r5
  403f9c:	9300      	str	r3, [sp, #0]
  403f9e:	f7ff fa59 	bl	403454 <_free_r>
  403fa2:	9b00      	ldr	r3, [sp, #0]
  403fa4:	6819      	ldr	r1, [r3, #0]
  403fa6:	e6df      	b.n	403d68 <_malloc_r+0x2d8>
  403fa8:	2001      	movs	r0, #1
  403faa:	f04f 0900 	mov.w	r9, #0
  403fae:	e6bc      	b.n	403d2a <_malloc_r+0x29a>
  403fb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403fb4:	d805      	bhi.n	403fc2 <_malloc_r+0x532>
  403fb6:	0bda      	lsrs	r2, r3, #15
  403fb8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403fbc:	00c9      	lsls	r1, r1, #3
  403fbe:	3277      	adds	r2, #119	; 0x77
  403fc0:	e720      	b.n	403e04 <_malloc_r+0x374>
  403fc2:	f240 5154 	movw	r1, #1364	; 0x554
  403fc6:	428a      	cmp	r2, r1
  403fc8:	d805      	bhi.n	403fd6 <_malloc_r+0x546>
  403fca:	0c9a      	lsrs	r2, r3, #18
  403fcc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403fd0:	00c9      	lsls	r1, r1, #3
  403fd2:	327c      	adds	r2, #124	; 0x7c
  403fd4:	e716      	b.n	403e04 <_malloc_r+0x374>
  403fd6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403fda:	227e      	movs	r2, #126	; 0x7e
  403fdc:	e712      	b.n	403e04 <_malloc_r+0x374>
  403fde:	687b      	ldr	r3, [r7, #4]
  403fe0:	e780      	b.n	403ee4 <_malloc_r+0x454>
  403fe2:	08f0      	lsrs	r0, r6, #3
  403fe4:	f106 0308 	add.w	r3, r6, #8
  403fe8:	e600      	b.n	403bec <_malloc_r+0x15c>
  403fea:	bf00      	nop
  403fec:	20400a64 	.word	0x20400a64

00403ff0 <__ascii_mbtowc>:
  403ff0:	b082      	sub	sp, #8
  403ff2:	b149      	cbz	r1, 404008 <__ascii_mbtowc+0x18>
  403ff4:	b15a      	cbz	r2, 40400e <__ascii_mbtowc+0x1e>
  403ff6:	b16b      	cbz	r3, 404014 <__ascii_mbtowc+0x24>
  403ff8:	7813      	ldrb	r3, [r2, #0]
  403ffa:	600b      	str	r3, [r1, #0]
  403ffc:	7812      	ldrb	r2, [r2, #0]
  403ffe:	1c10      	adds	r0, r2, #0
  404000:	bf18      	it	ne
  404002:	2001      	movne	r0, #1
  404004:	b002      	add	sp, #8
  404006:	4770      	bx	lr
  404008:	a901      	add	r1, sp, #4
  40400a:	2a00      	cmp	r2, #0
  40400c:	d1f3      	bne.n	403ff6 <__ascii_mbtowc+0x6>
  40400e:	4610      	mov	r0, r2
  404010:	b002      	add	sp, #8
  404012:	4770      	bx	lr
  404014:	f06f 0001 	mvn.w	r0, #1
  404018:	e7f4      	b.n	404004 <__ascii_mbtowc+0x14>
  40401a:	bf00      	nop
  40401c:	0000      	movs	r0, r0
	...

00404020 <memchr>:
  404020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404024:	2a10      	cmp	r2, #16
  404026:	db2b      	blt.n	404080 <memchr+0x60>
  404028:	f010 0f07 	tst.w	r0, #7
  40402c:	d008      	beq.n	404040 <memchr+0x20>
  40402e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404032:	3a01      	subs	r2, #1
  404034:	428b      	cmp	r3, r1
  404036:	d02d      	beq.n	404094 <memchr+0x74>
  404038:	f010 0f07 	tst.w	r0, #7
  40403c:	b342      	cbz	r2, 404090 <memchr+0x70>
  40403e:	d1f6      	bne.n	40402e <memchr+0xe>
  404040:	b4f0      	push	{r4, r5, r6, r7}
  404042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40404a:	f022 0407 	bic.w	r4, r2, #7
  40404e:	f07f 0700 	mvns.w	r7, #0
  404052:	2300      	movs	r3, #0
  404054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404058:	3c08      	subs	r4, #8
  40405a:	ea85 0501 	eor.w	r5, r5, r1
  40405e:	ea86 0601 	eor.w	r6, r6, r1
  404062:	fa85 f547 	uadd8	r5, r5, r7
  404066:	faa3 f587 	sel	r5, r3, r7
  40406a:	fa86 f647 	uadd8	r6, r6, r7
  40406e:	faa5 f687 	sel	r6, r5, r7
  404072:	b98e      	cbnz	r6, 404098 <memchr+0x78>
  404074:	d1ee      	bne.n	404054 <memchr+0x34>
  404076:	bcf0      	pop	{r4, r5, r6, r7}
  404078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40407c:	f002 0207 	and.w	r2, r2, #7
  404080:	b132      	cbz	r2, 404090 <memchr+0x70>
  404082:	f810 3b01 	ldrb.w	r3, [r0], #1
  404086:	3a01      	subs	r2, #1
  404088:	ea83 0301 	eor.w	r3, r3, r1
  40408c:	b113      	cbz	r3, 404094 <memchr+0x74>
  40408e:	d1f8      	bne.n	404082 <memchr+0x62>
  404090:	2000      	movs	r0, #0
  404092:	4770      	bx	lr
  404094:	3801      	subs	r0, #1
  404096:	4770      	bx	lr
  404098:	2d00      	cmp	r5, #0
  40409a:	bf06      	itte	eq
  40409c:	4635      	moveq	r5, r6
  40409e:	3803      	subeq	r0, #3
  4040a0:	3807      	subne	r0, #7
  4040a2:	f015 0f01 	tst.w	r5, #1
  4040a6:	d107      	bne.n	4040b8 <memchr+0x98>
  4040a8:	3001      	adds	r0, #1
  4040aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4040ae:	bf02      	ittt	eq
  4040b0:	3001      	addeq	r0, #1
  4040b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4040b6:	3001      	addeq	r0, #1
  4040b8:	bcf0      	pop	{r4, r5, r6, r7}
  4040ba:	3801      	subs	r0, #1
  4040bc:	4770      	bx	lr
  4040be:	bf00      	nop

004040c0 <memmove>:
  4040c0:	4288      	cmp	r0, r1
  4040c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4040c4:	d90d      	bls.n	4040e2 <memmove+0x22>
  4040c6:	188b      	adds	r3, r1, r2
  4040c8:	4298      	cmp	r0, r3
  4040ca:	d20a      	bcs.n	4040e2 <memmove+0x22>
  4040cc:	1884      	adds	r4, r0, r2
  4040ce:	2a00      	cmp	r2, #0
  4040d0:	d051      	beq.n	404176 <memmove+0xb6>
  4040d2:	4622      	mov	r2, r4
  4040d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4040d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4040dc:	4299      	cmp	r1, r3
  4040de:	d1f9      	bne.n	4040d4 <memmove+0x14>
  4040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4040e2:	2a0f      	cmp	r2, #15
  4040e4:	d948      	bls.n	404178 <memmove+0xb8>
  4040e6:	ea41 0300 	orr.w	r3, r1, r0
  4040ea:	079b      	lsls	r3, r3, #30
  4040ec:	d146      	bne.n	40417c <memmove+0xbc>
  4040ee:	f100 0410 	add.w	r4, r0, #16
  4040f2:	f101 0310 	add.w	r3, r1, #16
  4040f6:	4615      	mov	r5, r2
  4040f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4040fc:	f844 6c10 	str.w	r6, [r4, #-16]
  404100:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404104:	f844 6c0c 	str.w	r6, [r4, #-12]
  404108:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40410c:	f844 6c08 	str.w	r6, [r4, #-8]
  404110:	3d10      	subs	r5, #16
  404112:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404116:	f844 6c04 	str.w	r6, [r4, #-4]
  40411a:	2d0f      	cmp	r5, #15
  40411c:	f103 0310 	add.w	r3, r3, #16
  404120:	f104 0410 	add.w	r4, r4, #16
  404124:	d8e8      	bhi.n	4040f8 <memmove+0x38>
  404126:	f1a2 0310 	sub.w	r3, r2, #16
  40412a:	f023 030f 	bic.w	r3, r3, #15
  40412e:	f002 0e0f 	and.w	lr, r2, #15
  404132:	3310      	adds	r3, #16
  404134:	f1be 0f03 	cmp.w	lr, #3
  404138:	4419      	add	r1, r3
  40413a:	4403      	add	r3, r0
  40413c:	d921      	bls.n	404182 <memmove+0xc2>
  40413e:	1f1e      	subs	r6, r3, #4
  404140:	460d      	mov	r5, r1
  404142:	4674      	mov	r4, lr
  404144:	3c04      	subs	r4, #4
  404146:	f855 7b04 	ldr.w	r7, [r5], #4
  40414a:	f846 7f04 	str.w	r7, [r6, #4]!
  40414e:	2c03      	cmp	r4, #3
  404150:	d8f8      	bhi.n	404144 <memmove+0x84>
  404152:	f1ae 0404 	sub.w	r4, lr, #4
  404156:	f024 0403 	bic.w	r4, r4, #3
  40415a:	3404      	adds	r4, #4
  40415c:	4421      	add	r1, r4
  40415e:	4423      	add	r3, r4
  404160:	f002 0203 	and.w	r2, r2, #3
  404164:	b162      	cbz	r2, 404180 <memmove+0xc0>
  404166:	3b01      	subs	r3, #1
  404168:	440a      	add	r2, r1
  40416a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40416e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404172:	428a      	cmp	r2, r1
  404174:	d1f9      	bne.n	40416a <memmove+0xaa>
  404176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404178:	4603      	mov	r3, r0
  40417a:	e7f3      	b.n	404164 <memmove+0xa4>
  40417c:	4603      	mov	r3, r0
  40417e:	e7f2      	b.n	404166 <memmove+0xa6>
  404180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404182:	4672      	mov	r2, lr
  404184:	e7ee      	b.n	404164 <memmove+0xa4>
  404186:	bf00      	nop

00404188 <__malloc_lock>:
  404188:	4801      	ldr	r0, [pc, #4]	; (404190 <__malloc_lock+0x8>)
  40418a:	f7ff bbfd 	b.w	403988 <__retarget_lock_acquire_recursive>
  40418e:	bf00      	nop
  404190:	20400ad4 	.word	0x20400ad4

00404194 <__malloc_unlock>:
  404194:	4801      	ldr	r0, [pc, #4]	; (40419c <__malloc_unlock+0x8>)
  404196:	f7ff bbf9 	b.w	40398c <__retarget_lock_release_recursive>
  40419a:	bf00      	nop
  40419c:	20400ad4 	.word	0x20400ad4

004041a0 <_realloc_r>:
  4041a0:	2900      	cmp	r1, #0
  4041a2:	f000 8095 	beq.w	4042d0 <_realloc_r+0x130>
  4041a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041aa:	460d      	mov	r5, r1
  4041ac:	4616      	mov	r6, r2
  4041ae:	b083      	sub	sp, #12
  4041b0:	4680      	mov	r8, r0
  4041b2:	f106 070b 	add.w	r7, r6, #11
  4041b6:	f7ff ffe7 	bl	404188 <__malloc_lock>
  4041ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4041be:	2f16      	cmp	r7, #22
  4041c0:	f02e 0403 	bic.w	r4, lr, #3
  4041c4:	f1a5 0908 	sub.w	r9, r5, #8
  4041c8:	d83c      	bhi.n	404244 <_realloc_r+0xa4>
  4041ca:	2210      	movs	r2, #16
  4041cc:	4617      	mov	r7, r2
  4041ce:	42be      	cmp	r6, r7
  4041d0:	d83d      	bhi.n	40424e <_realloc_r+0xae>
  4041d2:	4294      	cmp	r4, r2
  4041d4:	da43      	bge.n	40425e <_realloc_r+0xbe>
  4041d6:	4bc4      	ldr	r3, [pc, #784]	; (4044e8 <_realloc_r+0x348>)
  4041d8:	6899      	ldr	r1, [r3, #8]
  4041da:	eb09 0004 	add.w	r0, r9, r4
  4041de:	4288      	cmp	r0, r1
  4041e0:	f000 80b4 	beq.w	40434c <_realloc_r+0x1ac>
  4041e4:	6843      	ldr	r3, [r0, #4]
  4041e6:	f023 0101 	bic.w	r1, r3, #1
  4041ea:	4401      	add	r1, r0
  4041ec:	6849      	ldr	r1, [r1, #4]
  4041ee:	07c9      	lsls	r1, r1, #31
  4041f0:	d54c      	bpl.n	40428c <_realloc_r+0xec>
  4041f2:	f01e 0f01 	tst.w	lr, #1
  4041f6:	f000 809b 	beq.w	404330 <_realloc_r+0x190>
  4041fa:	4631      	mov	r1, r6
  4041fc:	4640      	mov	r0, r8
  4041fe:	f7ff fc47 	bl	403a90 <_malloc_r>
  404202:	4606      	mov	r6, r0
  404204:	2800      	cmp	r0, #0
  404206:	d03a      	beq.n	40427e <_realloc_r+0xde>
  404208:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40420c:	f023 0301 	bic.w	r3, r3, #1
  404210:	444b      	add	r3, r9
  404212:	f1a0 0208 	sub.w	r2, r0, #8
  404216:	429a      	cmp	r2, r3
  404218:	f000 8121 	beq.w	40445e <_realloc_r+0x2be>
  40421c:	1f22      	subs	r2, r4, #4
  40421e:	2a24      	cmp	r2, #36	; 0x24
  404220:	f200 8107 	bhi.w	404432 <_realloc_r+0x292>
  404224:	2a13      	cmp	r2, #19
  404226:	f200 80db 	bhi.w	4043e0 <_realloc_r+0x240>
  40422a:	4603      	mov	r3, r0
  40422c:	462a      	mov	r2, r5
  40422e:	6811      	ldr	r1, [r2, #0]
  404230:	6019      	str	r1, [r3, #0]
  404232:	6851      	ldr	r1, [r2, #4]
  404234:	6059      	str	r1, [r3, #4]
  404236:	6892      	ldr	r2, [r2, #8]
  404238:	609a      	str	r2, [r3, #8]
  40423a:	4629      	mov	r1, r5
  40423c:	4640      	mov	r0, r8
  40423e:	f7ff f909 	bl	403454 <_free_r>
  404242:	e01c      	b.n	40427e <_realloc_r+0xde>
  404244:	f027 0707 	bic.w	r7, r7, #7
  404248:	2f00      	cmp	r7, #0
  40424a:	463a      	mov	r2, r7
  40424c:	dabf      	bge.n	4041ce <_realloc_r+0x2e>
  40424e:	2600      	movs	r6, #0
  404250:	230c      	movs	r3, #12
  404252:	4630      	mov	r0, r6
  404254:	f8c8 3000 	str.w	r3, [r8]
  404258:	b003      	add	sp, #12
  40425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40425e:	462e      	mov	r6, r5
  404260:	1be3      	subs	r3, r4, r7
  404262:	2b0f      	cmp	r3, #15
  404264:	d81e      	bhi.n	4042a4 <_realloc_r+0x104>
  404266:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40426a:	f003 0301 	and.w	r3, r3, #1
  40426e:	4323      	orrs	r3, r4
  404270:	444c      	add	r4, r9
  404272:	f8c9 3004 	str.w	r3, [r9, #4]
  404276:	6863      	ldr	r3, [r4, #4]
  404278:	f043 0301 	orr.w	r3, r3, #1
  40427c:	6063      	str	r3, [r4, #4]
  40427e:	4640      	mov	r0, r8
  404280:	f7ff ff88 	bl	404194 <__malloc_unlock>
  404284:	4630      	mov	r0, r6
  404286:	b003      	add	sp, #12
  404288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40428c:	f023 0303 	bic.w	r3, r3, #3
  404290:	18e1      	adds	r1, r4, r3
  404292:	4291      	cmp	r1, r2
  404294:	db1f      	blt.n	4042d6 <_realloc_r+0x136>
  404296:	68c3      	ldr	r3, [r0, #12]
  404298:	6882      	ldr	r2, [r0, #8]
  40429a:	462e      	mov	r6, r5
  40429c:	60d3      	str	r3, [r2, #12]
  40429e:	460c      	mov	r4, r1
  4042a0:	609a      	str	r2, [r3, #8]
  4042a2:	e7dd      	b.n	404260 <_realloc_r+0xc0>
  4042a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4042a8:	eb09 0107 	add.w	r1, r9, r7
  4042ac:	f002 0201 	and.w	r2, r2, #1
  4042b0:	444c      	add	r4, r9
  4042b2:	f043 0301 	orr.w	r3, r3, #1
  4042b6:	4317      	orrs	r7, r2
  4042b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4042bc:	604b      	str	r3, [r1, #4]
  4042be:	6863      	ldr	r3, [r4, #4]
  4042c0:	f043 0301 	orr.w	r3, r3, #1
  4042c4:	3108      	adds	r1, #8
  4042c6:	6063      	str	r3, [r4, #4]
  4042c8:	4640      	mov	r0, r8
  4042ca:	f7ff f8c3 	bl	403454 <_free_r>
  4042ce:	e7d6      	b.n	40427e <_realloc_r+0xde>
  4042d0:	4611      	mov	r1, r2
  4042d2:	f7ff bbdd 	b.w	403a90 <_malloc_r>
  4042d6:	f01e 0f01 	tst.w	lr, #1
  4042da:	d18e      	bne.n	4041fa <_realloc_r+0x5a>
  4042dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4042e0:	eba9 0a01 	sub.w	sl, r9, r1
  4042e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4042e8:	f021 0103 	bic.w	r1, r1, #3
  4042ec:	440b      	add	r3, r1
  4042ee:	4423      	add	r3, r4
  4042f0:	4293      	cmp	r3, r2
  4042f2:	db25      	blt.n	404340 <_realloc_r+0x1a0>
  4042f4:	68c2      	ldr	r2, [r0, #12]
  4042f6:	6881      	ldr	r1, [r0, #8]
  4042f8:	4656      	mov	r6, sl
  4042fa:	60ca      	str	r2, [r1, #12]
  4042fc:	6091      	str	r1, [r2, #8]
  4042fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  404302:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404306:	1f22      	subs	r2, r4, #4
  404308:	2a24      	cmp	r2, #36	; 0x24
  40430a:	60c1      	str	r1, [r0, #12]
  40430c:	6088      	str	r0, [r1, #8]
  40430e:	f200 8094 	bhi.w	40443a <_realloc_r+0x29a>
  404312:	2a13      	cmp	r2, #19
  404314:	d96f      	bls.n	4043f6 <_realloc_r+0x256>
  404316:	6829      	ldr	r1, [r5, #0]
  404318:	f8ca 1008 	str.w	r1, [sl, #8]
  40431c:	6869      	ldr	r1, [r5, #4]
  40431e:	f8ca 100c 	str.w	r1, [sl, #12]
  404322:	2a1b      	cmp	r2, #27
  404324:	f200 80a2 	bhi.w	40446c <_realloc_r+0x2cc>
  404328:	3508      	adds	r5, #8
  40432a:	f10a 0210 	add.w	r2, sl, #16
  40432e:	e063      	b.n	4043f8 <_realloc_r+0x258>
  404330:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404334:	eba9 0a03 	sub.w	sl, r9, r3
  404338:	f8da 1004 	ldr.w	r1, [sl, #4]
  40433c:	f021 0103 	bic.w	r1, r1, #3
  404340:	1863      	adds	r3, r4, r1
  404342:	4293      	cmp	r3, r2
  404344:	f6ff af59 	blt.w	4041fa <_realloc_r+0x5a>
  404348:	4656      	mov	r6, sl
  40434a:	e7d8      	b.n	4042fe <_realloc_r+0x15e>
  40434c:	6841      	ldr	r1, [r0, #4]
  40434e:	f021 0b03 	bic.w	fp, r1, #3
  404352:	44a3      	add	fp, r4
  404354:	f107 0010 	add.w	r0, r7, #16
  404358:	4583      	cmp	fp, r0
  40435a:	da56      	bge.n	40440a <_realloc_r+0x26a>
  40435c:	f01e 0f01 	tst.w	lr, #1
  404360:	f47f af4b 	bne.w	4041fa <_realloc_r+0x5a>
  404364:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404368:	eba9 0a01 	sub.w	sl, r9, r1
  40436c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404370:	f021 0103 	bic.w	r1, r1, #3
  404374:	448b      	add	fp, r1
  404376:	4558      	cmp	r0, fp
  404378:	dce2      	bgt.n	404340 <_realloc_r+0x1a0>
  40437a:	4656      	mov	r6, sl
  40437c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404380:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404384:	1f22      	subs	r2, r4, #4
  404386:	2a24      	cmp	r2, #36	; 0x24
  404388:	60c1      	str	r1, [r0, #12]
  40438a:	6088      	str	r0, [r1, #8]
  40438c:	f200 808f 	bhi.w	4044ae <_realloc_r+0x30e>
  404390:	2a13      	cmp	r2, #19
  404392:	f240 808a 	bls.w	4044aa <_realloc_r+0x30a>
  404396:	6829      	ldr	r1, [r5, #0]
  404398:	f8ca 1008 	str.w	r1, [sl, #8]
  40439c:	6869      	ldr	r1, [r5, #4]
  40439e:	f8ca 100c 	str.w	r1, [sl, #12]
  4043a2:	2a1b      	cmp	r2, #27
  4043a4:	f200 808a 	bhi.w	4044bc <_realloc_r+0x31c>
  4043a8:	3508      	adds	r5, #8
  4043aa:	f10a 0210 	add.w	r2, sl, #16
  4043ae:	6829      	ldr	r1, [r5, #0]
  4043b0:	6011      	str	r1, [r2, #0]
  4043b2:	6869      	ldr	r1, [r5, #4]
  4043b4:	6051      	str	r1, [r2, #4]
  4043b6:	68a9      	ldr	r1, [r5, #8]
  4043b8:	6091      	str	r1, [r2, #8]
  4043ba:	eb0a 0107 	add.w	r1, sl, r7
  4043be:	ebab 0207 	sub.w	r2, fp, r7
  4043c2:	f042 0201 	orr.w	r2, r2, #1
  4043c6:	6099      	str	r1, [r3, #8]
  4043c8:	604a      	str	r2, [r1, #4]
  4043ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4043ce:	f003 0301 	and.w	r3, r3, #1
  4043d2:	431f      	orrs	r7, r3
  4043d4:	4640      	mov	r0, r8
  4043d6:	f8ca 7004 	str.w	r7, [sl, #4]
  4043da:	f7ff fedb 	bl	404194 <__malloc_unlock>
  4043de:	e751      	b.n	404284 <_realloc_r+0xe4>
  4043e0:	682b      	ldr	r3, [r5, #0]
  4043e2:	6003      	str	r3, [r0, #0]
  4043e4:	686b      	ldr	r3, [r5, #4]
  4043e6:	6043      	str	r3, [r0, #4]
  4043e8:	2a1b      	cmp	r2, #27
  4043ea:	d82d      	bhi.n	404448 <_realloc_r+0x2a8>
  4043ec:	f100 0308 	add.w	r3, r0, #8
  4043f0:	f105 0208 	add.w	r2, r5, #8
  4043f4:	e71b      	b.n	40422e <_realloc_r+0x8e>
  4043f6:	4632      	mov	r2, r6
  4043f8:	6829      	ldr	r1, [r5, #0]
  4043fa:	6011      	str	r1, [r2, #0]
  4043fc:	6869      	ldr	r1, [r5, #4]
  4043fe:	6051      	str	r1, [r2, #4]
  404400:	68a9      	ldr	r1, [r5, #8]
  404402:	6091      	str	r1, [r2, #8]
  404404:	461c      	mov	r4, r3
  404406:	46d1      	mov	r9, sl
  404408:	e72a      	b.n	404260 <_realloc_r+0xc0>
  40440a:	eb09 0107 	add.w	r1, r9, r7
  40440e:	ebab 0b07 	sub.w	fp, fp, r7
  404412:	f04b 0201 	orr.w	r2, fp, #1
  404416:	6099      	str	r1, [r3, #8]
  404418:	604a      	str	r2, [r1, #4]
  40441a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40441e:	f003 0301 	and.w	r3, r3, #1
  404422:	431f      	orrs	r7, r3
  404424:	4640      	mov	r0, r8
  404426:	f845 7c04 	str.w	r7, [r5, #-4]
  40442a:	f7ff feb3 	bl	404194 <__malloc_unlock>
  40442e:	462e      	mov	r6, r5
  404430:	e728      	b.n	404284 <_realloc_r+0xe4>
  404432:	4629      	mov	r1, r5
  404434:	f7ff fe44 	bl	4040c0 <memmove>
  404438:	e6ff      	b.n	40423a <_realloc_r+0x9a>
  40443a:	4629      	mov	r1, r5
  40443c:	4630      	mov	r0, r6
  40443e:	461c      	mov	r4, r3
  404440:	46d1      	mov	r9, sl
  404442:	f7ff fe3d 	bl	4040c0 <memmove>
  404446:	e70b      	b.n	404260 <_realloc_r+0xc0>
  404448:	68ab      	ldr	r3, [r5, #8]
  40444a:	6083      	str	r3, [r0, #8]
  40444c:	68eb      	ldr	r3, [r5, #12]
  40444e:	60c3      	str	r3, [r0, #12]
  404450:	2a24      	cmp	r2, #36	; 0x24
  404452:	d017      	beq.n	404484 <_realloc_r+0x2e4>
  404454:	f100 0310 	add.w	r3, r0, #16
  404458:	f105 0210 	add.w	r2, r5, #16
  40445c:	e6e7      	b.n	40422e <_realloc_r+0x8e>
  40445e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404462:	f023 0303 	bic.w	r3, r3, #3
  404466:	441c      	add	r4, r3
  404468:	462e      	mov	r6, r5
  40446a:	e6f9      	b.n	404260 <_realloc_r+0xc0>
  40446c:	68a9      	ldr	r1, [r5, #8]
  40446e:	f8ca 1010 	str.w	r1, [sl, #16]
  404472:	68e9      	ldr	r1, [r5, #12]
  404474:	f8ca 1014 	str.w	r1, [sl, #20]
  404478:	2a24      	cmp	r2, #36	; 0x24
  40447a:	d00c      	beq.n	404496 <_realloc_r+0x2f6>
  40447c:	3510      	adds	r5, #16
  40447e:	f10a 0218 	add.w	r2, sl, #24
  404482:	e7b9      	b.n	4043f8 <_realloc_r+0x258>
  404484:	692b      	ldr	r3, [r5, #16]
  404486:	6103      	str	r3, [r0, #16]
  404488:	696b      	ldr	r3, [r5, #20]
  40448a:	6143      	str	r3, [r0, #20]
  40448c:	f105 0218 	add.w	r2, r5, #24
  404490:	f100 0318 	add.w	r3, r0, #24
  404494:	e6cb      	b.n	40422e <_realloc_r+0x8e>
  404496:	692a      	ldr	r2, [r5, #16]
  404498:	f8ca 2018 	str.w	r2, [sl, #24]
  40449c:	696a      	ldr	r2, [r5, #20]
  40449e:	f8ca 201c 	str.w	r2, [sl, #28]
  4044a2:	3518      	adds	r5, #24
  4044a4:	f10a 0220 	add.w	r2, sl, #32
  4044a8:	e7a6      	b.n	4043f8 <_realloc_r+0x258>
  4044aa:	4632      	mov	r2, r6
  4044ac:	e77f      	b.n	4043ae <_realloc_r+0x20e>
  4044ae:	4629      	mov	r1, r5
  4044b0:	4630      	mov	r0, r6
  4044b2:	9301      	str	r3, [sp, #4]
  4044b4:	f7ff fe04 	bl	4040c0 <memmove>
  4044b8:	9b01      	ldr	r3, [sp, #4]
  4044ba:	e77e      	b.n	4043ba <_realloc_r+0x21a>
  4044bc:	68a9      	ldr	r1, [r5, #8]
  4044be:	f8ca 1010 	str.w	r1, [sl, #16]
  4044c2:	68e9      	ldr	r1, [r5, #12]
  4044c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4044c8:	2a24      	cmp	r2, #36	; 0x24
  4044ca:	d003      	beq.n	4044d4 <_realloc_r+0x334>
  4044cc:	3510      	adds	r5, #16
  4044ce:	f10a 0218 	add.w	r2, sl, #24
  4044d2:	e76c      	b.n	4043ae <_realloc_r+0x20e>
  4044d4:	692a      	ldr	r2, [r5, #16]
  4044d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4044da:	696a      	ldr	r2, [r5, #20]
  4044dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4044e0:	3518      	adds	r5, #24
  4044e2:	f10a 0220 	add.w	r2, sl, #32
  4044e6:	e762      	b.n	4043ae <_realloc_r+0x20e>
  4044e8:	204005b8 	.word	0x204005b8

004044ec <_sbrk_r>:
  4044ec:	b538      	push	{r3, r4, r5, lr}
  4044ee:	4c07      	ldr	r4, [pc, #28]	; (40450c <_sbrk_r+0x20>)
  4044f0:	2300      	movs	r3, #0
  4044f2:	4605      	mov	r5, r0
  4044f4:	4608      	mov	r0, r1
  4044f6:	6023      	str	r3, [r4, #0]
  4044f8:	f7fc fff8 	bl	4014ec <_sbrk>
  4044fc:	1c43      	adds	r3, r0, #1
  4044fe:	d000      	beq.n	404502 <_sbrk_r+0x16>
  404500:	bd38      	pop	{r3, r4, r5, pc}
  404502:	6823      	ldr	r3, [r4, #0]
  404504:	2b00      	cmp	r3, #0
  404506:	d0fb      	beq.n	404500 <_sbrk_r+0x14>
  404508:	602b      	str	r3, [r5, #0]
  40450a:	bd38      	pop	{r3, r4, r5, pc}
  40450c:	20400ae8 	.word	0x20400ae8

00404510 <__sread>:
  404510:	b510      	push	{r4, lr}
  404512:	460c      	mov	r4, r1
  404514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404518:	f000 f9f6 	bl	404908 <_read_r>
  40451c:	2800      	cmp	r0, #0
  40451e:	db03      	blt.n	404528 <__sread+0x18>
  404520:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404522:	4403      	add	r3, r0
  404524:	6523      	str	r3, [r4, #80]	; 0x50
  404526:	bd10      	pop	{r4, pc}
  404528:	89a3      	ldrh	r3, [r4, #12]
  40452a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40452e:	81a3      	strh	r3, [r4, #12]
  404530:	bd10      	pop	{r4, pc}
  404532:	bf00      	nop

00404534 <__swrite>:
  404534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404538:	4616      	mov	r6, r2
  40453a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40453e:	461f      	mov	r7, r3
  404540:	05d3      	lsls	r3, r2, #23
  404542:	460c      	mov	r4, r1
  404544:	4605      	mov	r5, r0
  404546:	d507      	bpl.n	404558 <__swrite+0x24>
  404548:	2200      	movs	r2, #0
  40454a:	2302      	movs	r3, #2
  40454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404550:	f000 f9c4 	bl	4048dc <_lseek_r>
  404554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40455c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404560:	81a2      	strh	r2, [r4, #12]
  404562:	463b      	mov	r3, r7
  404564:	4632      	mov	r2, r6
  404566:	4628      	mov	r0, r5
  404568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40456c:	f000 b8a4 	b.w	4046b8 <_write_r>

00404570 <__sseek>:
  404570:	b510      	push	{r4, lr}
  404572:	460c      	mov	r4, r1
  404574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404578:	f000 f9b0 	bl	4048dc <_lseek_r>
  40457c:	89a3      	ldrh	r3, [r4, #12]
  40457e:	1c42      	adds	r2, r0, #1
  404580:	bf0e      	itee	eq
  404582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40458a:	6520      	strne	r0, [r4, #80]	; 0x50
  40458c:	81a3      	strh	r3, [r4, #12]
  40458e:	bd10      	pop	{r4, pc}

00404590 <__sclose>:
  404590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404594:	f000 b908 	b.w	4047a8 <_close_r>

00404598 <__swbuf_r>:
  404598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40459a:	460d      	mov	r5, r1
  40459c:	4614      	mov	r4, r2
  40459e:	4606      	mov	r6, r0
  4045a0:	b110      	cbz	r0, 4045a8 <__swbuf_r+0x10>
  4045a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4045a4:	2b00      	cmp	r3, #0
  4045a6:	d04b      	beq.n	404640 <__swbuf_r+0xa8>
  4045a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4045ac:	69a3      	ldr	r3, [r4, #24]
  4045ae:	60a3      	str	r3, [r4, #8]
  4045b0:	b291      	uxth	r1, r2
  4045b2:	0708      	lsls	r0, r1, #28
  4045b4:	d539      	bpl.n	40462a <__swbuf_r+0x92>
  4045b6:	6923      	ldr	r3, [r4, #16]
  4045b8:	2b00      	cmp	r3, #0
  4045ba:	d036      	beq.n	40462a <__swbuf_r+0x92>
  4045bc:	b2ed      	uxtb	r5, r5
  4045be:	0489      	lsls	r1, r1, #18
  4045c0:	462f      	mov	r7, r5
  4045c2:	d515      	bpl.n	4045f0 <__swbuf_r+0x58>
  4045c4:	6822      	ldr	r2, [r4, #0]
  4045c6:	6961      	ldr	r1, [r4, #20]
  4045c8:	1ad3      	subs	r3, r2, r3
  4045ca:	428b      	cmp	r3, r1
  4045cc:	da1c      	bge.n	404608 <__swbuf_r+0x70>
  4045ce:	3301      	adds	r3, #1
  4045d0:	68a1      	ldr	r1, [r4, #8]
  4045d2:	1c50      	adds	r0, r2, #1
  4045d4:	3901      	subs	r1, #1
  4045d6:	60a1      	str	r1, [r4, #8]
  4045d8:	6020      	str	r0, [r4, #0]
  4045da:	7015      	strb	r5, [r2, #0]
  4045dc:	6962      	ldr	r2, [r4, #20]
  4045de:	429a      	cmp	r2, r3
  4045e0:	d01a      	beq.n	404618 <__swbuf_r+0x80>
  4045e2:	89a3      	ldrh	r3, [r4, #12]
  4045e4:	07db      	lsls	r3, r3, #31
  4045e6:	d501      	bpl.n	4045ec <__swbuf_r+0x54>
  4045e8:	2d0a      	cmp	r5, #10
  4045ea:	d015      	beq.n	404618 <__swbuf_r+0x80>
  4045ec:	4638      	mov	r0, r7
  4045ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4045f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4045f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4045f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4045fa:	81a2      	strh	r2, [r4, #12]
  4045fc:	6822      	ldr	r2, [r4, #0]
  4045fe:	6661      	str	r1, [r4, #100]	; 0x64
  404600:	6961      	ldr	r1, [r4, #20]
  404602:	1ad3      	subs	r3, r2, r3
  404604:	428b      	cmp	r3, r1
  404606:	dbe2      	blt.n	4045ce <__swbuf_r+0x36>
  404608:	4621      	mov	r1, r4
  40460a:	4630      	mov	r0, r6
  40460c:	f7fe fda4 	bl	403158 <_fflush_r>
  404610:	b940      	cbnz	r0, 404624 <__swbuf_r+0x8c>
  404612:	6822      	ldr	r2, [r4, #0]
  404614:	2301      	movs	r3, #1
  404616:	e7db      	b.n	4045d0 <__swbuf_r+0x38>
  404618:	4621      	mov	r1, r4
  40461a:	4630      	mov	r0, r6
  40461c:	f7fe fd9c 	bl	403158 <_fflush_r>
  404620:	2800      	cmp	r0, #0
  404622:	d0e3      	beq.n	4045ec <__swbuf_r+0x54>
  404624:	f04f 37ff 	mov.w	r7, #4294967295
  404628:	e7e0      	b.n	4045ec <__swbuf_r+0x54>
  40462a:	4621      	mov	r1, r4
  40462c:	4630      	mov	r0, r6
  40462e:	f7fe fc7f 	bl	402f30 <__swsetup_r>
  404632:	2800      	cmp	r0, #0
  404634:	d1f6      	bne.n	404624 <__swbuf_r+0x8c>
  404636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40463a:	6923      	ldr	r3, [r4, #16]
  40463c:	b291      	uxth	r1, r2
  40463e:	e7bd      	b.n	4045bc <__swbuf_r+0x24>
  404640:	f7fe fde2 	bl	403208 <__sinit>
  404644:	e7b0      	b.n	4045a8 <__swbuf_r+0x10>
  404646:	bf00      	nop

00404648 <_wcrtomb_r>:
  404648:	b5f0      	push	{r4, r5, r6, r7, lr}
  40464a:	4606      	mov	r6, r0
  40464c:	b085      	sub	sp, #20
  40464e:	461f      	mov	r7, r3
  404650:	b189      	cbz	r1, 404676 <_wcrtomb_r+0x2e>
  404652:	4c10      	ldr	r4, [pc, #64]	; (404694 <_wcrtomb_r+0x4c>)
  404654:	4d10      	ldr	r5, [pc, #64]	; (404698 <_wcrtomb_r+0x50>)
  404656:	6824      	ldr	r4, [r4, #0]
  404658:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40465a:	2c00      	cmp	r4, #0
  40465c:	bf08      	it	eq
  40465e:	462c      	moveq	r4, r5
  404660:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404664:	47a0      	blx	r4
  404666:	1c43      	adds	r3, r0, #1
  404668:	d103      	bne.n	404672 <_wcrtomb_r+0x2a>
  40466a:	2200      	movs	r2, #0
  40466c:	238a      	movs	r3, #138	; 0x8a
  40466e:	603a      	str	r2, [r7, #0]
  404670:	6033      	str	r3, [r6, #0]
  404672:	b005      	add	sp, #20
  404674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404676:	460c      	mov	r4, r1
  404678:	4906      	ldr	r1, [pc, #24]	; (404694 <_wcrtomb_r+0x4c>)
  40467a:	4a07      	ldr	r2, [pc, #28]	; (404698 <_wcrtomb_r+0x50>)
  40467c:	6809      	ldr	r1, [r1, #0]
  40467e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404680:	2900      	cmp	r1, #0
  404682:	bf08      	it	eq
  404684:	4611      	moveq	r1, r2
  404686:	4622      	mov	r2, r4
  404688:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40468c:	a901      	add	r1, sp, #4
  40468e:	47a0      	blx	r4
  404690:	e7e9      	b.n	404666 <_wcrtomb_r+0x1e>
  404692:	bf00      	nop
  404694:	20400018 	.word	0x20400018
  404698:	2040044c 	.word	0x2040044c

0040469c <__ascii_wctomb>:
  40469c:	b121      	cbz	r1, 4046a8 <__ascii_wctomb+0xc>
  40469e:	2aff      	cmp	r2, #255	; 0xff
  4046a0:	d804      	bhi.n	4046ac <__ascii_wctomb+0x10>
  4046a2:	700a      	strb	r2, [r1, #0]
  4046a4:	2001      	movs	r0, #1
  4046a6:	4770      	bx	lr
  4046a8:	4608      	mov	r0, r1
  4046aa:	4770      	bx	lr
  4046ac:	238a      	movs	r3, #138	; 0x8a
  4046ae:	6003      	str	r3, [r0, #0]
  4046b0:	f04f 30ff 	mov.w	r0, #4294967295
  4046b4:	4770      	bx	lr
  4046b6:	bf00      	nop

004046b8 <_write_r>:
  4046b8:	b570      	push	{r4, r5, r6, lr}
  4046ba:	460d      	mov	r5, r1
  4046bc:	4c08      	ldr	r4, [pc, #32]	; (4046e0 <_write_r+0x28>)
  4046be:	4611      	mov	r1, r2
  4046c0:	4606      	mov	r6, r0
  4046c2:	461a      	mov	r2, r3
  4046c4:	4628      	mov	r0, r5
  4046c6:	2300      	movs	r3, #0
  4046c8:	6023      	str	r3, [r4, #0]
  4046ca:	f7fc fabf 	bl	400c4c <_write>
  4046ce:	1c43      	adds	r3, r0, #1
  4046d0:	d000      	beq.n	4046d4 <_write_r+0x1c>
  4046d2:	bd70      	pop	{r4, r5, r6, pc}
  4046d4:	6823      	ldr	r3, [r4, #0]
  4046d6:	2b00      	cmp	r3, #0
  4046d8:	d0fb      	beq.n	4046d2 <_write_r+0x1a>
  4046da:	6033      	str	r3, [r6, #0]
  4046dc:	bd70      	pop	{r4, r5, r6, pc}
  4046de:	bf00      	nop
  4046e0:	20400ae8 	.word	0x20400ae8

004046e4 <__register_exitproc>:
  4046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046e8:	4d2c      	ldr	r5, [pc, #176]	; (40479c <__register_exitproc+0xb8>)
  4046ea:	4606      	mov	r6, r0
  4046ec:	6828      	ldr	r0, [r5, #0]
  4046ee:	4698      	mov	r8, r3
  4046f0:	460f      	mov	r7, r1
  4046f2:	4691      	mov	r9, r2
  4046f4:	f7ff f948 	bl	403988 <__retarget_lock_acquire_recursive>
  4046f8:	4b29      	ldr	r3, [pc, #164]	; (4047a0 <__register_exitproc+0xbc>)
  4046fa:	681c      	ldr	r4, [r3, #0]
  4046fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404700:	2b00      	cmp	r3, #0
  404702:	d03e      	beq.n	404782 <__register_exitproc+0x9e>
  404704:	685a      	ldr	r2, [r3, #4]
  404706:	2a1f      	cmp	r2, #31
  404708:	dc1c      	bgt.n	404744 <__register_exitproc+0x60>
  40470a:	f102 0e01 	add.w	lr, r2, #1
  40470e:	b176      	cbz	r6, 40472e <__register_exitproc+0x4a>
  404710:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404714:	2401      	movs	r4, #1
  404716:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40471a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40471e:	4094      	lsls	r4, r2
  404720:	4320      	orrs	r0, r4
  404722:	2e02      	cmp	r6, #2
  404724:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404728:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40472c:	d023      	beq.n	404776 <__register_exitproc+0x92>
  40472e:	3202      	adds	r2, #2
  404730:	f8c3 e004 	str.w	lr, [r3, #4]
  404734:	6828      	ldr	r0, [r5, #0]
  404736:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40473a:	f7ff f927 	bl	40398c <__retarget_lock_release_recursive>
  40473e:	2000      	movs	r0, #0
  404740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404744:	4b17      	ldr	r3, [pc, #92]	; (4047a4 <__register_exitproc+0xc0>)
  404746:	b30b      	cbz	r3, 40478c <__register_exitproc+0xa8>
  404748:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40474c:	f7ff f998 	bl	403a80 <malloc>
  404750:	4603      	mov	r3, r0
  404752:	b1d8      	cbz	r0, 40478c <__register_exitproc+0xa8>
  404754:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404758:	6002      	str	r2, [r0, #0]
  40475a:	2100      	movs	r1, #0
  40475c:	6041      	str	r1, [r0, #4]
  40475e:	460a      	mov	r2, r1
  404760:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404764:	f04f 0e01 	mov.w	lr, #1
  404768:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40476c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404770:	2e00      	cmp	r6, #0
  404772:	d0dc      	beq.n	40472e <__register_exitproc+0x4a>
  404774:	e7cc      	b.n	404710 <__register_exitproc+0x2c>
  404776:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40477a:	430c      	orrs	r4, r1
  40477c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404780:	e7d5      	b.n	40472e <__register_exitproc+0x4a>
  404782:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404786:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40478a:	e7bb      	b.n	404704 <__register_exitproc+0x20>
  40478c:	6828      	ldr	r0, [r5, #0]
  40478e:	f7ff f8fd 	bl	40398c <__retarget_lock_release_recursive>
  404792:	f04f 30ff 	mov.w	r0, #4294967295
  404796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40479a:	bf00      	nop
  40479c:	20400448 	.word	0x20400448
  4047a0:	00404bf8 	.word	0x00404bf8
  4047a4:	00403a81 	.word	0x00403a81

004047a8 <_close_r>:
  4047a8:	b538      	push	{r3, r4, r5, lr}
  4047aa:	4c07      	ldr	r4, [pc, #28]	; (4047c8 <_close_r+0x20>)
  4047ac:	2300      	movs	r3, #0
  4047ae:	4605      	mov	r5, r0
  4047b0:	4608      	mov	r0, r1
  4047b2:	6023      	str	r3, [r4, #0]
  4047b4:	f7fc feb6 	bl	401524 <_close>
  4047b8:	1c43      	adds	r3, r0, #1
  4047ba:	d000      	beq.n	4047be <_close_r+0x16>
  4047bc:	bd38      	pop	{r3, r4, r5, pc}
  4047be:	6823      	ldr	r3, [r4, #0]
  4047c0:	2b00      	cmp	r3, #0
  4047c2:	d0fb      	beq.n	4047bc <_close_r+0x14>
  4047c4:	602b      	str	r3, [r5, #0]
  4047c6:	bd38      	pop	{r3, r4, r5, pc}
  4047c8:	20400ae8 	.word	0x20400ae8

004047cc <_fclose_r>:
  4047cc:	b570      	push	{r4, r5, r6, lr}
  4047ce:	b159      	cbz	r1, 4047e8 <_fclose_r+0x1c>
  4047d0:	4605      	mov	r5, r0
  4047d2:	460c      	mov	r4, r1
  4047d4:	b110      	cbz	r0, 4047dc <_fclose_r+0x10>
  4047d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047d8:	2b00      	cmp	r3, #0
  4047da:	d03c      	beq.n	404856 <_fclose_r+0x8a>
  4047dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4047de:	07d8      	lsls	r0, r3, #31
  4047e0:	d505      	bpl.n	4047ee <_fclose_r+0x22>
  4047e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047e6:	b92b      	cbnz	r3, 4047f4 <_fclose_r+0x28>
  4047e8:	2600      	movs	r6, #0
  4047ea:	4630      	mov	r0, r6
  4047ec:	bd70      	pop	{r4, r5, r6, pc}
  4047ee:	89a3      	ldrh	r3, [r4, #12]
  4047f0:	0599      	lsls	r1, r3, #22
  4047f2:	d53c      	bpl.n	40486e <_fclose_r+0xa2>
  4047f4:	4621      	mov	r1, r4
  4047f6:	4628      	mov	r0, r5
  4047f8:	f7fe fc0e 	bl	403018 <__sflush_r>
  4047fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4047fe:	4606      	mov	r6, r0
  404800:	b133      	cbz	r3, 404810 <_fclose_r+0x44>
  404802:	69e1      	ldr	r1, [r4, #28]
  404804:	4628      	mov	r0, r5
  404806:	4798      	blx	r3
  404808:	2800      	cmp	r0, #0
  40480a:	bfb8      	it	lt
  40480c:	f04f 36ff 	movlt.w	r6, #4294967295
  404810:	89a3      	ldrh	r3, [r4, #12]
  404812:	061a      	lsls	r2, r3, #24
  404814:	d422      	bmi.n	40485c <_fclose_r+0x90>
  404816:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404818:	b141      	cbz	r1, 40482c <_fclose_r+0x60>
  40481a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40481e:	4299      	cmp	r1, r3
  404820:	d002      	beq.n	404828 <_fclose_r+0x5c>
  404822:	4628      	mov	r0, r5
  404824:	f7fe fe16 	bl	403454 <_free_r>
  404828:	2300      	movs	r3, #0
  40482a:	6323      	str	r3, [r4, #48]	; 0x30
  40482c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40482e:	b121      	cbz	r1, 40483a <_fclose_r+0x6e>
  404830:	4628      	mov	r0, r5
  404832:	f7fe fe0f 	bl	403454 <_free_r>
  404836:	2300      	movs	r3, #0
  404838:	6463      	str	r3, [r4, #68]	; 0x44
  40483a:	f7fe fd11 	bl	403260 <__sfp_lock_acquire>
  40483e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404840:	2200      	movs	r2, #0
  404842:	07db      	lsls	r3, r3, #31
  404844:	81a2      	strh	r2, [r4, #12]
  404846:	d50e      	bpl.n	404866 <_fclose_r+0x9a>
  404848:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40484a:	f7ff f89b 	bl	403984 <__retarget_lock_close_recursive>
  40484e:	f7fe fd0d 	bl	40326c <__sfp_lock_release>
  404852:	4630      	mov	r0, r6
  404854:	bd70      	pop	{r4, r5, r6, pc}
  404856:	f7fe fcd7 	bl	403208 <__sinit>
  40485a:	e7bf      	b.n	4047dc <_fclose_r+0x10>
  40485c:	6921      	ldr	r1, [r4, #16]
  40485e:	4628      	mov	r0, r5
  404860:	f7fe fdf8 	bl	403454 <_free_r>
  404864:	e7d7      	b.n	404816 <_fclose_r+0x4a>
  404866:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404868:	f7ff f890 	bl	40398c <__retarget_lock_release_recursive>
  40486c:	e7ec      	b.n	404848 <_fclose_r+0x7c>
  40486e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404870:	f7ff f88a 	bl	403988 <__retarget_lock_acquire_recursive>
  404874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404878:	2b00      	cmp	r3, #0
  40487a:	d1bb      	bne.n	4047f4 <_fclose_r+0x28>
  40487c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40487e:	f016 0601 	ands.w	r6, r6, #1
  404882:	d1b1      	bne.n	4047e8 <_fclose_r+0x1c>
  404884:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404886:	f7ff f881 	bl	40398c <__retarget_lock_release_recursive>
  40488a:	4630      	mov	r0, r6
  40488c:	bd70      	pop	{r4, r5, r6, pc}
  40488e:	bf00      	nop

00404890 <_fstat_r>:
  404890:	b538      	push	{r3, r4, r5, lr}
  404892:	460b      	mov	r3, r1
  404894:	4c07      	ldr	r4, [pc, #28]	; (4048b4 <_fstat_r+0x24>)
  404896:	4605      	mov	r5, r0
  404898:	4611      	mov	r1, r2
  40489a:	4618      	mov	r0, r3
  40489c:	2300      	movs	r3, #0
  40489e:	6023      	str	r3, [r4, #0]
  4048a0:	f7fc fe43 	bl	40152a <_fstat>
  4048a4:	1c43      	adds	r3, r0, #1
  4048a6:	d000      	beq.n	4048aa <_fstat_r+0x1a>
  4048a8:	bd38      	pop	{r3, r4, r5, pc}
  4048aa:	6823      	ldr	r3, [r4, #0]
  4048ac:	2b00      	cmp	r3, #0
  4048ae:	d0fb      	beq.n	4048a8 <_fstat_r+0x18>
  4048b0:	602b      	str	r3, [r5, #0]
  4048b2:	bd38      	pop	{r3, r4, r5, pc}
  4048b4:	20400ae8 	.word	0x20400ae8

004048b8 <_isatty_r>:
  4048b8:	b538      	push	{r3, r4, r5, lr}
  4048ba:	4c07      	ldr	r4, [pc, #28]	; (4048d8 <_isatty_r+0x20>)
  4048bc:	2300      	movs	r3, #0
  4048be:	4605      	mov	r5, r0
  4048c0:	4608      	mov	r0, r1
  4048c2:	6023      	str	r3, [r4, #0]
  4048c4:	f7fc fe36 	bl	401534 <_isatty>
  4048c8:	1c43      	adds	r3, r0, #1
  4048ca:	d000      	beq.n	4048ce <_isatty_r+0x16>
  4048cc:	bd38      	pop	{r3, r4, r5, pc}
  4048ce:	6823      	ldr	r3, [r4, #0]
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	d0fb      	beq.n	4048cc <_isatty_r+0x14>
  4048d4:	602b      	str	r3, [r5, #0]
  4048d6:	bd38      	pop	{r3, r4, r5, pc}
  4048d8:	20400ae8 	.word	0x20400ae8

004048dc <_lseek_r>:
  4048dc:	b570      	push	{r4, r5, r6, lr}
  4048de:	460d      	mov	r5, r1
  4048e0:	4c08      	ldr	r4, [pc, #32]	; (404904 <_lseek_r+0x28>)
  4048e2:	4611      	mov	r1, r2
  4048e4:	4606      	mov	r6, r0
  4048e6:	461a      	mov	r2, r3
  4048e8:	4628      	mov	r0, r5
  4048ea:	2300      	movs	r3, #0
  4048ec:	6023      	str	r3, [r4, #0]
  4048ee:	f7fc fe23 	bl	401538 <_lseek>
  4048f2:	1c43      	adds	r3, r0, #1
  4048f4:	d000      	beq.n	4048f8 <_lseek_r+0x1c>
  4048f6:	bd70      	pop	{r4, r5, r6, pc}
  4048f8:	6823      	ldr	r3, [r4, #0]
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d0fb      	beq.n	4048f6 <_lseek_r+0x1a>
  4048fe:	6033      	str	r3, [r6, #0]
  404900:	bd70      	pop	{r4, r5, r6, pc}
  404902:	bf00      	nop
  404904:	20400ae8 	.word	0x20400ae8

00404908 <_read_r>:
  404908:	b570      	push	{r4, r5, r6, lr}
  40490a:	460d      	mov	r5, r1
  40490c:	4c08      	ldr	r4, [pc, #32]	; (404930 <_read_r+0x28>)
  40490e:	4611      	mov	r1, r2
  404910:	4606      	mov	r6, r0
  404912:	461a      	mov	r2, r3
  404914:	4628      	mov	r0, r5
  404916:	2300      	movs	r3, #0
  404918:	6023      	str	r3, [r4, #0]
  40491a:	f7fb fd03 	bl	400324 <_read>
  40491e:	1c43      	adds	r3, r0, #1
  404920:	d000      	beq.n	404924 <_read_r+0x1c>
  404922:	bd70      	pop	{r4, r5, r6, pc}
  404924:	6823      	ldr	r3, [r4, #0]
  404926:	2b00      	cmp	r3, #0
  404928:	d0fb      	beq.n	404922 <_read_r+0x1a>
  40492a:	6033      	str	r3, [r6, #0]
  40492c:	bd70      	pop	{r4, r5, r6, pc}
  40492e:	bf00      	nop
  404930:	20400ae8 	.word	0x20400ae8
  404934:	202d492d 	.word	0x202d492d
  404938:	74696e49 	.word	0x74696e49
  40493c:	696c6169 	.word	0x696c6169
  404940:	5320657a 	.word	0x5320657a
  404944:	61204950 	.word	0x61204950
  404948:	616d2073 	.word	0x616d2073
  40494c:	72657473 	.word	0x72657473
  404950:	0000000d 	.word	0x0000000d
  404954:	74746553 	.word	0x74746553
  404958:	20676e69 	.word	0x20676e69
  40495c:	20495053 	.word	0x20495053
  404960:	636f6c63 	.word	0x636f6c63
  404964:	2523206b 	.word	0x2523206b
  404968:	2e20756c 	.word	0x2e20756c
  40496c:	0a202e2e 	.word	0x0a202e2e
  404970:	0000000d 	.word	0x0000000d
  404974:	00007350 	.word	0x00007350

00404978 <pipe_enable_s>:
  404978:	03020100 00000504                       ........

00404980 <pipe_s>:
  404980:	0d0c0b0a 00000f0e                       ........

00404988 <pipe_size_s>:
  404988:	14131211 00001615 20495053 65657053     ........SPI Spee
  404998:	3d200964 646c2520 7a484d20 00000a0d     d. = %ld MHz....
  4049a8:	54415453 09095355 30203d20 32302578     STATUS.. = 0x%02
  4049b8:	58522078 3d52445f 54207825 53445f58     x RX_DR=%x TX_DS
  4049c8:	2078253d 5f58414d 253d5452 58522078     =%x MAX_RT=%x RX
  4049d8:	4e5f505f 78253d4f 5f585420 4c4c5546     _P_NO=%x TX_FULL
  4049e8:	0d78253d 0000000a 415f5852 5f524444     =%x.....RX_ADDR_
  4049f8:	312d3050 00000000 415f5852 5f524444     P0-1....RX_ADDR_
  404a08:	352d3250 00000000 415f5854 09524444     P2-5....TX_ADDR.
  404a18:	00000000 505f5852 30505f57 0000352d     ....RX_PW_P0-5..
  404a28:	55544553 57415f50 00000000 415f4e45     SETUP_AW....EN_A
  404a38:	00000941 525f4e45 44444158 00000052     A...EN_RXADDR...
  404a48:	435f4652 00000948 535f4652 50555445     RF_CH...RF_SETUP
  404a58:	00000000 464e4f43 00094749 504e5944     ....CONFIG..DYNP
  404a68:	45462f44 52555441 00000045 61746144     D/FEATURE...Data
  404a78:	74615220 3d200965 0d732520 0000000a      Rate. = %s.....
  404a88:	65646f4d 2009096c 7325203d 00000a0d     Model.. = %s....
  404a98:	20435243 676e654c 20096874 7325203d     CRC Length. = %s
  404aa8:	00000a0d 50204150 7265776f 203d2009     ....PA Power. = 
  404ab8:	0a0d7325 00000000 00097325 00783020     %s......%s.. 0x.
  404ac8:	78323025 00000000 25783020 00783230     %02x.... 0x%02x.

00404ad8 <rf24_crclength_e_str_0>:
  404ad8:	61736944 64656c62 00000000              Disabled....

00404ae4 <rf24_crclength_e_str_1>:
  404ae4:	69622038 00007374                       8 bits..

00404aec <rf24_crclength_e_str_2>:
  404aec:	62203631 00737469                       16 bits.

00404af4 <rf24_crclength_e_str_P>:
  404af4:	00404ad8 00404ae4 00404aec              .J@..J@..J@.

00404b00 <rf24_datarate_e_str_0>:
  404b00:	50424d31 00000053                       1MBPS...

00404b08 <rf24_datarate_e_str_1>:
  404b08:	50424d32 00000053                       2MBPS...

00404b10 <rf24_datarate_e_str_2>:
  404b10:	4b303532 00535042                       250KBPS.

00404b18 <rf24_datarate_e_str_P>:
  404b18:	00404b00 00404b08 00404b10              .K@..K@..K@.

00404b24 <rf24_model_e_str_1>:
  404b24:	3246526e 31304c34 0000002b              nRF24L01+...

00404b30 <rf24_pa_dbm_e_str_0>:
  404b30:	4d5f4150 00004e49                       PA_MIN..

00404b38 <rf24_pa_dbm_e_str_1>:
  404b38:	4c5f4150 0000574f                       PA_LOW..

00404b40 <rf24_pa_dbm_e_str_2>:
  404b40:	485f4150 00484749                       PA_HIGH.

00404b48 <rf24_pa_dbm_e_str_3>:
  404b48:	4d5f4150 00005841                       PA_MAX..

00404b50 <rf24_pa_dbm_e_str_P>:
  404b50:	00404b30 00404b38 00404b40 00404b48     0K@.8K@.@K@.HK@.
  404b60:	70532d2d 526e2069 4c343246 54203130     --Spi nRF24L01 T
  404b70:	20747365 0a0d2d2d 53202d2d 37454d41     est --..-- SAME7
  404b80:	50582d30 2d20444c 2d0a0d2d 6f43202d     0-XPLD --..-- Co
  404b90:	6c69706d 203a6465 20706553 32203131     mpiled: Sep 11 2
  404ba0:	20303230 303a3332 39313a34 0d2d2d20     020 23:04:19 --.
  404bb0:	00000000 6d6d6f63 6f646e61 20642520     ....commando %d 
  404bc0:	646e6573 206f7420 0d646c25 0000000a     send to %ld.....
  404bd0:	6e617274 73696d73 6e6f6973 69616620     transmission fai
  404be0:	2064656c 00000d0a 6d6d6f63 6f646e61     led ....commando
  404bf0:	0d642520 0000000a                        %d.....

00404bf8 <_global_impure_ptr>:
  404bf8:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  404c08:	46454443 00000000 33323130 37363534     CDEF....01234567
  404c18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404c28:	0000296c                                l)..

00404c2c <blanks.7217>:
  404c2c:	20202020 20202020 20202020 20202020                     

00404c3c <zeroes.7218>:
  404c3c:	30303030 30303030 30303030 30303030     0000000000000000
  404c4c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404c5c <_ctype_>:
  404c5c:	20202000 20202020 28282020 20282828     .         ((((( 
  404c6c:	20202020 20202020 20202020 20202020                     
  404c7c:	10108820 10101010 10101010 10101010      ...............
  404c8c:	04040410 04040404 10040404 10101010     ................
  404c9c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404cac:	01010101 01010101 01010101 10101010     ................
  404cbc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404ccc:	02020202 02020202 02020202 10101010     ................
  404cdc:	00000020 00000000 00000000 00000000      ...............
	...

00404d60 <_init>:
  404d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d62:	bf00      	nop
  404d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d66:	bc08      	pop	{r3}
  404d68:	469e      	mov	lr, r3
  404d6a:	4770      	bx	lr

00404d6c <__init_array_start>:
  404d6c:	00402ff9 	.word	0x00402ff9

00404d70 <__frame_dummy_init_array_entry>:
  404d70:	0040018d                                ..@.

00404d74 <_fini>:
  404d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d76:	bf00      	nop
  404d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d7a:	bc08      	pop	{r3}
  404d7c:	469e      	mov	lr, r3
  404d7e:	4770      	bx	lr

00404d80 <__fini_array_start>:
  404d80:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <gs_ul_spi_clock>:
2040000c:	4b40 004c                                   @KL.

20400010 <payload_size>:
20400010:	0120                                              

20400011 <g_interrupt_enabled>:
20400011:	0001 0000                                        ...

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	0ac4 2040                                   ..@ 

2040044c <__global_locale>:
2040044c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	469d 0040 3ff1 0040 0000 0000 4c5c 0040     .F@..?@.....\L@.
2040053c:	4c58 0040 4a18 0040 4a18 0040 4a18 0040     XL@..J@..J@..J@.
2040054c:	4a18 0040 4a18 0040 4a18 0040 4a18 0040     .J@..J@..J@..J@.
2040055c:	4a18 0040 4a18 0040 ffff ffff ffff ffff     .J@..J@.........
2040056c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400594:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b8 <__malloc_av_>:
	...
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 

204009c0 <__malloc_sbrk_base>:
204009c0:	ffff ffff                                   ....

204009c4 <__malloc_trim_threshold>:
204009c4:	0000 0002                                   ....
